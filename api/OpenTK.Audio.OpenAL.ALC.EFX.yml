### YamlMime:ManagedReference
items:
- uid: OpenTK.Audio.OpenAL.ALC.EFX
  commentId: T:OpenTK.Audio.OpenAL.ALC.EFX
  id: ALC.EFX
  parent: OpenTK.Audio.OpenAL
  children:
  - OpenTK.Audio.OpenAL.ALC.EFX.AuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotFloat,System.Single)
  - OpenTK.Audio.OpenAL.ALC.EFX.AuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotInteger,System.Int32)
  - OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlot(System.Int32)
  - OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32*)
  - OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32@)
  - OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32[])
  - OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32[])
  - OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffect(System.Int32)
  - OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32,System.Int32*)
  - OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32,System.Int32@)
  - OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32,System.Int32[])
  - OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32[])
  - OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilter(System.Int32)
  - OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32,System.Int32*)
  - OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32,System.Int32@)
  - OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32,System.Int32[])
  - OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32[])
  - OpenTK.Audio.OpenAL.ALC.EFX.Effect(System.Int32,OpenTK.Audio.OpenAL.EffectFloat,System.Single)
  - OpenTK.Audio.OpenAL.ALC.EFX.Effect(System.Int32,OpenTK.Audio.OpenAL.EffectInteger,System.Int32)
  - OpenTK.Audio.OpenAL.ALC.EFX.Effect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3,OpenTK.Mathematics.Vector3@)
  - OpenTK.Audio.OpenAL.ALC.EFX.Effect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3,System.Single*)
  - OpenTK.Audio.OpenAL.ALC.EFX.Effect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3,System.Single@)
  - OpenTK.Audio.OpenAL.ALC.EFX.Effect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3,System.Single[])
  - OpenTK.Audio.OpenAL.ALC.EFX.ExtensionName
  - OpenTK.Audio.OpenAL.ALC.EFX.Filter(System.Int32,OpenTK.Audio.OpenAL.FilterFloat,System.Single)
  - OpenTK.Audio.OpenAL.ALC.EFX.Filter(System.Int32,OpenTK.Audio.OpenAL.FilterInteger,System.Int32)
  - OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlot
  - OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlot(System.Int32@)
  - OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32)
  - OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32*)
  - OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32@)
  - OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32[])
  - OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32[])
  - OpenTK.Audio.OpenAL.ALC.EFX.GenEffect
  - OpenTK.Audio.OpenAL.ALC.EFX.GenEffect(System.Int32@)
  - OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32)
  - OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32,System.Int32*)
  - OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32,System.Int32@)
  - OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32,System.Int32[])
  - OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32[])
  - OpenTK.Audio.OpenAL.ALC.EFX.GenFilter
  - OpenTK.Audio.OpenAL.ALC.EFX.GenFilter(System.Int32@)
  - OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32)
  - OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32,System.Int32*)
  - OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32,System.Int32@)
  - OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32,System.Int32[])
  - OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32[])
  - OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotFloat)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotFloat,System.Single*)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotFloat,System.Single@)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotInteger)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotInteger,System.Int32*)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotInteger,System.Int32@)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetEFXMajorVersion(OpenTK.Audio.OpenAL.ALDevice)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetEFXMinorVersion(OpenTK.Audio.OpenAL.ALDevice)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetEFXVersion(OpenTK.Audio.OpenAL.ALDevice)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectFloat)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectFloat,System.Single*)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectFloat,System.Single@)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectInteger)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectInteger,System.Int32*)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectInteger,System.Int32@)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3,OpenTK.Mathematics.Vector3@)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3,System.Single*)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3,System.Single@)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetFilter(System.Int32,OpenTK.Audio.OpenAL.FilterFloat)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetFilter(System.Int32,OpenTK.Audio.OpenAL.FilterFloat,System.Single*)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetFilter(System.Int32,OpenTK.Audio.OpenAL.FilterFloat,System.Single@)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetFilter(System.Int32,OpenTK.Audio.OpenAL.FilterInteger)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetFilter(System.Int32,OpenTK.Audio.OpenAL.FilterInteger,System.Int32*)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetFilter(System.Int32,OpenTK.Audio.OpenAL.FilterInteger,System.Int32@)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.EFXContextInteger,System.Int32,System.Int32*)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.EFXContextInteger,System.Int32,System.Int32@)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.EFXContextInteger,System.Int32,System.Int32[])
  - OpenTK.Audio.OpenAL.ALC.EFX.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.EFXContextInteger,System.Int32[])
  - OpenTK.Audio.OpenAL.ALC.EFX.GetListener(System.Int32,OpenTK.Audio.OpenAL.EFXListenerFloat)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetListener(System.Int32,OpenTK.Audio.OpenAL.EFXListenerFloat,System.Single*)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetListener(System.Int32,OpenTK.Audio.OpenAL.EFXListenerFloat,System.Single@)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceBoolean)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceBoolean,System.Boolean*)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceBoolean,System.Boolean@)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceFloat)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceFloat,System.Single*)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceFloat,System.Single@)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger,System.Int32*)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger,System.Int32@)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32*)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32*,System.Int32*,System.Int32*)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32@)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32@,System.Int32@,System.Int32@)
  - OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32[])
  - OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(System.Int32)
  - OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(System.Int32)
  - OpenTK.Audio.OpenAL.ALC.EFX.IsExtensionPresent(OpenTK.Audio.OpenAL.ALDevice)
  - OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(System.Int32)
  - OpenTK.Audio.OpenAL.ALC.EFX.Listener(System.Int32,OpenTK.Audio.OpenAL.EFXListenerFloat,System.Single)
  - OpenTK.Audio.OpenAL.ALC.EFX.Source(System.Int32,OpenTK.Audio.OpenAL.EFXSourceBoolean,System.Boolean)
  - OpenTK.Audio.OpenAL.ALC.EFX.Source(System.Int32,OpenTK.Audio.OpenAL.EFXSourceFloat,System.Single)
  - OpenTK.Audio.OpenAL.ALC.EFX.Source(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger,System.Int32)
  - OpenTK.Audio.OpenAL.ALC.EFX.Source(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32*)
  - OpenTK.Audio.OpenAL.ALC.EFX.Source(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32,System.Int32,System.Int32)
  - OpenTK.Audio.OpenAL.ALC.EFX.Source(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32@)
  - OpenTK.Audio.OpenAL.ALC.EFX.Source(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32[])
  langs:
  - csharp
  - vb
  name: ALC.EFX
  nameWithType: ALC.EFX
  fullName: OpenTK.Audio.OpenAL.ALC.EFX
  type: Class
  source:
    id: EFX
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 20
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Exposes the functions of the Effects Extension.
  example: []
  syntax:
    content: 'public class ALC.EFX : ALBase'
    content.vb: Public Class ALC.EFX Inherits ALBase
  inheritance:
  - System.Object
  - OpenTK.Audio.OpenAL.ALBase
  inheritedMembers:
  - OpenTK.Audio.OpenAL.ALBase.RegisterOpenALResolver
  - OpenTK.Audio.OpenAL.ALBase.LoadDelegate``1(System.String)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: OpenTK.Audio.OpenAL.ALC.EFX.ExtensionName
  commentId: F:OpenTK.Audio.OpenAL.ALC.EFX.ExtensionName
  id: ExtensionName
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: ExtensionName
  nameWithType: ALC.EFX.ExtensionName
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.ExtensionName
  type: Field
  source:
    id: ExtensionName
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 28
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: The EFX extension name.
  example: []
  syntax:
    content: public const string ExtensionName = "ALC_EXT_EFX"
    return:
      type: System.String
    content.vb: Public Const ExtensionName As String = "ALC_EXT_EFX"
- uid: OpenTK.Audio.OpenAL.ALC.EFX.IsExtensionPresent(OpenTK.Audio.OpenAL.ALDevice)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsExtensionPresent(OpenTK.Audio.OpenAL.ALDevice)
  id: IsExtensionPresent(OpenTK.Audio.OpenAL.ALDevice)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: IsExtensionPresent(ALDevice)
  nameWithType: ALC.EFX.IsExtensionPresent(ALDevice)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.IsExtensionPresent(OpenTK.Audio.OpenAL.ALDevice)
  type: Method
  source:
    id: IsExtensionPresent
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 45
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Checks if this extension is present.
  example: []
  syntax:
    content: public static bool IsExtensionPresent(ALDevice device)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: The device to query.
    return:
      type: System.Boolean
      description: Whether the extension was present or not.
    content.vb: Public Shared Function IsExtensionPresent(device As ALDevice) As Boolean
  overload: OpenTK.Audio.OpenAL.ALC.EFX.IsExtensionPresent*
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.EFXContextInteger,System.Int32,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.EFXContextInteger,System.Int32,System.Int32*)
  id: GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.EFXContextInteger,System.Int32,System.Int32*)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetInteger(ALDevice, EFXContextInteger, int, int*)
  nameWithType: ALC.EFX.GetInteger(ALDevice, EFXContextInteger, int, int*)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetInteger(OpenTK.Audio.OpenAL.ALDevice, OpenTK.Audio.OpenAL.EFXContextInteger, int, int*)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets a vector of integer properties from the context.
  example: []
  syntax:
    content: public static extern void GetInteger(ALDevice device, EFXContextInteger param, int size, int* data)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: The audio device.
    - id: param
      type: OpenTK.Audio.OpenAL.EFXContextInteger
      description: The named property.
    - id: size
      type: System.Int32
      description: The size of the provided buffer.
    - id: data
      type: System.Int32*
      description: A pointer to the first element of a provided data buffer.
    content.vb: Public Shared Sub GetInteger(device As ALDevice, param As EFXContextInteger, size As Integer, data As Integer*)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetInteger*
  nameWithType.vb: ALC.EFX.GetInteger(ALDevice, EFXContextInteger, Integer, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetInteger(OpenTK.Audio.OpenAL.ALDevice, OpenTK.Audio.OpenAL.EFXContextInteger, Integer, Integer*)
  name.vb: GetInteger(ALDevice, EFXContextInteger, Integer, Integer*)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.EFXContextInteger,System.Int32,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.EFXContextInteger,System.Int32,System.Int32@)
  id: GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.EFXContextInteger,System.Int32,System.Int32@)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetInteger(ALDevice, EFXContextInteger, int, ref int)
  nameWithType: ALC.EFX.GetInteger(ALDevice, EFXContextInteger, int, ref int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetInteger(OpenTK.Audio.OpenAL.ALDevice, OpenTK.Audio.OpenAL.EFXContextInteger, int, ref int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets a vector of integer properties from the context.
  example: []
  syntax:
    content: public static extern void GetInteger(ALDevice device, EFXContextInteger param, int size, ref int data)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: The audio device.
    - id: param
      type: OpenTK.Audio.OpenAL.EFXContextInteger
      description: The named property.
    - id: size
      type: System.Int32
      description: The size of the provided buffer.
    - id: data
      type: System.Int32
      description: A pointer to the first element of a provided data buffer.
    content.vb: Public Shared Sub GetInteger(device As ALDevice, param As EFXContextInteger, size As Integer, data As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetInteger*
  nameWithType.vb: ALC.EFX.GetInteger(ALDevice, EFXContextInteger, Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetInteger(OpenTK.Audio.OpenAL.ALDevice, OpenTK.Audio.OpenAL.EFXContextInteger, Integer, Integer)
  name.vb: GetInteger(ALDevice, EFXContextInteger, Integer, Integer)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.EFXContextInteger,System.Int32,System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.EFXContextInteger,System.Int32,System.Int32[])
  id: GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.EFXContextInteger,System.Int32,System.Int32[])
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetInteger(ALDevice, EFXContextInteger, int, int[])
  nameWithType: ALC.EFX.GetInteger(ALDevice, EFXContextInteger, int, int[])
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetInteger(OpenTK.Audio.OpenAL.ALDevice, OpenTK.Audio.OpenAL.EFXContextInteger, int, int[])
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets a vector of integer properties from the context.
  example: []
  syntax:
    content: public static extern void GetInteger(ALDevice device, EFXContextInteger param, int size, int[] data)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: The audio device.
    - id: param
      type: OpenTK.Audio.OpenAL.EFXContextInteger
      description: The named property.
    - id: size
      type: System.Int32
      description: The size of the provided buffer.
    - id: data
      type: System.Int32[]
      description: A pointer to the first element of a provided data buffer.
    content.vb: Public Shared Sub GetInteger(device As ALDevice, param As EFXContextInteger, size As Integer, data As Integer())
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetInteger*
  nameWithType.vb: ALC.EFX.GetInteger(ALDevice, EFXContextInteger, Integer, Integer())
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetInteger(OpenTK.Audio.OpenAL.ALDevice, OpenTK.Audio.OpenAL.EFXContextInteger, Integer, Integer())
  name.vb: GetInteger(ALDevice, EFXContextInteger, Integer, Integer())
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.EFXContextInteger,System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.EFXContextInteger,System.Int32[])
  id: GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.EFXContextInteger,System.Int32[])
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetInteger(ALDevice, EFXContextInteger, int[])
  nameWithType: ALC.EFX.GetInteger(ALDevice, EFXContextInteger, int[])
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetInteger(OpenTK.Audio.OpenAL.ALDevice, OpenTK.Audio.OpenAL.EFXContextInteger, int[])
  type: Method
  source:
    id: GetInteger
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 86
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets a vector of integer properties from the context.
  example: []
  syntax:
    content: public static void GetInteger(ALDevice device, EFXContextInteger param, int[] data)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: The audio device.
    - id: param
      type: OpenTK.Audio.OpenAL.EFXContextInteger
      description: The named property.
    - id: data
      type: System.Int32[]
      description: A provided data buffer.
    content.vb: Public Shared Sub GetInteger(device As ALDevice, param As EFXContextInteger, data As Integer())
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetInteger*
  nameWithType.vb: ALC.EFX.GetInteger(ALDevice, EFXContextInteger, Integer())
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetInteger(OpenTK.Audio.OpenAL.ALDevice, OpenTK.Audio.OpenAL.EFXContextInteger, Integer())
  name.vb: GetInteger(ALDevice, EFXContextInteger, Integer())
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetEFXMajorVersion(OpenTK.Audio.OpenAL.ALDevice)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetEFXMajorVersion(OpenTK.Audio.OpenAL.ALDevice)
  id: GetEFXMajorVersion(OpenTK.Audio.OpenAL.ALDevice)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetEFXMajorVersion(ALDevice)
  nameWithType: ALC.EFX.GetEFXMajorVersion(ALDevice)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetEFXMajorVersion(OpenTK.Audio.OpenAL.ALDevice)
  type: Method
  source:
    id: GetEFXMajorVersion
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 96
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the major version of the Effect Extension.
  example: []
  syntax:
    content: public int GetEFXMajorVersion(ALDevice device)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: The device that the context is on.
    return:
      type: System.Int32
      description: The major version.
    content.vb: Public Function GetEFXMajorVersion(device As ALDevice) As Integer
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetEFXMajorVersion*
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetEFXMinorVersion(OpenTK.Audio.OpenAL.ALDevice)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetEFXMinorVersion(OpenTK.Audio.OpenAL.ALDevice)
  id: GetEFXMinorVersion(OpenTK.Audio.OpenAL.ALDevice)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetEFXMinorVersion(ALDevice)
  nameWithType: ALC.EFX.GetEFXMinorVersion(ALDevice)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetEFXMinorVersion(OpenTK.Audio.OpenAL.ALDevice)
  type: Method
  source:
    id: GetEFXMinorVersion
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 108
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the minor version of the Effect Extension.
  example: []
  syntax:
    content: public int GetEFXMinorVersion(ALDevice device)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: The device that the context is on.
    return:
      type: System.Int32
      description: The minor version.
    content.vb: Public Function GetEFXMinorVersion(device As ALDevice) As Integer
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetEFXMinorVersion*
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetEFXVersion(OpenTK.Audio.OpenAL.ALDevice)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetEFXVersion(OpenTK.Audio.OpenAL.ALDevice)
  id: GetEFXVersion(OpenTK.Audio.OpenAL.ALDevice)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetEFXVersion(ALDevice)
  nameWithType: ALC.EFX.GetEFXVersion(ALDevice)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetEFXVersion(OpenTK.Audio.OpenAL.ALDevice)
  type: Method
  source:
    id: GetEFXVersion
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 120
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the version of the Effect Extension.
  example: []
  syntax:
    content: public Version GetEFXVersion(ALDevice device)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: The device that the context is on.
    return:
      type: System.Version
      description: The version.
    content.vb: Public Function GetEFXVersion(device As ALDevice) As Version
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetEFXVersion*
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32*)
  id: GenAuxiliaryEffectSlots(System.Int32,System.Int32*)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GenAuxiliaryEffectSlots(int, int*)
  nameWithType: ALC.EFX.GenAuxiliaryEffectSlots(int, int*)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(int, int*)
  type: Method
  source:
    id: GenAuxiliaryEffectSlots
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 137
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Creates one or more auxiliary effect slots.
  example: []
  syntax:
    content: public static void GenAuxiliaryEffectSlots(int count, int* slots)
    parameters:
    - id: count
      type: System.Int32
      description: The number of slots to create.
    - id: slots
      type: System.Int32*
      description: The first element of the array to place the slots into.
    content.vb: Public Shared Sub GenAuxiliaryEffectSlots(count As Integer, slots As Integer*)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32*)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32*)
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(System.Int32)
  nameWithType.vb: ALC.EFX.GenAuxiliaryEffectSlots(Integer, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(Integer, Integer*)
  name.vb: GenAuxiliaryEffectSlots(Integer, Integer*)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32@)
  id: GenAuxiliaryEffectSlots(System.Int32,System.Int32@)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GenAuxiliaryEffectSlots(int, ref int)
  nameWithType: ALC.EFX.GenAuxiliaryEffectSlots(int, ref int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(int, ref int)
  type: Method
  source:
    id: GenAuxiliaryEffectSlots
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 150
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Creates one or more auxiliary effect slots.
  example: []
  syntax:
    content: public static void GenAuxiliaryEffectSlots(int count, ref int slots)
    parameters:
    - id: count
      type: System.Int32
      description: The number of slots to create.
    - id: slots
      type: System.Int32
      description: The first element of the array to place the slots into.
    content.vb: Public Shared Sub GenAuxiliaryEffectSlots(count As Integer, slots As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32@)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32@)
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(System.Int32)
  nameWithType.vb: ALC.EFX.GenAuxiliaryEffectSlots(Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(Integer, Integer)
  name.vb: GenAuxiliaryEffectSlots(Integer, Integer)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32[])
  id: GenAuxiliaryEffectSlots(System.Int32,System.Int32[])
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GenAuxiliaryEffectSlots(int, int[])
  nameWithType: ALC.EFX.GenAuxiliaryEffectSlots(int, int[])
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(int, int[])
  type: Method
  source:
    id: GenAuxiliaryEffectSlots
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 162
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Creates one or more auxiliary effect slots.
  example: []
  syntax:
    content: public static void GenAuxiliaryEffectSlots(int count, int[] slots)
    parameters:
    - id: count
      type: System.Int32
      description: The number of slots to create.
    - id: slots
      type: System.Int32[]
      description: The first element of the array to place the slots into.
    content.vb: Public Shared Sub GenAuxiliaryEffectSlots(count As Integer, slots As Integer())
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32[])
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32[])
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(System.Int32)
  nameWithType.vb: ALC.EFX.GenAuxiliaryEffectSlots(Integer, Integer())
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(Integer, Integer())
  name.vb: GenAuxiliaryEffectSlots(Integer, Integer())
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32*)
  id: DeleteAuxiliaryEffectSlots(System.Int32,System.Int32*)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: DeleteAuxiliaryEffectSlots(int, int*)
  nameWithType: ALC.EFX.DeleteAuxiliaryEffectSlots(int, int*)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(int, int*)
  type: Method
  source:
    id: DeleteAuxiliaryEffectSlots
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 174
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Deletes and frees resources used for a set of auxiliary effect slots.
  example: []
  syntax:
    content: public static void DeleteAuxiliaryEffectSlots(int count, int* slots)
    parameters:
    - id: count
      type: System.Int32
      description: The number of slots to delete.
    - id: slots
      type: System.Int32*
      description: A pointer to the array of slots to delete.
    content.vb: Public Shared Sub DeleteAuxiliaryEffectSlots(count As Integer, slots As Integer*)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32*)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32*)
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(System.Int32)
  nameWithType.vb: ALC.EFX.DeleteAuxiliaryEffectSlots(Integer, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(Integer, Integer*)
  name.vb: DeleteAuxiliaryEffectSlots(Integer, Integer*)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32@)
  id: DeleteAuxiliaryEffectSlots(System.Int32,System.Int32@)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: DeleteAuxiliaryEffectSlots(int, ref int)
  nameWithType: ALC.EFX.DeleteAuxiliaryEffectSlots(int, ref int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(int, ref int)
  type: Method
  source:
    id: DeleteAuxiliaryEffectSlots
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 186
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Deletes and frees resources used for a set of auxiliary effect slots.
  example: []
  syntax:
    content: public static void DeleteAuxiliaryEffectSlots(int count, ref int slots)
    parameters:
    - id: count
      type: System.Int32
      description: The number of slots to delete.
    - id: slots
      type: System.Int32
      description: A pointer to the array of slots to delete.
    content.vb: Public Shared Sub DeleteAuxiliaryEffectSlots(count As Integer, slots As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32@)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32@)
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(System.Int32)
  nameWithType.vb: ALC.EFX.DeleteAuxiliaryEffectSlots(Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(Integer, Integer)
  name.vb: DeleteAuxiliaryEffectSlots(Integer, Integer)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32[])
  id: DeleteAuxiliaryEffectSlots(System.Int32,System.Int32[])
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: DeleteAuxiliaryEffectSlots(int, int[])
  nameWithType: ALC.EFX.DeleteAuxiliaryEffectSlots(int, int[])
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(int, int[])
  type: Method
  source:
    id: DeleteAuxiliaryEffectSlots
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 198
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Deletes and frees resources used for a set of auxiliary effect slots.
  example: []
  syntax:
    content: public static void DeleteAuxiliaryEffectSlots(int count, int[] slots)
    parameters:
    - id: count
      type: System.Int32
      description: The number of slots to delete.
    - id: slots
      type: System.Int32[]
      description: A pointer to the array of slots to delete.
    content.vb: Public Shared Sub DeleteAuxiliaryEffectSlots(count As Integer, slots As Integer())
  overload: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32[])
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32[])
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(System.Int32)
  nameWithType.vb: ALC.EFX.DeleteAuxiliaryEffectSlots(Integer, Integer())
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(Integer, Integer())
  name.vb: DeleteAuxiliaryEffectSlots(Integer, Integer())
- uid: OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(System.Int32)
  id: IsAuxiliaryEffectSlot(System.Int32)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: IsAuxiliaryEffectSlot(int)
  nameWithType: ALC.EFX.IsAuxiliaryEffectSlot(int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(int)
  type: Method
  source:
    id: IsAuxiliaryEffectSlot
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 208
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Determines whether or not the given handle is an auxiliary slot handle.
  example: []
  syntax:
    content: public static bool IsAuxiliaryEffectSlot(int slot)
    parameters:
    - id: slot
      type: System.Int32
      description: The handle.
    return:
      type: System.Boolean
      description: true if the handle is a slot handle; otherwise, false.
    content.vb: Public Shared Function IsAuxiliaryEffectSlot(slot As Integer) As Boolean
  overload: OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot*
  nameWithType.vb: ALC.EFX.IsAuxiliaryEffectSlot(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(Integer)
  name.vb: IsAuxiliaryEffectSlot(Integer)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.AuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotInteger,System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.AuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotInteger,System.Int32)
  id: AuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotInteger,System.Int32)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: AuxiliaryEffectSlot(int, EffectSlotInteger, int)
  nameWithType: ALC.EFX.AuxiliaryEffectSlot(int, EffectSlotInteger, int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.AuxiliaryEffectSlot(int, OpenTK.Audio.OpenAL.EffectSlotInteger, int)
  type: Method
  source:
    id: AuxiliaryEffectSlot
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 219
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Sets the value of a named property on the given effect slot.
  example: []
  syntax:
    content: public static void AuxiliaryEffectSlot(int slot, EffectSlotInteger param, int value)
    parameters:
    - id: slot
      type: System.Int32
      description: The slot.
    - id: param
      type: OpenTK.Audio.OpenAL.EffectSlotInteger
      description: The named property.
    - id: value
      type: System.Int32
      description: The value to set the property to.
    content.vb: Public Shared Sub AuxiliaryEffectSlot(slot As Integer, param As EffectSlotInteger, value As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.AuxiliaryEffectSlot*
  nameWithType.vb: ALC.EFX.AuxiliaryEffectSlot(Integer, EffectSlotInteger, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.AuxiliaryEffectSlot(Integer, OpenTK.Audio.OpenAL.EffectSlotInteger, Integer)
  name.vb: AuxiliaryEffectSlot(Integer, EffectSlotInteger, Integer)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.AuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotFloat,System.Single)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.AuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotFloat,System.Single)
  id: AuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotFloat,System.Single)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: AuxiliaryEffectSlot(int, EffectSlotFloat, float)
  nameWithType: ALC.EFX.AuxiliaryEffectSlot(int, EffectSlotFloat, float)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.AuxiliaryEffectSlot(int, OpenTK.Audio.OpenAL.EffectSlotFloat, float)
  type: Method
  source:
    id: AuxiliaryEffectSlot
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 230
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Sets the value of a named property on the given effect slot.
  example: []
  syntax:
    content: public static void AuxiliaryEffectSlot(int slot, EffectSlotFloat param, float value)
    parameters:
    - id: slot
      type: System.Int32
      description: The slot.
    - id: param
      type: OpenTK.Audio.OpenAL.EffectSlotFloat
      description: The named property.
    - id: value
      type: System.Single
      description: The value to set the property to.
    content.vb: Public Shared Sub AuxiliaryEffectSlot(slot As Integer, param As EffectSlotFloat, value As Single)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.AuxiliaryEffectSlot*
  nameWithType.vb: ALC.EFX.AuxiliaryEffectSlot(Integer, EffectSlotFloat, Single)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.AuxiliaryEffectSlot(Integer, OpenTK.Audio.OpenAL.EffectSlotFloat, Single)
  name.vb: AuxiliaryEffectSlot(Integer, EffectSlotFloat, Single)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotInteger,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotInteger,System.Int32*)
  id: GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotInteger,System.Int32*)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetAuxiliaryEffectSlot(int, EffectSlotInteger, int*)
  nameWithType: ALC.EFX.GetAuxiliaryEffectSlot(int, EffectSlotInteger, int*)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot(int, OpenTK.Audio.OpenAL.EffectSlotInteger, int*)
  type: Method
  source:
    id: GetAuxiliaryEffectSlot
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 241
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given effect slot.
  example: []
  syntax:
    content: public static void GetAuxiliaryEffectSlot(int slot, EffectSlotInteger param, int* value)
    parameters:
    - id: slot
      type: System.Int32
      description: The slot.
    - id: param
      type: OpenTK.Audio.OpenAL.EffectSlotInteger
      description: The named property.
    - id: value
      type: System.Int32*
      description: The value.
    content.vb: Public Shared Sub GetAuxiliaryEffectSlot(slot As Integer, param As EffectSlotInteger, value As Integer*)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot*
  nameWithType.vb: ALC.EFX.GetAuxiliaryEffectSlot(Integer, EffectSlotInteger, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot(Integer, OpenTK.Audio.OpenAL.EffectSlotInteger, Integer*)
  name.vb: GetAuxiliaryEffectSlot(Integer, EffectSlotInteger, Integer*)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotInteger,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotInteger,System.Int32@)
  id: GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotInteger,System.Int32@)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetAuxiliaryEffectSlot(int, EffectSlotInteger, out int)
  nameWithType: ALC.EFX.GetAuxiliaryEffectSlot(int, EffectSlotInteger, out int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot(int, OpenTK.Audio.OpenAL.EffectSlotInteger, out int)
  type: Method
  source:
    id: GetAuxiliaryEffectSlot
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 252
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given effect slot.
  example: []
  syntax:
    content: public static void GetAuxiliaryEffectSlot(int slot, EffectSlotInteger param, out int value)
    parameters:
    - id: slot
      type: System.Int32
      description: The slot.
    - id: param
      type: OpenTK.Audio.OpenAL.EffectSlotInteger
      description: The named property.
    - id: value
      type: System.Int32
      description: The value.
    content.vb: Public Shared Sub GetAuxiliaryEffectSlot(slot As Integer, param As EffectSlotInteger, value As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot*
  nameWithType.vb: ALC.EFX.GetAuxiliaryEffectSlot(Integer, EffectSlotInteger, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot(Integer, OpenTK.Audio.OpenAL.EffectSlotInteger, Integer)
  name.vb: GetAuxiliaryEffectSlot(Integer, EffectSlotInteger, Integer)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotFloat,System.Single*)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotFloat,System.Single*)
  id: GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotFloat,System.Single*)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetAuxiliaryEffectSlot(int, EffectSlotFloat, float*)
  nameWithType: ALC.EFX.GetAuxiliaryEffectSlot(int, EffectSlotFloat, float*)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot(int, OpenTK.Audio.OpenAL.EffectSlotFloat, float*)
  type: Method
  source:
    id: GetAuxiliaryEffectSlot
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 263
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given effect slot.
  example: []
  syntax:
    content: public static void GetAuxiliaryEffectSlot(int slot, EffectSlotFloat param, float* value)
    parameters:
    - id: slot
      type: System.Int32
      description: The slot.
    - id: param
      type: OpenTK.Audio.OpenAL.EffectSlotFloat
      description: The named property.
    - id: value
      type: System.Single*
      description: The value.
    content.vb: Public Shared Sub GetAuxiliaryEffectSlot(slot As Integer, param As EffectSlotFloat, value As Single*)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot*
  nameWithType.vb: ALC.EFX.GetAuxiliaryEffectSlot(Integer, EffectSlotFloat, Single*)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot(Integer, OpenTK.Audio.OpenAL.EffectSlotFloat, Single*)
  name.vb: GetAuxiliaryEffectSlot(Integer, EffectSlotFloat, Single*)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotFloat,System.Single@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotFloat,System.Single@)
  id: GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotFloat,System.Single@)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetAuxiliaryEffectSlot(int, EffectSlotFloat, out float)
  nameWithType: ALC.EFX.GetAuxiliaryEffectSlot(int, EffectSlotFloat, out float)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot(int, OpenTK.Audio.OpenAL.EffectSlotFloat, out float)
  type: Method
  source:
    id: GetAuxiliaryEffectSlot
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 274
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given effect slot.
  example: []
  syntax:
    content: public static void GetAuxiliaryEffectSlot(int slot, EffectSlotFloat param, out float value)
    parameters:
    - id: slot
      type: System.Int32
      description: The slot.
    - id: param
      type: OpenTK.Audio.OpenAL.EffectSlotFloat
      description: The named property.
    - id: value
      type: System.Single
      description: The value.
    content.vb: Public Shared Sub GetAuxiliaryEffectSlot(slot As Integer, param As EffectSlotFloat, value As Single)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot*
  nameWithType.vb: ALC.EFX.GetAuxiliaryEffectSlot(Integer, EffectSlotFloat, Single)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot(Integer, OpenTK.Audio.OpenAL.EffectSlotFloat, Single)
  name.vb: GetAuxiliaryEffectSlot(Integer, EffectSlotFloat, Single)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32,System.Int32*)
  id: GenEffects(System.Int32,System.Int32*)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GenEffects(int, int*)
  nameWithType: ALC.EFX.GenEffects(int, int*)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(int, int*)
  type: Method
  source:
    id: GenEffects
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 286
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Creates one or more effect objects.
  example: []
  syntax:
    content: public static void GenEffects(int count, int* effects)
    parameters:
    - id: count
      type: System.Int32
      description: The number of objects to generate.
    - id: effects
      type: System.Int32*
      description: A pointer to the first element of the array where the handles will be stored.
    content.vb: Public Shared Sub GenEffects(count As Integer, effects As Integer*)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32,System.Int32*)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32,System.Int32*)
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(System.Int32)
  nameWithType.vb: ALC.EFX.GenEffects(Integer, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(Integer, Integer*)
  name.vb: GenEffects(Integer, Integer*)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32,System.Int32@)
  id: GenEffects(System.Int32,System.Int32@)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GenEffects(int, ref int)
  nameWithType: ALC.EFX.GenEffects(int, ref int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(int, ref int)
  type: Method
  source:
    id: GenEffects
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 298
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Creates one or more effect objects.
  example: []
  syntax:
    content: public static void GenEffects(int count, ref int effects)
    parameters:
    - id: count
      type: System.Int32
      description: The number of objects to generate.
    - id: effects
      type: System.Int32
      description: A pointer to the first element of the array where the handles will be stored.
    content.vb: Public Shared Sub GenEffects(count As Integer, effects As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32,System.Int32@)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32,System.Int32@)
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(System.Int32)
  nameWithType.vb: ALC.EFX.GenEffects(Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(Integer, Integer)
  name.vb: GenEffects(Integer, Integer)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32,System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32,System.Int32[])
  id: GenEffects(System.Int32,System.Int32[])
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GenEffects(int, int[])
  nameWithType: ALC.EFX.GenEffects(int, int[])
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(int, int[])
  type: Method
  source:
    id: GenEffects
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 310
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Creates one or more effect objects.
  example: []
  syntax:
    content: public static void GenEffects(int count, int[] effects)
    parameters:
    - id: count
      type: System.Int32
      description: The number of objects to generate.
    - id: effects
      type: System.Int32[]
      description: A pointer to the first element of the array where the handles will be stored.
    content.vb: Public Shared Sub GenEffects(count As Integer, effects As Integer())
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32,System.Int32[])
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32,System.Int32[])
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(System.Int32)
  nameWithType.vb: ALC.EFX.GenEffects(Integer, Integer())
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(Integer, Integer())
  name.vb: GenEffects(Integer, Integer())
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32,System.Int32*)
  id: DeleteEffects(System.Int32,System.Int32*)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: DeleteEffects(int, int*)
  nameWithType: ALC.EFX.DeleteEffects(int, int*)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(int, int*)
  type: Method
  source:
    id: DeleteEffects
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 322
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Deletes one or more effect objects, freeing their resources.
  example: []
  syntax:
    content: public static void DeleteEffects(int count, int* effects)
    parameters:
    - id: count
      type: System.Int32
      description: The number of objects to delete.
    - id: effects
      type: System.Int32*
      description: A pointer to the first element of the array where the handles are stored.
    content.vb: Public Shared Sub DeleteEffects(count As Integer, effects As Integer*)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32,System.Int32*)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32,System.Int32*)
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(System.Int32)
  nameWithType.vb: ALC.EFX.DeleteEffects(Integer, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(Integer, Integer*)
  name.vb: DeleteEffects(Integer, Integer*)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32,System.Int32@)
  id: DeleteEffects(System.Int32,System.Int32@)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: DeleteEffects(int, ref int)
  nameWithType: ALC.EFX.DeleteEffects(int, ref int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(int, ref int)
  type: Method
  source:
    id: DeleteEffects
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 334
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Deletes one or more effect objects, freeing their resources.
  example: []
  syntax:
    content: public static void DeleteEffects(int count, ref int effects)
    parameters:
    - id: count
      type: System.Int32
      description: The number of objects to delete.
    - id: effects
      type: System.Int32
      description: A pointer to the first element of the array where the handles are stored.
    content.vb: Public Shared Sub DeleteEffects(count As Integer, effects As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32,System.Int32@)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32,System.Int32@)
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(System.Int32)
  nameWithType.vb: ALC.EFX.DeleteEffects(Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(Integer, Integer)
  name.vb: DeleteEffects(Integer, Integer)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32,System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32,System.Int32[])
  id: DeleteEffects(System.Int32,System.Int32[])
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: DeleteEffects(int, int[])
  nameWithType: ALC.EFX.DeleteEffects(int, int[])
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(int, int[])
  type: Method
  source:
    id: DeleteEffects
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 346
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Deletes one or more effect objects, freeing their resources.
  example: []
  syntax:
    content: public static void DeleteEffects(int count, int[] effects)
    parameters:
    - id: count
      type: System.Int32
      description: The number of objects to delete.
    - id: effects
      type: System.Int32[]
      description: A pointer to the first element of the array where the handles are stored.
    content.vb: Public Shared Sub DeleteEffects(count As Integer, effects As Integer())
  overload: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32,System.Int32[])
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32,System.Int32[])
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(System.Int32)
  nameWithType.vb: ALC.EFX.DeleteEffects(Integer, Integer())
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(Integer, Integer())
  name.vb: DeleteEffects(Integer, Integer())
- uid: OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(System.Int32)
  id: IsEffect(System.Int32)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: IsEffect(int)
  nameWithType: ALC.EFX.IsEffect(int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(int)
  type: Method
  source:
    id: IsEffect
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 358
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Determines whether or not a given handle is an effect handle.
  example: []
  syntax:
    content: public static bool IsEffect(int effect)
    parameters:
    - id: effect
      type: System.Int32
      description: The handle.
    return:
      type: System.Boolean
      description: true if the handle is an effect handle; otherwise, false.
    content.vb: Public Shared Function IsEffect(effect As Integer) As Boolean
  overload: OpenTK.Audio.OpenAL.ALC.EFX.IsEffect*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32[])
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32[])
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32[])
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32[])
  nameWithType.vb: ALC.EFX.IsEffect(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(Integer)
  name.vb: IsEffect(Integer)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.Effect(System.Int32,OpenTK.Audio.OpenAL.EffectInteger,System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.Effect(System.Int32,OpenTK.Audio.OpenAL.EffectInteger,System.Int32)
  id: Effect(System.Int32,OpenTK.Audio.OpenAL.EffectInteger,System.Int32)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: Effect(int, EffectInteger, int)
  nameWithType: ALC.EFX.Effect(int, EffectInteger, int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.Effect(int, OpenTK.Audio.OpenAL.EffectInteger, int)
  type: Method
  source:
    id: Effect
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 369
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Sets the value of a named property on the given effect.
  example: []
  syntax:
    content: public static void Effect(int effect, EffectInteger param, int value)
    parameters:
    - id: effect
      type: System.Int32
      description: The effect.
    - id: param
      type: OpenTK.Audio.OpenAL.EffectInteger
      description: The named property.
    - id: value
      type: System.Int32
      description: The value to set the property to.
    content.vb: Public Shared Sub Effect(effect As Integer, param As EffectInteger, value As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.Effect*
  nameWithType.vb: ALC.EFX.Effect(Integer, EffectInteger, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.Effect(Integer, OpenTK.Audio.OpenAL.EffectInteger, Integer)
  name.vb: Effect(Integer, EffectInteger, Integer)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.Effect(System.Int32,OpenTK.Audio.OpenAL.EffectFloat,System.Single)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.Effect(System.Int32,OpenTK.Audio.OpenAL.EffectFloat,System.Single)
  id: Effect(System.Int32,OpenTK.Audio.OpenAL.EffectFloat,System.Single)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: Effect(int, EffectFloat, float)
  nameWithType: ALC.EFX.Effect(int, EffectFloat, float)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.Effect(int, OpenTK.Audio.OpenAL.EffectFloat, float)
  type: Method
  source:
    id: Effect
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 380
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Sets the value of a named property on the given effect.
  example: []
  syntax:
    content: public static void Effect(int effect, EffectFloat param, float value)
    parameters:
    - id: effect
      type: System.Int32
      description: The effect.
    - id: param
      type: OpenTK.Audio.OpenAL.EffectFloat
      description: The named property.
    - id: value
      type: System.Single
      description: The value to set the property to.
    content.vb: Public Shared Sub Effect(effect As Integer, param As EffectFloat, value As Single)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.Effect*
  nameWithType.vb: ALC.EFX.Effect(Integer, EffectFloat, Single)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.Effect(Integer, OpenTK.Audio.OpenAL.EffectFloat, Single)
  name.vb: Effect(Integer, EffectFloat, Single)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.Effect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3,System.Single*)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.Effect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3,System.Single*)
  id: Effect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3,System.Single*)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: Effect(int, EffectVector3, float*)
  nameWithType: ALC.EFX.Effect(int, EffectVector3, float*)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.Effect(int, OpenTK.Audio.OpenAL.EffectVector3, float*)
  type: Method
  source:
    id: Effect
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 391
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Sets the vector value of a named property on the given effect.
  example: []
  syntax:
    content: public static void Effect(int effect, EffectVector3 param, float* value)
    parameters:
    - id: effect
      type: System.Int32
      description: The effect.
    - id: param
      type: OpenTK.Audio.OpenAL.EffectVector3
      description: The named property.
    - id: value
      type: System.Single*
      description: The value to set the property to.
    content.vb: Public Shared Sub Effect(effect As Integer, param As EffectVector3, value As Single*)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.Effect*
  nameWithType.vb: ALC.EFX.Effect(Integer, EffectVector3, Single*)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.Effect(Integer, OpenTK.Audio.OpenAL.EffectVector3, Single*)
  name.vb: Effect(Integer, EffectVector3, Single*)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.Effect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3,System.Single@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.Effect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3,System.Single@)
  id: Effect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3,System.Single@)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: Effect(int, EffectVector3, ref float)
  nameWithType: ALC.EFX.Effect(int, EffectVector3, ref float)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.Effect(int, OpenTK.Audio.OpenAL.EffectVector3, ref float)
  type: Method
  source:
    id: Effect
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 402
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Sets the vector value of a named property on the given effect.
  example: []
  syntax:
    content: public static void Effect(int effect, EffectVector3 param, ref float value)
    parameters:
    - id: effect
      type: System.Int32
      description: The effect.
    - id: param
      type: OpenTK.Audio.OpenAL.EffectVector3
      description: The named property.
    - id: value
      type: System.Single
      description: The value to set the property to.
    content.vb: Public Shared Sub Effect(effect As Integer, param As EffectVector3, value As Single)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.Effect*
  nameWithType.vb: ALC.EFX.Effect(Integer, EffectVector3, Single)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.Effect(Integer, OpenTK.Audio.OpenAL.EffectVector3, Single)
  name.vb: Effect(Integer, EffectVector3, Single)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.Effect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3,System.Single[])
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.Effect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3,System.Single[])
  id: Effect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3,System.Single[])
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: Effect(int, EffectVector3, float[])
  nameWithType: ALC.EFX.Effect(int, EffectVector3, float[])
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.Effect(int, OpenTK.Audio.OpenAL.EffectVector3, float[])
  type: Method
  source:
    id: Effect
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 413
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Sets the vector value of a named property on the given effect.
  example: []
  syntax:
    content: public static void Effect(int effect, EffectVector3 param, float[] value)
    parameters:
    - id: effect
      type: System.Int32
      description: The effect.
    - id: param
      type: OpenTK.Audio.OpenAL.EffectVector3
      description: The named property.
    - id: value
      type: System.Single[]
      description: The value to set the property to.
    content.vb: Public Shared Sub Effect(effect As Integer, param As EffectVector3, value As Single())
  overload: OpenTK.Audio.OpenAL.ALC.EFX.Effect*
  nameWithType.vb: ALC.EFX.Effect(Integer, EffectVector3, Single())
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.Effect(Integer, OpenTK.Audio.OpenAL.EffectVector3, Single())
  name.vb: Effect(Integer, EffectVector3, Single())
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectInteger,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectInteger,System.Int32*)
  id: GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectInteger,System.Int32*)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetEffect(int, EffectInteger, int*)
  nameWithType: ALC.EFX.GetEffect(int, EffectInteger, int*)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(int, OpenTK.Audio.OpenAL.EffectInteger, int*)
  type: Method
  source:
    id: GetEffect
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 424
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given effect.
  example: []
  syntax:
    content: public static void GetEffect(int effect, EffectInteger param, int* value)
    parameters:
    - id: effect
      type: System.Int32
      description: The effect.
    - id: param
      type: OpenTK.Audio.OpenAL.EffectInteger
      description: The named property.
    - id: value
      type: System.Int32*
      description: The value to set the property to.
    content.vb: Public Shared Sub GetEffect(effect As Integer, param As EffectInteger, value As Integer*)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect*
  nameWithType.vb: ALC.EFX.GetEffect(Integer, EffectInteger, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(Integer, OpenTK.Audio.OpenAL.EffectInteger, Integer*)
  name.vb: GetEffect(Integer, EffectInteger, Integer*)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectInteger,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectInteger,System.Int32@)
  id: GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectInteger,System.Int32@)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetEffect(int, EffectInteger, out int)
  nameWithType: ALC.EFX.GetEffect(int, EffectInteger, out int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(int, OpenTK.Audio.OpenAL.EffectInteger, out int)
  type: Method
  source:
    id: GetEffect
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 435
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given effect.
  example: []
  syntax:
    content: public static void GetEffect(int effect, EffectInteger param, out int value)
    parameters:
    - id: effect
      type: System.Int32
      description: The effect.
    - id: param
      type: OpenTK.Audio.OpenAL.EffectInteger
      description: The named property.
    - id: value
      type: System.Int32
      description: The value to set the property to.
    content.vb: Public Shared Sub GetEffect(effect As Integer, param As EffectInteger, value As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect*
  nameWithType.vb: ALC.EFX.GetEffect(Integer, EffectInteger, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(Integer, OpenTK.Audio.OpenAL.EffectInteger, Integer)
  name.vb: GetEffect(Integer, EffectInteger, Integer)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectFloat,System.Single*)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectFloat,System.Single*)
  id: GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectFloat,System.Single*)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetEffect(int, EffectFloat, float*)
  nameWithType: ALC.EFX.GetEffect(int, EffectFloat, float*)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(int, OpenTK.Audio.OpenAL.EffectFloat, float*)
  type: Method
  source:
    id: GetEffect
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 446
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given effect.
  example: []
  syntax:
    content: public static void GetEffect(int effect, EffectFloat param, float* value)
    parameters:
    - id: effect
      type: System.Int32
      description: The effect.
    - id: param
      type: OpenTK.Audio.OpenAL.EffectFloat
      description: The named property.
    - id: value
      type: System.Single*
      description: The value to set the property to.
    content.vb: Public Shared Sub GetEffect(effect As Integer, param As EffectFloat, value As Single*)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect*
  nameWithType.vb: ALC.EFX.GetEffect(Integer, EffectFloat, Single*)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(Integer, OpenTK.Audio.OpenAL.EffectFloat, Single*)
  name.vb: GetEffect(Integer, EffectFloat, Single*)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectFloat,System.Single@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectFloat,System.Single@)
  id: GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectFloat,System.Single@)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetEffect(int, EffectFloat, out float)
  nameWithType: ALC.EFX.GetEffect(int, EffectFloat, out float)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(int, OpenTK.Audio.OpenAL.EffectFloat, out float)
  type: Method
  source:
    id: GetEffect
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 457
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given effect.
  example: []
  syntax:
    content: public static void GetEffect(int effect, EffectFloat param, out float value)
    parameters:
    - id: effect
      type: System.Int32
      description: The effect.
    - id: param
      type: OpenTK.Audio.OpenAL.EffectFloat
      description: The named property.
    - id: value
      type: System.Single
      description: The value to set the property to.
    content.vb: Public Shared Sub GetEffect(effect As Integer, param As EffectFloat, value As Single)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect*
  nameWithType.vb: ALC.EFX.GetEffect(Integer, EffectFloat, Single)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(Integer, OpenTK.Audio.OpenAL.EffectFloat, Single)
  name.vb: GetEffect(Integer, EffectFloat, Single)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3,System.Single*)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3,System.Single*)
  id: GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3,System.Single*)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetEffect(int, EffectVector3, float*)
  nameWithType: ALC.EFX.GetEffect(int, EffectVector3, float*)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(int, OpenTK.Audio.OpenAL.EffectVector3, float*)
  type: Method
  source:
    id: GetEffect
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 468
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the vector value of a named property on the given effect.
  example: []
  syntax:
    content: public static void GetEffect(int effect, EffectVector3 param, float* value)
    parameters:
    - id: effect
      type: System.Int32
      description: The effect.
    - id: param
      type: OpenTK.Audio.OpenAL.EffectVector3
      description: The named property.
    - id: value
      type: System.Single*
      description: The value to set the property to.
    content.vb: Public Shared Sub GetEffect(effect As Integer, param As EffectVector3, value As Single*)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect*
  nameWithType.vb: ALC.EFX.GetEffect(Integer, EffectVector3, Single*)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(Integer, OpenTK.Audio.OpenAL.EffectVector3, Single*)
  name.vb: GetEffect(Integer, EffectVector3, Single*)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3,System.Single@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3,System.Single@)
  id: GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3,System.Single@)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetEffect(int, EffectVector3, out float)
  nameWithType: ALC.EFX.GetEffect(int, EffectVector3, out float)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(int, OpenTK.Audio.OpenAL.EffectVector3, out float)
  type: Method
  source:
    id: GetEffect
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 479
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the vector value of a named property on the given effect.
  example: []
  syntax:
    content: public static void GetEffect(int effect, EffectVector3 param, out float value)
    parameters:
    - id: effect
      type: System.Int32
      description: The effect.
    - id: param
      type: OpenTK.Audio.OpenAL.EffectVector3
      description: The named property.
    - id: value
      type: System.Single
      description: The value to set the property to.
    content.vb: Public Shared Sub GetEffect(effect As Integer, param As EffectVector3, value As Single)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect*
  nameWithType.vb: ALC.EFX.GetEffect(Integer, EffectVector3, Single)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(Integer, OpenTK.Audio.OpenAL.EffectVector3, Single)
  name.vb: GetEffect(Integer, EffectVector3, Single)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32,System.Int32*)
  id: GenFilters(System.Int32,System.Int32*)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GenFilters(int, int*)
  nameWithType: ALC.EFX.GenFilters(int, int*)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(int, int*)
  type: Method
  source:
    id: GenFilters
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 491
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Creates one or more filter objects.
  example: []
  syntax:
    content: public static void GenFilters(int count, int* filters)
    parameters:
    - id: count
      type: System.Int32
      description: The number of objects to generate.
    - id: filters
      type: System.Int32*
      description: A pointer to the first element of the array where the handles will be stored.
    content.vb: Public Shared Sub GenFilters(count As Integer, filters As Integer*)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32,System.Int32*)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32,System.Int32*)
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(System.Int32)
  nameWithType.vb: ALC.EFX.GenFilters(Integer, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(Integer, Integer*)
  name.vb: GenFilters(Integer, Integer*)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32,System.Int32@)
  id: GenFilters(System.Int32,System.Int32@)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GenFilters(int, ref int)
  nameWithType: ALC.EFX.GenFilters(int, ref int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(int, ref int)
  type: Method
  source:
    id: GenFilters
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 503
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Creates one or more filter objects.
  example: []
  syntax:
    content: public static void GenFilters(int count, ref int filters)
    parameters:
    - id: count
      type: System.Int32
      description: The number of objects to generate.
    - id: filters
      type: System.Int32
      description: A pointer to the first element of the array where the handles will be stored.
    content.vb: Public Shared Sub GenFilters(count As Integer, filters As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32,System.Int32@)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32,System.Int32@)
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(System.Int32)
  nameWithType.vb: ALC.EFX.GenFilters(Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(Integer, Integer)
  name.vb: GenFilters(Integer, Integer)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32,System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32,System.Int32[])
  id: GenFilters(System.Int32,System.Int32[])
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GenFilters(int, int[])
  nameWithType: ALC.EFX.GenFilters(int, int[])
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(int, int[])
  type: Method
  source:
    id: GenFilters
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 515
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Creates one or more filter objects.
  example: []
  syntax:
    content: public static void GenFilters(int count, int[] filters)
    parameters:
    - id: count
      type: System.Int32
      description: The number of objects to generate.
    - id: filters
      type: System.Int32[]
      description: A pointer to the first element of the array where the handles will be stored.
    content.vb: Public Shared Sub GenFilters(count As Integer, filters As Integer())
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32,System.Int32[])
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32,System.Int32[])
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(System.Int32)
  nameWithType.vb: ALC.EFX.GenFilters(Integer, Integer())
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(Integer, Integer())
  name.vb: GenFilters(Integer, Integer())
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32,System.Int32*)
  id: DeleteFilters(System.Int32,System.Int32*)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: DeleteFilters(int, int*)
  nameWithType: ALC.EFX.DeleteFilters(int, int*)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(int, int*)
  type: Method
  source:
    id: DeleteFilters
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 527
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Deletes one or more filter objects, freeing their resources.
  example: []
  syntax:
    content: public static void DeleteFilters(int count, int* filters)
    parameters:
    - id: count
      type: System.Int32
      description: The number of objects to delete.
    - id: filters
      type: System.Int32*
      description: A pointer to the first element of the array where the handles are stored.
    content.vb: Public Shared Sub DeleteFilters(count As Integer, filters As Integer*)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32,System.Int32*)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32,System.Int32*)
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(System.Int32)
  nameWithType.vb: ALC.EFX.DeleteFilters(Integer, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(Integer, Integer*)
  name.vb: DeleteFilters(Integer, Integer*)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32,System.Int32@)
  id: DeleteFilters(System.Int32,System.Int32@)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: DeleteFilters(int, ref int)
  nameWithType: ALC.EFX.DeleteFilters(int, ref int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(int, ref int)
  type: Method
  source:
    id: DeleteFilters
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 539
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Deletes one or more filter objects, freeing their resources.
  example: []
  syntax:
    content: public static void DeleteFilters(int count, ref int filters)
    parameters:
    - id: count
      type: System.Int32
      description: The number of objects to delete.
    - id: filters
      type: System.Int32
      description: A pointer to the first element of the array where the handles are stored.
    content.vb: Public Shared Sub DeleteFilters(count As Integer, filters As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32,System.Int32@)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32,System.Int32@)
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(System.Int32)
  nameWithType.vb: ALC.EFX.DeleteFilters(Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(Integer, Integer)
  name.vb: DeleteFilters(Integer, Integer)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32,System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32,System.Int32[])
  id: DeleteFilters(System.Int32,System.Int32[])
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: DeleteFilters(int, int[])
  nameWithType: ALC.EFX.DeleteFilters(int, int[])
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(int, int[])
  type: Method
  source:
    id: DeleteFilters
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 551
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Deletes one or more filter objects, freeing their resources.
  example: []
  syntax:
    content: public static void DeleteFilters(int count, int[] filters)
    parameters:
    - id: count
      type: System.Int32
      description: The number of objects to delete.
    - id: filters
      type: System.Int32[]
      description: A pointer to the first element of the array where the handles are stored.
    content.vb: Public Shared Sub DeleteFilters(count As Integer, filters As Integer())
  overload: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32,System.Int32[])
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32,System.Int32[])
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(System.Int32)
  nameWithType.vb: ALC.EFX.DeleteFilters(Integer, Integer())
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(Integer, Integer())
  name.vb: DeleteFilters(Integer, Integer())
- uid: OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(System.Int32)
  id: IsFilter(System.Int32)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: IsFilter(int)
  nameWithType: ALC.EFX.IsFilter(int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(int)
  type: Method
  source:
    id: IsFilter
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 563
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Determines whether or not a given handle is an filter handle.
  example: []
  syntax:
    content: public static bool IsFilter(int filter)
    parameters:
    - id: filter
      type: System.Int32
      description: The handle.
    return:
      type: System.Boolean
      description: true if the handle is an filter handle; otherwise, false.
    content.vb: Public Shared Function IsFilter(filter As Integer) As Boolean
  overload: OpenTK.Audio.OpenAL.ALC.EFX.IsFilter*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32)
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32[])
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32[])
  nameWithType.vb: ALC.EFX.IsFilter(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(Integer)
  name.vb: IsFilter(Integer)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.Filter(System.Int32,OpenTK.Audio.OpenAL.FilterInteger,System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.Filter(System.Int32,OpenTK.Audio.OpenAL.FilterInteger,System.Int32)
  id: Filter(System.Int32,OpenTK.Audio.OpenAL.FilterInteger,System.Int32)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: Filter(int, FilterInteger, int)
  nameWithType: ALC.EFX.Filter(int, FilterInteger, int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.Filter(int, OpenTK.Audio.OpenAL.FilterInteger, int)
  type: Method
  source:
    id: Filter
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 574
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Sets the value of a named property on the given filter.
  example: []
  syntax:
    content: public static void Filter(int filter, FilterInteger param, int value)
    parameters:
    - id: filter
      type: System.Int32
      description: The filter.
    - id: param
      type: OpenTK.Audio.OpenAL.FilterInteger
      description: The named property.
    - id: value
      type: System.Int32
      description: The value to set the property to.
    content.vb: Public Shared Sub Filter(filter As Integer, param As FilterInteger, value As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.Filter*
  nameWithType.vb: ALC.EFX.Filter(Integer, FilterInteger, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.Filter(Integer, OpenTK.Audio.OpenAL.FilterInteger, Integer)
  name.vb: Filter(Integer, FilterInteger, Integer)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.Filter(System.Int32,OpenTK.Audio.OpenAL.FilterFloat,System.Single)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.Filter(System.Int32,OpenTK.Audio.OpenAL.FilterFloat,System.Single)
  id: Filter(System.Int32,OpenTK.Audio.OpenAL.FilterFloat,System.Single)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: Filter(int, FilterFloat, float)
  nameWithType: ALC.EFX.Filter(int, FilterFloat, float)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.Filter(int, OpenTK.Audio.OpenAL.FilterFloat, float)
  type: Method
  source:
    id: Filter
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 585
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Sets the value of a named property on the given filter.
  example: []
  syntax:
    content: public static void Filter(int filter, FilterFloat param, float value)
    parameters:
    - id: filter
      type: System.Int32
      description: The filter.
    - id: param
      type: OpenTK.Audio.OpenAL.FilterFloat
      description: The named property.
    - id: value
      type: System.Single
      description: The value to set the property to.
    content.vb: Public Shared Sub Filter(filter As Integer, param As FilterFloat, value As Single)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.Filter*
  nameWithType.vb: ALC.EFX.Filter(Integer, FilterFloat, Single)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.Filter(Integer, OpenTK.Audio.OpenAL.FilterFloat, Single)
  name.vb: Filter(Integer, FilterFloat, Single)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetFilter(System.Int32,OpenTK.Audio.OpenAL.FilterInteger,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetFilter(System.Int32,OpenTK.Audio.OpenAL.FilterInteger,System.Int32*)
  id: GetFilter(System.Int32,OpenTK.Audio.OpenAL.FilterInteger,System.Int32*)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetFilter(int, FilterInteger, int*)
  nameWithType: ALC.EFX.GetFilter(int, FilterInteger, int*)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetFilter(int, OpenTK.Audio.OpenAL.FilterInteger, int*)
  type: Method
  source:
    id: GetFilter
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 596
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given filter.
  example: []
  syntax:
    content: public static void GetFilter(int filter, FilterInteger param, int* value)
    parameters:
    - id: filter
      type: System.Int32
      description: The filter.
    - id: param
      type: OpenTK.Audio.OpenAL.FilterInteger
      description: The named property.
    - id: value
      type: System.Int32*
      description: The value to set the property to.
    content.vb: Public Shared Sub GetFilter(filter As Integer, param As FilterInteger, value As Integer*)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetFilter*
  nameWithType.vb: ALC.EFX.GetFilter(Integer, FilterInteger, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetFilter(Integer, OpenTK.Audio.OpenAL.FilterInteger, Integer*)
  name.vb: GetFilter(Integer, FilterInteger, Integer*)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetFilter(System.Int32,OpenTK.Audio.OpenAL.FilterInteger,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetFilter(System.Int32,OpenTK.Audio.OpenAL.FilterInteger,System.Int32@)
  id: GetFilter(System.Int32,OpenTK.Audio.OpenAL.FilterInteger,System.Int32@)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetFilter(int, FilterInteger, out int)
  nameWithType: ALC.EFX.GetFilter(int, FilterInteger, out int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetFilter(int, OpenTK.Audio.OpenAL.FilterInteger, out int)
  type: Method
  source:
    id: GetFilter
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 607
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given filter.
  example: []
  syntax:
    content: public static void GetFilter(int filter, FilterInteger param, out int value)
    parameters:
    - id: filter
      type: System.Int32
      description: The filter.
    - id: param
      type: OpenTK.Audio.OpenAL.FilterInteger
      description: The named property.
    - id: value
      type: System.Int32
      description: The value to set the property to.
    content.vb: Public Shared Sub GetFilter(filter As Integer, param As FilterInteger, value As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetFilter*
  nameWithType.vb: ALC.EFX.GetFilter(Integer, FilterInteger, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetFilter(Integer, OpenTK.Audio.OpenAL.FilterInteger, Integer)
  name.vb: GetFilter(Integer, FilterInteger, Integer)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetFilter(System.Int32,OpenTK.Audio.OpenAL.FilterFloat,System.Single*)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetFilter(System.Int32,OpenTK.Audio.OpenAL.FilterFloat,System.Single*)
  id: GetFilter(System.Int32,OpenTK.Audio.OpenAL.FilterFloat,System.Single*)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetFilter(int, FilterFloat, float*)
  nameWithType: ALC.EFX.GetFilter(int, FilterFloat, float*)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetFilter(int, OpenTK.Audio.OpenAL.FilterFloat, float*)
  type: Method
  source:
    id: GetFilter
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 618
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given filter.
  example: []
  syntax:
    content: public static void GetFilter(int filter, FilterFloat param, float* value)
    parameters:
    - id: filter
      type: System.Int32
      description: The filter.
    - id: param
      type: OpenTK.Audio.OpenAL.FilterFloat
      description: The named property.
    - id: value
      type: System.Single*
      description: The value to set the property to.
    content.vb: Public Shared Sub GetFilter(filter As Integer, param As FilterFloat, value As Single*)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetFilter*
  nameWithType.vb: ALC.EFX.GetFilter(Integer, FilterFloat, Single*)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetFilter(Integer, OpenTK.Audio.OpenAL.FilterFloat, Single*)
  name.vb: GetFilter(Integer, FilterFloat, Single*)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetFilter(System.Int32,OpenTK.Audio.OpenAL.FilterFloat,System.Single@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetFilter(System.Int32,OpenTK.Audio.OpenAL.FilterFloat,System.Single@)
  id: GetFilter(System.Int32,OpenTK.Audio.OpenAL.FilterFloat,System.Single@)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetFilter(int, FilterFloat, out float)
  nameWithType: ALC.EFX.GetFilter(int, FilterFloat, out float)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetFilter(int, OpenTK.Audio.OpenAL.FilterFloat, out float)
  type: Method
  source:
    id: GetFilter
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 629
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given filter.
  example: []
  syntax:
    content: public static void GetFilter(int filter, FilterFloat param, out float value)
    parameters:
    - id: filter
      type: System.Int32
      description: The filter.
    - id: param
      type: OpenTK.Audio.OpenAL.FilterFloat
      description: The named property.
    - id: value
      type: System.Single
      description: The value to set the property to.
    content.vb: Public Shared Sub GetFilter(filter As Integer, param As FilterFloat, value As Single)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetFilter*
  nameWithType.vb: ALC.EFX.GetFilter(Integer, FilterFloat, Single)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetFilter(Integer, OpenTK.Audio.OpenAL.FilterFloat, Single)
  name.vb: GetFilter(Integer, FilterFloat, Single)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.Source(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger,System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.Source(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger,System.Int32)
  id: Source(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger,System.Int32)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: Source(int, EFXSourceInteger, int)
  nameWithType: ALC.EFX.Source(int, EFXSourceInteger, int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.Source(int, OpenTK.Audio.OpenAL.EFXSourceInteger, int)
  type: Method
  source:
    id: Source
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 640
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Sets the value of a named property on the given source.
  example: []
  syntax:
    content: public static void Source(int source, EFXSourceInteger param, int value)
    parameters:
    - id: source
      type: System.Int32
      description: The source.
    - id: param
      type: OpenTK.Audio.OpenAL.EFXSourceInteger
      description: The named property.
    - id: value
      type: System.Int32
      description: The value to set the property to.
    content.vb: Public Shared Sub Source(source As Integer, param As EFXSourceInteger, value As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.Source*
  nameWithType.vb: ALC.EFX.Source(Integer, EFXSourceInteger, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.Source(Integer, OpenTK.Audio.OpenAL.EFXSourceInteger, Integer)
  name.vb: Source(Integer, EFXSourceInteger, Integer)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.Source(System.Int32,OpenTK.Audio.OpenAL.EFXSourceFloat,System.Single)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.Source(System.Int32,OpenTK.Audio.OpenAL.EFXSourceFloat,System.Single)
  id: Source(System.Int32,OpenTK.Audio.OpenAL.EFXSourceFloat,System.Single)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: Source(int, EFXSourceFloat, float)
  nameWithType: ALC.EFX.Source(int, EFXSourceFloat, float)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.Source(int, OpenTK.Audio.OpenAL.EFXSourceFloat, float)
  type: Method
  source:
    id: Source
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 651
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Sets the value of a named property on the given source.
  example: []
  syntax:
    content: public static void Source(int source, EFXSourceFloat param, float value)
    parameters:
    - id: source
      type: System.Int32
      description: The source.
    - id: param
      type: OpenTK.Audio.OpenAL.EFXSourceFloat
      description: The named property.
    - id: value
      type: System.Single
      description: The value to set the property to.
    content.vb: Public Shared Sub Source(source As Integer, param As EFXSourceFloat, value As Single)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.Source*
  nameWithType.vb: ALC.EFX.Source(Integer, EFXSourceFloat, Single)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.Source(Integer, OpenTK.Audio.OpenAL.EFXSourceFloat, Single)
  name.vb: Source(Integer, EFXSourceFloat, Single)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.Source(System.Int32,OpenTK.Audio.OpenAL.EFXSourceBoolean,System.Boolean)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.Source(System.Int32,OpenTK.Audio.OpenAL.EFXSourceBoolean,System.Boolean)
  id: Source(System.Int32,OpenTK.Audio.OpenAL.EFXSourceBoolean,System.Boolean)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: Source(int, EFXSourceBoolean, bool)
  nameWithType: ALC.EFX.Source(int, EFXSourceBoolean, bool)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.Source(int, OpenTK.Audio.OpenAL.EFXSourceBoolean, bool)
  type: Method
  source:
    id: Source
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 662
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Sets the value of a named property on the given source.
  example: []
  syntax:
    content: public static void Source(int source, EFXSourceBoolean param, bool value)
    parameters:
    - id: source
      type: System.Int32
      description: The source.
    - id: param
      type: OpenTK.Audio.OpenAL.EFXSourceBoolean
      description: The named property.
    - id: value
      type: System.Boolean
      description: The value to set the property to.
    content.vb: Public Shared Sub Source(source As Integer, param As EFXSourceBoolean, value As Boolean)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.Source*
  nameWithType.vb: ALC.EFX.Source(Integer, EFXSourceBoolean, Boolean)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.Source(Integer, OpenTK.Audio.OpenAL.EFXSourceBoolean, Boolean)
  name.vb: Source(Integer, EFXSourceBoolean, Boolean)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.Source(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.Source(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32*)
  id: Source(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32*)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: Source(int, EFXSourceInteger3, int*)
  nameWithType: ALC.EFX.Source(int, EFXSourceInteger3, int*)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.Source(int, OpenTK.Audio.OpenAL.EFXSourceInteger3, int*)
  type: Method
  source:
    id: Source
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 673
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Sets the value of a named property on the given source.
  example: []
  syntax:
    content: public static void Source(int source, EFXSourceInteger3 param, int* value)
    parameters:
    - id: source
      type: System.Int32
      description: The source.
    - id: param
      type: OpenTK.Audio.OpenAL.EFXSourceInteger3
      description: The named property.
    - id: value
      type: System.Int32*
      description: The value to set the property to.
    content.vb: Public Shared Sub Source(source As Integer, param As EFXSourceInteger3, value As Integer*)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.Source*
  nameWithType.vb: ALC.EFX.Source(Integer, EFXSourceInteger3, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.Source(Integer, OpenTK.Audio.OpenAL.EFXSourceInteger3, Integer*)
  name.vb: Source(Integer, EFXSourceInteger3, Integer*)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.Source(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.Source(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32@)
  id: Source(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32@)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: Source(int, EFXSourceInteger3, ref int)
  nameWithType: ALC.EFX.Source(int, EFXSourceInteger3, ref int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.Source(int, OpenTK.Audio.OpenAL.EFXSourceInteger3, ref int)
  type: Method
  source:
    id: Source
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 684
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Sets the value of a named property on the given source.
  example: []
  syntax:
    content: public static void Source(int source, EFXSourceInteger3 param, ref int value)
    parameters:
    - id: source
      type: System.Int32
      description: The source.
    - id: param
      type: OpenTK.Audio.OpenAL.EFXSourceInteger3
      description: The named property.
    - id: value
      type: System.Int32
      description: The value to set the property to.
    content.vb: Public Shared Sub Source(source As Integer, param As EFXSourceInteger3, value As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.Source*
  nameWithType.vb: ALC.EFX.Source(Integer, EFXSourceInteger3, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.Source(Integer, OpenTK.Audio.OpenAL.EFXSourceInteger3, Integer)
  name.vb: Source(Integer, EFXSourceInteger3, Integer)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.Source(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.Source(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32[])
  id: Source(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32[])
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: Source(int, EFXSourceInteger3, int[])
  nameWithType: ALC.EFX.Source(int, EFXSourceInteger3, int[])
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.Source(int, OpenTK.Audio.OpenAL.EFXSourceInteger3, int[])
  type: Method
  source:
    id: Source
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 695
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Sets the value of a named property on the given source.
  example: []
  syntax:
    content: public static void Source(int source, EFXSourceInteger3 param, int[] value)
    parameters:
    - id: source
      type: System.Int32
      description: The source.
    - id: param
      type: OpenTK.Audio.OpenAL.EFXSourceInteger3
      description: The named property.
    - id: value
      type: System.Int32[]
      description: The value to set the property to.
    content.vb: Public Shared Sub Source(source As Integer, param As EFXSourceInteger3, value As Integer())
  overload: OpenTK.Audio.OpenAL.ALC.EFX.Source*
  nameWithType.vb: ALC.EFX.Source(Integer, EFXSourceInteger3, Integer())
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.Source(Integer, OpenTK.Audio.OpenAL.EFXSourceInteger3, Integer())
  name.vb: Source(Integer, EFXSourceInteger3, Integer())
- uid: OpenTK.Audio.OpenAL.ALC.EFX.Source(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32,System.Int32,System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.Source(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32,System.Int32,System.Int32)
  id: Source(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32,System.Int32,System.Int32)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: Source(int, EFXSourceInteger3, int, int, int)
  nameWithType: ALC.EFX.Source(int, EFXSourceInteger3, int, int, int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.Source(int, OpenTK.Audio.OpenAL.EFXSourceInteger3, int, int, int)
  type: Method
  source:
    id: Source
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 708
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Sets the value of a named property on the given source.
  example: []
  syntax:
    content: public static void Source(int source, EFXSourceInteger3 param, int value1, int value2, int value3)
    parameters:
    - id: source
      type: System.Int32
      description: The source.
    - id: param
      type: OpenTK.Audio.OpenAL.EFXSourceInteger3
      description: The named property.
    - id: value1
      type: System.Int32
      description: The first value to set the property to.
    - id: value2
      type: System.Int32
      description: The second value to set the property to.
    - id: value3
      type: System.Int32
      description: The third value to set the property to.
    content.vb: Public Shared Sub Source(source As Integer, param As EFXSourceInteger3, value1 As Integer, value2 As Integer, value3 As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.Source*
  nameWithType.vb: ALC.EFX.Source(Integer, EFXSourceInteger3, Integer, Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.Source(Integer, OpenTK.Audio.OpenAL.EFXSourceInteger3, Integer, Integer, Integer)
  name.vb: Source(Integer, EFXSourceInteger3, Integer, Integer, Integer)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger,System.Int32*)
  id: GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger,System.Int32*)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetSource(int, EFXSourceInteger, int*)
  nameWithType: ALC.EFX.GetSource(int, EFXSourceInteger, int*)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(int, OpenTK.Audio.OpenAL.EFXSourceInteger, int*)
  type: Method
  source:
    id: GetSource
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 719
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given source.
  example: []
  syntax:
    content: public static void GetSource(int source, EFXSourceInteger param, int* value)
    parameters:
    - id: source
      type: System.Int32
      description: The source.
    - id: param
      type: OpenTK.Audio.OpenAL.EFXSourceInteger
      description: The named property.
    - id: value
      type: System.Int32*
      description: The value to set the property to.
    content.vb: Public Shared Sub GetSource(source As Integer, param As EFXSourceInteger, value As Integer*)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetSource*
  nameWithType.vb: ALC.EFX.GetSource(Integer, EFXSourceInteger, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(Integer, OpenTK.Audio.OpenAL.EFXSourceInteger, Integer*)
  name.vb: GetSource(Integer, EFXSourceInteger, Integer*)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger,System.Int32@)
  id: GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger,System.Int32@)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetSource(int, EFXSourceInteger, out int)
  nameWithType: ALC.EFX.GetSource(int, EFXSourceInteger, out int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(int, OpenTK.Audio.OpenAL.EFXSourceInteger, out int)
  type: Method
  source:
    id: GetSource
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 730
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given source.
  example: []
  syntax:
    content: public static void GetSource(int source, EFXSourceInteger param, out int value)
    parameters:
    - id: source
      type: System.Int32
      description: The source.
    - id: param
      type: OpenTK.Audio.OpenAL.EFXSourceInteger
      description: The named property.
    - id: value
      type: System.Int32
      description: The value to set the property to.
    content.vb: Public Shared Sub GetSource(source As Integer, param As EFXSourceInteger, value As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetSource*
  nameWithType.vb: ALC.EFX.GetSource(Integer, EFXSourceInteger, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(Integer, OpenTK.Audio.OpenAL.EFXSourceInteger, Integer)
  name.vb: GetSource(Integer, EFXSourceInteger, Integer)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceFloat,System.Single*)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceFloat,System.Single*)
  id: GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceFloat,System.Single*)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetSource(int, EFXSourceFloat, float*)
  nameWithType: ALC.EFX.GetSource(int, EFXSourceFloat, float*)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(int, OpenTK.Audio.OpenAL.EFXSourceFloat, float*)
  type: Method
  source:
    id: GetSource
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 741
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given source.
  example: []
  syntax:
    content: public static void GetSource(int source, EFXSourceFloat param, float* value)
    parameters:
    - id: source
      type: System.Int32
      description: The source.
    - id: param
      type: OpenTK.Audio.OpenAL.EFXSourceFloat
      description: The named property.
    - id: value
      type: System.Single*
      description: The value to set the property to.
    content.vb: Public Shared Sub GetSource(source As Integer, param As EFXSourceFloat, value As Single*)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetSource*
  nameWithType.vb: ALC.EFX.GetSource(Integer, EFXSourceFloat, Single*)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(Integer, OpenTK.Audio.OpenAL.EFXSourceFloat, Single*)
  name.vb: GetSource(Integer, EFXSourceFloat, Single*)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceFloat,System.Single@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceFloat,System.Single@)
  id: GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceFloat,System.Single@)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetSource(int, EFXSourceFloat, out float)
  nameWithType: ALC.EFX.GetSource(int, EFXSourceFloat, out float)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(int, OpenTK.Audio.OpenAL.EFXSourceFloat, out float)
  type: Method
  source:
    id: GetSource
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 752
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given source.
  example: []
  syntax:
    content: public static void GetSource(int source, EFXSourceFloat param, out float value)
    parameters:
    - id: source
      type: System.Int32
      description: The source.
    - id: param
      type: OpenTK.Audio.OpenAL.EFXSourceFloat
      description: The named property.
    - id: value
      type: System.Single
      description: The value to set the property to.
    content.vb: Public Shared Sub GetSource(source As Integer, param As EFXSourceFloat, value As Single)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetSource*
  nameWithType.vb: ALC.EFX.GetSource(Integer, EFXSourceFloat, Single)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(Integer, OpenTK.Audio.OpenAL.EFXSourceFloat, Single)
  name.vb: GetSource(Integer, EFXSourceFloat, Single)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceBoolean,System.Boolean*)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceBoolean,System.Boolean*)
  id: GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceBoolean,System.Boolean*)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetSource(int, EFXSourceBoolean, bool*)
  nameWithType: ALC.EFX.GetSource(int, EFXSourceBoolean, bool*)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(int, OpenTK.Audio.OpenAL.EFXSourceBoolean, bool*)
  type: Method
  source:
    id: GetSource
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 763
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given source.
  example: []
  syntax:
    content: public static void GetSource(int source, EFXSourceBoolean param, bool* value)
    parameters:
    - id: source
      type: System.Int32
      description: The source.
    - id: param
      type: OpenTK.Audio.OpenAL.EFXSourceBoolean
      description: The named property.
    - id: value
      type: System.Boolean*
      description: The value to set the property to.
    content.vb: Public Shared Sub GetSource(source As Integer, param As EFXSourceBoolean, value As Boolean*)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetSource*
  nameWithType.vb: ALC.EFX.GetSource(Integer, EFXSourceBoolean, Boolean*)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(Integer, OpenTK.Audio.OpenAL.EFXSourceBoolean, Boolean*)
  name.vb: GetSource(Integer, EFXSourceBoolean, Boolean*)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceBoolean,System.Boolean@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceBoolean,System.Boolean@)
  id: GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceBoolean,System.Boolean@)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetSource(int, EFXSourceBoolean, out bool)
  nameWithType: ALC.EFX.GetSource(int, EFXSourceBoolean, out bool)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(int, OpenTK.Audio.OpenAL.EFXSourceBoolean, out bool)
  type: Method
  source:
    id: GetSource
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 774
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given source.
  example: []
  syntax:
    content: public static void GetSource(int source, EFXSourceBoolean param, out bool value)
    parameters:
    - id: source
      type: System.Int32
      description: The source.
    - id: param
      type: OpenTK.Audio.OpenAL.EFXSourceBoolean
      description: The named property.
    - id: value
      type: System.Boolean
      description: The value to set the property to.
    content.vb: Public Shared Sub GetSource(source As Integer, param As EFXSourceBoolean, value As Boolean)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetSource*
  nameWithType.vb: ALC.EFX.GetSource(Integer, EFXSourceBoolean, Boolean)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(Integer, OpenTK.Audio.OpenAL.EFXSourceBoolean, Boolean)
  name.vb: GetSource(Integer, EFXSourceBoolean, Boolean)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32*)
  id: GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32*)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetSource(int, EFXSourceInteger3, int*)
  nameWithType: ALC.EFX.GetSource(int, EFXSourceInteger3, int*)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(int, OpenTK.Audio.OpenAL.EFXSourceInteger3, int*)
  type: Method
  source:
    id: GetSource
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 785
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given source.
  example: []
  syntax:
    content: public static void GetSource(int source, EFXSourceInteger3 param, int* value)
    parameters:
    - id: source
      type: System.Int32
      description: The source.
    - id: param
      type: OpenTK.Audio.OpenAL.EFXSourceInteger3
      description: The named property.
    - id: value
      type: System.Int32*
      description: The value to set the property to.
    content.vb: Public Shared Sub GetSource(source As Integer, param As EFXSourceInteger3, value As Integer*)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetSource*
  nameWithType.vb: ALC.EFX.GetSource(Integer, EFXSourceInteger3, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(Integer, OpenTK.Audio.OpenAL.EFXSourceInteger3, Integer*)
  name.vb: GetSource(Integer, EFXSourceInteger3, Integer*)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32@)
  id: GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32@)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetSource(int, EFXSourceInteger3, ref int)
  nameWithType: ALC.EFX.GetSource(int, EFXSourceInteger3, ref int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(int, OpenTK.Audio.OpenAL.EFXSourceInteger3, ref int)
  type: Method
  source:
    id: GetSource
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 796
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given source.
  example: []
  syntax:
    content: public static void GetSource(int source, EFXSourceInteger3 param, ref int value)
    parameters:
    - id: source
      type: System.Int32
      description: The source.
    - id: param
      type: OpenTK.Audio.OpenAL.EFXSourceInteger3
      description: The named property.
    - id: value
      type: System.Int32
      description: The value to set the property to.
    content.vb: Public Shared Sub GetSource(source As Integer, param As EFXSourceInteger3, value As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetSource*
  nameWithType.vb: ALC.EFX.GetSource(Integer, EFXSourceInteger3, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(Integer, OpenTK.Audio.OpenAL.EFXSourceInteger3, Integer)
  name.vb: GetSource(Integer, EFXSourceInteger3, Integer)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32[])
  id: GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32[])
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetSource(int, EFXSourceInteger3, int[])
  nameWithType: ALC.EFX.GetSource(int, EFXSourceInteger3, int[])
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(int, OpenTK.Audio.OpenAL.EFXSourceInteger3, int[])
  type: Method
  source:
    id: GetSource
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 807
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given source.
  example: []
  syntax:
    content: public static void GetSource(int source, EFXSourceInteger3 param, int[] value)
    parameters:
    - id: source
      type: System.Int32
      description: The source.
    - id: param
      type: OpenTK.Audio.OpenAL.EFXSourceInteger3
      description: The named property.
    - id: value
      type: System.Int32[]
      description: The value to set the property to.
    content.vb: Public Shared Sub GetSource(source As Integer, param As EFXSourceInteger3, value As Integer())
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetSource*
  nameWithType.vb: ALC.EFX.GetSource(Integer, EFXSourceInteger3, Integer())
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(Integer, OpenTK.Audio.OpenAL.EFXSourceInteger3, Integer())
  name.vb: GetSource(Integer, EFXSourceInteger3, Integer())
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32*,System.Int32*,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32*,System.Int32*,System.Int32*)
  id: GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32*,System.Int32*,System.Int32*)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetSource(int, EFXSourceInteger3, int*, int*, int*)
  nameWithType: ALC.EFX.GetSource(int, EFXSourceInteger3, int*, int*, int*)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(int, OpenTK.Audio.OpenAL.EFXSourceInteger3, int*, int*, int*)
  type: Method
  source:
    id: GetSource
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 820
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given source.
  example: []
  syntax:
    content: public static void GetSource(int source, EFXSourceInteger3 param, int* value1, int* value2, int* value3)
    parameters:
    - id: source
      type: System.Int32
      description: The source.
    - id: param
      type: OpenTK.Audio.OpenAL.EFXSourceInteger3
      description: The named property.
    - id: value1
      type: System.Int32*
      description: The first value to set the property to.
    - id: value2
      type: System.Int32*
      description: The second value to set the property to.
    - id: value3
      type: System.Int32*
      description: The third value to set the property to.
    content.vb: Public Shared Sub GetSource(source As Integer, param As EFXSourceInteger3, value1 As Integer*, value2 As Integer*, value3 As Integer*)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetSource*
  nameWithType.vb: ALC.EFX.GetSource(Integer, EFXSourceInteger3, Integer*, Integer*, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(Integer, OpenTK.Audio.OpenAL.EFXSourceInteger3, Integer*, Integer*, Integer*)
  name.vb: GetSource(Integer, EFXSourceInteger3, Integer*, Integer*, Integer*)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32@,System.Int32@,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32@,System.Int32@,System.Int32@)
  id: GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger3,System.Int32@,System.Int32@,System.Int32@)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetSource(int, EFXSourceInteger3, out int, out int, out int)
  nameWithType: ALC.EFX.GetSource(int, EFXSourceInteger3, out int, out int, out int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(int, OpenTK.Audio.OpenAL.EFXSourceInteger3, out int, out int, out int)
  type: Method
  source:
    id: GetSource
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 833
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given source.
  example: []
  syntax:
    content: public static void GetSource(int source, EFXSourceInteger3 param, out int value1, out int value2, out int value3)
    parameters:
    - id: source
      type: System.Int32
      description: The source.
    - id: param
      type: OpenTK.Audio.OpenAL.EFXSourceInteger3
      description: The named property.
    - id: value1
      type: System.Int32
      description: The first value to set the property to.
    - id: value2
      type: System.Int32
      description: The second value to set the property to.
    - id: value3
      type: System.Int32
      description: The third value to set the property to.
    content.vb: Public Shared Sub GetSource(source As Integer, param As EFXSourceInteger3, value1 As Integer, value2 As Integer, value3 As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetSource*
  nameWithType.vb: ALC.EFX.GetSource(Integer, EFXSourceInteger3, Integer, Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(Integer, OpenTK.Audio.OpenAL.EFXSourceInteger3, Integer, Integer, Integer)
  name.vb: GetSource(Integer, EFXSourceInteger3, Integer, Integer, Integer)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.Listener(System.Int32,OpenTK.Audio.OpenAL.EFXListenerFloat,System.Single)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.Listener(System.Int32,OpenTK.Audio.OpenAL.EFXListenerFloat,System.Single)
  id: Listener(System.Int32,OpenTK.Audio.OpenAL.EFXListenerFloat,System.Single)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: Listener(int, EFXListenerFloat, float)
  nameWithType: ALC.EFX.Listener(int, EFXListenerFloat, float)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.Listener(int, OpenTK.Audio.OpenAL.EFXListenerFloat, float)
  type: Method
  source:
    id: Listener
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 844
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Sets the value of a named property on the given listener.
  example: []
  syntax:
    content: public static void Listener(int listener, EFXListenerFloat param, float value)
    parameters:
    - id: listener
      type: System.Int32
      description: The listener.
    - id: param
      type: OpenTK.Audio.OpenAL.EFXListenerFloat
      description: The named property.
    - id: value
      type: System.Single
      description: The value to set the property to.
    content.vb: Public Shared Sub Listener(listener As Integer, param As EFXListenerFloat, value As Single)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.Listener*
  nameWithType.vb: ALC.EFX.Listener(Integer, EFXListenerFloat, Single)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.Listener(Integer, OpenTK.Audio.OpenAL.EFXListenerFloat, Single)
  name.vb: Listener(Integer, EFXListenerFloat, Single)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetListener(System.Int32,OpenTK.Audio.OpenAL.EFXListenerFloat,System.Single*)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetListener(System.Int32,OpenTK.Audio.OpenAL.EFXListenerFloat,System.Single*)
  id: GetListener(System.Int32,OpenTK.Audio.OpenAL.EFXListenerFloat,System.Single*)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetListener(int, EFXListenerFloat, float*)
  nameWithType: ALC.EFX.GetListener(int, EFXListenerFloat, float*)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetListener(int, OpenTK.Audio.OpenAL.EFXListenerFloat, float*)
  type: Method
  source:
    id: GetListener
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 855
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given listener.
  example: []
  syntax:
    content: public static void GetListener(int listener, EFXListenerFloat param, float* value)
    parameters:
    - id: listener
      type: System.Int32
      description: The listener.
    - id: param
      type: OpenTK.Audio.OpenAL.EFXListenerFloat
      description: The named property.
    - id: value
      type: System.Single*
      description: The value to set the property to.
    content.vb: Public Shared Sub GetListener(listener As Integer, param As EFXListenerFloat, value As Single*)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetListener*
  nameWithType.vb: ALC.EFX.GetListener(Integer, EFXListenerFloat, Single*)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetListener(Integer, OpenTK.Audio.OpenAL.EFXListenerFloat, Single*)
  name.vb: GetListener(Integer, EFXListenerFloat, Single*)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetListener(System.Int32,OpenTK.Audio.OpenAL.EFXListenerFloat,System.Single@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetListener(System.Int32,OpenTK.Audio.OpenAL.EFXListenerFloat,System.Single@)
  id: GetListener(System.Int32,OpenTK.Audio.OpenAL.EFXListenerFloat,System.Single@)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetListener(int, EFXListenerFloat, out float)
  nameWithType: ALC.EFX.GetListener(int, EFXListenerFloat, out float)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetListener(int, OpenTK.Audio.OpenAL.EFXListenerFloat, out float)
  type: Method
  source:
    id: GetListener
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 866
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given listener.
  example: []
  syntax:
    content: public static void GetListener(int listener, EFXListenerFloat param, out float value)
    parameters:
    - id: listener
      type: System.Int32
      description: The listener.
    - id: param
      type: OpenTK.Audio.OpenAL.EFXListenerFloat
      description: The named property.
    - id: value
      type: System.Single
      description: The value to set the property to.
    content.vb: Public Shared Sub GetListener(listener As Integer, param As EFXListenerFloat, value As Single)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetListener*
  nameWithType.vb: ALC.EFX.GetListener(Integer, EFXListenerFloat, Single)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetListener(Integer, OpenTK.Audio.OpenAL.EFXListenerFloat, Single)
  name.vb: GetListener(Integer, EFXListenerFloat, Single)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32[])
  id: GenAuxiliaryEffectSlots(System.Int32[])
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GenAuxiliaryEffectSlots(int[])
  nameWithType: ALC.EFX.GenAuxiliaryEffectSlots(int[])
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(int[])
  type: Method
  source:
    id: GenAuxiliaryEffectSlots
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 880
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Creates one or more auxiliary effect slots.
  example: []
  syntax:
    content: public static void GenAuxiliaryEffectSlots(int[] slots)
    parameters:
    - id: slots
      type: System.Int32[]
      description: An array to fill with created slots.
    content.vb: Public Shared Sub GenAuxiliaryEffectSlots(slots As Integer())
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32[])
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32[])
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(System.Int32)
  nameWithType.vb: ALC.EFX.GenAuxiliaryEffectSlots(Integer())
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(Integer())
  name.vb: GenAuxiliaryEffectSlots(Integer())
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32)
  id: GenAuxiliaryEffectSlots(System.Int32)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GenAuxiliaryEffectSlots(int)
  nameWithType: ALC.EFX.GenAuxiliaryEffectSlots(int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(int)
  type: Method
  source:
    id: GenAuxiliaryEffectSlots
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 892
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Creates one or more auxiliary effect slots.
  example: []
  syntax:
    content: public static int[] GenAuxiliaryEffectSlots(int count)
    parameters:
    - id: count
      type: System.Int32
      description: The number of slots to create.
    return:
      type: System.Int32[]
      description: The slots.
    content.vb: Public Shared Function GenAuxiliaryEffectSlots(count As Integer) As Integer()
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32[])
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32[])
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(System.Int32)
  nameWithType.vb: ALC.EFX.GenAuxiliaryEffectSlots(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(Integer)
  name.vb: GenAuxiliaryEffectSlots(Integer)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlot
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlot
  id: GenAuxiliaryEffectSlot
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GenAuxiliaryEffectSlot()
  nameWithType: ALC.EFX.GenAuxiliaryEffectSlot()
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlot()
  type: Method
  source:
    id: GenAuxiliaryEffectSlot
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 905
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Creates an auxiliary effect slot.
  example: []
  syntax:
    content: public static int GenAuxiliaryEffectSlot()
    return:
      type: System.Int32
      description: The slot.
    content.vb: Public Shared Function GenAuxiliaryEffectSlot() As Integer
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlot*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlot(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlot(System.Int32)
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(System.Int32)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlot(System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlot(System.Int32@)
  id: GenAuxiliaryEffectSlot(System.Int32@)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GenAuxiliaryEffectSlot(out int)
  nameWithType: ALC.EFX.GenAuxiliaryEffectSlot(out int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlot(out int)
  type: Method
  source:
    id: GenAuxiliaryEffectSlot
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 918
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Creates an auxiliary effect slot.
  example: []
  syntax:
    content: public static void GenAuxiliaryEffectSlot(out int slot)
    parameters:
    - id: slot
      type: System.Int32
      description: The generated slot.
    content.vb: Public Shared Sub GenAuxiliaryEffectSlot(slot As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlot*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlot(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlot(System.Int32)
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(System.Int32)
  nameWithType.vb: ALC.EFX.GenAuxiliaryEffectSlot(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlot(Integer)
  name.vb: GenAuxiliaryEffectSlot(Integer)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32[])
  id: DeleteAuxiliaryEffectSlots(System.Int32[])
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: DeleteAuxiliaryEffectSlots(int[])
  nameWithType: ALC.EFX.DeleteAuxiliaryEffectSlots(int[])
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(int[])
  type: Method
  source:
    id: DeleteAuxiliaryEffectSlots
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 931
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Deletes and frees resources used for a set of auxiliary effect slots.
  example: []
  syntax:
    content: public static void DeleteAuxiliaryEffectSlots(int[] slots)
    parameters:
    - id: slots
      type: System.Int32[]
      description: An array of slots to delete.
    content.vb: Public Shared Sub DeleteAuxiliaryEffectSlots(slots As Integer())
  overload: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32)
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(System.Int32)
  nameWithType.vb: ALC.EFX.DeleteAuxiliaryEffectSlots(Integer())
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(Integer())
  name.vb: DeleteAuxiliaryEffectSlots(Integer())
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlot(System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlot(System.Int32)
  id: DeleteAuxiliaryEffectSlot(System.Int32)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: DeleteAuxiliaryEffectSlot(int)
  nameWithType: ALC.EFX.DeleteAuxiliaryEffectSlot(int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlot(int)
  type: Method
  source:
    id: DeleteAuxiliaryEffectSlot
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 942
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Deletes and frees resources used an auxiliary effect slot.
  example: []
  syntax:
    content: public static void DeleteAuxiliaryEffectSlot(int slot)
    parameters:
    - id: slot
      type: System.Int32
      description: The slot to delete.
    content.vb: Public Shared Sub DeleteAuxiliaryEffectSlot(slot As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlot*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlot
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlot
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(System.Int32)
  nameWithType.vb: ALC.EFX.DeleteAuxiliaryEffectSlot(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlot(Integer)
  name.vb: DeleteAuxiliaryEffectSlot(Integer)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotInteger)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotInteger)
  id: GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotInteger)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetAuxiliaryEffectSlot(int, EffectSlotInteger)
  nameWithType: ALC.EFX.GetAuxiliaryEffectSlot(int, EffectSlotInteger)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot(int, OpenTK.Audio.OpenAL.EffectSlotInteger)
  type: Method
  source:
    id: GetAuxiliaryEffectSlot
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 953
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given effect slot.
  example: []
  syntax:
    content: public static int GetAuxiliaryEffectSlot(int slot, EffectSlotInteger param)
    parameters:
    - id: slot
      type: System.Int32
      description: The slot.
    - id: param
      type: OpenTK.Audio.OpenAL.EffectSlotInteger
      description: The named property.
    return:
      type: System.Int32
      description: The value.
    content.vb: Public Shared Function GetAuxiliaryEffectSlot(slot As Integer, param As EffectSlotInteger) As Integer
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot*
  nameWithType.vb: ALC.EFX.GetAuxiliaryEffectSlot(Integer, EffectSlotInteger)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot(Integer, OpenTK.Audio.OpenAL.EffectSlotInteger)
  name.vb: GetAuxiliaryEffectSlot(Integer, EffectSlotInteger)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotFloat)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotFloat)
  id: GetAuxiliaryEffectSlot(System.Int32,OpenTK.Audio.OpenAL.EffectSlotFloat)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetAuxiliaryEffectSlot(int, EffectSlotFloat)
  nameWithType: ALC.EFX.GetAuxiliaryEffectSlot(int, EffectSlotFloat)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot(int, OpenTK.Audio.OpenAL.EffectSlotFloat)
  type: Method
  source:
    id: GetAuxiliaryEffectSlot
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 965
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given effect slot.
  example: []
  syntax:
    content: public static float GetAuxiliaryEffectSlot(int slot, EffectSlotFloat param)
    parameters:
    - id: slot
      type: System.Int32
      description: The slot.
    - id: param
      type: OpenTK.Audio.OpenAL.EffectSlotFloat
      description: The named property.
    return:
      type: System.Single
      description: The value.
    content.vb: Public Shared Function GetAuxiliaryEffectSlot(slot As Integer, param As EffectSlotFloat) As Single
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot*
  nameWithType.vb: ALC.EFX.GetAuxiliaryEffectSlot(Integer, EffectSlotFloat)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot(Integer, OpenTK.Audio.OpenAL.EffectSlotFloat)
  name.vb: GetAuxiliaryEffectSlot(Integer, EffectSlotFloat)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32[])
  id: GenEffects(System.Int32[])
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GenEffects(int[])
  nameWithType: ALC.EFX.GenEffects(int[])
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(int[])
  type: Method
  source:
    id: GenEffects
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 977
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Creates one or more effects.
  example: []
  syntax:
    content: public static void GenEffects(int[] effects)
    parameters:
    - id: effects
      type: System.Int32[]
      description: An arrays to fill with the generated effects.
    content.vb: Public Shared Sub GenEffects(effects As Integer())
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32[])
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32[])
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(System.Int32)
  nameWithType.vb: ALC.EFX.GenEffects(Integer())
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(Integer())
  name.vb: GenEffects(Integer())
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32)
  id: GenEffects(System.Int32)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GenEffects(int)
  nameWithType: ALC.EFX.GenEffects(int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(int)
  type: Method
  source:
    id: GenEffects
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 989
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Creates one or more effects.
  example: []
  syntax:
    content: public static int[] GenEffects(int count)
    parameters:
    - id: count
      type: System.Int32
      description: The number of effects to create.
    return:
      type: System.Int32[]
      description: The effects.
    content.vb: Public Shared Function GenEffects(count As Integer) As Integer()
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32[])
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32[])
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(System.Int32)
  nameWithType.vb: ALC.EFX.GenEffects(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(Integer)
  name.vb: GenEffects(Integer)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenEffect
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenEffect
  id: GenEffect
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GenEffect()
  nameWithType: ALC.EFX.GenEffect()
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenEffect()
  type: Method
  source:
    id: GenEffect
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 1002
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Creates an effect.
  example: []
  syntax:
    content: public static int GenEffect()
    return:
      type: System.Int32
      description: The effect.
    content.vb: Public Shared Function GenEffect() As Integer
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GenEffect*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffect(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffect(System.Int32)
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(System.Int32)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenEffect(System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenEffect(System.Int32@)
  id: GenEffect(System.Int32@)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GenEffect(out int)
  nameWithType: ALC.EFX.GenEffect(out int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenEffect(out int)
  type: Method
  source:
    id: GenEffect
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 1015
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Creates an effect.
  example: []
  syntax:
    content: public static void GenEffect(out int effect)
    parameters:
    - id: effect
      type: System.Int32
      description: The effect.
    content.vb: Public Shared Sub GenEffect(effect As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GenEffect*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffect(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffect(System.Int32)
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(System.Int32)
  nameWithType.vb: ALC.EFX.GenEffect(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GenEffect(Integer)
  name.vb: GenEffect(Integer)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32[])
  id: DeleteEffects(System.Int32[])
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: DeleteEffects(int[])
  nameWithType: ALC.EFX.DeleteEffects(int[])
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(int[])
  type: Method
  source:
    id: DeleteEffects
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 1028
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Deletes and frees resources used for a set of effects.
  example: []
  syntax:
    content: public static void DeleteEffects(int[] effects)
    parameters:
    - id: effects
      type: System.Int32[]
      description: An array of effects to delete.
    content.vb: Public Shared Sub DeleteEffects(effects As Integer())
  overload: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32)
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(System.Int32)
  nameWithType.vb: ALC.EFX.DeleteEffects(Integer())
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(Integer())
  name.vb: DeleteEffects(Integer())
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffect(System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffect(System.Int32)
  id: DeleteEffect(System.Int32)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: DeleteEffect(int)
  nameWithType: ALC.EFX.DeleteEffect(int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffect(int)
  type: Method
  source:
    id: DeleteEffect
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 1039
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Deletes and frees resources used an effect.
  example: []
  syntax:
    content: public static void DeleteEffect(int effect)
    parameters:
    - id: effect
      type: System.Int32
      description: The effect to delete.
    content.vb: Public Shared Sub DeleteEffect(effect As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffect*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.GenEffect
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenEffect
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(System.Int32)
  nameWithType.vb: ALC.EFX.DeleteEffect(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffect(Integer)
  name.vb: DeleteEffect(Integer)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.Effect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3,OpenTK.Mathematics.Vector3@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.Effect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3,OpenTK.Mathematics.Vector3@)
  id: Effect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3,OpenTK.Mathematics.Vector3@)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: Effect(int, EffectVector3, ref Vector3)
  nameWithType: ALC.EFX.Effect(int, EffectVector3, ref Vector3)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.Effect(int, OpenTK.Audio.OpenAL.EffectVector3, ref OpenTK.Mathematics.Vector3)
  type: Method
  source:
    id: Effect
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 1050
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Sets the vector value of a named property on the given effect.
  example: []
  syntax:
    content: public static void Effect(int effect, EffectVector3 param, ref Vector3 value)
    parameters:
    - id: effect
      type: System.Int32
      description: The effect.
    - id: param
      type: OpenTK.Audio.OpenAL.EffectVector3
      description: The named property.
    - id: value
      type: OpenTK.Mathematics.Vector3
      description: The value to set the property to.
    content.vb: Public Shared Sub Effect(effect As Integer, param As EffectVector3, value As Vector3)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.Effect*
  nameWithType.vb: ALC.EFX.Effect(Integer, EffectVector3, Vector3)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.Effect(Integer, OpenTK.Audio.OpenAL.EffectVector3, OpenTK.Mathematics.Vector3)
  name.vb: Effect(Integer, EffectVector3, Vector3)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectFloat)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectFloat)
  id: GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectFloat)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetEffect(int, EffectFloat)
  nameWithType: ALC.EFX.GetEffect(int, EffectFloat)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(int, OpenTK.Audio.OpenAL.EffectFloat)
  type: Method
  source:
    id: GetEffect
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 1061
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given effect.
  example: []
  syntax:
    content: public static float GetEffect(int effect, EffectFloat param)
    parameters:
    - id: effect
      type: System.Int32
      description: The effect.
    - id: param
      type: OpenTK.Audio.OpenAL.EffectFloat
      description: The named property.
    return:
      type: System.Single
      description: The value.
    content.vb: Public Shared Function GetEffect(effect As Integer, param As EffectFloat) As Single
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect*
  nameWithType.vb: ALC.EFX.GetEffect(Integer, EffectFloat)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(Integer, OpenTK.Audio.OpenAL.EffectFloat)
  name.vb: GetEffect(Integer, EffectFloat)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectInteger)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectInteger)
  id: GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectInteger)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetEffect(int, EffectInteger)
  nameWithType: ALC.EFX.GetEffect(int, EffectInteger)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(int, OpenTK.Audio.OpenAL.EffectInteger)
  type: Method
  source:
    id: GetEffect
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 1073
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given effect.
  example: []
  syntax:
    content: public static int GetEffect(int effect, EffectInteger param)
    parameters:
    - id: effect
      type: System.Int32
      description: The effect.
    - id: param
      type: OpenTK.Audio.OpenAL.EffectInteger
      description: The named property.
    return:
      type: System.Int32
      description: The value.
    content.vb: Public Shared Function GetEffect(effect As Integer, param As EffectInteger) As Integer
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect*
  nameWithType.vb: ALC.EFX.GetEffect(Integer, EffectInteger)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(Integer, OpenTK.Audio.OpenAL.EffectInteger)
  name.vb: GetEffect(Integer, EffectInteger)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3,OpenTK.Mathematics.Vector3@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3,OpenTK.Mathematics.Vector3@)
  id: GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3,OpenTK.Mathematics.Vector3@)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetEffect(int, EffectVector3, out Vector3)
  nameWithType: ALC.EFX.GetEffect(int, EffectVector3, out Vector3)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(int, OpenTK.Audio.OpenAL.EffectVector3, out OpenTK.Mathematics.Vector3)
  type: Method
  source:
    id: GetEffect
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 1085
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the vector value of a named property on the given effect.
  example: []
  syntax:
    content: public static void GetEffect(int effect, EffectVector3 param, out Vector3 value)
    parameters:
    - id: effect
      type: System.Int32
      description: The effect.
    - id: param
      type: OpenTK.Audio.OpenAL.EffectVector3
      description: The named property.
    - id: value
      type: OpenTK.Mathematics.Vector3
      description: The value to set the property to.
    content.vb: Public Shared Sub GetEffect(effect As Integer, param As EffectVector3, value As Vector3)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect*
  nameWithType.vb: ALC.EFX.GetEffect(Integer, EffectVector3, Vector3)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(Integer, OpenTK.Audio.OpenAL.EffectVector3, OpenTK.Mathematics.Vector3)
  name.vb: GetEffect(Integer, EffectVector3, Vector3)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3)
  id: GetEffect(System.Int32,OpenTK.Audio.OpenAL.EffectVector3)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetEffect(int, EffectVector3)
  nameWithType: ALC.EFX.GetEffect(int, EffectVector3)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(int, OpenTK.Audio.OpenAL.EffectVector3)
  type: Method
  source:
    id: GetEffect
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 1101
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given effect.
  example: []
  syntax:
    content: public static Vector3 GetEffect(int effect, EffectVector3 param)
    parameters:
    - id: effect
      type: System.Int32
      description: The effect.
    - id: param
      type: OpenTK.Audio.OpenAL.EffectVector3
      description: The named property.
    return:
      type: OpenTK.Mathematics.Vector3
      description: The value.
    content.vb: Public Shared Function GetEffect(effect As Integer, param As EffectVector3) As Vector3
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect*
  nameWithType.vb: ALC.EFX.GetEffect(Integer, EffectVector3)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect(Integer, OpenTK.Audio.OpenAL.EffectVector3)
  name.vb: GetEffect(Integer, EffectVector3)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32[])
  id: GenFilters(System.Int32[])
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GenFilters(int[])
  nameWithType: ALC.EFX.GenFilters(int[])
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(int[])
  type: Method
  source:
    id: GenFilters
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 1113
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Creates one or more filters.
  example: []
  syntax:
    content: public static void GenFilters(int[] filters)
    parameters:
    - id: filters
      type: System.Int32[]
      description: An array to fill with the generated filters.
    content.vb: Public Shared Sub GenFilters(filters As Integer())
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32[])
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32[])
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(System.Int32)
  nameWithType.vb: ALC.EFX.GenFilters(Integer())
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(Integer())
  name.vb: GenFilters(Integer())
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32)
  id: GenFilters(System.Int32)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GenFilters(int)
  nameWithType: ALC.EFX.GenFilters(int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(int)
  type: Method
  source:
    id: GenFilters
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 1125
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Creates one or more filters.
  example: []
  syntax:
    content: public static int[] GenFilters(int count)
    parameters:
    - id: count
      type: System.Int32
      description: The number of filters to create.
    return:
      type: System.Int32[]
      description: The filters.
    content.vb: Public Shared Function GenFilters(count As Integer) As Integer()
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32[])
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32[])
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(System.Int32)
  nameWithType.vb: ALC.EFX.GenFilters(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(Integer)
  name.vb: GenFilters(Integer)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenFilter
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenFilter
  id: GenFilter
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GenFilter()
  nameWithType: ALC.EFX.GenFilter()
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenFilter()
  type: Method
  source:
    id: GenFilter
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 1138
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Creates an filter.
  example: []
  syntax:
    content: public static int GenFilter()
    return:
      type: System.Int32
      description: The filter.
    content.vb: Public Shared Function GenFilter() As Integer
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GenFilter*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilter(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilter(System.Int32)
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(System.Int32)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenFilter(System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenFilter(System.Int32@)
  id: GenFilter(System.Int32@)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GenFilter(out int)
  nameWithType: ALC.EFX.GenFilter(out int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenFilter(out int)
  type: Method
  source:
    id: GenFilter
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 1151
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Creates an filter.
  example: []
  syntax:
    content: public static void GenFilter(out int filter)
    parameters:
    - id: filter
      type: System.Int32
      description: The filter.
    content.vb: Public Shared Sub GenFilter(filter As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GenFilter*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilter(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilter(System.Int32)
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(System.Int32)
  nameWithType.vb: ALC.EFX.GenFilter(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GenFilter(Integer)
  name.vb: GenFilter(Integer)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32[])
  id: DeleteFilters(System.Int32[])
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: DeleteFilters(int[])
  nameWithType: ALC.EFX.DeleteFilters(int[])
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(int[])
  type: Method
  source:
    id: DeleteFilters
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 1164
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Deletes and frees resources used for a set of filters.
  example: []
  syntax:
    content: public static void DeleteFilters(int[] filters)
    parameters:
    - id: filters
      type: System.Int32[]
      description: An array of filters to delete.
    content.vb: Public Shared Sub DeleteFilters(filters As Integer())
  overload: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32)
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(System.Int32)
  nameWithType.vb: ALC.EFX.DeleteFilters(Integer())
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(Integer())
  name.vb: DeleteFilters(Integer())
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilter(System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilter(System.Int32)
  id: DeleteFilter(System.Int32)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: DeleteFilter(int)
  nameWithType: ALC.EFX.DeleteFilter(int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilter(int)
  type: Method
  source:
    id: DeleteFilter
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 1175
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Deletes and frees resources used an filter.
  example: []
  syntax:
    content: public static void DeleteFilter(int filter)
    parameters:
    - id: filter
      type: System.Int32
      description: The filter to delete.
    content.vb: Public Shared Sub DeleteFilter(filter As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilter*
  seealso:
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.GenFilter
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenFilter
  - linkId: OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(System.Int32)
    commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(System.Int32)
  nameWithType.vb: ALC.EFX.DeleteFilter(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilter(Integer)
  name.vb: DeleteFilter(Integer)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetFilter(System.Int32,OpenTK.Audio.OpenAL.FilterInteger)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetFilter(System.Int32,OpenTK.Audio.OpenAL.FilterInteger)
  id: GetFilter(System.Int32,OpenTK.Audio.OpenAL.FilterInteger)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetFilter(int, FilterInteger)
  nameWithType: ALC.EFX.GetFilter(int, FilterInteger)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetFilter(int, OpenTK.Audio.OpenAL.FilterInteger)
  type: Method
  source:
    id: GetFilter
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 1186
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given filter.
  example: []
  syntax:
    content: public static int GetFilter(int filter, FilterInteger param)
    parameters:
    - id: filter
      type: System.Int32
      description: The filter.
    - id: param
      type: OpenTK.Audio.OpenAL.FilterInteger
      description: The named property.
    return:
      type: System.Int32
      description: The value.
    content.vb: Public Shared Function GetFilter(filter As Integer, param As FilterInteger) As Integer
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetFilter*
  nameWithType.vb: ALC.EFX.GetFilter(Integer, FilterInteger)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetFilter(Integer, OpenTK.Audio.OpenAL.FilterInteger)
  name.vb: GetFilter(Integer, FilterInteger)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetFilter(System.Int32,OpenTK.Audio.OpenAL.FilterFloat)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetFilter(System.Int32,OpenTK.Audio.OpenAL.FilterFloat)
  id: GetFilter(System.Int32,OpenTK.Audio.OpenAL.FilterFloat)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetFilter(int, FilterFloat)
  nameWithType: ALC.EFX.GetFilter(int, FilterFloat)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetFilter(int, OpenTK.Audio.OpenAL.FilterFloat)
  type: Method
  source:
    id: GetFilter
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 1198
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given filter.
  example: []
  syntax:
    content: public static float GetFilter(int filter, FilterFloat param)
    parameters:
    - id: filter
      type: System.Int32
      description: The filter.
    - id: param
      type: OpenTK.Audio.OpenAL.FilterFloat
      description: The named property.
    return:
      type: System.Single
      description: The value.
    content.vb: Public Shared Function GetFilter(filter As Integer, param As FilterFloat) As Single
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetFilter*
  nameWithType.vb: ALC.EFX.GetFilter(Integer, FilterFloat)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetFilter(Integer, OpenTK.Audio.OpenAL.FilterFloat)
  name.vb: GetFilter(Integer, FilterFloat)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger)
  id: GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceInteger)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetSource(int, EFXSourceInteger)
  nameWithType: ALC.EFX.GetSource(int, EFXSourceInteger)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(int, OpenTK.Audio.OpenAL.EFXSourceInteger)
  type: Method
  source:
    id: GetSource
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 1210
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given source.
  example: []
  syntax:
    content: public static int GetSource(int source, EFXSourceInteger param)
    parameters:
    - id: source
      type: System.Int32
      description: The source.
    - id: param
      type: OpenTK.Audio.OpenAL.EFXSourceInteger
      description: The named property.
    return:
      type: System.Int32
      description: The value.
    content.vb: Public Shared Function GetSource(source As Integer, param As EFXSourceInteger) As Integer
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetSource*
  nameWithType.vb: ALC.EFX.GetSource(Integer, EFXSourceInteger)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(Integer, OpenTK.Audio.OpenAL.EFXSourceInteger)
  name.vb: GetSource(Integer, EFXSourceInteger)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceFloat)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceFloat)
  id: GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceFloat)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetSource(int, EFXSourceFloat)
  nameWithType: ALC.EFX.GetSource(int, EFXSourceFloat)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(int, OpenTK.Audio.OpenAL.EFXSourceFloat)
  type: Method
  source:
    id: GetSource
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 1222
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given source.
  example: []
  syntax:
    content: public static float GetSource(int source, EFXSourceFloat param)
    parameters:
    - id: source
      type: System.Int32
      description: The source.
    - id: param
      type: OpenTK.Audio.OpenAL.EFXSourceFloat
      description: The named property.
    return:
      type: System.Single
      description: The value.
    content.vb: Public Shared Function GetSource(source As Integer, param As EFXSourceFloat) As Single
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetSource*
  nameWithType.vb: ALC.EFX.GetSource(Integer, EFXSourceFloat)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(Integer, OpenTK.Audio.OpenAL.EFXSourceFloat)
  name.vb: GetSource(Integer, EFXSourceFloat)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceBoolean)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceBoolean)
  id: GetSource(System.Int32,OpenTK.Audio.OpenAL.EFXSourceBoolean)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetSource(int, EFXSourceBoolean)
  nameWithType: ALC.EFX.GetSource(int, EFXSourceBoolean)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(int, OpenTK.Audio.OpenAL.EFXSourceBoolean)
  type: Method
  source:
    id: GetSource
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 1234
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given source.
  example: []
  syntax:
    content: public static bool GetSource(int source, EFXSourceBoolean param)
    parameters:
    - id: source
      type: System.Int32
      description: The source.
    - id: param
      type: OpenTK.Audio.OpenAL.EFXSourceBoolean
      description: The named property.
    return:
      type: System.Boolean
      description: The value.
    content.vb: Public Shared Function GetSource(source As Integer, param As EFXSourceBoolean) As Boolean
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetSource*
  nameWithType.vb: ALC.EFX.GetSource(Integer, EFXSourceBoolean)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetSource(Integer, OpenTK.Audio.OpenAL.EFXSourceBoolean)
  name.vb: GetSource(Integer, EFXSourceBoolean)
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetListener(System.Int32,OpenTK.Audio.OpenAL.EFXListenerFloat)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GetListener(System.Int32,OpenTK.Audio.OpenAL.EFXListenerFloat)
  id: GetListener(System.Int32,OpenTK.Audio.OpenAL.EFXListenerFloat)
  parent: OpenTK.Audio.OpenAL.ALC.EFX
  langs:
  - csharp
  - vb
  name: GetListener(int, EFXListenerFloat)
  nameWithType: ALC.EFX.GetListener(int, EFXListenerFloat)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetListener(int, OpenTK.Audio.OpenAL.EFXListenerFloat)
  type: Method
  source:
    id: GetListener
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\Creative.EFX\EFX.cs
    startLine: 1246
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets the value of a named property on the given listener.
  example: []
  syntax:
    content: public static float GetListener(int listener, EFXListenerFloat param)
    parameters:
    - id: listener
      type: System.Int32
      description: The listener.
    - id: param
      type: OpenTK.Audio.OpenAL.EFXListenerFloat
      description: The named property.
    return:
      type: System.Single
      description: The value of the property.
    content.vb: Public Shared Function GetListener(listener As Integer, param As EFXListenerFloat) As Single
  overload: OpenTK.Audio.OpenAL.ALC.EFX.GetListener*
  nameWithType.vb: ALC.EFX.GetListener(Integer, EFXListenerFloat)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GetListener(Integer, OpenTK.Audio.OpenAL.EFXListenerFloat)
  name.vb: GetListener(Integer, EFXListenerFloat)
references:
- uid: OpenTK.Audio.OpenAL
  commentId: N:OpenTK.Audio.OpenAL
  href: OpenTK.html
  name: OpenTK.Audio.OpenAL
  nameWithType: OpenTK.Audio.OpenAL
  fullName: OpenTK.Audio.OpenAL
  spec.csharp:
  - uid: OpenTK
    name: OpenTK
    href: OpenTK.html
  - name: .
  - uid: OpenTK.Audio
    name: Audio
    href: OpenTK.Audio.html
  - name: .
  - uid: OpenTK.Audio.OpenAL
    name: OpenAL
    href: OpenTK.Audio.OpenAL.html
  spec.vb:
  - uid: OpenTK
    name: OpenTK
    href: OpenTK.html
  - name: .
  - uid: OpenTK.Audio
    name: Audio
    href: OpenTK.Audio.html
  - name: .
  - uid: OpenTK.Audio.OpenAL
    name: OpenAL
    href: OpenTK.Audio.OpenAL.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: OpenTK.Audio.OpenAL.ALBase
  commentId: T:OpenTK.Audio.OpenAL.ALBase
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.ALBase.html
  name: ALBase
  nameWithType: ALBase
  fullName: OpenTK.Audio.OpenAL.ALBase
- uid: OpenTK.Audio.OpenAL.ALBase.RegisterOpenALResolver
  commentId: M:OpenTK.Audio.OpenAL.ALBase.RegisterOpenALResolver
  parent: OpenTK.Audio.OpenAL.ALBase
  href: OpenTK.Audio.OpenAL.ALBase.html#OpenTK_Audio_OpenAL_ALBase_RegisterOpenALResolver
  name: RegisterOpenALResolver()
  nameWithType: ALBase.RegisterOpenALResolver()
  fullName: OpenTK.Audio.OpenAL.ALBase.RegisterOpenALResolver()
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALBase.RegisterOpenALResolver
    name: RegisterOpenALResolver
    href: OpenTK.Audio.OpenAL.ALBase.html#OpenTK_Audio_OpenAL_ALBase_RegisterOpenALResolver
  - name: (
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALBase.RegisterOpenALResolver
    name: RegisterOpenALResolver
    href: OpenTK.Audio.OpenAL.ALBase.html#OpenTK_Audio_OpenAL_ALBase_RegisterOpenALResolver
  - name: (
  - name: )
- uid: OpenTK.Audio.OpenAL.ALBase.LoadDelegate``1(System.String)
  commentId: M:OpenTK.Audio.OpenAL.ALBase.LoadDelegate``1(System.String)
  parent: OpenTK.Audio.OpenAL.ALBase
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALBase.html#OpenTK_Audio_OpenAL_ALBase_LoadDelegate__1_System_String_
  name: LoadDelegate<TDelegate>(string)
  nameWithType: ALBase.LoadDelegate<TDelegate>(string)
  fullName: OpenTK.Audio.OpenAL.ALBase.LoadDelegate<TDelegate>(string)
  nameWithType.vb: ALBase.LoadDelegate(Of TDelegate)(String)
  fullName.vb: OpenTK.Audio.OpenAL.ALBase.LoadDelegate(Of TDelegate)(String)
  name.vb: LoadDelegate(Of TDelegate)(String)
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALBase.LoadDelegate``1(System.String)
    name: LoadDelegate
    href: OpenTK.Audio.OpenAL.ALBase.html#OpenTK_Audio_OpenAL_ALBase_LoadDelegate__1_System_String_
  - name: <
  - name: TDelegate
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALBase.LoadDelegate``1(System.String)
    name: LoadDelegate
    href: OpenTK.Audio.OpenAL.ALBase.html#OpenTK_Audio_OpenAL_ALBase_LoadDelegate__1_System_String_
  - name: (
  - name: Of
  - name: " "
  - name: TDelegate
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: OpenTK.Audio.OpenAL.ALC.EFX.IsExtensionPresent*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.EFX.IsExtensionPresent
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_IsExtensionPresent_OpenTK_Audio_OpenAL_ALDevice_
  name: IsExtensionPresent
  nameWithType: ALC.EFX.IsExtensionPresent
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.IsExtensionPresent
- uid: OpenTK.Audio.OpenAL.ALDevice
  commentId: T:OpenTK.Audio.OpenAL.ALDevice
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.ALDevice.html
  name: ALDevice
  nameWithType: ALDevice
  fullName: OpenTK.Audio.OpenAL.ALDevice
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetInteger*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.EFX.GetInteger
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GetInteger_OpenTK_Audio_OpenAL_ALDevice_OpenTK_Audio_OpenAL_EFXContextInteger_System_Int32_System_Int32__
  name: GetInteger
  nameWithType: ALC.EFX.GetInteger
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetInteger
- uid: OpenTK.Audio.OpenAL.EFXContextInteger
  commentId: T:OpenTK.Audio.OpenAL.EFXContextInteger
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.EFXContextInteger.html
  name: EFXContextInteger
  nameWithType: EFXContextInteger
  fullName: OpenTK.Audio.OpenAL.EFXContextInteger
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Int32*
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int*
  nameWithType: int*
  fullName: int*
  nameWithType.vb: Integer*
  fullName.vb: Integer*
  name.vb: Integer*
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '*'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '*'
- uid: System.Int32[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int[]
  nameWithType: int[]
  fullName: int[]
  nameWithType.vb: Integer()
  fullName.vb: Integer()
  name.vb: Integer()
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetEFXMajorVersion*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.EFX.GetEFXMajorVersion
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GetEFXMajorVersion_OpenTK_Audio_OpenAL_ALDevice_
  name: GetEFXMajorVersion
  nameWithType: ALC.EFX.GetEFXMajorVersion
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetEFXMajorVersion
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetEFXMinorVersion*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.EFX.GetEFXMinorVersion
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GetEFXMinorVersion_OpenTK_Audio_OpenAL_ALDevice_
  name: GetEFXMinorVersion
  nameWithType: ALC.EFX.GetEFXMinorVersion
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetEFXMinorVersion
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetEFXVersion*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.EFX.GetEFXVersion
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GetEFXVersion_OpenTK_Audio_OpenAL_ALDevice_
  name: GetEFXVersion
  nameWithType: ALC.EFX.GetEFXVersion
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetEFXVersion
- uid: System.Version
  commentId: T:System.Version
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.version
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32*)
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteAuxiliaryEffectSlots_System_Int32_System_Int32__
  name: DeleteAuxiliaryEffectSlots(int, int*)
  nameWithType: ALC.EFX.DeleteAuxiliaryEffectSlots(int, int*)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(int, int*)
  nameWithType.vb: ALC.EFX.DeleteAuxiliaryEffectSlots(Integer, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(Integer, Integer*)
  name.vb: DeleteAuxiliaryEffectSlots(Integer, Integer*)
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32*)
    name: DeleteAuxiliaryEffectSlots
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteAuxiliaryEffectSlots_System_Int32_System_Int32__
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '*'
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32*)
    name: DeleteAuxiliaryEffectSlots
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteAuxiliaryEffectSlots_System_Int32_System_Int32__
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '*'
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(System.Int32)
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_IsAuxiliaryEffectSlot_System_Int32_
  name: IsAuxiliaryEffectSlot(int)
  nameWithType: ALC.EFX.IsAuxiliaryEffectSlot(int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(int)
  nameWithType.vb: ALC.EFX.IsAuxiliaryEffectSlot(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(Integer)
  name.vb: IsAuxiliaryEffectSlot(Integer)
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(System.Int32)
    name: IsAuxiliaryEffectSlot
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_IsAuxiliaryEffectSlot_System_Int32_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot(System.Int32)
    name: IsAuxiliaryEffectSlot
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_IsAuxiliaryEffectSlot_System_Int32_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenAuxiliaryEffectSlots_System_Int32_System_Int32__
  name: GenAuxiliaryEffectSlots
  nameWithType: ALC.EFX.GenAuxiliaryEffectSlots
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32@)
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteAuxiliaryEffectSlots_System_Int32_System_Int32__
  name: DeleteAuxiliaryEffectSlots(int, ref int)
  nameWithType: ALC.EFX.DeleteAuxiliaryEffectSlots(int, ref int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(int, ref int)
  nameWithType.vb: ALC.EFX.DeleteAuxiliaryEffectSlots(Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(Integer, Integer)
  name.vb: DeleteAuxiliaryEffectSlots(Integer, Integer)
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32@)
    name: DeleteAuxiliaryEffectSlots
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteAuxiliaryEffectSlots_System_Int32_System_Int32__
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - name: ref
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32@)
    name: DeleteAuxiliaryEffectSlots
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteAuxiliaryEffectSlots_System_Int32_System_Int32__
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32[])
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteAuxiliaryEffectSlots_System_Int32_System_Int32___
  name: DeleteAuxiliaryEffectSlots(int, int[])
  nameWithType: ALC.EFX.DeleteAuxiliaryEffectSlots(int, int[])
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(int, int[])
  nameWithType.vb: ALC.EFX.DeleteAuxiliaryEffectSlots(Integer, Integer())
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(Integer, Integer())
  name.vb: DeleteAuxiliaryEffectSlots(Integer, Integer())
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32[])
    name: DeleteAuxiliaryEffectSlots
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteAuxiliaryEffectSlots_System_Int32_System_Int32___
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32,System.Int32[])
    name: DeleteAuxiliaryEffectSlots
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteAuxiliaryEffectSlots_System_Int32_System_Int32___
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32*)
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenAuxiliaryEffectSlots_System_Int32_System_Int32__
  name: GenAuxiliaryEffectSlots(int, int*)
  nameWithType: ALC.EFX.GenAuxiliaryEffectSlots(int, int*)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(int, int*)
  nameWithType.vb: ALC.EFX.GenAuxiliaryEffectSlots(Integer, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(Integer, Integer*)
  name.vb: GenAuxiliaryEffectSlots(Integer, Integer*)
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32*)
    name: GenAuxiliaryEffectSlots
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenAuxiliaryEffectSlots_System_Int32_System_Int32__
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '*'
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32*)
    name: GenAuxiliaryEffectSlots
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenAuxiliaryEffectSlots_System_Int32_System_Int32__
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '*'
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteAuxiliaryEffectSlots_System_Int32_System_Int32__
  name: DeleteAuxiliaryEffectSlots
  nameWithType: ALC.EFX.DeleteAuxiliaryEffectSlots
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32@)
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenAuxiliaryEffectSlots_System_Int32_System_Int32__
  name: GenAuxiliaryEffectSlots(int, ref int)
  nameWithType: ALC.EFX.GenAuxiliaryEffectSlots(int, ref int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(int, ref int)
  nameWithType.vb: ALC.EFX.GenAuxiliaryEffectSlots(Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(Integer, Integer)
  name.vb: GenAuxiliaryEffectSlots(Integer, Integer)
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32@)
    name: GenAuxiliaryEffectSlots
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenAuxiliaryEffectSlots_System_Int32_System_Int32__
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - name: ref
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32@)
    name: GenAuxiliaryEffectSlots
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenAuxiliaryEffectSlots_System_Int32_System_Int32__
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32[])
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenAuxiliaryEffectSlots_System_Int32_System_Int32___
  name: GenAuxiliaryEffectSlots(int, int[])
  nameWithType: ALC.EFX.GenAuxiliaryEffectSlots(int, int[])
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(int, int[])
  nameWithType.vb: ALC.EFX.GenAuxiliaryEffectSlots(Integer, Integer())
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(Integer, Integer())
  name.vb: GenAuxiliaryEffectSlots(Integer, Integer())
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32[])
    name: GenAuxiliaryEffectSlots
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenAuxiliaryEffectSlots_System_Int32_System_Int32___
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32,System.Int32[])
    name: GenAuxiliaryEffectSlots
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenAuxiliaryEffectSlots_System_Int32_System_Int32___
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_IsAuxiliaryEffectSlot_System_Int32_
  name: IsAuxiliaryEffectSlot
  nameWithType: ALC.EFX.IsAuxiliaryEffectSlot
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.IsAuxiliaryEffectSlot
- uid: OpenTK.Audio.OpenAL.ALC.EFX.AuxiliaryEffectSlot*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.EFX.AuxiliaryEffectSlot
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_AuxiliaryEffectSlot_System_Int32_OpenTK_Audio_OpenAL_EffectSlotInteger_System_Int32_
  name: AuxiliaryEffectSlot
  nameWithType: ALC.EFX.AuxiliaryEffectSlot
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.AuxiliaryEffectSlot
- uid: OpenTK.Audio.OpenAL.EffectSlotInteger
  commentId: T:OpenTK.Audio.OpenAL.EffectSlotInteger
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.EffectSlotInteger.html
  name: EffectSlotInteger
  nameWithType: EffectSlotInteger
  fullName: OpenTK.Audio.OpenAL.EffectSlotInteger
- uid: OpenTK.Audio.OpenAL.EffectSlotFloat
  commentId: T:OpenTK.Audio.OpenAL.EffectSlotFloat
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.EffectSlotFloat.html
  name: EffectSlotFloat
  nameWithType: EffectSlotFloat
  fullName: OpenTK.Audio.OpenAL.EffectSlotFloat
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GetAuxiliaryEffectSlot_System_Int32_OpenTK_Audio_OpenAL_EffectSlotInteger_System_Int32__
  name: GetAuxiliaryEffectSlot
  nameWithType: ALC.EFX.GetAuxiliaryEffectSlot
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetAuxiliaryEffectSlot
- uid: System.Single*
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float*
  nameWithType: float*
  fullName: float*
  nameWithType.vb: Single*
  fullName.vb: Single*
  name.vb: Single*
  spec.csharp:
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '*'
  spec.vb:
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '*'
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32,System.Int32*)
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteEffects_System_Int32_System_Int32__
  name: DeleteEffects(int, int*)
  nameWithType: ALC.EFX.DeleteEffects(int, int*)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(int, int*)
  nameWithType.vb: ALC.EFX.DeleteEffects(Integer, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(Integer, Integer*)
  name.vb: DeleteEffects(Integer, Integer*)
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32,System.Int32*)
    name: DeleteEffects
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteEffects_System_Int32_System_Int32__
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '*'
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32,System.Int32*)
    name: DeleteEffects
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteEffects_System_Int32_System_Int32__
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '*'
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(System.Int32)
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_IsEffect_System_Int32_
  name: IsEffect(int)
  nameWithType: ALC.EFX.IsEffect(int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(int)
  nameWithType.vb: ALC.EFX.IsEffect(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(Integer)
  name.vb: IsEffect(Integer)
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(System.Int32)
    name: IsEffect
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_IsEffect_System_Int32_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.IsEffect(System.Int32)
    name: IsEffect
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_IsEffect_System_Int32_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.EFX.GenEffects
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenEffects_System_Int32_System_Int32__
  name: GenEffects
  nameWithType: ALC.EFX.GenEffects
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32,System.Int32@)
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteEffects_System_Int32_System_Int32__
  name: DeleteEffects(int, ref int)
  nameWithType: ALC.EFX.DeleteEffects(int, ref int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(int, ref int)
  nameWithType.vb: ALC.EFX.DeleteEffects(Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(Integer, Integer)
  name.vb: DeleteEffects(Integer, Integer)
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32,System.Int32@)
    name: DeleteEffects
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteEffects_System_Int32_System_Int32__
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - name: ref
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32,System.Int32@)
    name: DeleteEffects
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteEffects_System_Int32_System_Int32__
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32,System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32,System.Int32[])
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteEffects_System_Int32_System_Int32___
  name: DeleteEffects(int, int[])
  nameWithType: ALC.EFX.DeleteEffects(int, int[])
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(int, int[])
  nameWithType.vb: ALC.EFX.DeleteEffects(Integer, Integer())
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(Integer, Integer())
  name.vb: DeleteEffects(Integer, Integer())
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32,System.Int32[])
    name: DeleteEffects
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteEffects_System_Int32_System_Int32___
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32,System.Int32[])
    name: DeleteEffects
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteEffects_System_Int32_System_Int32___
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32,System.Int32*)
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenEffects_System_Int32_System_Int32__
  name: GenEffects(int, int*)
  nameWithType: ALC.EFX.GenEffects(int, int*)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(int, int*)
  nameWithType.vb: ALC.EFX.GenEffects(Integer, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(Integer, Integer*)
  name.vb: GenEffects(Integer, Integer*)
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32,System.Int32*)
    name: GenEffects
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenEffects_System_Int32_System_Int32__
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '*'
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32,System.Int32*)
    name: GenEffects
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenEffects_System_Int32_System_Int32__
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '*'
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteEffects_System_Int32_System_Int32__
  name: DeleteEffects
  nameWithType: ALC.EFX.DeleteEffects
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32,System.Int32@)
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenEffects_System_Int32_System_Int32__
  name: GenEffects(int, ref int)
  nameWithType: ALC.EFX.GenEffects(int, ref int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(int, ref int)
  nameWithType.vb: ALC.EFX.GenEffects(Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(Integer, Integer)
  name.vb: GenEffects(Integer, Integer)
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32,System.Int32@)
    name: GenEffects
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenEffects_System_Int32_System_Int32__
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - name: ref
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32,System.Int32@)
    name: GenEffects
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenEffects_System_Int32_System_Int32__
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32,System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32,System.Int32[])
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenEffects_System_Int32_System_Int32___
  name: GenEffects(int, int[])
  nameWithType: ALC.EFX.GenEffects(int, int[])
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(int, int[])
  nameWithType.vb: ALC.EFX.GenEffects(Integer, Integer())
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(Integer, Integer())
  name.vb: GenEffects(Integer, Integer())
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32,System.Int32[])
    name: GenEffects
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenEffects_System_Int32_System_Int32___
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32,System.Int32[])
    name: GenEffects
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenEffects_System_Int32_System_Int32___
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32[])
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenEffects_System_Int32___
  name: GenEffects(int[])
  nameWithType: ALC.EFX.GenEffects(int[])
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(int[])
  nameWithType.vb: ALC.EFX.GenEffects(Integer())
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(Integer())
  name.vb: GenEffects(Integer())
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32[])
    name: GenEffects
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenEffects_System_Int32___
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32[])
    name: GenEffects
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenEffects_System_Int32___
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32[])
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteEffects_System_Int32___
  name: DeleteEffects(int[])
  nameWithType: ALC.EFX.DeleteEffects(int[])
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(int[])
  nameWithType.vb: ALC.EFX.DeleteEffects(Integer())
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(Integer())
  name.vb: DeleteEffects(Integer())
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32[])
    name: DeleteEffects
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteEffects_System_Int32___
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffects(System.Int32[])
    name: DeleteEffects
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteEffects_System_Int32___
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.IsEffect*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.EFX.IsEffect
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_IsEffect_System_Int32_
  name: IsEffect
  nameWithType: ALC.EFX.IsEffect
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.IsEffect
- uid: OpenTK.Audio.OpenAL.ALC.EFX.Effect*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.EFX.Effect
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_Effect_System_Int32_OpenTK_Audio_OpenAL_EffectInteger_System_Int32_
  name: Effect
  nameWithType: ALC.EFX.Effect
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.Effect
- uid: OpenTK.Audio.OpenAL.EffectInteger
  commentId: T:OpenTK.Audio.OpenAL.EffectInteger
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.EffectInteger.html
  name: EffectInteger
  nameWithType: EffectInteger
  fullName: OpenTK.Audio.OpenAL.EffectInteger
- uid: OpenTK.Audio.OpenAL.EffectFloat
  commentId: T:OpenTK.Audio.OpenAL.EffectFloat
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.EffectFloat.html
  name: EffectFloat
  nameWithType: EffectFloat
  fullName: OpenTK.Audio.OpenAL.EffectFloat
- uid: OpenTK.Audio.OpenAL.EffectVector3
  commentId: T:OpenTK.Audio.OpenAL.EffectVector3
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.EffectVector3.html
  name: EffectVector3
  nameWithType: EffectVector3
  fullName: OpenTK.Audio.OpenAL.EffectVector3
- uid: System.Single[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float[]
  nameWithType: float[]
  fullName: float[]
  nameWithType.vb: Single()
  fullName.vb: Single()
  name.vb: Single()
  spec.csharp:
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: (
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.EFX.GetEffect
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GetEffect_System_Int32_OpenTK_Audio_OpenAL_EffectInteger_System_Int32__
  name: GetEffect
  nameWithType: ALC.EFX.GetEffect
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetEffect
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32,System.Int32*)
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteFilters_System_Int32_System_Int32__
  name: DeleteFilters(int, int*)
  nameWithType: ALC.EFX.DeleteFilters(int, int*)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(int, int*)
  nameWithType.vb: ALC.EFX.DeleteFilters(Integer, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(Integer, Integer*)
  name.vb: DeleteFilters(Integer, Integer*)
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32,System.Int32*)
    name: DeleteFilters
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteFilters_System_Int32_System_Int32__
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '*'
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32,System.Int32*)
    name: DeleteFilters
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteFilters_System_Int32_System_Int32__
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '*'
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(System.Int32)
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_IsFilter_System_Int32_
  name: IsFilter(int)
  nameWithType: ALC.EFX.IsFilter(int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(int)
  nameWithType.vb: ALC.EFX.IsFilter(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(Integer)
  name.vb: IsFilter(Integer)
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(System.Int32)
    name: IsFilter
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_IsFilter_System_Int32_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.IsFilter(System.Int32)
    name: IsFilter
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_IsFilter_System_Int32_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.EFX.GenFilters
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenFilters_System_Int32_System_Int32__
  name: GenFilters
  nameWithType: ALC.EFX.GenFilters
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32,System.Int32@)
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteFilters_System_Int32_System_Int32__
  name: DeleteFilters(int, ref int)
  nameWithType: ALC.EFX.DeleteFilters(int, ref int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(int, ref int)
  nameWithType.vb: ALC.EFX.DeleteFilters(Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(Integer, Integer)
  name.vb: DeleteFilters(Integer, Integer)
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32,System.Int32@)
    name: DeleteFilters
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteFilters_System_Int32_System_Int32__
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - name: ref
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32,System.Int32@)
    name: DeleteFilters
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteFilters_System_Int32_System_Int32__
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32,System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32,System.Int32[])
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteFilters_System_Int32_System_Int32___
  name: DeleteFilters(int, int[])
  nameWithType: ALC.EFX.DeleteFilters(int, int[])
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(int, int[])
  nameWithType.vb: ALC.EFX.DeleteFilters(Integer, Integer())
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(Integer, Integer())
  name.vb: DeleteFilters(Integer, Integer())
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32,System.Int32[])
    name: DeleteFilters
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteFilters_System_Int32_System_Int32___
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32,System.Int32[])
    name: DeleteFilters
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteFilters_System_Int32_System_Int32___
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32,System.Int32*)
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenFilters_System_Int32_System_Int32__
  name: GenFilters(int, int*)
  nameWithType: ALC.EFX.GenFilters(int, int*)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(int, int*)
  nameWithType.vb: ALC.EFX.GenFilters(Integer, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(Integer, Integer*)
  name.vb: GenFilters(Integer, Integer*)
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32,System.Int32*)
    name: GenFilters
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenFilters_System_Int32_System_Int32__
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '*'
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32,System.Int32*)
    name: GenFilters
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenFilters_System_Int32_System_Int32__
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '*'
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteFilters_System_Int32_System_Int32__
  name: DeleteFilters
  nameWithType: ALC.EFX.DeleteFilters
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32,System.Int32@)
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenFilters_System_Int32_System_Int32__
  name: GenFilters(int, ref int)
  nameWithType: ALC.EFX.GenFilters(int, ref int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(int, ref int)
  nameWithType.vb: ALC.EFX.GenFilters(Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(Integer, Integer)
  name.vb: GenFilters(Integer, Integer)
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32,System.Int32@)
    name: GenFilters
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenFilters_System_Int32_System_Int32__
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - name: ref
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32,System.Int32@)
    name: GenFilters
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenFilters_System_Int32_System_Int32__
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32,System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32,System.Int32[])
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenFilters_System_Int32_System_Int32___
  name: GenFilters(int, int[])
  nameWithType: ALC.EFX.GenFilters(int, int[])
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(int, int[])
  nameWithType.vb: ALC.EFX.GenFilters(Integer, Integer())
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(Integer, Integer())
  name.vb: GenFilters(Integer, Integer())
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32,System.Int32[])
    name: GenFilters
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenFilters_System_Int32_System_Int32___
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32,System.Int32[])
    name: GenFilters
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenFilters_System_Int32_System_Int32___
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32)
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenFilters_System_Int32_
  name: GenFilters(int)
  nameWithType: ALC.EFX.GenFilters(int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(int)
  nameWithType.vb: ALC.EFX.GenFilters(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(Integer)
  name.vb: GenFilters(Integer)
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32)
    name: GenFilters
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenFilters_System_Int32_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenFilters(System.Int32)
    name: GenFilters
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenFilters_System_Int32_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32[])
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteFilters_System_Int32___
  name: DeleteFilters(int[])
  nameWithType: ALC.EFX.DeleteFilters(int[])
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(int[])
  nameWithType.vb: ALC.EFX.DeleteFilters(Integer())
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(Integer())
  name.vb: DeleteFilters(Integer())
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32[])
    name: DeleteFilters
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteFilters_System_Int32___
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilters(System.Int32[])
    name: DeleteFilters
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteFilters_System_Int32___
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.IsFilter*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.EFX.IsFilter
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_IsFilter_System_Int32_
  name: IsFilter
  nameWithType: ALC.EFX.IsFilter
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.IsFilter
- uid: OpenTK.Audio.OpenAL.ALC.EFX.Filter*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.EFX.Filter
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_Filter_System_Int32_OpenTK_Audio_OpenAL_FilterInteger_System_Int32_
  name: Filter
  nameWithType: ALC.EFX.Filter
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.Filter
- uid: OpenTK.Audio.OpenAL.FilterInteger
  commentId: T:OpenTK.Audio.OpenAL.FilterInteger
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.FilterInteger.html
  name: FilterInteger
  nameWithType: FilterInteger
  fullName: OpenTK.Audio.OpenAL.FilterInteger
- uid: OpenTK.Audio.OpenAL.FilterFloat
  commentId: T:OpenTK.Audio.OpenAL.FilterFloat
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.FilterFloat.html
  name: FilterFloat
  nameWithType: FilterFloat
  fullName: OpenTK.Audio.OpenAL.FilterFloat
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetFilter*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.EFX.GetFilter
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GetFilter_System_Int32_OpenTK_Audio_OpenAL_FilterInteger_System_Int32__
  name: GetFilter
  nameWithType: ALC.EFX.GetFilter
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetFilter
- uid: OpenTK.Audio.OpenAL.ALC.EFX.Source*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.EFX.Source
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_Source_System_Int32_OpenTK_Audio_OpenAL_EFXSourceInteger_System_Int32_
  name: Source
  nameWithType: ALC.EFX.Source
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.Source
- uid: OpenTK.Audio.OpenAL.EFXSourceInteger
  commentId: T:OpenTK.Audio.OpenAL.EFXSourceInteger
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.EFXSourceInteger.html
  name: EFXSourceInteger
  nameWithType: EFXSourceInteger
  fullName: OpenTK.Audio.OpenAL.EFXSourceInteger
- uid: OpenTK.Audio.OpenAL.EFXSourceFloat
  commentId: T:OpenTK.Audio.OpenAL.EFXSourceFloat
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.EFXSourceFloat.html
  name: EFXSourceFloat
  nameWithType: EFXSourceFloat
  fullName: OpenTK.Audio.OpenAL.EFXSourceFloat
- uid: OpenTK.Audio.OpenAL.EFXSourceBoolean
  commentId: T:OpenTK.Audio.OpenAL.EFXSourceBoolean
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.EFXSourceBoolean.html
  name: EFXSourceBoolean
  nameWithType: EFXSourceBoolean
  fullName: OpenTK.Audio.OpenAL.EFXSourceBoolean
- uid: OpenTK.Audio.OpenAL.EFXSourceInteger3
  commentId: T:OpenTK.Audio.OpenAL.EFXSourceInteger3
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.EFXSourceInteger3.html
  name: EFXSourceInteger3
  nameWithType: EFXSourceInteger3
  fullName: OpenTK.Audio.OpenAL.EFXSourceInteger3
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetSource*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.EFX.GetSource
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GetSource_System_Int32_OpenTK_Audio_OpenAL_EFXSourceInteger_System_Int32__
  name: GetSource
  nameWithType: ALC.EFX.GetSource
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetSource
- uid: System.Boolean*
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool*
  nameWithType: bool*
  fullName: bool*
  nameWithType.vb: Boolean*
  fullName.vb: Boolean*
  name.vb: Boolean*
  spec.csharp:
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '*'
  spec.vb:
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '*'
- uid: OpenTK.Audio.OpenAL.ALC.EFX.Listener*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.EFX.Listener
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_Listener_System_Int32_OpenTK_Audio_OpenAL_EFXListenerFloat_System_Single_
  name: Listener
  nameWithType: ALC.EFX.Listener
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.Listener
- uid: OpenTK.Audio.OpenAL.EFXListenerFloat
  commentId: T:OpenTK.Audio.OpenAL.EFXListenerFloat
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.EFXListenerFloat.html
  name: EFXListenerFloat
  nameWithType: EFXListenerFloat
  fullName: OpenTK.Audio.OpenAL.EFXListenerFloat
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GetListener*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.EFX.GetListener
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GetListener_System_Int32_OpenTK_Audio_OpenAL_EFXListenerFloat_System_Single__
  name: GetListener
  nameWithType: ALC.EFX.GetListener
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GetListener
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32[])
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteAuxiliaryEffectSlots_System_Int32___
  name: DeleteAuxiliaryEffectSlots(int[])
  nameWithType: ALC.EFX.DeleteAuxiliaryEffectSlots(int[])
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(int[])
  nameWithType.vb: ALC.EFX.DeleteAuxiliaryEffectSlots(Integer())
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(Integer())
  name.vb: DeleteAuxiliaryEffectSlots(Integer())
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32[])
    name: DeleteAuxiliaryEffectSlots
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteAuxiliaryEffectSlots_System_Int32___
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlots(System.Int32[])
    name: DeleteAuxiliaryEffectSlots
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteAuxiliaryEffectSlots_System_Int32___
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlot(System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlot(System.Int32)
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteAuxiliaryEffectSlot_System_Int32_
  name: DeleteAuxiliaryEffectSlot(int)
  nameWithType: ALC.EFX.DeleteAuxiliaryEffectSlot(int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlot(int)
  nameWithType.vb: ALC.EFX.DeleteAuxiliaryEffectSlot(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlot(Integer)
  name.vb: DeleteAuxiliaryEffectSlot(Integer)
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlot(System.Int32)
    name: DeleteAuxiliaryEffectSlot
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteAuxiliaryEffectSlot_System_Int32_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlot(System.Int32)
    name: DeleteAuxiliaryEffectSlot
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteAuxiliaryEffectSlot_System_Int32_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlot*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlot
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenAuxiliaryEffectSlot
  name: GenAuxiliaryEffectSlot
  nameWithType: ALC.EFX.GenAuxiliaryEffectSlot
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlot
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32)
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenAuxiliaryEffectSlots_System_Int32_
  name: GenAuxiliaryEffectSlots(int)
  nameWithType: ALC.EFX.GenAuxiliaryEffectSlots(int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(int)
  nameWithType.vb: ALC.EFX.GenAuxiliaryEffectSlots(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(Integer)
  name.vb: GenAuxiliaryEffectSlots(Integer)
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32)
    name: GenAuxiliaryEffectSlots
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenAuxiliaryEffectSlots_System_Int32_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlots(System.Int32)
    name: GenAuxiliaryEffectSlots
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenAuxiliaryEffectSlots_System_Int32_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlot
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlot
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenAuxiliaryEffectSlot
  name: GenAuxiliaryEffectSlot()
  nameWithType: ALC.EFX.GenAuxiliaryEffectSlot()
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlot()
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlot
    name: GenAuxiliaryEffectSlot
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenAuxiliaryEffectSlot
  - name: (
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenAuxiliaryEffectSlot
    name: GenAuxiliaryEffectSlot
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenAuxiliaryEffectSlot
  - name: (
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlot*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlot
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteAuxiliaryEffectSlot_System_Int32_
  name: DeleteAuxiliaryEffectSlot
  nameWithType: ALC.EFX.DeleteAuxiliaryEffectSlot
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteAuxiliaryEffectSlot
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffect(System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffect(System.Int32)
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteEffect_System_Int32_
  name: DeleteEffect(int)
  nameWithType: ALC.EFX.DeleteEffect(int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffect(int)
  nameWithType.vb: ALC.EFX.DeleteEffect(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffect(Integer)
  name.vb: DeleteEffect(Integer)
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffect(System.Int32)
    name: DeleteEffect
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteEffect_System_Int32_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffect(System.Int32)
    name: DeleteEffect
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteEffect_System_Int32_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenEffect*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.EFX.GenEffect
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenEffect
  name: GenEffect
  nameWithType: ALC.EFX.GenEffect
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenEffect
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32)
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenEffects_System_Int32_
  name: GenEffects(int)
  nameWithType: ALC.EFX.GenEffects(int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(int)
  nameWithType.vb: ALC.EFX.GenEffects(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(Integer)
  name.vb: GenEffects(Integer)
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32)
    name: GenEffects
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenEffects_System_Int32_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenEffects(System.Int32)
    name: GenEffects
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenEffects_System_Int32_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenEffect
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenEffect
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenEffect
  name: GenEffect()
  nameWithType: ALC.EFX.GenEffect()
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenEffect()
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenEffect
    name: GenEffect
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenEffect
  - name: (
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenEffect
    name: GenEffect
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenEffect
  - name: (
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffect*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffect
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteEffect_System_Int32_
  name: DeleteEffect
  nameWithType: ALC.EFX.DeleteEffect
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteEffect
- uid: OpenTK.Mathematics.Vector3
  commentId: T:OpenTK.Mathematics.Vector3
  parent: OpenTK.Mathematics
  href: OpenTK.Mathematics.Vector3.html
  name: Vector3
  nameWithType: Vector3
  fullName: OpenTK.Mathematics.Vector3
- uid: OpenTK.Mathematics
  commentId: N:OpenTK.Mathematics
  href: OpenTK.html
  name: OpenTK.Mathematics
  nameWithType: OpenTK.Mathematics
  fullName: OpenTK.Mathematics
  spec.csharp:
  - uid: OpenTK
    name: OpenTK
    href: OpenTK.html
  - name: .
  - uid: OpenTK.Mathematics
    name: Mathematics
    href: OpenTK.Mathematics.html
  spec.vb:
  - uid: OpenTK
    name: OpenTK
    href: OpenTK.html
  - name: .
  - uid: OpenTK.Mathematics
    name: Mathematics
    href: OpenTK.Mathematics.html
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilter(System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilter(System.Int32)
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteFilter_System_Int32_
  name: DeleteFilter(int)
  nameWithType: ALC.EFX.DeleteFilter(int)
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilter(int)
  nameWithType.vb: ALC.EFX.DeleteFilter(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilter(Integer)
  name.vb: DeleteFilter(Integer)
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilter(System.Int32)
    name: DeleteFilter
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteFilter_System_Int32_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilter(System.Int32)
    name: DeleteFilter
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteFilter_System_Int32_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenFilter*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.EFX.GenFilter
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenFilter
  name: GenFilter
  nameWithType: ALC.EFX.GenFilter
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenFilter
- uid: OpenTK.Audio.OpenAL.ALC.EFX.GenFilter
  commentId: M:OpenTK.Audio.OpenAL.ALC.EFX.GenFilter
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenFilter
  name: GenFilter()
  nameWithType: ALC.EFX.GenFilter()
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.GenFilter()
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenFilter
    name: GenFilter
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenFilter
  - name: (
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALC.EFX.GenFilter
    name: GenFilter
    href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_GenFilter
  - name: (
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilter*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilter
  href: OpenTK.Audio.OpenAL.ALC.EFX.html#OpenTK_Audio_OpenAL_ALC_EFX_DeleteFilter_System_Int32_
  name: DeleteFilter
  nameWithType: ALC.EFX.DeleteFilter
  fullName: OpenTK.Audio.OpenAL.ALC.EFX.DeleteFilter

### YamlMime:ManagedReference
items:
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWreallocatefun
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.GLFWreallocatefun
  id: GLFWreallocatefun
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  children: []
  langs:
  - csharp
  - vb
  name: GLFWreallocatefun
  nameWithType: GLFWreallocatefun
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFWreallocatefun
  type: Delegate
  source:
    id: GLFWreallocatefun
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFWCallbacks.cs
    startLine: 310
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    The function pointer type for memory reallocation callbacks.


    This is the function pointer type for memory reallocation callbacks.

    A memory reallocation callback function has the following signature:

    <pre><code class="lang-csharp">void* function_name(void* block, size_t size, void* user)</code></pre>


    This function must return a memory block at least <code>size</code> bytes long, or

    <code>null</code> if allocation failed. Note that not all parts of GLFW handle allocation

    failures gracefully yet.


    This function must support being called during glfwInit but before the library is

    flagged as initialized, as well as during glfwTerminate after the library is no

    longer flagged as initialized.


    Any memory allocated via this function will be deallocated via the same allocator

    during library termination or earlier.


    Any memory allocated via this function must be suitably aligned for any object type.

    If you are using C99 or earlier, this alignment is platform-dependent but will be the

    same as what <code>realloc</code> provides.If you are using C11 or later, this is the value of

    <code>alignof(max_align_t)</code>.


    The block address will never be <code>null</code> and the size will always be greater than zero.

    Reallocations of a block to size zero are converted into deallocations before reaching

    the custom allocator.Reallocations of <code>null</code> to a non-zero size are converted into

    regular allocations before reaching the custom allocator.


    If this function returns <code>null</code>, GLFW will emit <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.OutOfMemory" data-throw-if-not-resolved="false"></xref>.


    This function must not call any GLFW function.
  remarks: " The returned memory block must be valid at least until it is deallocated.\r\n\r\nThis function should not call any GLFW function.\r\n\r\nThis function must support being called from any thread that calls GLFW functions."
  example: []
  syntax:
    content: public delegate void* GLFWreallocatefun(void* block, nuint size, void* user)
    parameters:
    - id: block
      type: System.Void*
      description: The address of the memory block to reallocate.
    - id: size
      type: System.UIntPtr
      description: The new minimum size, in bytes, of the memory block.
    - id: user
      type: System.Void*
      description: The user-defined pointer from the allocator.
    return:
      type: System.Void*
      description: The address of the newly allocated or resized memory block, or <code>null</code> if an error occurred.
    content.vb: Public Delegate Function GLFWreallocatefun(block As Void*, size As UIntPtr, user As Void*) As Void*
references:
- uid: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.OutOfMemory
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.OutOfMemory
  href: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.html#OpenTK_Windowing_GraphicsLibraryFramework_ErrorCode_OutOfMemory
  name: OutOfMemory
  nameWithType: ErrorCode.OutOfMemory
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.OutOfMemory
- uid: OpenTK.Windowing.GraphicsLibraryFramework
  commentId: N:OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.html
  name: OpenTK.Windowing.GraphicsLibraryFramework
  nameWithType: OpenTK.Windowing.GraphicsLibraryFramework
  fullName: OpenTK.Windowing.GraphicsLibraryFramework
  spec.csharp:
  - uid: OpenTK
    name: OpenTK
    href: OpenTK.html
  - name: .
  - uid: OpenTK.Windowing
    name: Windowing
    href: OpenTK.Windowing.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework
    name: GraphicsLibraryFramework
    href: OpenTK.Windowing.GraphicsLibraryFramework.html
  spec.vb:
  - uid: OpenTK
    name: OpenTK
    href: OpenTK.html
  - name: .
  - uid: OpenTK.Windowing
    name: Windowing
    href: OpenTK.Windowing.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework
    name: GraphicsLibraryFramework
    href: OpenTK.Windowing.GraphicsLibraryFramework.html
- uid: System.Void*
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.void
  name: void*
  nameWithType: void*
  fullName: void*
  nameWithType.vb: Void*
  fullName.vb: Void*
  name.vb: Void*
  spec.csharp:
  - uid: System.Void
    name: void
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.void
  - name: '*'
  spec.vb:
  - uid: System.Void
    name: Void
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.void
  - name: '*'
- uid: System.UIntPtr
  commentId: T:System.UIntPtr
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uintptr
  name: nuint
  nameWithType: nuint
  fullName: nuint
  nameWithType.vb: UIntPtr
  fullName.vb: System.UIntPtr
  name.vb: UIntPtr
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System

### YamlMime:ManagedReference
items:
- uid: OpenTK.Audio.OpenAL.AL
  commentId: T:OpenTK.Audio.OpenAL.AL
  id: AL
  parent: OpenTK.Audio.OpenAL
  children:
  - OpenTK.Audio.OpenAL.AL.BufferData(System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.Byte@,System.Int32,System.Int32)
  - OpenTK.Audio.OpenAL.AL.BufferData(System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.Int16@,System.Int32,System.Int32)
  - OpenTK.Audio.OpenAL.AL.BufferData(System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.IntPtr,System.Int32,System.Int32)
  - OpenTK.Audio.OpenAL.AL.BufferData(System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.Void*,System.Int32,System.Int32)
  - OpenTK.Audio.OpenAL.AL.BufferData``1(System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.ReadOnlySpan{``0},System.Int32)
  - OpenTK.Audio.OpenAL.AL.BufferData``1(System.Int32,OpenTK.Audio.OpenAL.ALFormat,``0[],System.Int32)
  - OpenTK.Audio.OpenAL.AL.DeleteBuffer(System.Int32)
  - OpenTK.Audio.OpenAL.AL.DeleteBuffers(System.Int32,System.Int32*)
  - OpenTK.Audio.OpenAL.AL.DeleteBuffers(System.Int32,System.Int32@)
  - OpenTK.Audio.OpenAL.AL.DeleteBuffers(System.Int32,System.Int32[])
  - OpenTK.Audio.OpenAL.AL.DeleteBuffers(System.Int32[])
  - OpenTK.Audio.OpenAL.AL.DeleteBuffers(System.ReadOnlySpan{System.Int32})
  - OpenTK.Audio.OpenAL.AL.DeleteSource(System.Int32)
  - OpenTK.Audio.OpenAL.AL.DeleteSources(System.Int32,System.Int32*)
  - OpenTK.Audio.OpenAL.AL.DeleteSources(System.Int32,System.Int32@)
  - OpenTK.Audio.OpenAL.AL.DeleteSources(System.Int32[])
  - OpenTK.Audio.OpenAL.AL.DeleteSources(System.ReadOnlySpan{System.Int32})
  - OpenTK.Audio.OpenAL.AL.Disable(OpenTK.Audio.OpenAL.ALCapability)
  - OpenTK.Audio.OpenAL.AL.DistanceModel(OpenTK.Audio.OpenAL.ALDistanceModel)
  - OpenTK.Audio.OpenAL.AL.DopplerFactor(System.Single)
  - OpenTK.Audio.OpenAL.AL.DopplerVelocity(System.Single)
  - OpenTK.Audio.OpenAL.AL.Enable(OpenTK.Audio.OpenAL.ALCapability)
  - OpenTK.Audio.OpenAL.AL.GenBuffer
  - OpenTK.Audio.OpenAL.AL.GenBuffer(System.Int32@)
  - OpenTK.Audio.OpenAL.AL.GenBuffers(System.Int32)
  - OpenTK.Audio.OpenAL.AL.GenBuffers(System.Int32,System.Int32*)
  - OpenTK.Audio.OpenAL.AL.GenBuffers(System.Int32,System.Int32@)
  - OpenTK.Audio.OpenAL.AL.GenBuffers(System.Int32,System.Int32[])
  - OpenTK.Audio.OpenAL.AL.GenBuffers(System.Span{System.Int32})
  - OpenTK.Audio.OpenAL.AL.GenSource
  - OpenTK.Audio.OpenAL.AL.GenSource(System.Int32@)
  - OpenTK.Audio.OpenAL.AL.GenSources(System.Int32)
  - OpenTK.Audio.OpenAL.AL.GenSources(System.Int32,System.Int32*)
  - OpenTK.Audio.OpenAL.AL.GenSources(System.Int32,System.Int32@)
  - OpenTK.Audio.OpenAL.AL.GenSources(System.Int32,System.Int32[])
  - OpenTK.Audio.OpenAL.AL.GenSources(System.Int32[])
  - OpenTK.Audio.OpenAL.AL.GenSources(System.Span{System.Int32})
  - OpenTK.Audio.OpenAL.AL.Get(OpenTK.Audio.OpenAL.ALGetFloat)
  - OpenTK.Audio.OpenAL.AL.Get(OpenTK.Audio.OpenAL.ALGetInteger)
  - OpenTK.Audio.OpenAL.AL.Get(OpenTK.Audio.OpenAL.ALGetString)
  - OpenTK.Audio.OpenAL.AL.GetBuffer(System.Int32,OpenTK.Audio.OpenAL.ALGetBufferi)
  - OpenTK.Audio.OpenAL.AL.GetBuffer(System.Int32,OpenTK.Audio.OpenAL.ALGetBufferi,System.Int32@)
  - OpenTK.Audio.OpenAL.AL.GetDistanceModel
  - OpenTK.Audio.OpenAL.AL.GetEnumValue(System.String)
  - OpenTK.Audio.OpenAL.AL.GetError
  - OpenTK.Audio.OpenAL.AL.GetErrorString(OpenTK.Audio.OpenAL.ALError)
  - OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListener3f)
  - OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListener3f,OpenTK.Mathematics.Vector3@)
  - OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListener3f,System.Single@,System.Single@,System.Single@)
  - OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerf)
  - OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerf,System.Single@)
  - OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerfv,OpenTK.Mathematics.Vector3@,OpenTK.Mathematics.Vector3@)
  - OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single*)
  - OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single@)
  - OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single[])
  - OpenTK.Audio.OpenAL.AL.GetProcAddress(System.String)
  - OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALGetSourcei)
  - OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALGetSourcei,System.Int32@)
  - OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSource3f)
  - OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSource3f,OpenTK.Mathematics.Vector3@)
  - OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSource3f,System.Single@,System.Single@,System.Single@)
  - OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSource3i)
  - OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSource3i,OpenTK.Mathematics.Vector3i@)
  - OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSource3i,System.Int32@,System.Int32@,System.Int32@)
  - OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSourceb)
  - OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSourceb,System.Boolean@)
  - OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSourcef)
  - OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSourcef,System.Single@)
  - OpenTK.Audio.OpenAL.AL.IsBuffer(System.Int32)
  - OpenTK.Audio.OpenAL.AL.IsEnabled(OpenTK.Audio.OpenAL.ALCapability)
  - OpenTK.Audio.OpenAL.AL.IsExtensionPresent(System.String)
  - OpenTK.Audio.OpenAL.AL.IsSource(System.Int32)
  - OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListener3f,OpenTK.Mathematics.Vector3@)
  - OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListener3f,System.Single,System.Single,System.Single)
  - OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerf,System.Single)
  - OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerfv,OpenTK.Mathematics.Vector3@,OpenTK.Mathematics.Vector3@)
  - OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single*)
  - OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single@)
  - OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single[])
  - OpenTK.Audio.OpenAL.AL.Source(System.Int32,OpenTK.Audio.OpenAL.ALSource3f,OpenTK.Mathematics.Vector3@)
  - OpenTK.Audio.OpenAL.AL.Source(System.Int32,OpenTK.Audio.OpenAL.ALSource3f,System.Single,System.Single,System.Single)
  - OpenTK.Audio.OpenAL.AL.Source(System.Int32,OpenTK.Audio.OpenAL.ALSource3i,System.Int32,System.Int32,System.Int32)
  - OpenTK.Audio.OpenAL.AL.Source(System.Int32,OpenTK.Audio.OpenAL.ALSourceb,System.Boolean)
  - OpenTK.Audio.OpenAL.AL.Source(System.Int32,OpenTK.Audio.OpenAL.ALSourcef,System.Single)
  - OpenTK.Audio.OpenAL.AL.Source(System.Int32,OpenTK.Audio.OpenAL.ALSourcei,System.Int32)
  - OpenTK.Audio.OpenAL.AL.SourcePause(System.Int32)
  - OpenTK.Audio.OpenAL.AL.SourcePause(System.Int32,System.Int32*)
  - OpenTK.Audio.OpenAL.AL.SourcePause(System.Int32,System.Int32@)
  - OpenTK.Audio.OpenAL.AL.SourcePause(System.Int32,System.Int32[])
  - OpenTK.Audio.OpenAL.AL.SourcePause(System.ReadOnlySpan{System.Int32})
  - OpenTK.Audio.OpenAL.AL.SourcePlay(System.Int32)
  - OpenTK.Audio.OpenAL.AL.SourcePlay(System.Int32,System.Int32*)
  - OpenTK.Audio.OpenAL.AL.SourcePlay(System.Int32,System.Int32@)
  - OpenTK.Audio.OpenAL.AL.SourcePlay(System.Int32,System.Int32[])
  - OpenTK.Audio.OpenAL.AL.SourcePlay(System.ReadOnlySpan{System.Int32})
  - OpenTK.Audio.OpenAL.AL.SourceQueueBuffer(System.Int32,System.Int32)
  - OpenTK.Audio.OpenAL.AL.SourceQueueBuffers(System.Int32,System.Int32,System.Int32*)
  - OpenTK.Audio.OpenAL.AL.SourceQueueBuffers(System.Int32,System.Int32,System.Int32@)
  - OpenTK.Audio.OpenAL.AL.SourceQueueBuffers(System.Int32,System.Int32,System.Int32[])
  - OpenTK.Audio.OpenAL.AL.SourceQueueBuffers(System.Int32,System.ReadOnlySpan{System.Int32})
  - OpenTK.Audio.OpenAL.AL.SourceRewind(System.Int32)
  - OpenTK.Audio.OpenAL.AL.SourceRewind(System.Int32,System.Int32*)
  - OpenTK.Audio.OpenAL.AL.SourceRewind(System.Int32,System.Int32@)
  - OpenTK.Audio.OpenAL.AL.SourceRewind(System.Int32,System.Int32[])
  - OpenTK.Audio.OpenAL.AL.SourceRewind(System.ReadOnlySpan{System.Int32})
  - OpenTK.Audio.OpenAL.AL.SourceStop(System.Int32)
  - OpenTK.Audio.OpenAL.AL.SourceStop(System.Int32,System.Int32*)
  - OpenTK.Audio.OpenAL.AL.SourceStop(System.Int32,System.Int32@)
  - OpenTK.Audio.OpenAL.AL.SourceStop(System.Int32,System.Int32[])
  - OpenTK.Audio.OpenAL.AL.SourceStop(System.ReadOnlySpan{System.Int32})
  - OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffer(System.Int32)
  - OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(System.Int32,System.Int32)
  - OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(System.Int32,System.Int32,System.Int32*)
  - OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(System.Int32,System.Int32,System.Int32@)
  - OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(System.Int32,System.Int32,System.Int32[])
  - OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(System.Int32,System.Int32[])
  - OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(System.Int32,System.Span{System.Int32})
  - OpenTK.Audio.OpenAL.AL.SpeedOfSound(System.Single)
  langs:
  - csharp
  - vb
  name: AL
  nameWithType: AL
  fullName: OpenTK.Audio.OpenAL.AL
  type: Class
  source:
    id: AL
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\SOFT.SourceLatency\SourceLatency.cs
    startLine: 6
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Provides access to the OpenAL 1.1 flat API.
  example: []
  syntax:
    content: 'public class AL : ALBase'
    content.vb: Public Class AL Inherits ALBase
  inheritance:
  - System.Object
  - OpenTK.Audio.OpenAL.ALBase
  inheritedMembers:
  - OpenTK.Audio.OpenAL.ALBase.RegisterOpenALResolver
  - OpenTK.Audio.OpenAL.ALBase.LoadDelegate``1(System.String)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: OpenTK.Audio.OpenAL.AL.Enable(OpenTK.Audio.OpenAL.ALCapability)
  commentId: M:OpenTK.Audio.OpenAL.AL.Enable(OpenTK.Audio.OpenAL.ALCapability)
  id: Enable(OpenTK.Audio.OpenAL.ALCapability)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: Enable(ALCapability)
  nameWithType: AL.Enable(ALCapability)
  fullName: OpenTK.Audio.OpenAL.AL.Enable(OpenTK.Audio.OpenAL.ALCapability)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function enables a feature of the OpenAL driver. There are no capabilities defined in OpenAL 1.1 to be used with this function, but it may be used by an extension.
  example: []
  syntax:
    content: public static extern void Enable(ALCapability capability)
    parameters:
    - id: capability
      type: OpenTK.Audio.OpenAL.ALCapability
      description: The name of a capability to enable.
    content.vb: Public Shared Sub Enable(capability As ALCapability)
  overload: OpenTK.Audio.OpenAL.AL.Enable*
- uid: OpenTK.Audio.OpenAL.AL.Disable(OpenTK.Audio.OpenAL.ALCapability)
  commentId: M:OpenTK.Audio.OpenAL.AL.Disable(OpenTK.Audio.OpenAL.ALCapability)
  id: Disable(OpenTK.Audio.OpenAL.ALCapability)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: Disable(ALCapability)
  nameWithType: AL.Disable(ALCapability)
  fullName: OpenTK.Audio.OpenAL.AL.Disable(OpenTK.Audio.OpenAL.ALCapability)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function disables a feature of the OpenAL driver.
  example: []
  syntax:
    content: public static extern void Disable(ALCapability capability)
    parameters:
    - id: capability
      type: OpenTK.Audio.OpenAL.ALCapability
      description: The name of a capability to disable.
    content.vb: Public Shared Sub Disable(capability As ALCapability)
  overload: OpenTK.Audio.OpenAL.AL.Disable*
- uid: OpenTK.Audio.OpenAL.AL.IsEnabled(OpenTK.Audio.OpenAL.ALCapability)
  commentId: M:OpenTK.Audio.OpenAL.AL.IsEnabled(OpenTK.Audio.OpenAL.ALCapability)
  id: IsEnabled(OpenTK.Audio.OpenAL.ALCapability)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: IsEnabled(ALCapability)
  nameWithType: AL.IsEnabled(ALCapability)
  fullName: OpenTK.Audio.OpenAL.AL.IsEnabled(OpenTK.Audio.OpenAL.ALCapability)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function returns a boolean indicating if a specific feature is enabled in the OpenAL driver.
  example: []
  syntax:
    content: public static extern bool IsEnabled(ALCapability capability)
    parameters:
    - id: capability
      type: OpenTK.Audio.OpenAL.ALCapability
      description: The name of a capability to enable.
    return:
      type: System.Boolean
      description: True if enabled, False if disabled.
    content.vb: Public Shared Function IsEnabled(capability As ALCapability) As Boolean
  overload: OpenTK.Audio.OpenAL.AL.IsEnabled*
- uid: OpenTK.Audio.OpenAL.AL.Get(OpenTK.Audio.OpenAL.ALGetString)
  commentId: M:OpenTK.Audio.OpenAL.AL.Get(OpenTK.Audio.OpenAL.ALGetString)
  id: Get(OpenTK.Audio.OpenAL.ALGetString)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: Get(ALGetString)
  nameWithType: AL.Get(ALGetString)
  fullName: OpenTK.Audio.OpenAL.AL.Get(OpenTK.Audio.OpenAL.ALGetString)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function retrieves an OpenAL string property.
  example: []
  syntax:
    content: public static extern string Get(ALGetString param)
    parameters:
    - id: param
      type: OpenTK.Audio.OpenAL.ALGetString
      description: 'The property to be returned: Vendor, Version, Renderer and Extensions.'
    return:
      type: System.String
      description: Returns a pointer to a null-terminated string.
    content.vb: Public Shared Function [Get](param As ALGetString) As String
  overload: OpenTK.Audio.OpenAL.AL.Get*
- uid: OpenTK.Audio.OpenAL.AL.GetErrorString(OpenTK.Audio.OpenAL.ALError)
  commentId: M:OpenTK.Audio.OpenAL.AL.GetErrorString(OpenTK.Audio.OpenAL.ALError)
  id: GetErrorString(OpenTK.Audio.OpenAL.ALError)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GetErrorString(ALError)
  nameWithType: AL.GetErrorString(ALError)
  fullName: OpenTK.Audio.OpenAL.AL.GetErrorString(OpenTK.Audio.OpenAL.ALError)
  type: Method
  source:
    id: GetErrorString
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 68
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function retrieves an OpenAL string property.
  example: []
  syntax:
    content: public static string GetErrorString(ALError param)
    parameters:
    - id: param
      type: OpenTK.Audio.OpenAL.ALError
      description: The human-readable errorstring to be returned.
    return:
      type: System.String
      description: Returns a pointer to a null-terminated string.
    content.vb: Public Shared Function GetErrorString(param As ALError) As String
  overload: OpenTK.Audio.OpenAL.AL.GetErrorString*
- uid: OpenTK.Audio.OpenAL.AL.Get(OpenTK.Audio.OpenAL.ALGetInteger)
  commentId: M:OpenTK.Audio.OpenAL.AL.Get(OpenTK.Audio.OpenAL.ALGetInteger)
  id: Get(OpenTK.Audio.OpenAL.ALGetInteger)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: Get(ALGetInteger)
  nameWithType: AL.Get(ALGetInteger)
  fullName: OpenTK.Audio.OpenAL.AL.Get(OpenTK.Audio.OpenAL.ALGetInteger)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function returns an integer OpenAL state.
  example: []
  syntax:
    content: public static extern int Get(ALGetInteger param)
    parameters:
    - id: param
      type: OpenTK.Audio.OpenAL.ALGetInteger
      description: 'the state to be queried: DistanceModel.'
    return:
      type: System.Int32
      description: The integer state described by param will be returned.
    content.vb: Public Shared Function [Get](param As ALGetInteger) As Integer
  overload: OpenTK.Audio.OpenAL.AL.Get*
- uid: OpenTK.Audio.OpenAL.AL.Get(OpenTK.Audio.OpenAL.ALGetFloat)
  commentId: M:OpenTK.Audio.OpenAL.AL.Get(OpenTK.Audio.OpenAL.ALGetFloat)
  id: Get(OpenTK.Audio.OpenAL.ALGetFloat)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: Get(ALGetFloat)
  nameWithType: AL.Get(ALGetFloat)
  fullName: OpenTK.Audio.OpenAL.AL.Get(OpenTK.Audio.OpenAL.ALGetFloat)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function returns a floating-point OpenAL state.
  example: []
  syntax:
    content: public static extern float Get(ALGetFloat param)
    parameters:
    - id: param
      type: OpenTK.Audio.OpenAL.ALGetFloat
      description: 'the state to be queried: DopplerFactor, SpeedOfSound.'
    return:
      type: System.Single
      description: The floating-point state described by param will be returned.
    content.vb: Public Shared Function [Get](param As ALGetFloat) As Single
  overload: OpenTK.Audio.OpenAL.AL.Get*
- uid: OpenTK.Audio.OpenAL.AL.GetError
  commentId: M:OpenTK.Audio.OpenAL.AL.GetError
  id: GetError
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GetError()
  nameWithType: AL.GetError()
  fullName: OpenTK.Audio.OpenAL.AL.GetError()
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Error support. Obtain the most recent error generated in the AL state machine. When an error is detected by AL, a flag is set and the error code is recorded. Further errors, if they occur, do not affect this recorded code. When alGetError is called, the code is returned and the flag is cleared, so that a further error will again record its code.
  example: []
  syntax:
    content: public static extern ALError GetError()
    return:
      type: OpenTK.Audio.OpenAL.ALError
      description: The first error that occured. can be used with AL.GetString. Returns an Alenum representing the error state. When an OpenAL error occurs, the error state is set and will not be changed until the error state is retrieved using alGetError. Whenever alGetError is called, the error state is cleared and the last state (the current state when the call was made) is returned. To isolate error detection to a specific portion of code, alGetError should be called before the isolated section to clear the current error state.
    content.vb: Public Shared Function GetError() As ALError
  overload: OpenTK.Audio.OpenAL.AL.GetError*
- uid: OpenTK.Audio.OpenAL.AL.IsExtensionPresent(System.String)
  commentId: M:OpenTK.Audio.OpenAL.AL.IsExtensionPresent(System.String)
  id: IsExtensionPresent(System.String)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: IsExtensionPresent(string)
  nameWithType: AL.IsExtensionPresent(string)
  fullName: OpenTK.Audio.OpenAL.AL.IsExtensionPresent(string)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function tests if a specific Extension is available for the OpenAL driver.
  example: []
  syntax:
    content: public static extern bool IsExtensionPresent(string extname)
    parameters:
    - id: extname
      type: System.String
      description: 'A string naming the desired extension. Example: "EAX-RAM".'
    return:
      type: System.Boolean
      description: Returns True if the Extension is available or False if not available.
    content.vb: Public Shared Function IsExtensionPresent(extname As String) As Boolean
  overload: OpenTK.Audio.OpenAL.AL.IsExtensionPresent*
  nameWithType.vb: AL.IsExtensionPresent(String)
  fullName.vb: OpenTK.Audio.OpenAL.AL.IsExtensionPresent(String)
  name.vb: IsExtensionPresent(String)
- uid: OpenTK.Audio.OpenAL.AL.GetProcAddress(System.String)
  commentId: M:OpenTK.Audio.OpenAL.AL.GetProcAddress(System.String)
  id: GetProcAddress(System.String)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GetProcAddress(string)
  nameWithType: AL.GetProcAddress(string)
  fullName: OpenTK.Audio.OpenAL.AL.GetProcAddress(string)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function returns the address of an OpenAL extension function. Handle with care.
  example: []
  syntax:
    content: public static extern nint GetProcAddress(string fname)
    parameters:
    - id: fname
      type: System.String
      description: A string containing the function name.
    return:
      type: System.IntPtr
      description: The return value is a pointer to the specified function. The return value will be IntPtr.Zero if the function is not found.
    content.vb: Public Shared Function GetProcAddress(fname As String) As IntPtr
  overload: OpenTK.Audio.OpenAL.AL.GetProcAddress*
  nameWithType.vb: AL.GetProcAddress(String)
  fullName.vb: OpenTK.Audio.OpenAL.AL.GetProcAddress(String)
  name.vb: GetProcAddress(String)
- uid: OpenTK.Audio.OpenAL.AL.GetEnumValue(System.String)
  commentId: M:OpenTK.Audio.OpenAL.AL.GetEnumValue(System.String)
  id: GetEnumValue(System.String)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GetEnumValue(string)
  nameWithType: AL.GetEnumValue(string)
  fullName: OpenTK.Audio.OpenAL.AL.GetEnumValue(string)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function returns the enumeration value of an OpenAL token, described by a string.
  example: []
  syntax:
    content: public static extern int GetEnumValue(string ename)
    parameters:
    - id: ename
      type: System.String
      description: A string describing an OpenAL token. Example "AL_DISTANCE_MODEL".
    return:
      type: System.Int32
      description: Returns the actual ALenum described by a string. Returns 0 if the string doesn’t describe a valid OpenAL token.
    content.vb: Public Shared Function GetEnumValue(ename As String) As Integer
  overload: OpenTK.Audio.OpenAL.AL.GetEnumValue*
  nameWithType.vb: AL.GetEnumValue(String)
  fullName.vb: OpenTK.Audio.OpenAL.AL.GetEnumValue(String)
  name.vb: GetEnumValue(String)
- uid: OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerf,System.Single)
  commentId: M:OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerf,System.Single)
  id: Listener(OpenTK.Audio.OpenAL.ALListenerf,System.Single)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: Listener(ALListenerf, float)
  nameWithType: AL.Listener(ALListenerf, float)
  fullName: OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerf, float)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function sets a floating-point property for the listener.
  example: []
  syntax:
    content: public static extern void Listener(ALListenerf param, float value)
    parameters:
    - id: param
      type: OpenTK.Audio.OpenAL.ALListenerf
      description: The name of the attribute to be set.
    - id: value
      type: System.Single
      description: The float value to set the attribute to.
    content.vb: Public Shared Sub Listener(param As ALListenerf, value As Single)
  overload: OpenTK.Audio.OpenAL.AL.Listener*
  nameWithType.vb: AL.Listener(ALListenerf, Single)
  fullName.vb: OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerf, Single)
  name.vb: Listener(ALListenerf, Single)
- uid: OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListener3f,System.Single,System.Single,System.Single)
  commentId: M:OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListener3f,System.Single,System.Single,System.Single)
  id: Listener(OpenTK.Audio.OpenAL.ALListener3f,System.Single,System.Single,System.Single)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: Listener(ALListener3f, float, float, float)
  nameWithType: AL.Listener(ALListener3f, float, float, float)
  fullName: OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListener3f, float, float, float)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function sets a floating-point property for the listener.
  example: []
  syntax:
    content: public static extern void Listener(ALListener3f param, float value1, float value2, float value3)
    parameters:
    - id: param
      type: OpenTK.Audio.OpenAL.ALListener3f
      description: The name of the attribute to set.
    - id: value1
      type: System.Single
      description: The first value to set the attribute to.
    - id: value2
      type: System.Single
      description: The second value to set the attribute to.
    - id: value3
      type: System.Single
      description: The third value to set the attribute to.
    content.vb: Public Shared Sub Listener(param As ALListener3f, value1 As Single, value2 As Single, value3 As Single)
  overload: OpenTK.Audio.OpenAL.AL.Listener*
  nameWithType.vb: AL.Listener(ALListener3f, Single, Single, Single)
  fullName.vb: OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListener3f, Single, Single, Single)
  name.vb: Listener(ALListener3f, Single, Single, Single)
- uid: OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListener3f,OpenTK.Mathematics.Vector3@)
  commentId: M:OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListener3f,OpenTK.Mathematics.Vector3@)
  id: Listener(OpenTK.Audio.OpenAL.ALListener3f,OpenTK.Mathematics.Vector3@)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: Listener(ALListener3f, ref Vector3)
  nameWithType: AL.Listener(ALListener3f, ref Vector3)
  fullName: OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListener3f, ref OpenTK.Mathematics.Vector3)
  type: Method
  source:
    id: Listener
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 167
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function sets a <xref href="OpenTK.Mathematics.Vector3" data-throw-if-not-resolved="false"></xref> property for the listener.
  example: []
  syntax:
    content: public static void Listener(ALListener3f param, ref Vector3 values)
    parameters:
    - id: param
      type: OpenTK.Audio.OpenAL.ALListener3f
      description: The name of the attribute to set.
    - id: values
      type: OpenTK.Mathematics.Vector3
      description: The <xref href="OpenTK.Mathematics.Vector3" data-throw-if-not-resolved="false"></xref> to set the attribute to.
    content.vb: Public Shared Sub Listener(param As ALListener3f, values As Vector3)
  overload: OpenTK.Audio.OpenAL.AL.Listener*
  nameWithType.vb: AL.Listener(ALListener3f, Vector3)
  fullName.vb: OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListener3f, OpenTK.Mathematics.Vector3)
  name.vb: Listener(ALListener3f, Vector3)
- uid: OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single*)
  commentId: M:OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single*)
  id: Listener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single*)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: Listener(ALListenerfv, float*)
  nameWithType: AL.Listener(ALListenerfv, float*)
  fullName: OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerfv, float*)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function sets a floating-point vector property of the listener.
  example: []
  syntax:
    content: public static extern void Listener(ALListenerfv param, float* values)
    parameters:
    - id: param
      type: OpenTK.Audio.OpenAL.ALListenerfv
      description: The name of the attribute to be set.
    - id: values
      type: System.Single*
      description: Pointer to floating-point vector values.
    content.vb: Public Shared Sub Listener(param As ALListenerfv, values As Single*)
  overload: OpenTK.Audio.OpenAL.AL.Listener*
  nameWithType.vb: AL.Listener(ALListenerfv, Single*)
  fullName.vb: OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerfv, Single*)
  name.vb: Listener(ALListenerfv, Single*)
- uid: OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single@)
  commentId: M:OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single@)
  id: Listener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single@)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: Listener(ALListenerfv, ref float)
  nameWithType: AL.Listener(ALListenerfv, ref float)
  fullName: OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerfv, ref float)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function sets a floating-point vector property of the listener.
  example: []
  syntax:
    content: public static extern void Listener(ALListenerfv param, ref float values)
    parameters:
    - id: param
      type: OpenTK.Audio.OpenAL.ALListenerfv
      description: The name of the attribute to be set.
    - id: values
      type: System.Single
      description: Pointer to floating-point vector values.
    content.vb: Public Shared Sub Listener(param As ALListenerfv, values As Single)
  overload: OpenTK.Audio.OpenAL.AL.Listener*
  nameWithType.vb: AL.Listener(ALListenerfv, Single)
  fullName.vb: OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerfv, Single)
  name.vb: Listener(ALListenerfv, Single)
- uid: OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single[])
  commentId: M:OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single[])
  id: Listener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single[])
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: Listener(ALListenerfv, float[])
  nameWithType: AL.Listener(ALListenerfv, float[])
  fullName: OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerfv, float[])
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function sets a floating-point vector property of the listener.
  example: []
  syntax:
    content: public static extern void Listener(ALListenerfv param, float[] values)
    parameters:
    - id: param
      type: OpenTK.Audio.OpenAL.ALListenerfv
      description: The name of the attribute to be set.
    - id: values
      type: System.Single[]
      description: Pointer to floating-point vector values.
    content.vb: Public Shared Sub Listener(param As ALListenerfv, values As Single())
  overload: OpenTK.Audio.OpenAL.AL.Listener*
  nameWithType.vb: AL.Listener(ALListenerfv, Single())
  fullName.vb: OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerfv, Single())
  name.vb: Listener(ALListenerfv, Single())
- uid: OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerfv,OpenTK.Mathematics.Vector3@,OpenTK.Mathematics.Vector3@)
  commentId: M:OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerfv,OpenTK.Mathematics.Vector3@,OpenTK.Mathematics.Vector3@)
  id: Listener(OpenTK.Audio.OpenAL.ALListenerfv,OpenTK.Mathematics.Vector3@,OpenTK.Mathematics.Vector3@)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: Listener(ALListenerfv, ref Vector3, ref Vector3)
  nameWithType: AL.Listener(ALListenerfv, ref Vector3, ref Vector3)
  fullName: OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerfv, ref OpenTK.Mathematics.Vector3, ref OpenTK.Mathematics.Vector3)
  type: Method
  source:
    id: Listener
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 197
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function sets two <xref href="OpenTK.Mathematics.Vector3" data-throw-if-not-resolved="false"></xref> properties of the listener.
  example: []
  syntax:
    content: public static void Listener(ALListenerfv param, ref Vector3 at, ref Vector3 up)
    parameters:
    - id: param
      type: OpenTK.Audio.OpenAL.ALListenerfv
      description: The name of the attribute to be set.
    - id: at
      type: OpenTK.Mathematics.Vector3
      description: A <xref href="OpenTK.Mathematics.Vector3" data-throw-if-not-resolved="false"></xref> for the At-Vector.
    - id: up
      type: OpenTK.Mathematics.Vector3
      description: A <xref href="OpenTK.Mathematics.Vector3" data-throw-if-not-resolved="false"></xref> for the Up-Vector.
    content.vb: Public Shared Sub Listener(param As ALListenerfv, at As Vector3, up As Vector3)
  overload: OpenTK.Audio.OpenAL.AL.Listener*
  nameWithType.vb: AL.Listener(ALListenerfv, Vector3, Vector3)
  fullName.vb: OpenTK.Audio.OpenAL.AL.Listener(OpenTK.Audio.OpenAL.ALListenerfv, OpenTK.Mathematics.Vector3, OpenTK.Mathematics.Vector3)
  name.vb: Listener(ALListenerfv, Vector3, Vector3)
- uid: OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerf,System.Single@)
  commentId: M:OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerf,System.Single@)
  id: GetListener(OpenTK.Audio.OpenAL.ALListenerf,System.Single@)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GetListener(ALListenerf, out float)
  nameWithType: AL.GetListener(ALListenerf, out float)
  fullName: OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerf, out float)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function retrieves a floating-point property of the listener.
  example: []
  syntax:
    content: public static extern void GetListener(ALListenerf param, out float value)
    parameters:
    - id: param
      type: OpenTK.Audio.OpenAL.ALListenerf
      description: 'the name of the attribute to be retrieved: ALListenerf.Gain.'
    - id: value
      type: System.Single
      description: a pointer to the floating-point value being retrieved.
    content.vb: Public Shared Sub GetListener(param As ALListenerf, value As Single)
  overload: OpenTK.Audio.OpenAL.AL.GetListener*
  nameWithType.vb: AL.GetListener(ALListenerf, Single)
  fullName.vb: OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerf, Single)
  name.vb: GetListener(ALListenerf, Single)
- uid: OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerf)
  commentId: M:OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerf)
  id: GetListener(OpenTK.Audio.OpenAL.ALListenerf)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GetListener(ALListenerf)
  nameWithType: AL.GetListener(ALListenerf)
  fullName: OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerf)
  type: Method
  source:
    id: GetListener
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 227
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function retrieves a floating-point property of the listener.
  example: []
  syntax:
    content: public static float GetListener(ALListenerf param)
    parameters:
    - id: param
      type: OpenTK.Audio.OpenAL.ALListenerf
      description: 'the name of the attribute to be retrieved: ALListenerf.Gain.'
    return:
      type: System.Single
      description: The floating-point value being retrieved.
    content.vb: Public Shared Function GetListener(param As ALListenerf) As Single
  overload: OpenTK.Audio.OpenAL.AL.GetListener*
- uid: OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListener3f,System.Single@,System.Single@,System.Single@)
  commentId: M:OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListener3f,System.Single@,System.Single@,System.Single@)
  id: GetListener(OpenTK.Audio.OpenAL.ALListener3f,System.Single@,System.Single@,System.Single@)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GetListener(ALListener3f, out float, out float, out float)
  nameWithType: AL.GetListener(ALListener3f, out float, out float, out float)
  fullName: OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListener3f, out float, out float, out float)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function retrieves a set of three floating-point values from a property of the listener.
  example: []
  syntax:
    content: public static extern void GetListener(ALListener3f param, out float value1, out float value2, out float value3)
    parameters:
    - id: param
      type: OpenTK.Audio.OpenAL.ALListener3f
      description: The name of the attribute to be retrieved.
    - id: value1
      type: System.Single
      description: The first floating-point value being retrieved.
    - id: value2
      type: System.Single
      description: The second floating-point value  being retrieved.
    - id: value3
      type: System.Single
      description: The third floating-point value  being retrieved.
    content.vb: Public Shared Sub GetListener(param As ALListener3f, value1 As Single, value2 As Single, value3 As Single)
  overload: OpenTK.Audio.OpenAL.AL.GetListener*
  nameWithType.vb: AL.GetListener(ALListener3f, Single, Single, Single)
  fullName.vb: OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListener3f, Single, Single, Single)
  name.vb: GetListener(ALListener3f, Single, Single, Single)
- uid: OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListener3f,OpenTK.Mathematics.Vector3@)
  commentId: M:OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListener3f,OpenTK.Mathematics.Vector3@)
  id: GetListener(OpenTK.Audio.OpenAL.ALListener3f,OpenTK.Mathematics.Vector3@)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GetListener(ALListener3f, out Vector3)
  nameWithType: AL.GetListener(ALListener3f, out Vector3)
  fullName: OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListener3f, out OpenTK.Mathematics.Vector3)
  type: Method
  source:
    id: GetListener
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 245
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function retrieves a <xref href="OpenTK.Mathematics.Vector3" data-throw-if-not-resolved="false"></xref> from a property of the listener.
  example: []
  syntax:
    content: public static void GetListener(ALListener3f param, out Vector3 values)
    parameters:
    - id: param
      type: OpenTK.Audio.OpenAL.ALListener3f
      description: 'The name of the attribute to be retrieved: ALListener3f.Position, ALListener3f.Velocity.'
    - id: values
      type: OpenTK.Mathematics.Vector3
      description: A <xref href="OpenTK.Mathematics.Vector3" data-throw-if-not-resolved="false"></xref> to hold the three floats being retrieved.
    content.vb: Public Shared Sub GetListener(param As ALListener3f, values As Vector3)
  overload: OpenTK.Audio.OpenAL.AL.GetListener*
  nameWithType.vb: AL.GetListener(ALListener3f, Vector3)
  fullName.vb: OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListener3f, OpenTK.Mathematics.Vector3)
  name.vb: GetListener(ALListener3f, Vector3)
- uid: OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListener3f)
  commentId: M:OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListener3f)
  id: GetListener(OpenTK.Audio.OpenAL.ALListener3f)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GetListener(ALListener3f)
  nameWithType: AL.GetListener(ALListener3f)
  fullName: OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListener3f)
  type: Method
  source:
    id: GetListener
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 253
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function retrieves a <xref href="OpenTK.Mathematics.Vector3" data-throw-if-not-resolved="false"></xref> from a property of the listener.
  example: []
  syntax:
    content: public static Vector3 GetListener(ALListener3f param)
    parameters:
    - id: param
      type: OpenTK.Audio.OpenAL.ALListener3f
      description: 'The name of the attribute to be retrieved: ALListener3f.Position, ALListener3f.Velocity.'
    return:
      type: OpenTK.Mathematics.Vector3
      description: A <xref href="OpenTK.Mathematics.Vector3" data-throw-if-not-resolved="false"></xref> to hold the three floats being retrieved.
    content.vb: Public Shared Function GetListener(param As ALListener3f) As Vector3
  overload: OpenTK.Audio.OpenAL.AL.GetListener*
- uid: OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single*)
  commentId: M:OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single*)
  id: GetListener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single*)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GetListener(ALListenerfv, float*)
  nameWithType: AL.GetListener(ALListenerfv, float*)
  fullName: OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerfv, float*)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function retrieves a floating-point vector property of the listener. You must pin it manually.
  example: []
  syntax:
    content: public static extern void GetListener(ALListenerfv param, float* values)
    parameters:
    - id: param
      type: OpenTK.Audio.OpenAL.ALListenerfv
      description: 'the name of the attribute to be retrieved: ALListener3f.Position, ALListener3f.Velocity, ALListenerfv.Orientation.'
    - id: values
      type: System.Single*
      description: A pointer to the floating-point vector value being retrieved.
    content.vb: Public Shared Sub GetListener(param As ALListenerfv, values As Single*)
  overload: OpenTK.Audio.OpenAL.AL.GetListener*
  nameWithType.vb: AL.GetListener(ALListenerfv, Single*)
  fullName.vb: OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerfv, Single*)
  name.vb: GetListener(ALListenerfv, Single*)
- uid: OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single@)
  commentId: M:OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single@)
  id: GetListener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single@)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GetListener(ALListenerfv, ref float)
  nameWithType: AL.GetListener(ALListenerfv, ref float)
  fullName: OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerfv, ref float)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function retrieves a floating-point vector property of the listener. You must pin it manually.
  example: []
  syntax:
    content: public static extern void GetListener(ALListenerfv param, ref float values)
    parameters:
    - id: param
      type: OpenTK.Audio.OpenAL.ALListenerfv
      description: 'the name of the attribute to be retrieved: ALListener3f.Position, ALListener3f.Velocity, ALListenerfv.Orientation.'
    - id: values
      type: System.Single
      description: A pointer to the floating-point vector value being retrieved.
    content.vb: Public Shared Sub GetListener(param As ALListenerfv, values As Single)
  overload: OpenTK.Audio.OpenAL.AL.GetListener*
  nameWithType.vb: AL.GetListener(ALListenerfv, Single)
  fullName.vb: OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerfv, Single)
  name.vb: GetListener(ALListenerfv, Single)
- uid: OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single[])
  commentId: M:OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single[])
  id: GetListener(OpenTK.Audio.OpenAL.ALListenerfv,System.Single[])
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GetListener(ALListenerfv, float[])
  nameWithType: AL.GetListener(ALListenerfv, float[])
  fullName: OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerfv, float[])
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function retrieves a floating-point vector property of the listener. You must pin it manually.
  example: []
  syntax:
    content: public static extern void GetListener(ALListenerfv param, float[] values)
    parameters:
    - id: param
      type: OpenTK.Audio.OpenAL.ALListenerfv
      description: 'the name of the attribute to be retrieved: ALListener3f.Position, ALListener3f.Velocity, ALListenerfv.Orientation.'
    - id: values
      type: System.Single[]
      description: A pointer to the floating-point vector value being retrieved.
    content.vb: Public Shared Sub GetListener(param As ALListenerfv, values As Single())
  overload: OpenTK.Audio.OpenAL.AL.GetListener*
  nameWithType.vb: AL.GetListener(ALListenerfv, Single())
  fullName.vb: OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerfv, Single())
  name.vb: GetListener(ALListenerfv, Single())
- uid: OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerfv,OpenTK.Mathematics.Vector3@,OpenTK.Mathematics.Vector3@)
  commentId: M:OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerfv,OpenTK.Mathematics.Vector3@,OpenTK.Mathematics.Vector3@)
  id: GetListener(OpenTK.Audio.OpenAL.ALListenerfv,OpenTK.Mathematics.Vector3@,OpenTK.Mathematics.Vector3@)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GetListener(ALListenerfv, out Vector3, out Vector3)
  nameWithType: AL.GetListener(ALListenerfv, out Vector3, out Vector3)
  fullName: OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerfv, out OpenTK.Mathematics.Vector3, out OpenTK.Mathematics.Vector3)
  type: Method
  source:
    id: GetListener
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 284
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function retrieves two <xref href="OpenTK.Mathematics.Vector3" data-throw-if-not-resolved="false"></xref> properties of the listener.
  example: []
  syntax:
    content: public static void GetListener(ALListenerfv param, out Vector3 at, out Vector3 up)
    parameters:
    - id: param
      type: OpenTK.Audio.OpenAL.ALListenerfv
      description: 'the name of the attribute to be retrieved: ALListenerfv.Orientation.'
    - id: at
      type: OpenTK.Mathematics.Vector3
      description: A <xref href="OpenTK.Mathematics.Vector3" data-throw-if-not-resolved="false"></xref> for the At-Vector.
    - id: up
      type: OpenTK.Mathematics.Vector3
      description: A <xref href="OpenTK.Mathematics.Vector3" data-throw-if-not-resolved="false"></xref> for the Up-Vector.
    content.vb: Public Shared Sub GetListener(param As ALListenerfv, at As Vector3, up As Vector3)
  overload: OpenTK.Audio.OpenAL.AL.GetListener*
  nameWithType.vb: AL.GetListener(ALListenerfv, Vector3, Vector3)
  fullName.vb: OpenTK.Audio.OpenAL.AL.GetListener(OpenTK.Audio.OpenAL.ALListenerfv, OpenTK.Mathematics.Vector3, OpenTK.Mathematics.Vector3)
  name.vb: GetListener(ALListenerfv, Vector3, Vector3)
- uid: OpenTK.Audio.OpenAL.AL.GenSources(System.Int32,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.AL.GenSources(System.Int32,System.Int32*)
  id: GenSources(System.Int32,System.Int32*)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GenSources(int, int*)
  nameWithType: AL.GenSources(int, int*)
  fullName: OpenTK.Audio.OpenAL.AL.GenSources(int, int*)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function generates one or more sources.
  example: []
  syntax:
    content: public static extern void GenSources(int n, int* sources)
    parameters:
    - id: n
      type: System.Int32
      description: The number of sources to be generated.
    - id: sources
      type: System.Int32*
      description: Pointer to an array of int values which will store the names of the new sources.
    content.vb: Public Shared Sub GenSources(n As Integer, sources As Integer*)
  overload: OpenTK.Audio.OpenAL.AL.GenSources*
  nameWithType.vb: AL.GenSources(Integer, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.AL.GenSources(Integer, Integer*)
  name.vb: GenSources(Integer, Integer*)
- uid: OpenTK.Audio.OpenAL.AL.GenSources(System.Int32,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.AL.GenSources(System.Int32,System.Int32@)
  id: GenSources(System.Int32,System.Int32@)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GenSources(int, ref int)
  nameWithType: AL.GenSources(int, ref int)
  fullName: OpenTK.Audio.OpenAL.AL.GenSources(int, ref int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function generates one or more sources.
  example: []
  syntax:
    content: public static extern void GenSources(int n, ref int sources)
    parameters:
    - id: n
      type: System.Int32
      description: The number of sources to be generated.
    - id: sources
      type: System.Int32
      description: Pointer to an array of int values which will store the names of the new sources.
    content.vb: Public Shared Sub GenSources(n As Integer, sources As Integer)
  overload: OpenTK.Audio.OpenAL.AL.GenSources*
  nameWithType.vb: AL.GenSources(Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.GenSources(Integer, Integer)
  name.vb: GenSources(Integer, Integer)
- uid: OpenTK.Audio.OpenAL.AL.GenSources(System.Int32,System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.AL.GenSources(System.Int32,System.Int32[])
  id: GenSources(System.Int32,System.Int32[])
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GenSources(int, int[])
  nameWithType: AL.GenSources(int, int[])
  fullName: OpenTK.Audio.OpenAL.AL.GenSources(int, int[])
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function generates one or more sources.
  example: []
  syntax:
    content: public static extern void GenSources(int n, int[] sources)
    parameters:
    - id: n
      type: System.Int32
      description: The number of sources to be generated.
    - id: sources
      type: System.Int32[]
      description: Pointer to an array of int values which will store the names of the new sources.
    content.vb: Public Shared Sub GenSources(n As Integer, sources As Integer())
  overload: OpenTK.Audio.OpenAL.AL.GenSources*
  nameWithType.vb: AL.GenSources(Integer, Integer())
  fullName.vb: OpenTK.Audio.OpenAL.AL.GenSources(Integer, Integer())
  name.vb: GenSources(Integer, Integer())
- uid: OpenTK.Audio.OpenAL.AL.GenSources(System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.AL.GenSources(System.Int32[])
  id: GenSources(System.Int32[])
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GenSources(int[])
  nameWithType: AL.GenSources(int[])
  fullName: OpenTK.Audio.OpenAL.AL.GenSources(int[])
  type: Method
  source:
    id: GenSources
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 363
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function generates one or more sources.
  example: []
  syntax:
    content: public static void GenSources(int[] sources)
    parameters:
    - id: sources
      type: System.Int32[]
      description: Pointer to an array of int values which will store the names of the new sources.
    content.vb: Public Shared Sub GenSources(sources As Integer())
  overload: OpenTK.Audio.OpenAL.AL.GenSources*
  nameWithType.vb: AL.GenSources(Integer())
  fullName.vb: OpenTK.Audio.OpenAL.AL.GenSources(Integer())
  name.vb: GenSources(Integer())
- uid: OpenTK.Audio.OpenAL.AL.GenSources(System.Span{System.Int32})
  commentId: M:OpenTK.Audio.OpenAL.AL.GenSources(System.Span{System.Int32})
  id: GenSources(System.Span{System.Int32})
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GenSources(Span<int>)
  nameWithType: AL.GenSources(Span<int>)
  fullName: OpenTK.Audio.OpenAL.AL.GenSources(System.Span<int>)
  type: Method
  source:
    id: GenSources
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 374
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function generates one or more sources.
  example: []
  syntax:
    content: public static void GenSources(Span<int> sources)
    parameters:
    - id: sources
      type: System.Span{System.Int32}
      description: Span of int values which will store the names of the new sources.
    content.vb: Public Shared Sub GenSources(sources As Span(Of Integer))
  overload: OpenTK.Audio.OpenAL.AL.GenSources*
  nameWithType.vb: AL.GenSources(Span(Of Integer))
  fullName.vb: OpenTK.Audio.OpenAL.AL.GenSources(System.Span(Of Integer))
  name.vb: GenSources(Span(Of Integer))
- uid: OpenTK.Audio.OpenAL.AL.GenSources(System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.AL.GenSources(System.Int32)
  id: GenSources(System.Int32)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GenSources(int)
  nameWithType: AL.GenSources(int)
  fullName: OpenTK.Audio.OpenAL.AL.GenSources(int)
  type: Method
  source:
    id: GenSources
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 382
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function generates one or more sources.
  example: []
  syntax:
    content: public static int[] GenSources(int n)
    parameters:
    - id: n
      type: System.Int32
      description: The number of sources to be generated.
    return:
      type: System.Int32[]
      description: Pointer to an array of int values which will store the names of the new sources.
    content.vb: Public Shared Function GenSources(n As Integer) As Integer()
  overload: OpenTK.Audio.OpenAL.AL.GenSources*
  nameWithType.vb: AL.GenSources(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.GenSources(Integer)
  name.vb: GenSources(Integer)
- uid: OpenTK.Audio.OpenAL.AL.GenSource
  commentId: M:OpenTK.Audio.OpenAL.AL.GenSource
  id: GenSource
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GenSource()
  nameWithType: AL.GenSource()
  fullName: OpenTK.Audio.OpenAL.AL.GenSource()
  type: Method
  source:
    id: GenSource
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 391
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function generates one source only.
  example: []
  syntax:
    content: public static int GenSource()
    return:
      type: System.Int32
      description: Pointer to an int value which will store the name of the new source.
    content.vb: Public Shared Function GenSource() As Integer
  overload: OpenTK.Audio.OpenAL.AL.GenSource*
- uid: OpenTK.Audio.OpenAL.AL.GenSource(System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.AL.GenSource(System.Int32@)
  id: GenSource(System.Int32@)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GenSource(out int)
  nameWithType: AL.GenSource(out int)
  fullName: OpenTK.Audio.OpenAL.AL.GenSource(out int)
  type: Method
  source:
    id: GenSource
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 400
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function generates one source only.
  example: []
  syntax:
    content: public static void GenSource(out int source)
    parameters:
    - id: source
      type: System.Int32
      description: Pointer to an int value which will store the name of the new source.
    content.vb: Public Shared Sub GenSource(source As Integer)
  overload: OpenTK.Audio.OpenAL.AL.GenSource*
  nameWithType.vb: AL.GenSource(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.GenSource(Integer)
  name.vb: GenSource(Integer)
- uid: OpenTK.Audio.OpenAL.AL.DeleteSources(System.Int32,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.AL.DeleteSources(System.Int32,System.Int32*)
  id: DeleteSources(System.Int32,System.Int32*)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: DeleteSources(int, int*)
  nameWithType: AL.DeleteSources(int, int*)
  fullName: OpenTK.Audio.OpenAL.AL.DeleteSources(int, int*)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function deletes one or more sources.
  example: []
  syntax:
    content: public static extern void DeleteSources(int n, int* sources)
    parameters:
    - id: n
      type: System.Int32
      description: The number of sources to be deleted.
    - id: sources
      type: System.Int32*
      description: Pointer to an array of source names identifying the sources to be deleted.
    content.vb: Public Shared Sub DeleteSources(n As Integer, sources As Integer*)
  overload: OpenTK.Audio.OpenAL.AL.DeleteSources*
  nameWithType.vb: AL.DeleteSources(Integer, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.AL.DeleteSources(Integer, Integer*)
  name.vb: DeleteSources(Integer, Integer*)
- uid: OpenTK.Audio.OpenAL.AL.DeleteSources(System.Int32,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.AL.DeleteSources(System.Int32,System.Int32@)
  id: DeleteSources(System.Int32,System.Int32@)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: DeleteSources(int, ref int)
  nameWithType: AL.DeleteSources(int, ref int)
  fullName: OpenTK.Audio.OpenAL.AL.DeleteSources(int, ref int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function deletes one or more sources.
  example: []
  syntax:
    content: public static extern void DeleteSources(int n, ref int sources)
    parameters:
    - id: n
      type: System.Int32
      description: The number of sources to be deleted.
    - id: sources
      type: System.Int32
      description: Reference to a single source, or an array of source names identifying the sources to be deleted.
    content.vb: Public Shared Sub DeleteSources(n As Integer, sources As Integer)
  overload: OpenTK.Audio.OpenAL.AL.DeleteSources*
  nameWithType.vb: AL.DeleteSources(Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.DeleteSources(Integer, Integer)
  name.vb: DeleteSources(Integer, Integer)
- uid: OpenTK.Audio.OpenAL.AL.DeleteSources(System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.AL.DeleteSources(System.Int32[])
  id: DeleteSources(System.Int32[])
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: DeleteSources(int[])
  nameWithType: AL.DeleteSources(int[])
  fullName: OpenTK.Audio.OpenAL.AL.DeleteSources(int[])
  type: Method
  source:
    id: DeleteSources
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 422
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function deletes one or more sources.
  example: []
  syntax:
    content: public static void DeleteSources(int[] sources)
    parameters:
    - id: sources
      type: System.Int32[]
      description: An array of source names identifying the sources to be deleted.
    content.vb: Public Shared Sub DeleteSources(sources As Integer())
  overload: OpenTK.Audio.OpenAL.AL.DeleteSources*
  nameWithType.vb: AL.DeleteSources(Integer())
  fullName.vb: OpenTK.Audio.OpenAL.AL.DeleteSources(Integer())
  name.vb: DeleteSources(Integer())
- uid: OpenTK.Audio.OpenAL.AL.DeleteSources(System.ReadOnlySpan{System.Int32})
  commentId: M:OpenTK.Audio.OpenAL.AL.DeleteSources(System.ReadOnlySpan{System.Int32})
  id: DeleteSources(System.ReadOnlySpan{System.Int32})
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: DeleteSources(ReadOnlySpan<int>)
  nameWithType: AL.DeleteSources(ReadOnlySpan<int>)
  fullName: OpenTK.Audio.OpenAL.AL.DeleteSources(System.ReadOnlySpan<int>)
  type: Method
  source:
    id: DeleteSources
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 433
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function deletes one or more sources.
  example: []
  syntax:
    content: public static void DeleteSources(ReadOnlySpan<int> sources)
    parameters:
    - id: sources
      type: System.ReadOnlySpan{System.Int32}
      description: An array of source names identifying the sources to be deleted.
    content.vb: Public Shared Sub DeleteSources(sources As ReadOnlySpan(Of Integer))
  overload: OpenTK.Audio.OpenAL.AL.DeleteSources*
  nameWithType.vb: AL.DeleteSources(ReadOnlySpan(Of Integer))
  fullName.vb: OpenTK.Audio.OpenAL.AL.DeleteSources(System.ReadOnlySpan(Of Integer))
  name.vb: DeleteSources(ReadOnlySpan(Of Integer))
- uid: OpenTK.Audio.OpenAL.AL.DeleteSource(System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.AL.DeleteSource(System.Int32)
  id: DeleteSource(System.Int32)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: DeleteSource(int)
  nameWithType: AL.DeleteSource(int)
  fullName: OpenTK.Audio.OpenAL.AL.DeleteSource(int)
  type: Method
  source:
    id: DeleteSource
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 440
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function deletes one source only.
  example: []
  syntax:
    content: public static void DeleteSource(int source)
    parameters:
    - id: source
      type: System.Int32
      description: Pointer to a source name identifying the source to be deleted.
    content.vb: Public Shared Sub DeleteSource(source As Integer)
  overload: OpenTK.Audio.OpenAL.AL.DeleteSource*
  nameWithType.vb: AL.DeleteSource(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.DeleteSource(Integer)
  name.vb: DeleteSource(Integer)
- uid: OpenTK.Audio.OpenAL.AL.IsSource(System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.AL.IsSource(System.Int32)
  id: IsSource(System.Int32)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: IsSource(int)
  nameWithType: AL.IsSource(int)
  fullName: OpenTK.Audio.OpenAL.AL.IsSource(int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function tests if a source name is valid, returning True if valid and False if not.
  example: []
  syntax:
    content: public static extern bool IsSource(int sid)
    parameters:
    - id: sid
      type: System.Int32
      description: A source name to be tested for validity.
    return:
      type: System.Boolean
      description: Success.
    content.vb: Public Shared Function IsSource(sid As Integer) As Boolean
  overload: OpenTK.Audio.OpenAL.AL.IsSource*
  nameWithType.vb: AL.IsSource(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.IsSource(Integer)
  name.vb: IsSource(Integer)
- uid: OpenTK.Audio.OpenAL.AL.Source(System.Int32,OpenTK.Audio.OpenAL.ALSourcef,System.Single)
  commentId: M:OpenTK.Audio.OpenAL.AL.Source(System.Int32,OpenTK.Audio.OpenAL.ALSourcef,System.Single)
  id: Source(System.Int32,OpenTK.Audio.OpenAL.ALSourcef,System.Single)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: Source(int, ALSourcef, float)
  nameWithType: AL.Source(int, ALSourcef, float)
  fullName: OpenTK.Audio.OpenAL.AL.Source(int, OpenTK.Audio.OpenAL.ALSourcef, float)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function sets a floating-point property of a source.
  example: []
  syntax:
    content: public static extern void Source(int sid, ALSourcef param, float value)
    parameters:
    - id: sid
      type: System.Int32
      description: Source name whose attribute is being set.
    - id: param
      type: OpenTK.Audio.OpenAL.ALSourcef
      description: 'The name of the attribute to set: ALSourcef.Pitch, Gain, MinGain, MaxGain, MaxDistance, RolloffFactor, ConeOuterGain, ConeInnerAngle, ConeOuterAngle, SecOffset, ReferenceDistance, EfxAirAbsorptionFactor, EfxRoomRolloffFactor, EfxConeOuterGainHighFrequency.'
    - id: value
      type: System.Single
      description: The value to set the attribute to.
    content.vb: Public Shared Sub Source(sid As Integer, param As ALSourcef, value As Single)
  overload: OpenTK.Audio.OpenAL.AL.Source*
  nameWithType.vb: AL.Source(Integer, ALSourcef, Single)
  fullName.vb: OpenTK.Audio.OpenAL.AL.Source(Integer, OpenTK.Audio.OpenAL.ALSourcef, Single)
  name.vb: Source(Integer, ALSourcef, Single)
- uid: OpenTK.Audio.OpenAL.AL.Source(System.Int32,OpenTK.Audio.OpenAL.ALSource3f,System.Single,System.Single,System.Single)
  commentId: M:OpenTK.Audio.OpenAL.AL.Source(System.Int32,OpenTK.Audio.OpenAL.ALSource3f,System.Single,System.Single,System.Single)
  id: Source(System.Int32,OpenTK.Audio.OpenAL.ALSource3f,System.Single,System.Single,System.Single)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: Source(int, ALSource3f, float, float, float)
  nameWithType: AL.Source(int, ALSource3f, float, float, float)
  fullName: OpenTK.Audio.OpenAL.AL.Source(int, OpenTK.Audio.OpenAL.ALSource3f, float, float, float)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function sets a source property requiring three floating-point values.
  example: []
  syntax:
    content: public static extern void Source(int sid, ALSource3f param, float value1, float value2, float value3)
    parameters:
    - id: sid
      type: System.Int32
      description: Source name whose attribute is being set.
    - id: param
      type: OpenTK.Audio.OpenAL.ALSource3f
      description: 'The name of the attribute to set: ALSource3f.Position, Velocity, Direction.'
    - id: value1
      type: System.Single
      description: The first ALfloat value which the attribute will be set to.
    - id: value2
      type: System.Single
      description: The second ALfloat value which the attribute will be set to.
    - id: value3
      type: System.Single
      description: The third ALfloat value which the attribute will be set to.
    content.vb: Public Shared Sub Source(sid As Integer, param As ALSource3f, value1 As Single, value2 As Single, value3 As Single)
  overload: OpenTK.Audio.OpenAL.AL.Source*
  nameWithType.vb: AL.Source(Integer, ALSource3f, Single, Single, Single)
  fullName.vb: OpenTK.Audio.OpenAL.AL.Source(Integer, OpenTK.Audio.OpenAL.ALSource3f, Single, Single, Single)
  name.vb: Source(Integer, ALSource3f, Single, Single, Single)
- uid: OpenTK.Audio.OpenAL.AL.Source(System.Int32,OpenTK.Audio.OpenAL.ALSource3f,OpenTK.Mathematics.Vector3@)
  commentId: M:OpenTK.Audio.OpenAL.AL.Source(System.Int32,OpenTK.Audio.OpenAL.ALSource3f,OpenTK.Mathematics.Vector3@)
  id: Source(System.Int32,OpenTK.Audio.OpenAL.ALSource3f,OpenTK.Mathematics.Vector3@)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: Source(int, ALSource3f, ref Vector3)
  nameWithType: AL.Source(int, ALSource3f, ref Vector3)
  fullName: OpenTK.Audio.OpenAL.AL.Source(int, OpenTK.Audio.OpenAL.ALSource3f, ref OpenTK.Mathematics.Vector3)
  type: Method
  source:
    id: Source
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 474
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function sets a source property requiring three floating-point values.
  example: []
  syntax:
    content: public static void Source(int sid, ALSource3f param, ref Vector3 values)
    parameters:
    - id: sid
      type: System.Int32
      description: Source name whose attribute is being set.
    - id: param
      type: OpenTK.Audio.OpenAL.ALSource3f
      description: 'The name of the attribute to set: ALSource3f.Position, Velocity, Direction.'
    - id: values
      type: OpenTK.Mathematics.Vector3
      description: A <xref href="OpenTK.Mathematics.Vector3" data-throw-if-not-resolved="false"></xref> which the attribute will be set to.
    content.vb: Public Shared Sub Source(sid As Integer, param As ALSource3f, values As Vector3)
  overload: OpenTK.Audio.OpenAL.AL.Source*
  nameWithType.vb: AL.Source(Integer, ALSource3f, Vector3)
  fullName.vb: OpenTK.Audio.OpenAL.AL.Source(Integer, OpenTK.Audio.OpenAL.ALSource3f, OpenTK.Mathematics.Vector3)
  name.vb: Source(Integer, ALSource3f, Vector3)
- uid: OpenTK.Audio.OpenAL.AL.Source(System.Int32,OpenTK.Audio.OpenAL.ALSourcei,System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.AL.Source(System.Int32,OpenTK.Audio.OpenAL.ALSourcei,System.Int32)
  id: Source(System.Int32,OpenTK.Audio.OpenAL.ALSourcei,System.Int32)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: Source(int, ALSourcei, int)
  nameWithType: AL.Source(int, ALSourcei, int)
  fullName: OpenTK.Audio.OpenAL.AL.Source(int, OpenTK.Audio.OpenAL.ALSourcei, int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function sets an integer property of a source.
  example: []
  syntax:
    content: public static extern void Source(int sid, ALSourcei param, int value)
    parameters:
    - id: sid
      type: System.Int32
      description: Source name whose attribute is being set.
    - id: param
      type: OpenTK.Audio.OpenAL.ALSourcei
      description: 'The name of the attribute to set: ALSourcei.SourceRelative, ConeInnerAngle, ConeOuterAngle, Looping, Buffer, SourceState.'
    - id: value
      type: System.Int32
      description: The value to set the attribute to.
    content.vb: Public Shared Sub Source(sid As Integer, param As ALSourcei, value As Integer)
  overload: OpenTK.Audio.OpenAL.AL.Source*
  nameWithType.vb: AL.Source(Integer, ALSourcei, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.Source(Integer, OpenTK.Audio.OpenAL.ALSourcei, Integer)
  name.vb: Source(Integer, ALSourcei, Integer)
- uid: OpenTK.Audio.OpenAL.AL.Source(System.Int32,OpenTK.Audio.OpenAL.ALSourceb,System.Boolean)
  commentId: M:OpenTK.Audio.OpenAL.AL.Source(System.Int32,OpenTK.Audio.OpenAL.ALSourceb,System.Boolean)
  id: Source(System.Int32,OpenTK.Audio.OpenAL.ALSourceb,System.Boolean)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: Source(int, ALSourceb, bool)
  nameWithType: AL.Source(int, ALSourceb, bool)
  fullName: OpenTK.Audio.OpenAL.AL.Source(int, OpenTK.Audio.OpenAL.ALSourceb, bool)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function sets an bool property of a source.
  example: []
  syntax:
    content: public static extern void Source(int sid, ALSourceb param, bool value)
    parameters:
    - id: sid
      type: System.Int32
      description: Source name whose attribute is being set.
    - id: param
      type: OpenTK.Audio.OpenAL.ALSourceb
      description: 'The name of the attribute to set: ALSourceb.SourceRelative, Looping.'
    - id: value
      type: System.Boolean
      description: The value to set the attribute to.
    content.vb: Public Shared Sub Source(sid As Integer, param As ALSourceb, value As Boolean)
  overload: OpenTK.Audio.OpenAL.AL.Source*
  nameWithType.vb: AL.Source(Integer, ALSourceb, Boolean)
  fullName.vb: OpenTK.Audio.OpenAL.AL.Source(Integer, OpenTK.Audio.OpenAL.ALSourceb, Boolean)
  name.vb: Source(Integer, ALSourceb, Boolean)
- uid: OpenTK.Audio.OpenAL.AL.Source(System.Int32,OpenTK.Audio.OpenAL.ALSource3i,System.Int32,System.Int32,System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.AL.Source(System.Int32,OpenTK.Audio.OpenAL.ALSource3i,System.Int32,System.Int32,System.Int32)
  id: Source(System.Int32,OpenTK.Audio.OpenAL.ALSource3i,System.Int32,System.Int32,System.Int32)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: Source(int, ALSource3i, int, int, int)
  nameWithType: AL.Source(int, ALSource3i, int, int, int)
  fullName: OpenTK.Audio.OpenAL.AL.Source(int, OpenTK.Audio.OpenAL.ALSource3i, int, int, int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function sets 3 integer properties of a source.
  example: []
  syntax:
    content: public static extern void Source(int sid, ALSource3i param, int value1, int value2, int value3)
    parameters:
    - id: sid
      type: System.Int32
      description: Source name whose attribute is being set.
    - id: param
      type: OpenTK.Audio.OpenAL.ALSource3i
      description: 'The name of the attribute to set: EfxAuxiliarySendFilter..'
    - id: value1
      type: System.Int32
      description: The first value to set the attribute to.
    - id: value2
      type: System.Int32
      description: The second value to set the attribute to.
    - id: value3
      type: System.Int32
      description: The third value to set the attribute to.
    content.vb: Public Shared Sub Source(sid As Integer, param As ALSource3i, value1 As Integer, value2 As Integer, value3 As Integer)
  overload: OpenTK.Audio.OpenAL.AL.Source*
  nameWithType.vb: AL.Source(Integer, ALSource3i, Integer, Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.Source(Integer, OpenTK.Audio.OpenAL.ALSource3i, Integer, Integer, Integer)
  name.vb: Source(Integer, ALSource3i, Integer, Integer, Integer)
- uid: OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSourcef,System.Single@)
  commentId: M:OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSourcef,System.Single@)
  id: GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSourcef,System.Single@)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GetSource(int, ALSourcef, out float)
  nameWithType: AL.GetSource(int, ALSourcef, out float)
  fullName: OpenTK.Audio.OpenAL.AL.GetSource(int, OpenTK.Audio.OpenAL.ALSourcef, out float)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function retrieves a floating-point property of a source.
  example: []
  syntax:
    content: public static extern void GetSource(int sid, ALSourcef param, out float value)
    parameters:
    - id: sid
      type: System.Int32
      description: Source name whose attribute is being retrieved.
    - id: param
      type: OpenTK.Audio.OpenAL.ALSourcef
      description: 'The name of the attribute to set: ALSourcef.Pitch, Gain, MinGain, MaxGain, MaxDistance, RolloffFactor, ConeOuterGain, ConeInnerAngle, ConeOuterAngle, SecOffset, ReferenceDistance, EfxAirAbsorptionFactor, EfxRoomRolloffFactor, EfxConeOuterGainHighFrequency.'
    - id: value
      type: System.Single
      description: A pointer to the floating-point value being retrieved.
    content.vb: Public Shared Sub GetSource(sid As Integer, param As ALSourcef, value As Single)
  overload: OpenTK.Audio.OpenAL.AL.GetSource*
  nameWithType.vb: AL.GetSource(Integer, ALSourcef, Single)
  fullName.vb: OpenTK.Audio.OpenAL.AL.GetSource(Integer, OpenTK.Audio.OpenAL.ALSourcef, Single)
  name.vb: GetSource(Integer, ALSourcef, Single)
- uid: OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSourcef)
  commentId: M:OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSourcef)
  id: GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSourcef)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GetSource(int, ALSourcef)
  nameWithType: AL.GetSource(int, ALSourcef)
  fullName: OpenTK.Audio.OpenAL.AL.GetSource(int, OpenTK.Audio.OpenAL.ALSourcef)
  type: Method
  source:
    id: GetSource
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 520
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function retrieves a floating-point property of a source.
  example: []
  syntax:
    content: public static float GetSource(int sid, ALSourcef param)
    parameters:
    - id: sid
      type: System.Int32
      description: Source name whose attribute is being retrieved.
    - id: param
      type: OpenTK.Audio.OpenAL.ALSourcef
      description: 'The name of the attribute to set: ALSourcef.Pitch, Gain, MinGain, MaxGain, MaxDistance, RolloffFactor, ConeOuterGain, ConeInnerAngle, ConeOuterAngle, SecOffset, ReferenceDistance, EfxAirAbsorptionFactor, EfxRoomRolloffFactor, EfxConeOuterGainHighFrequency.'
    return:
      type: System.Single
      description: The floating-point value being retrieved.
    content.vb: Public Shared Function GetSource(sid As Integer, param As ALSourcef) As Single
  overload: OpenTK.Audio.OpenAL.AL.GetSource*
  nameWithType.vb: AL.GetSource(Integer, ALSourcef)
  fullName.vb: OpenTK.Audio.OpenAL.AL.GetSource(Integer, OpenTK.Audio.OpenAL.ALSourcef)
  name.vb: GetSource(Integer, ALSourcef)
- uid: OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSource3f,System.Single@,System.Single@,System.Single@)
  commentId: M:OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSource3f,System.Single@,System.Single@,System.Single@)
  id: GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSource3f,System.Single@,System.Single@,System.Single@)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GetSource(int, ALSource3f, out float, out float, out float)
  nameWithType: AL.GetSource(int, ALSource3f, out float, out float, out float)
  fullName: OpenTK.Audio.OpenAL.AL.GetSource(int, OpenTK.Audio.OpenAL.ALSource3f, out float, out float, out float)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function retrieves three floating-point values representing a property of a source.
  example: []
  syntax:
    content: public static extern void GetSource(int sid, ALSource3f param, out float value1, out float value2, out float value3)
    parameters:
    - id: sid
      type: System.Int32
      description: Source name whose attribute is being retrieved.
    - id: param
      type: OpenTK.Audio.OpenAL.ALSource3f
      description: 'The name of the attribute being retrieved: ALSource3f.Position, Velocity, Direction.'
    - id: value1
      type: System.Single
      description: Pointer to the first value to retrieve.
    - id: value2
      type: System.Single
      description: Pointer to the second value to retrieve.
    - id: value3
      type: System.Single
      description: Pointer to the third value to retrieve.
    content.vb: Public Shared Sub GetSource(sid As Integer, param As ALSource3f, value1 As Single, value2 As Single, value3 As Single)
  overload: OpenTK.Audio.OpenAL.AL.GetSource*
  nameWithType.vb: AL.GetSource(Integer, ALSource3f, Single, Single, Single)
  fullName.vb: OpenTK.Audio.OpenAL.AL.GetSource(Integer, OpenTK.Audio.OpenAL.ALSource3f, Single, Single, Single)
  name.vb: GetSource(Integer, ALSource3f, Single, Single, Single)
- uid: OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSource3f,OpenTK.Mathematics.Vector3@)
  commentId: M:OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSource3f,OpenTK.Mathematics.Vector3@)
  id: GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSource3f,OpenTK.Mathematics.Vector3@)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GetSource(int, ALSource3f, out Vector3)
  nameWithType: AL.GetSource(int, ALSource3f, out Vector3)
  fullName: OpenTK.Audio.OpenAL.AL.GetSource(int, OpenTK.Audio.OpenAL.ALSource3f, out OpenTK.Mathematics.Vector3)
  type: Method
  source:
    id: GetSource
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 540
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function retrieves three floating-point values representing a property of a source.
  example: []
  syntax:
    content: public static void GetSource(int sid, ALSource3f param, out Vector3 values)
    parameters:
    - id: sid
      type: System.Int32
      description: Source name whose attribute is being retrieved.
    - id: param
      type: OpenTK.Audio.OpenAL.ALSource3f
      description: 'The name of the attribute being retrieved: ALSource3f.Position, Velocity, Direction.'
    - id: values
      type: OpenTK.Mathematics.Vector3
      description: A <xref href="OpenTK.Mathematics.Vector3" data-throw-if-not-resolved="false"></xref> to retrieve the values to.
    content.vb: Public Shared Sub GetSource(sid As Integer, param As ALSource3f, values As Vector3)
  overload: OpenTK.Audio.OpenAL.AL.GetSource*
  nameWithType.vb: AL.GetSource(Integer, ALSource3f, Vector3)
  fullName.vb: OpenTK.Audio.OpenAL.AL.GetSource(Integer, OpenTK.Audio.OpenAL.ALSource3f, OpenTK.Mathematics.Vector3)
  name.vb: GetSource(Integer, ALSource3f, Vector3)
- uid: OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSource3f)
  commentId: M:OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSource3f)
  id: GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSource3f)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GetSource(int, ALSource3f)
  nameWithType: AL.GetSource(int, ALSource3f)
  fullName: OpenTK.Audio.OpenAL.AL.GetSource(int, OpenTK.Audio.OpenAL.ALSource3f)
  type: Method
  source:
    id: GetSource
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 549
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function retrieves three floating-point values representing a property of a source.
  example: []
  syntax:
    content: public static Vector3 GetSource(int sid, ALSource3f param)
    parameters:
    - id: sid
      type: System.Int32
      description: Source name whose attribute is being retrieved.
    - id: param
      type: OpenTK.Audio.OpenAL.ALSource3f
      description: 'The name of the attribute being retrieved: ALSource3f.Position, Velocity, Direction.'
    return:
      type: OpenTK.Mathematics.Vector3
      description: A <xref href="OpenTK.Mathematics.Vector3" data-throw-if-not-resolved="false"></xref> to with the received values.
    content.vb: Public Shared Function GetSource(sid As Integer, param As ALSource3f) As Vector3
  overload: OpenTK.Audio.OpenAL.AL.GetSource*
  nameWithType.vb: AL.GetSource(Integer, ALSource3f)
  fullName.vb: OpenTK.Audio.OpenAL.AL.GetSource(Integer, OpenTK.Audio.OpenAL.ALSource3f)
  name.vb: GetSource(Integer, ALSource3f)
- uid: OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSource3i,System.Int32@,System.Int32@,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSource3i,System.Int32@,System.Int32@,System.Int32@)
  id: GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSource3i,System.Int32@,System.Int32@,System.Int32@)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GetSource(int, ALSource3i, out int, out int, out int)
  nameWithType: AL.GetSource(int, ALSource3i, out int, out int, out int)
  fullName: OpenTK.Audio.OpenAL.AL.GetSource(int, OpenTK.Audio.OpenAL.ALSource3i, out int, out int, out int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function retrieves three integer-point values representing a property of a source.
  example: []
  syntax:
    content: public static extern void GetSource(int sid, ALSource3i param, out int value1, out int value2, out int value3)
    parameters:
    - id: sid
      type: System.Int32
      description: Source name whose attribute is being retrieved.
    - id: param
      type: OpenTK.Audio.OpenAL.ALSource3i
      description: 'The name of the attribute being retrieved: ALSource3f.Position, Velocity, Direction.'
    - id: value1
      type: System.Int32
      description: Pointer to the first value to retrieve.
    - id: value2
      type: System.Int32
      description: Pointer to the second value to retrieve.
    - id: value3
      type: System.Int32
      description: Pointer to the third value to retrieve.
    content.vb: Public Shared Sub GetSource(sid As Integer, param As ALSource3i, value1 As Integer, value2 As Integer, value3 As Integer)
  overload: OpenTK.Audio.OpenAL.AL.GetSource*
  nameWithType.vb: AL.GetSource(Integer, ALSource3i, Integer, Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.GetSource(Integer, OpenTK.Audio.OpenAL.ALSource3i, Integer, Integer, Integer)
  name.vb: GetSource(Integer, ALSource3i, Integer, Integer, Integer)
- uid: OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSource3i,OpenTK.Mathematics.Vector3i@)
  commentId: M:OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSource3i,OpenTK.Mathematics.Vector3i@)
  id: GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSource3i,OpenTK.Mathematics.Vector3i@)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GetSource(int, ALSource3i, out Vector3i)
  nameWithType: AL.GetSource(int, ALSource3i, out Vector3i)
  fullName: OpenTK.Audio.OpenAL.AL.GetSource(int, OpenTK.Audio.OpenAL.ALSource3i, out OpenTK.Mathematics.Vector3i)
  type: Method
  source:
    id: GetSource
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 570
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function retrieves three integer-point values representing a property of a source.
  example: []
  syntax:
    content: public static void GetSource(int sid, ALSource3i param, out Vector3i values)
    parameters:
    - id: sid
      type: System.Int32
      description: Source name whose attribute is being retrieved.
    - id: param
      type: OpenTK.Audio.OpenAL.ALSource3i
      description: 'The name of the attribute being retrieved: ALSource3f.Position, Velocity, Direction.'
    - id: values
      type: OpenTK.Mathematics.Vector3i
      description: A <xref href="OpenTK.Mathematics.Vector3" data-throw-if-not-resolved="false"></xref>i to retrieve the values to.
    content.vb: Public Shared Sub GetSource(sid As Integer, param As ALSource3i, values As Vector3i)
  overload: OpenTK.Audio.OpenAL.AL.GetSource*
  nameWithType.vb: AL.GetSource(Integer, ALSource3i, Vector3i)
  fullName.vb: OpenTK.Audio.OpenAL.AL.GetSource(Integer, OpenTK.Audio.OpenAL.ALSource3i, OpenTK.Mathematics.Vector3i)
  name.vb: GetSource(Integer, ALSource3i, Vector3i)
- uid: OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSource3i)
  commentId: M:OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSource3i)
  id: GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSource3i)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GetSource(int, ALSource3i)
  nameWithType: AL.GetSource(int, ALSource3i)
  fullName: OpenTK.Audio.OpenAL.AL.GetSource(int, OpenTK.Audio.OpenAL.ALSource3i)
  type: Method
  source:
    id: GetSource
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 579
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function retrieves three integer-point values representing a property of a source.
  example: []
  syntax:
    content: public static Vector3i GetSource(int sid, ALSource3i param)
    parameters:
    - id: sid
      type: System.Int32
      description: Source name whose attribute is being retrieved.
    - id: param
      type: OpenTK.Audio.OpenAL.ALSource3i
      description: 'The name of the attribute being retrieved: ALSource3f.Position, Velocity, Direction.'
    return:
      type: OpenTK.Mathematics.Vector3i
      description: A <xref href="OpenTK.Mathematics.Vector3i" data-throw-if-not-resolved="false"></xref> to retrieve the values to.
    content.vb: Public Shared Function GetSource(sid As Integer, param As ALSource3i) As Vector3i
  overload: OpenTK.Audio.OpenAL.AL.GetSource*
  nameWithType.vb: AL.GetSource(Integer, ALSource3i)
  fullName.vb: OpenTK.Audio.OpenAL.AL.GetSource(Integer, OpenTK.Audio.OpenAL.ALSource3i)
  name.vb: GetSource(Integer, ALSource3i)
- uid: OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALGetSourcei,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALGetSourcei,System.Int32@)
  id: GetSource(System.Int32,OpenTK.Audio.OpenAL.ALGetSourcei,System.Int32@)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GetSource(int, ALGetSourcei, out int)
  nameWithType: AL.GetSource(int, ALGetSourcei, out int)
  fullName: OpenTK.Audio.OpenAL.AL.GetSource(int, OpenTK.Audio.OpenAL.ALGetSourcei, out int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function retrieves an integer property of a source.
  example: []
  syntax:
    content: public static extern void GetSource(int sid, ALGetSourcei param, out int value)
    parameters:
    - id: sid
      type: System.Int32
      description: Source name whose attribute is being retrieved.
    - id: param
      type: OpenTK.Audio.OpenAL.ALGetSourcei
      description: 'The name of the attribute to retrieve: ALSourcei.SourceRelative, Buffer, SourceState, BuffersQueued, BuffersProcessed.'
    - id: value
      type: System.Int32
      description: A pointer to the integer value being retrieved.
    content.vb: Public Shared Sub GetSource(sid As Integer, param As ALGetSourcei, value As Integer)
  overload: OpenTK.Audio.OpenAL.AL.GetSource*
  nameWithType.vb: AL.GetSource(Integer, ALGetSourcei, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.GetSource(Integer, OpenTK.Audio.OpenAL.ALGetSourcei, Integer)
  name.vb: GetSource(Integer, ALGetSourcei, Integer)
- uid: OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALGetSourcei)
  commentId: M:OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALGetSourcei)
  id: GetSource(System.Int32,OpenTK.Audio.OpenAL.ALGetSourcei)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GetSource(int, ALGetSourcei)
  nameWithType: AL.GetSource(int, ALGetSourcei)
  fullName: OpenTK.Audio.OpenAL.AL.GetSource(int, OpenTK.Audio.OpenAL.ALGetSourcei)
  type: Method
  source:
    id: GetSource
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 598
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function retrieves an integer property of a source.
  example: []
  syntax:
    content: public static int GetSource(int sid, ALGetSourcei param)
    parameters:
    - id: sid
      type: System.Int32
      description: Source name whose attribute is being retrieved.
    - id: param
      type: OpenTK.Audio.OpenAL.ALGetSourcei
      description: 'The name of the attribute to retrieve: ALSourcei.SourceRelative, Buffer, SourceState, BuffersQueued, BuffersProcessed.'
    return:
      type: System.Int32
      description: The integer value being retrieved.
    content.vb: Public Shared Function GetSource(sid As Integer, param As ALGetSourcei) As Integer
  overload: OpenTK.Audio.OpenAL.AL.GetSource*
  nameWithType.vb: AL.GetSource(Integer, ALGetSourcei)
  fullName.vb: OpenTK.Audio.OpenAL.AL.GetSource(Integer, OpenTK.Audio.OpenAL.ALGetSourcei)
  name.vb: GetSource(Integer, ALGetSourcei)
- uid: OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSourceb,System.Boolean@)
  commentId: M:OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSourceb,System.Boolean@)
  id: GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSourceb,System.Boolean@)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GetSource(int, ALSourceb, out bool)
  nameWithType: AL.GetSource(int, ALSourceb, out bool)
  fullName: OpenTK.Audio.OpenAL.AL.GetSource(int, OpenTK.Audio.OpenAL.ALSourceb, out bool)
  type: Method
  source:
    id: GetSource
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 608
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function retrieves a bool property of a source.
  example: []
  syntax:
    content: public static void GetSource(int sid, ALSourceb param, out bool value)
    parameters:
    - id: sid
      type: System.Int32
      description: Source name whose attribute is being retrieved.
    - id: param
      type: OpenTK.Audio.OpenAL.ALSourceb
      description: 'The name of the attribute to get: ALSourceb.SourceRelative, Looping.'
    - id: value
      type: System.Boolean
      description: A pointer to the bool value being retrieved.
    content.vb: Public Shared Sub GetSource(sid As Integer, param As ALSourceb, value As Boolean)
  overload: OpenTK.Audio.OpenAL.AL.GetSource*
  nameWithType.vb: AL.GetSource(Integer, ALSourceb, Boolean)
  fullName.vb: OpenTK.Audio.OpenAL.AL.GetSource(Integer, OpenTK.Audio.OpenAL.ALSourceb, Boolean)
  name.vb: GetSource(Integer, ALSourceb, Boolean)
- uid: OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSourceb)
  commentId: M:OpenTK.Audio.OpenAL.AL.GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSourceb)
  id: GetSource(System.Int32,OpenTK.Audio.OpenAL.ALSourceb)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GetSource(int, ALSourceb)
  nameWithType: AL.GetSource(int, ALSourceb)
  fullName: OpenTK.Audio.OpenAL.AL.GetSource(int, OpenTK.Audio.OpenAL.ALSourceb)
  type: Method
  source:
    id: GetSource
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 618
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function retrieves a bool property of a source.
  example: []
  syntax:
    content: public static bool GetSource(int sid, ALSourceb param)
    parameters:
    - id: sid
      type: System.Int32
      description: Source name whose attribute is being retrieved.
    - id: param
      type: OpenTK.Audio.OpenAL.ALSourceb
      description: 'The name of the attribute to get: ALSourceb.SourceRelative, Looping.'
    return:
      type: System.Boolean
      description: A the bool value being retrieved.
    content.vb: Public Shared Function GetSource(sid As Integer, param As ALSourceb) As Boolean
  overload: OpenTK.Audio.OpenAL.AL.GetSource*
  nameWithType.vb: AL.GetSource(Integer, ALSourceb)
  fullName.vb: OpenTK.Audio.OpenAL.AL.GetSource(Integer, OpenTK.Audio.OpenAL.ALSourceb)
  name.vb: GetSource(Integer, ALSourceb)
- uid: OpenTK.Audio.OpenAL.AL.SourcePlay(System.Int32,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.AL.SourcePlay(System.Int32,System.Int32*)
  id: SourcePlay(System.Int32,System.Int32*)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourcePlay(int, int*)
  nameWithType: AL.SourcePlay(int, int*)
  fullName: OpenTK.Audio.OpenAL.AL.SourcePlay(int, int*)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function plays a set of sources. The playing sources will have their state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.
  example: []
  syntax:
    content: public static extern void SourcePlay(int ns, int* sids)
    parameters:
    - id: ns
      type: System.Int32
      description: The number of sources to be played.
    - id: sids
      type: System.Int32*
      description: A pointer to an array of sources to be played.
    content.vb: Public Shared Sub SourcePlay(ns As Integer, sids As Integer*)
  overload: OpenTK.Audio.OpenAL.AL.SourcePlay*
  nameWithType.vb: AL.SourcePlay(Integer, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourcePlay(Integer, Integer*)
  name.vb: SourcePlay(Integer, Integer*)
- uid: OpenTK.Audio.OpenAL.AL.SourcePlay(System.Int32,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.AL.SourcePlay(System.Int32,System.Int32@)
  id: SourcePlay(System.Int32,System.Int32@)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourcePlay(int, ref int)
  nameWithType: AL.SourcePlay(int, ref int)
  fullName: OpenTK.Audio.OpenAL.AL.SourcePlay(int, ref int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function plays a set of sources. The playing sources will have their state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.
  example: []
  syntax:
    content: public static extern void SourcePlay(int ns, ref int sids)
    parameters:
    - id: ns
      type: System.Int32
      description: The number of sources to be played.
    - id: sids
      type: System.Int32
      description: A pointer to an array of sources to be played.
    content.vb: Public Shared Sub SourcePlay(ns As Integer, sids As Integer)
  overload: OpenTK.Audio.OpenAL.AL.SourcePlay*
  nameWithType.vb: AL.SourcePlay(Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourcePlay(Integer, Integer)
  name.vb: SourcePlay(Integer, Integer)
- uid: OpenTK.Audio.OpenAL.AL.SourcePlay(System.Int32,System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.AL.SourcePlay(System.Int32,System.Int32[])
  id: SourcePlay(System.Int32,System.Int32[])
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourcePlay(int, int[])
  nameWithType: AL.SourcePlay(int, int[])
  fullName: OpenTK.Audio.OpenAL.AL.SourcePlay(int, int[])
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function plays a set of sources. The playing sources will have their state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.
  example: []
  syntax:
    content: public static extern void SourcePlay(int ns, int[] sids)
    parameters:
    - id: ns
      type: System.Int32
      description: The number of sources to be played.
    - id: sids
      type: System.Int32[]
      description: A pointer to an array of sources to be played.
    content.vb: Public Shared Sub SourcePlay(ns As Integer, sids As Integer())
  overload: OpenTK.Audio.OpenAL.AL.SourcePlay*
  nameWithType.vb: AL.SourcePlay(Integer, Integer())
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourcePlay(Integer, Integer())
  name.vb: SourcePlay(Integer, Integer())
- uid: OpenTK.Audio.OpenAL.AL.SourcePlay(System.ReadOnlySpan{System.Int32})
  commentId: M:OpenTK.Audio.OpenAL.AL.SourcePlay(System.ReadOnlySpan{System.Int32})
  id: SourcePlay(System.ReadOnlySpan{System.Int32})
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourcePlay(ReadOnlySpan<int>)
  nameWithType: AL.SourcePlay(ReadOnlySpan<int>)
  fullName: OpenTK.Audio.OpenAL.AL.SourcePlay(System.ReadOnlySpan<int>)
  type: Method
  source:
    id: SourcePlay
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 652
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function plays a set of sources. The playing sources will have their state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.
  example: []
  syntax:
    content: public static void SourcePlay(ReadOnlySpan<int> sources)
    parameters:
    - id: sources
      type: System.ReadOnlySpan{System.Int32}
      description: The sources to be played.
    content.vb: Public Shared Sub SourcePlay(sources As ReadOnlySpan(Of Integer))
  overload: OpenTK.Audio.OpenAL.AL.SourcePlay*
  nameWithType.vb: AL.SourcePlay(ReadOnlySpan(Of Integer))
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourcePlay(System.ReadOnlySpan(Of Integer))
  name.vb: SourcePlay(ReadOnlySpan(Of Integer))
- uid: OpenTK.Audio.OpenAL.AL.SourceStop(System.Int32,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.AL.SourceStop(System.Int32,System.Int32*)
  id: SourceStop(System.Int32,System.Int32*)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourceStop(int, int*)
  nameWithType: AL.SourceStop(int, int*)
  fullName: OpenTK.Audio.OpenAL.AL.SourceStop(int, int*)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function stops a set of sources. The stopped sources will have their state changed to ALSourceState.Stopped.
  example: []
  syntax:
    content: public static extern void SourceStop(int ns, int* sids)
    parameters:
    - id: ns
      type: System.Int32
      description: The number of sources to stop.
    - id: sids
      type: System.Int32*
      description: A pointer to an array of sources to be stopped.
    content.vb: Public Shared Sub SourceStop(ns As Integer, sids As Integer*)
  overload: OpenTK.Audio.OpenAL.AL.SourceStop*
  nameWithType.vb: AL.SourceStop(Integer, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourceStop(Integer, Integer*)
  name.vb: SourceStop(Integer, Integer*)
- uid: OpenTK.Audio.OpenAL.AL.SourceStop(System.Int32,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.AL.SourceStop(System.Int32,System.Int32@)
  id: SourceStop(System.Int32,System.Int32@)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourceStop(int, ref int)
  nameWithType: AL.SourceStop(int, ref int)
  fullName: OpenTK.Audio.OpenAL.AL.SourceStop(int, ref int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function stops a set of sources. The stopped sources will have their state changed to ALSourceState.Stopped.
  example: []
  syntax:
    content: public static extern void SourceStop(int ns, ref int sids)
    parameters:
    - id: ns
      type: System.Int32
      description: The number of sources to stop.
    - id: sids
      type: System.Int32
      description: A pointer to an array of sources to be stopped.
    content.vb: Public Shared Sub SourceStop(ns As Integer, sids As Integer)
  overload: OpenTK.Audio.OpenAL.AL.SourceStop*
  nameWithType.vb: AL.SourceStop(Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourceStop(Integer, Integer)
  name.vb: SourceStop(Integer, Integer)
- uid: OpenTK.Audio.OpenAL.AL.SourceStop(System.Int32,System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.AL.SourceStop(System.Int32,System.Int32[])
  id: SourceStop(System.Int32,System.Int32[])
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourceStop(int, int[])
  nameWithType: AL.SourceStop(int, int[])
  fullName: OpenTK.Audio.OpenAL.AL.SourceStop(int, int[])
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function stops a set of sources. The stopped sources will have their state changed to ALSourceState.Stopped.
  example: []
  syntax:
    content: public static extern void SourceStop(int ns, int[] sids)
    parameters:
    - id: ns
      type: System.Int32
      description: The number of sources to stop.
    - id: sids
      type: System.Int32[]
      description: A pointer to an array of sources to be stopped.
    content.vb: Public Shared Sub SourceStop(ns As Integer, sids As Integer())
  overload: OpenTK.Audio.OpenAL.AL.SourceStop*
  nameWithType.vb: AL.SourceStop(Integer, Integer())
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourceStop(Integer, Integer())
  name.vb: SourceStop(Integer, Integer())
- uid: OpenTK.Audio.OpenAL.AL.SourceStop(System.ReadOnlySpan{System.Int32})
  commentId: M:OpenTK.Audio.OpenAL.AL.SourceStop(System.ReadOnlySpan{System.Int32})
  id: SourceStop(System.ReadOnlySpan{System.Int32})
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourceStop(ReadOnlySpan<int>)
  nameWithType: AL.SourceStop(ReadOnlySpan<int>)
  fullName: OpenTK.Audio.OpenAL.AL.SourceStop(System.ReadOnlySpan<int>)
  type: Method
  source:
    id: SourceStop
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 680
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function stops a set of sources. The stopped sources will have their state changed to ALSourceState.Stopped.
  example: []
  syntax:
    content: public static void SourceStop(ReadOnlySpan<int> sources)
    parameters:
    - id: sources
      type: System.ReadOnlySpan{System.Int32}
      description: The sources to be stopped.
    content.vb: Public Shared Sub SourceStop(sources As ReadOnlySpan(Of Integer))
  overload: OpenTK.Audio.OpenAL.AL.SourceStop*
  nameWithType.vb: AL.SourceStop(ReadOnlySpan(Of Integer))
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourceStop(System.ReadOnlySpan(Of Integer))
  name.vb: SourceStop(ReadOnlySpan(Of Integer))
- uid: OpenTK.Audio.OpenAL.AL.SourceRewind(System.Int32,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.AL.SourceRewind(System.Int32,System.Int32*)
  id: SourceRewind(System.Int32,System.Int32*)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourceRewind(int, int*)
  nameWithType: AL.SourceRewind(int, int*)
  fullName: OpenTK.Audio.OpenAL.AL.SourceRewind(int, int*)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function stops a set of sources and sets all their states to ALSourceState.Initial.
  example: []
  syntax:
    content: public static extern void SourceRewind(int ns, int* sids)
    parameters:
    - id: ns
      type: System.Int32
      description: The number of sources to be rewound.
    - id: sids
      type: System.Int32*
      description: A pointer to an array of sources to be rewound.
    content.vb: Public Shared Sub SourceRewind(ns As Integer, sids As Integer*)
  overload: OpenTK.Audio.OpenAL.AL.SourceRewind*
  nameWithType.vb: AL.SourceRewind(Integer, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourceRewind(Integer, Integer*)
  name.vb: SourceRewind(Integer, Integer*)
- uid: OpenTK.Audio.OpenAL.AL.SourceRewind(System.Int32,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.AL.SourceRewind(System.Int32,System.Int32@)
  id: SourceRewind(System.Int32,System.Int32@)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourceRewind(int, ref int)
  nameWithType: AL.SourceRewind(int, ref int)
  fullName: OpenTK.Audio.OpenAL.AL.SourceRewind(int, ref int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function stops a set of sources and sets all their states to ALSourceState.Initial.
  example: []
  syntax:
    content: public static extern void SourceRewind(int ns, ref int sids)
    parameters:
    - id: ns
      type: System.Int32
      description: The number of sources to be rewound.
    - id: sids
      type: System.Int32
      description: A pointer to an array of sources to be rewound.
    content.vb: Public Shared Sub SourceRewind(ns As Integer, sids As Integer)
  overload: OpenTK.Audio.OpenAL.AL.SourceRewind*
  nameWithType.vb: AL.SourceRewind(Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourceRewind(Integer, Integer)
  name.vb: SourceRewind(Integer, Integer)
- uid: OpenTK.Audio.OpenAL.AL.SourceRewind(System.Int32,System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.AL.SourceRewind(System.Int32,System.Int32[])
  id: SourceRewind(System.Int32,System.Int32[])
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourceRewind(int, int[])
  nameWithType: AL.SourceRewind(int, int[])
  fullName: OpenTK.Audio.OpenAL.AL.SourceRewind(int, int[])
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function stops a set of sources and sets all their states to ALSourceState.Initial.
  example: []
  syntax:
    content: public static extern void SourceRewind(int ns, int[] sids)
    parameters:
    - id: ns
      type: System.Int32
      description: The number of sources to be rewound.
    - id: sids
      type: System.Int32[]
      description: A pointer to an array of sources to be rewound.
    content.vb: Public Shared Sub SourceRewind(ns As Integer, sids As Integer())
  overload: OpenTK.Audio.OpenAL.AL.SourceRewind*
  nameWithType.vb: AL.SourceRewind(Integer, Integer())
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourceRewind(Integer, Integer())
  name.vb: SourceRewind(Integer, Integer())
- uid: OpenTK.Audio.OpenAL.AL.SourceRewind(System.ReadOnlySpan{System.Int32})
  commentId: M:OpenTK.Audio.OpenAL.AL.SourceRewind(System.ReadOnlySpan{System.Int32})
  id: SourceRewind(System.ReadOnlySpan{System.Int32})
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourceRewind(ReadOnlySpan<int>)
  nameWithType: AL.SourceRewind(ReadOnlySpan<int>)
  fullName: OpenTK.Audio.OpenAL.AL.SourceRewind(System.ReadOnlySpan<int>)
  type: Method
  source:
    id: SourceRewind
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 708
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function stops a set of sources and sets all their states to ALSourceState.Initial.
  example: []
  syntax:
    content: public static void SourceRewind(ReadOnlySpan<int> sources)
    parameters:
    - id: sources
      type: System.ReadOnlySpan{System.Int32}
      description: The sources to be rewound.
    content.vb: Public Shared Sub SourceRewind(sources As ReadOnlySpan(Of Integer))
  overload: OpenTK.Audio.OpenAL.AL.SourceRewind*
  nameWithType.vb: AL.SourceRewind(ReadOnlySpan(Of Integer))
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourceRewind(System.ReadOnlySpan(Of Integer))
  name.vb: SourceRewind(ReadOnlySpan(Of Integer))
- uid: OpenTK.Audio.OpenAL.AL.SourcePause(System.Int32,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.AL.SourcePause(System.Int32,System.Int32*)
  id: SourcePause(System.Int32,System.Int32*)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourcePause(int, int*)
  nameWithType: AL.SourcePause(int, int*)
  fullName: OpenTK.Audio.OpenAL.AL.SourcePause(int, int*)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function pauses a set of sources. The paused sources will have their state changed to ALSourceState.Paused.
  example: []
  syntax:
    content: public static extern void SourcePause(int ns, int* sids)
    parameters:
    - id: ns
      type: System.Int32
      description: The number of sources to be paused.
    - id: sids
      type: System.Int32*
      description: A pointer to an array of sources to be paused.
    content.vb: Public Shared Sub SourcePause(ns As Integer, sids As Integer*)
  overload: OpenTK.Audio.OpenAL.AL.SourcePause*
  nameWithType.vb: AL.SourcePause(Integer, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourcePause(Integer, Integer*)
  name.vb: SourcePause(Integer, Integer*)
- uid: OpenTK.Audio.OpenAL.AL.SourcePause(System.Int32,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.AL.SourcePause(System.Int32,System.Int32@)
  id: SourcePause(System.Int32,System.Int32@)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourcePause(int, ref int)
  nameWithType: AL.SourcePause(int, ref int)
  fullName: OpenTK.Audio.OpenAL.AL.SourcePause(int, ref int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function pauses a set of sources. The paused sources will have their state changed to ALSourceState.Paused.
  example: []
  syntax:
    content: public static extern void SourcePause(int ns, ref int sids)
    parameters:
    - id: ns
      type: System.Int32
      description: The number of sources to be paused.
    - id: sids
      type: System.Int32
      description: A pointer to an array of sources to be paused.
    content.vb: Public Shared Sub SourcePause(ns As Integer, sids As Integer)
  overload: OpenTK.Audio.OpenAL.AL.SourcePause*
  nameWithType.vb: AL.SourcePause(Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourcePause(Integer, Integer)
  name.vb: SourcePause(Integer, Integer)
- uid: OpenTK.Audio.OpenAL.AL.SourcePause(System.Int32,System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.AL.SourcePause(System.Int32,System.Int32[])
  id: SourcePause(System.Int32,System.Int32[])
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourcePause(int, int[])
  nameWithType: AL.SourcePause(int, int[])
  fullName: OpenTK.Audio.OpenAL.AL.SourcePause(int, int[])
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function pauses a set of sources. The paused sources will have their state changed to ALSourceState.Paused.
  example: []
  syntax:
    content: public static extern void SourcePause(int ns, int[] sids)
    parameters:
    - id: ns
      type: System.Int32
      description: The number of sources to be paused.
    - id: sids
      type: System.Int32[]
      description: A pointer to an array of sources to be paused.
    content.vb: Public Shared Sub SourcePause(ns As Integer, sids As Integer())
  overload: OpenTK.Audio.OpenAL.AL.SourcePause*
  nameWithType.vb: AL.SourcePause(Integer, Integer())
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourcePause(Integer, Integer())
  name.vb: SourcePause(Integer, Integer())
- uid: OpenTK.Audio.OpenAL.AL.SourcePause(System.ReadOnlySpan{System.Int32})
  commentId: M:OpenTK.Audio.OpenAL.AL.SourcePause(System.ReadOnlySpan{System.Int32})
  id: SourcePause(System.ReadOnlySpan{System.Int32})
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourcePause(ReadOnlySpan<int>)
  nameWithType: AL.SourcePause(ReadOnlySpan<int>)
  fullName: OpenTK.Audio.OpenAL.AL.SourcePause(System.ReadOnlySpan<int>)
  type: Method
  source:
    id: SourcePause
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 736
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function pauses a set of sources. The paused sources will have their state changed to ALSourceState.Paused.
  example: []
  syntax:
    content: public static void SourcePause(ReadOnlySpan<int> sources)
    parameters:
    - id: sources
      type: System.ReadOnlySpan{System.Int32}
      description: The sources to be paused.
    content.vb: Public Shared Sub SourcePause(sources As ReadOnlySpan(Of Integer))
  overload: OpenTK.Audio.OpenAL.AL.SourcePause*
  nameWithType.vb: AL.SourcePause(ReadOnlySpan(Of Integer))
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourcePause(System.ReadOnlySpan(Of Integer))
  name.vb: SourcePause(ReadOnlySpan(Of Integer))
- uid: OpenTK.Audio.OpenAL.AL.SourcePlay(System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.AL.SourcePlay(System.Int32)
  id: SourcePlay(System.Int32)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourcePlay(int)
  nameWithType: AL.SourcePlay(int)
  fullName: OpenTK.Audio.OpenAL.AL.SourcePlay(int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function plays, replays or resumes a source. The playing source will have it's state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.
  example: []
  syntax:
    content: public static extern void SourcePlay(int sid)
    parameters:
    - id: sid
      type: System.Int32
      description: The name of the source to be played.
    content.vb: Public Shared Sub SourcePlay(sid As Integer)
  overload: OpenTK.Audio.OpenAL.AL.SourcePlay*
  nameWithType.vb: AL.SourcePlay(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourcePlay(Integer)
  name.vb: SourcePlay(Integer)
- uid: OpenTK.Audio.OpenAL.AL.SourceStop(System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.AL.SourceStop(System.Int32)
  id: SourceStop(System.Int32)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourceStop(int)
  nameWithType: AL.SourceStop(int)
  fullName: OpenTK.Audio.OpenAL.AL.SourceStop(int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function stops a source. The stopped source will have it's state changed to ALSourceState.Stopped.
  example: []
  syntax:
    content: public static extern void SourceStop(int sid)
    parameters:
    - id: sid
      type: System.Int32
      description: The name of the source to be stopped.
    content.vb: Public Shared Sub SourceStop(sid As Integer)
  overload: OpenTK.Audio.OpenAL.AL.SourceStop*
  nameWithType.vb: AL.SourceStop(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourceStop(Integer)
  name.vb: SourceStop(Integer)
- uid: OpenTK.Audio.OpenAL.AL.SourceRewind(System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.AL.SourceRewind(System.Int32)
  id: SourceRewind(System.Int32)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourceRewind(int)
  nameWithType: AL.SourceRewind(int)
  fullName: OpenTK.Audio.OpenAL.AL.SourceRewind(int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function stops the source and sets its state to ALSourceState.Initial.
  example: []
  syntax:
    content: public static extern void SourceRewind(int sid)
    parameters:
    - id: sid
      type: System.Int32
      description: The name of the source to be rewound.
    content.vb: Public Shared Sub SourceRewind(sid As Integer)
  overload: OpenTK.Audio.OpenAL.AL.SourceRewind*
  nameWithType.vb: AL.SourceRewind(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourceRewind(Integer)
  name.vb: SourceRewind(Integer)
- uid: OpenTK.Audio.OpenAL.AL.SourcePause(System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.AL.SourcePause(System.Int32)
  id: SourcePause(System.Int32)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourcePause(int)
  nameWithType: AL.SourcePause(int)
  fullName: OpenTK.Audio.OpenAL.AL.SourcePause(int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function pauses a source. The paused source will have its state changed to ALSourceState.Paused.
  example: []
  syntax:
    content: public static extern void SourcePause(int sid)
    parameters:
    - id: sid
      type: System.Int32
      description: The name of the source to be paused.
    content.vb: Public Shared Sub SourcePause(sid As Integer)
  overload: OpenTK.Audio.OpenAL.AL.SourcePause*
  nameWithType.vb: AL.SourcePause(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourcePause(Integer)
  name.vb: SourcePause(Integer)
- uid: OpenTK.Audio.OpenAL.AL.SourceQueueBuffers(System.Int32,System.Int32,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.AL.SourceQueueBuffers(System.Int32,System.Int32,System.Int32*)
  id: SourceQueueBuffers(System.Int32,System.Int32,System.Int32*)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourceQueueBuffers(int, int, int*)
  nameWithType: AL.SourceQueueBuffers(int, int, int*)
  fullName: OpenTK.Audio.OpenAL.AL.SourceQueueBuffers(int, int, int*)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function queues a set of buffers on a source. All buffers attached to a source will be played in sequence, and the number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed. When first created, a source will be of type ALSourceType.Undetermined. A successful AL.SourceQueueBuffers call will change the source type to ALSourceType.Streaming.
  example: []
  syntax:
    content: public static extern void SourceQueueBuffers(int sid, int numEntries, int* bids)
    parameters:
    - id: sid
      type: System.Int32
      description: The name of the source to queue buffers onto.
    - id: numEntries
      type: System.Int32
      description: The number of buffers to be queued.
    - id: bids
      type: System.Int32*
      description: A pointer to an array of buffer names to be queued.
    content.vb: Public Shared Sub SourceQueueBuffers(sid As Integer, numEntries As Integer, bids As Integer*)
  overload: OpenTK.Audio.OpenAL.AL.SourceQueueBuffers*
  nameWithType.vb: AL.SourceQueueBuffers(Integer, Integer, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourceQueueBuffers(Integer, Integer, Integer*)
  name.vb: SourceQueueBuffers(Integer, Integer, Integer*)
- uid: OpenTK.Audio.OpenAL.AL.SourceQueueBuffers(System.Int32,System.Int32,System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.AL.SourceQueueBuffers(System.Int32,System.Int32,System.Int32[])
  id: SourceQueueBuffers(System.Int32,System.Int32,System.Int32[])
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourceQueueBuffers(int, int, int[])
  nameWithType: AL.SourceQueueBuffers(int, int, int[])
  fullName: OpenTK.Audio.OpenAL.AL.SourceQueueBuffers(int, int, int[])
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function queues a set of buffers on a source. All buffers attached to a source will be played in sequence, and the number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed. When first created, a source will be of type ALSourceType.Undetermined. A successful AL.SourceQueueBuffers call will change the source type to ALSourceType.Streaming.
  example: []
  syntax:
    content: public static extern void SourceQueueBuffers(int sid, int numEntries, int[] bids)
    parameters:
    - id: sid
      type: System.Int32
      description: The name of the source to queue buffers onto.
    - id: numEntries
      type: System.Int32
      description: The number of buffers to be queued.
    - id: bids
      type: System.Int32[]
      description: A pointer to an array of buffer names to be queued.
    content.vb: Public Shared Sub SourceQueueBuffers(sid As Integer, numEntries As Integer, bids As Integer())
  overload: OpenTK.Audio.OpenAL.AL.SourceQueueBuffers*
  nameWithType.vb: AL.SourceQueueBuffers(Integer, Integer, Integer())
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourceQueueBuffers(Integer, Integer, Integer())
  name.vb: SourceQueueBuffers(Integer, Integer, Integer())
- uid: OpenTK.Audio.OpenAL.AL.SourceQueueBuffers(System.Int32,System.Int32,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.AL.SourceQueueBuffers(System.Int32,System.Int32,System.Int32@)
  id: SourceQueueBuffers(System.Int32,System.Int32,System.Int32@)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourceQueueBuffers(int, int, ref int)
  nameWithType: AL.SourceQueueBuffers(int, int, ref int)
  fullName: OpenTK.Audio.OpenAL.AL.SourceQueueBuffers(int, int, ref int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function queues a set of buffers on a source. All buffers attached to a source will be played in sequence, and the number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed. When first created, a source will be of type ALSourceType.Undetermined. A successful AL.SourceQueueBuffers call will change the source type to ALSourceType.Streaming.
  example: []
  syntax:
    content: public static extern void SourceQueueBuffers(int sid, int numEntries, ref int bids)
    parameters:
    - id: sid
      type: System.Int32
      description: The name of the source to queue buffers onto.
    - id: numEntries
      type: System.Int32
      description: The number of buffers to be queued.
    - id: bids
      type: System.Int32
      description: A pointer to an array of buffer names to be queued.
    content.vb: Public Shared Sub SourceQueueBuffers(sid As Integer, numEntries As Integer, bids As Integer)
  overload: OpenTK.Audio.OpenAL.AL.SourceQueueBuffers*
  nameWithType.vb: AL.SourceQueueBuffers(Integer, Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourceQueueBuffers(Integer, Integer, Integer)
  name.vb: SourceQueueBuffers(Integer, Integer, Integer)
- uid: OpenTK.Audio.OpenAL.AL.SourceQueueBuffers(System.Int32,System.ReadOnlySpan{System.Int32})
  commentId: M:OpenTK.Audio.OpenAL.AL.SourceQueueBuffers(System.Int32,System.ReadOnlySpan{System.Int32})
  id: SourceQueueBuffers(System.Int32,System.ReadOnlySpan{System.Int32})
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourceQueueBuffers(int, ReadOnlySpan<int>)
  nameWithType: AL.SourceQueueBuffers(int, ReadOnlySpan<int>)
  fullName: OpenTK.Audio.OpenAL.AL.SourceQueueBuffers(int, System.ReadOnlySpan<int>)
  type: Method
  source:
    id: SourceQueueBuffers
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 792
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function queues a set of buffers on a source. All buffers attached to a source will be played in sequence, and the number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed. When first created, a source will be of type ALSourceType.Undetermined. A successful AL.SourceQueueBuffers call will change the source type to ALSourceType.Streaming.
  example: []
  syntax:
    content: public static void SourceQueueBuffers(int sid, ReadOnlySpan<int> buffers)
    parameters:
    - id: sid
      type: System.Int32
      description: The name of the source to queue buffers onto.
    - id: buffers
      type: System.ReadOnlySpan{System.Int32}
      description: A pointer to an array of buffer names to be queued.
    content.vb: Public Shared Sub SourceQueueBuffers(sid As Integer, buffers As ReadOnlySpan(Of Integer))
  overload: OpenTK.Audio.OpenAL.AL.SourceQueueBuffers*
  nameWithType.vb: AL.SourceQueueBuffers(Integer, ReadOnlySpan(Of Integer))
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourceQueueBuffers(Integer, System.ReadOnlySpan(Of Integer))
  name.vb: SourceQueueBuffers(Integer, ReadOnlySpan(Of Integer))
- uid: OpenTK.Audio.OpenAL.AL.SourceQueueBuffer(System.Int32,System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.AL.SourceQueueBuffer(System.Int32,System.Int32)
  id: SourceQueueBuffer(System.Int32,System.Int32)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourceQueueBuffer(int, int)
  nameWithType: AL.SourceQueueBuffer(int, int)
  fullName: OpenTK.Audio.OpenAL.AL.SourceQueueBuffer(int, int)
  type: Method
  source:
    id: SourceQueueBuffer
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 800
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function queues a set of buffers on a source. All buffers attached to a source will be played in sequence, and the number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed. When first created, a source will be of type ALSourceType.Undetermined. A successful AL.SourceQueueBuffers call will change the source type to ALSourceType.Streaming.
  example: []
  syntax:
    content: public static void SourceQueueBuffer(int source, int buffer)
    parameters:
    - id: source
      type: System.Int32
      description: The name of the source to queue buffers onto.
    - id: buffer
      type: System.Int32
      description: The name of the buffer to be queued.
    content.vb: Public Shared Sub SourceQueueBuffer(source As Integer, buffer As Integer)
  overload: OpenTK.Audio.OpenAL.AL.SourceQueueBuffer*
  nameWithType.vb: AL.SourceQueueBuffer(Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourceQueueBuffer(Integer, Integer)
  name.vb: SourceQueueBuffer(Integer, Integer)
- uid: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(System.Int32,System.Int32,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(System.Int32,System.Int32,System.Int32*)
  id: SourceUnqueueBuffers(System.Int32,System.Int32,System.Int32*)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourceUnqueueBuffers(int, int, int*)
  nameWithType: AL.SourceUnqueueBuffers(int, int, int*)
  fullName: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(int, int, int*)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.
  example: []
  syntax:
    content: public static extern void SourceUnqueueBuffers(int sid, int numEntries, int* bids)
    parameters:
    - id: sid
      type: System.Int32
      description: The name of the source to unqueue buffers from.
    - id: numEntries
      type: System.Int32
      description: The number of buffers to be unqueued.
    - id: bids
      type: System.Int32*
      description: A pointer to an array of buffer names that were removed.
    content.vb: Public Shared Sub SourceUnqueueBuffers(sid As Integer, numEntries As Integer, bids As Integer*)
  overload: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers*
  nameWithType.vb: AL.SourceUnqueueBuffers(Integer, Integer, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(Integer, Integer, Integer*)
  name.vb: SourceUnqueueBuffers(Integer, Integer, Integer*)
- uid: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(System.Int32,System.Int32,System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(System.Int32,System.Int32,System.Int32[])
  id: SourceUnqueueBuffers(System.Int32,System.Int32,System.Int32[])
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourceUnqueueBuffers(int, int, int[])
  nameWithType: AL.SourceUnqueueBuffers(int, int, int[])
  fullName: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(int, int, int[])
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.
  example: []
  syntax:
    content: public static extern void SourceUnqueueBuffers(int sid, int numEntries, int[] bids)
    parameters:
    - id: sid
      type: System.Int32
      description: The name of the source to unqueue buffers from.
    - id: numEntries
      type: System.Int32
      description: The number of buffers to be unqueued.
    - id: bids
      type: System.Int32[]
      description: A pointer to an array of buffer names that were removed.
    content.vb: Public Shared Sub SourceUnqueueBuffers(sid As Integer, numEntries As Integer, bids As Integer())
  overload: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers*
  nameWithType.vb: AL.SourceUnqueueBuffers(Integer, Integer, Integer())
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(Integer, Integer, Integer())
  name.vb: SourceUnqueueBuffers(Integer, Integer, Integer())
- uid: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(System.Int32,System.Int32,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(System.Int32,System.Int32,System.Int32@)
  id: SourceUnqueueBuffers(System.Int32,System.Int32,System.Int32@)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourceUnqueueBuffers(int, int, ref int)
  nameWithType: AL.SourceUnqueueBuffers(int, int, ref int)
  fullName: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(int, int, ref int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.
  example: []
  syntax:
    content: public static extern void SourceUnqueueBuffers(int sid, int numEntries, ref int bids)
    parameters:
    - id: sid
      type: System.Int32
      description: The name of the source to unqueue buffers from.
    - id: numEntries
      type: System.Int32
      description: The number of buffers to be unqueued.
    - id: bids
      type: System.Int32
      description: A pointer to an array of buffer names that were removed.
    content.vb: Public Shared Sub SourceUnqueueBuffers(sid As Integer, numEntries As Integer, bids As Integer)
  overload: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers*
  nameWithType.vb: AL.SourceUnqueueBuffers(Integer, Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(Integer, Integer, Integer)
  name.vb: SourceUnqueueBuffers(Integer, Integer, Integer)
- uid: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(System.Int32,System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(System.Int32,System.Int32[])
  id: SourceUnqueueBuffers(System.Int32,System.Int32[])
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourceUnqueueBuffers(int, int[])
  nameWithType: AL.SourceUnqueueBuffers(int, int[])
  fullName: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(int, int[])
  type: Method
  source:
    id: SourceUnqueueBuffers
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 830
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.
  example: []
  syntax:
    content: public static void SourceUnqueueBuffers(int sid, int[] bids)
    parameters:
    - id: sid
      type: System.Int32
      description: The name of the source to unqueue buffers from.
    - id: bids
      type: System.Int32[]
      description: Array to fill with buffer names that were removed.
    content.vb: Public Shared Sub SourceUnqueueBuffers(sid As Integer, bids As Integer())
  overload: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers*
  nameWithType.vb: AL.SourceUnqueueBuffers(Integer, Integer())
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(Integer, Integer())
  name.vb: SourceUnqueueBuffers(Integer, Integer())
- uid: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(System.Int32,System.Span{System.Int32})
  commentId: M:OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(System.Int32,System.Span{System.Int32})
  id: SourceUnqueueBuffers(System.Int32,System.Span{System.Int32})
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourceUnqueueBuffers(int, Span<int>)
  nameWithType: AL.SourceUnqueueBuffers(int, Span<int>)
  fullName: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(int, System.Span<int>)
  type: Method
  source:
    id: SourceUnqueueBuffers
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 838
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.
  example: []
  syntax:
    content: public static void SourceUnqueueBuffers(int sid, Span<int> bids)
    parameters:
    - id: sid
      type: System.Int32
      description: The name of the source to unqueue buffers from.
    - id: bids
      type: System.Span{System.Int32}
      description: Span to fill with buffer names that were removed.
    content.vb: Public Shared Sub SourceUnqueueBuffers(sid As Integer, bids As Span(Of Integer))
  overload: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers*
  nameWithType.vb: AL.SourceUnqueueBuffers(Integer, Span(Of Integer))
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(Integer, System.Span(Of Integer))
  name.vb: SourceUnqueueBuffers(Integer, Span(Of Integer))
- uid: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffer(System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffer(System.Int32)
  id: SourceUnqueueBuffer(System.Int32)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourceUnqueueBuffer(int)
  nameWithType: AL.SourceUnqueueBuffer(int)
  fullName: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffer(int)
  type: Method
  source:
    id: SourceUnqueueBuffer
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 846
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.
  example: []
  syntax:
    content: public static int SourceUnqueueBuffer(int sid)
    parameters:
    - id: sid
      type: System.Int32
      description: The name of the source to unqueue buffers from.
    return:
      type: System.Int32
      description: The unqueued buffer.
    content.vb: Public Shared Function SourceUnqueueBuffer(sid As Integer) As Integer
  overload: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffer*
  nameWithType.vb: AL.SourceUnqueueBuffer(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffer(Integer)
  name.vb: SourceUnqueueBuffer(Integer)
- uid: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(System.Int32,System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(System.Int32,System.Int32)
  id: SourceUnqueueBuffers(System.Int32,System.Int32)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SourceUnqueueBuffers(int, int)
  nameWithType: AL.SourceUnqueueBuffers(int, int)
  fullName: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(int, int)
  type: Method
  source:
    id: SourceUnqueueBuffers
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 857
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.
  example: []
  syntax:
    content: public static int[] SourceUnqueueBuffers(int sid, int numEntries)
    parameters:
    - id: sid
      type: System.Int32
      description: The name of the source to unqueue buffers from.
    - id: numEntries
      type: System.Int32
      description: The number of buffers to be unqueued.
    return:
      type: System.Int32[]
      description: The unqueued buffers.
    content.vb: Public Shared Function SourceUnqueueBuffers(sid As Integer, numEntries As Integer) As Integer()
  overload: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers*
  nameWithType.vb: AL.SourceUnqueueBuffers(Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers(Integer, Integer)
  name.vb: SourceUnqueueBuffers(Integer, Integer)
- uid: OpenTK.Audio.OpenAL.AL.GenBuffers(System.Int32,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.AL.GenBuffers(System.Int32,System.Int32*)
  id: GenBuffers(System.Int32,System.Int32*)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GenBuffers(int, int*)
  nameWithType: AL.GenBuffers(int, int*)
  fullName: OpenTK.Audio.OpenAL.AL.GenBuffers(int, int*)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function generates one or more buffers, which contain audio buffer (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).
  example: []
  syntax:
    content: public static extern void GenBuffers(int n, int* buffers)
    parameters:
    - id: n
      type: System.Int32
      description: The number of buffers to be generated.
    - id: buffers
      type: System.Int32*
      description: Pointer to an array of uint values which will store the names of the new buffers.
    content.vb: Public Shared Sub GenBuffers(n As Integer, buffers As Integer*)
  overload: OpenTK.Audio.OpenAL.AL.GenBuffers*
  nameWithType.vb: AL.GenBuffers(Integer, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.AL.GenBuffers(Integer, Integer*)
  name.vb: GenBuffers(Integer, Integer*)
- uid: OpenTK.Audio.OpenAL.AL.GenBuffers(System.Int32,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.AL.GenBuffers(System.Int32,System.Int32@)
  id: GenBuffers(System.Int32,System.Int32@)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GenBuffers(int, ref int)
  nameWithType: AL.GenBuffers(int, ref int)
  fullName: OpenTK.Audio.OpenAL.AL.GenBuffers(int, ref int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function generates one or more buffers, which contain audio buffer (see AL.BufferData).
  example: []
  syntax:
    content: public static extern void GenBuffers(int n, ref int buffers)
    parameters:
    - id: n
      type: System.Int32
      description: The number of buffers to be generated.
    - id: buffers
      type: System.Int32
      description: Pointer to an array of int values which will store the names of the new buffers.
    content.vb: Public Shared Sub GenBuffers(n As Integer, buffers As Integer)
  overload: OpenTK.Audio.OpenAL.AL.GenBuffers*
  nameWithType.vb: AL.GenBuffers(Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.GenBuffers(Integer, Integer)
  name.vb: GenBuffers(Integer, Integer)
- uid: OpenTK.Audio.OpenAL.AL.GenBuffers(System.Int32,System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.AL.GenBuffers(System.Int32,System.Int32[])
  id: GenBuffers(System.Int32,System.Int32[])
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GenBuffers(int, int[])
  nameWithType: AL.GenBuffers(int, int[])
  fullName: OpenTK.Audio.OpenAL.AL.GenBuffers(int, int[])
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function generates one or more buffers, which contain audio buffer (see AL.BufferData).
  example: []
  syntax:
    content: public static extern void GenBuffers(int n, int[] buffers)
    parameters:
    - id: n
      type: System.Int32
      description: The number of buffers to be generated.
    - id: buffers
      type: System.Int32[]
      description: Pointer to an array of int values which will store the names of the new buffers.
    content.vb: Public Shared Sub GenBuffers(n As Integer, buffers As Integer())
  overload: OpenTK.Audio.OpenAL.AL.GenBuffers*
  nameWithType.vb: AL.GenBuffers(Integer, Integer())
  fullName.vb: OpenTK.Audio.OpenAL.AL.GenBuffers(Integer, Integer())
  name.vb: GenBuffers(Integer, Integer())
- uid: OpenTK.Audio.OpenAL.AL.GenBuffers(System.Span{System.Int32})
  commentId: M:OpenTK.Audio.OpenAL.AL.GenBuffers(System.Span{System.Int32})
  id: GenBuffers(System.Span{System.Int32})
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GenBuffers(Span<int>)
  nameWithType: AL.GenBuffers(Span<int>)
  fullName: OpenTK.Audio.OpenAL.AL.GenBuffers(System.Span<int>)
  type: Method
  source:
    id: GenBuffers
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 905
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function generates one or more buffers, which contain audio buffer (see AL.BufferData).
  example: []
  syntax:
    content: public static void GenBuffers(Span<int> buffers)
    parameters:
    - id: buffers
      type: System.Span{System.Int32}
      description: Span to fill with generated buffer names.
    content.vb: Public Shared Sub GenBuffers(buffers As Span(Of Integer))
  overload: OpenTK.Audio.OpenAL.AL.GenBuffers*
  nameWithType.vb: AL.GenBuffers(Span(Of Integer))
  fullName.vb: OpenTK.Audio.OpenAL.AL.GenBuffers(System.Span(Of Integer))
  name.vb: GenBuffers(Span(Of Integer))
- uid: OpenTK.Audio.OpenAL.AL.GenBuffers(System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.AL.GenBuffers(System.Int32)
  id: GenBuffers(System.Int32)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GenBuffers(int)
  nameWithType: AL.GenBuffers(int)
  fullName: OpenTK.Audio.OpenAL.AL.GenBuffers(int)
  type: Method
  source:
    id: GenBuffers
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 913
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function generates one or more buffers, which contain audio data (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).
  example: []
  syntax:
    content: public static int[] GenBuffers(int n)
    parameters:
    - id: n
      type: System.Int32
      description: The number of buffers to be generated.
    return:
      type: System.Int32[]
      description: Pointer to an array of uint values which will store the names of the new buffers.
    content.vb: Public Shared Function GenBuffers(n As Integer) As Integer()
  overload: OpenTK.Audio.OpenAL.AL.GenBuffers*
  nameWithType.vb: AL.GenBuffers(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.GenBuffers(Integer)
  name.vb: GenBuffers(Integer)
- uid: OpenTK.Audio.OpenAL.AL.GenBuffer
  commentId: M:OpenTK.Audio.OpenAL.AL.GenBuffer
  id: GenBuffer
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GenBuffer()
  nameWithType: AL.GenBuffer()
  fullName: OpenTK.Audio.OpenAL.AL.GenBuffer()
  type: Method
  source:
    id: GenBuffer
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 922
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function generates one buffer only, which contain audio data (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).
  example: []
  syntax:
    content: public static int GenBuffer()
    return:
      type: System.Int32
      description: Pointer to an uint value which will store the name of the new buffer.
    content.vb: Public Shared Function GenBuffer() As Integer
  overload: OpenTK.Audio.OpenAL.AL.GenBuffer*
- uid: OpenTK.Audio.OpenAL.AL.GenBuffer(System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.AL.GenBuffer(System.Int32@)
  id: GenBuffer(System.Int32@)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GenBuffer(out int)
  nameWithType: AL.GenBuffer(out int)
  fullName: OpenTK.Audio.OpenAL.AL.GenBuffer(out int)
  type: Method
  source:
    id: GenBuffer
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 931
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function generates one buffer only, which contain audio data (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).
  example: []
  syntax:
    content: public static void GenBuffer(out int buffer)
    parameters:
    - id: buffer
      type: System.Int32
      description: Pointer to an uint value which will store the names of the new buffer.
    content.vb: Public Shared Sub GenBuffer(buffer As Integer)
  overload: OpenTK.Audio.OpenAL.AL.GenBuffer*
  nameWithType.vb: AL.GenBuffer(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.GenBuffer(Integer)
  name.vb: GenBuffer(Integer)
- uid: OpenTK.Audio.OpenAL.AL.DeleteBuffers(System.Int32,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.AL.DeleteBuffers(System.Int32,System.Int32*)
  id: DeleteBuffers(System.Int32,System.Int32*)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: DeleteBuffers(int, int*)
  nameWithType: AL.DeleteBuffers(int, int*)
  fullName: OpenTK.Audio.OpenAL.AL.DeleteBuffers(int, int*)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function deletes one or more buffers, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.
  example: []
  syntax:
    content: public static extern void DeleteBuffers(int n, int* buffers)
    parameters:
    - id: n
      type: System.Int32
      description: The number of buffers to be deleted.
    - id: buffers
      type: System.Int32*
      description: Pointer to an array of buffer names identifying the buffers to be deleted.
    content.vb: Public Shared Sub DeleteBuffers(n As Integer, buffers As Integer*)
  overload: OpenTK.Audio.OpenAL.AL.DeleteBuffers*
  nameWithType.vb: AL.DeleteBuffers(Integer, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.AL.DeleteBuffers(Integer, Integer*)
  name.vb: DeleteBuffers(Integer, Integer*)
- uid: OpenTK.Audio.OpenAL.AL.DeleteBuffers(System.Int32,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.AL.DeleteBuffers(System.Int32,System.Int32@)
  id: DeleteBuffers(System.Int32,System.Int32@)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: DeleteBuffers(int, ref int)
  nameWithType: AL.DeleteBuffers(int, ref int)
  fullName: OpenTK.Audio.OpenAL.AL.DeleteBuffers(int, ref int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function deletes one or more buffers, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.
  example: []
  syntax:
    content: public static extern void DeleteBuffers(int n, ref int buffers)
    parameters:
    - id: n
      type: System.Int32
      description: The number of buffers to be deleted.
    - id: buffers
      type: System.Int32
      description: Pointer to an array of buffer names identifying the buffers to be deleted.
    content.vb: Public Shared Sub DeleteBuffers(n As Integer, buffers As Integer)
  overload: OpenTK.Audio.OpenAL.AL.DeleteBuffers*
  nameWithType.vb: AL.DeleteBuffers(Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.DeleteBuffers(Integer, Integer)
  name.vb: DeleteBuffers(Integer, Integer)
- uid: OpenTK.Audio.OpenAL.AL.DeleteBuffers(System.Int32,System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.AL.DeleteBuffers(System.Int32,System.Int32[])
  id: DeleteBuffers(System.Int32,System.Int32[])
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: DeleteBuffers(int, int[])
  nameWithType: AL.DeleteBuffers(int, int[])
  fullName: OpenTK.Audio.OpenAL.AL.DeleteBuffers(int, int[])
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function deletes one or more buffers, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.
  example: []
  syntax:
    content: public static extern void DeleteBuffers(int n, int[] buffers)
    parameters:
    - id: n
      type: System.Int32
      description: The number of buffers to be deleted.
    - id: buffers
      type: System.Int32[]
      description: Pointer to an array of buffer names identifying the buffers to be deleted.
    content.vb: Public Shared Sub DeleteBuffers(n As Integer, buffers As Integer())
  overload: OpenTK.Audio.OpenAL.AL.DeleteBuffers*
  nameWithType.vb: AL.DeleteBuffers(Integer, Integer())
  fullName.vb: OpenTK.Audio.OpenAL.AL.DeleteBuffers(Integer, Integer())
  name.vb: DeleteBuffers(Integer, Integer())
- uid: OpenTK.Audio.OpenAL.AL.DeleteBuffers(System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.AL.DeleteBuffers(System.Int32[])
  id: DeleteBuffers(System.Int32[])
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: DeleteBuffers(int[])
  nameWithType: AL.DeleteBuffers(int[])
  fullName: OpenTK.Audio.OpenAL.AL.DeleteBuffers(int[])
  type: Method
  source:
    id: DeleteBuffers
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 961
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function deletes an array of buffers, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.
  example: []
  syntax:
    content: public static void DeleteBuffers(int[] buffers)
    parameters:
    - id: buffers
      type: System.Int32[]
      description: An array of buffer names to delete.
    content.vb: Public Shared Sub DeleteBuffers(buffers As Integer())
  overload: OpenTK.Audio.OpenAL.AL.DeleteBuffers*
  nameWithType.vb: AL.DeleteBuffers(Integer())
  fullName.vb: OpenTK.Audio.OpenAL.AL.DeleteBuffers(Integer())
  name.vb: DeleteBuffers(Integer())
- uid: OpenTK.Audio.OpenAL.AL.DeleteBuffers(System.ReadOnlySpan{System.Int32})
  commentId: M:OpenTK.Audio.OpenAL.AL.DeleteBuffers(System.ReadOnlySpan{System.Int32})
  id: DeleteBuffers(System.ReadOnlySpan{System.Int32})
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: DeleteBuffers(ReadOnlySpan<int>)
  nameWithType: AL.DeleteBuffers(ReadOnlySpan<int>)
  fullName: OpenTK.Audio.OpenAL.AL.DeleteBuffers(System.ReadOnlySpan<int>)
  type: Method
  source:
    id: DeleteBuffers
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 972
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function deletes a span of buffers, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.
  example: []
  syntax:
    content: public static void DeleteBuffers(ReadOnlySpan<int> buffers)
    parameters:
    - id: buffers
      type: System.ReadOnlySpan{System.Int32}
      description: Span of buffer names to delete.
    content.vb: Public Shared Sub DeleteBuffers(buffers As ReadOnlySpan(Of Integer))
  overload: OpenTK.Audio.OpenAL.AL.DeleteBuffers*
  nameWithType.vb: AL.DeleteBuffers(ReadOnlySpan(Of Integer))
  fullName.vb: OpenTK.Audio.OpenAL.AL.DeleteBuffers(System.ReadOnlySpan(Of Integer))
  name.vb: DeleteBuffers(ReadOnlySpan(Of Integer))
- uid: OpenTK.Audio.OpenAL.AL.DeleteBuffer(System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.AL.DeleteBuffer(System.Int32)
  id: DeleteBuffer(System.Int32)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: DeleteBuffer(int)
  nameWithType: AL.DeleteBuffer(int)
  fullName: OpenTK.Audio.OpenAL.AL.DeleteBuffer(int)
  type: Method
  source:
    id: DeleteBuffer
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 979
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function deletes one buffer only, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.
  example: []
  syntax:
    content: public static void DeleteBuffer(int buffer)
    parameters:
    - id: buffer
      type: System.Int32
      description: Pointer to a buffer name identifying the buffer to be deleted.
    content.vb: Public Shared Sub DeleteBuffer(buffer As Integer)
  overload: OpenTK.Audio.OpenAL.AL.DeleteBuffer*
  nameWithType.vb: AL.DeleteBuffer(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.DeleteBuffer(Integer)
  name.vb: DeleteBuffer(Integer)
- uid: OpenTK.Audio.OpenAL.AL.IsBuffer(System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.AL.IsBuffer(System.Int32)
  id: IsBuffer(System.Int32)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: IsBuffer(int)
  nameWithType: AL.IsBuffer(int)
  fullName: OpenTK.Audio.OpenAL.AL.IsBuffer(int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function tests if a buffer name is valid, returning True if valid, False if not.
  example: []
  syntax:
    content: public static extern bool IsBuffer(int bid)
    parameters:
    - id: bid
      type: System.Int32
      description: A buffer Handle previously allocated with <xref href="OpenTK.Audio.OpenAL.AL.GenBuffers(System.Int32)" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: Success.
    content.vb: Public Shared Function IsBuffer(bid As Integer) As Boolean
  overload: OpenTK.Audio.OpenAL.AL.IsBuffer*
  nameWithType.vb: AL.IsBuffer(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.IsBuffer(Integer)
  name.vb: IsBuffer(Integer)
- uid: OpenTK.Audio.OpenAL.AL.BufferData(System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.IntPtr,System.Int32,System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.AL.BufferData(System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.IntPtr,System.Int32,System.Int32)
  id: BufferData(System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.IntPtr,System.Int32,System.Int32)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: BufferData(int, ALFormat, nint, int, int)
  nameWithType: AL.BufferData(int, ALFormat, nint, int, int)
  fullName: OpenTK.Audio.OpenAL.AL.BufferData(int, OpenTK.Audio.OpenAL.ALFormat, nint, int, int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function fills a buffer with audio buffer. All the pre-defined formats are PCM buffer, but this function may be used by extensions to load other buffer types as well.
  example: []
  syntax:
    content: public static extern void BufferData(int bid, ALFormat format, nint buffer, int size, int freq)
    parameters:
    - id: bid
      type: System.Int32
      description: buffer Handle/Name to be filled with buffer.
    - id: format
      type: OpenTK.Audio.OpenAL.ALFormat
      description: 'Format type from among the following: ALFormat.Mono8, ALFormat.Mono16, ALFormat.Stereo8, ALFormat.Stereo16.'
    - id: buffer
      type: System.IntPtr
      description: Pointer to a pinned audio buffer.
    - id: size
      type: System.Int32
      description: The size of the audio buffer in bytes.
    - id: freq
      type: System.Int32
      description: The frequency of the audio buffer.
    content.vb: Public Shared Sub BufferData(bid As Integer, format As ALFormat, buffer As IntPtr, size As Integer, freq As Integer)
  overload: OpenTK.Audio.OpenAL.AL.BufferData*
  nameWithType.vb: AL.BufferData(Integer, ALFormat, IntPtr, Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.BufferData(Integer, OpenTK.Audio.OpenAL.ALFormat, System.IntPtr, Integer, Integer)
  name.vb: BufferData(Integer, ALFormat, IntPtr, Integer, Integer)
- uid: OpenTK.Audio.OpenAL.AL.BufferData(System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.Void*,System.Int32,System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.AL.BufferData(System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.Void*,System.Int32,System.Int32)
  id: BufferData(System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.Void*,System.Int32,System.Int32)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: BufferData(int, ALFormat, void*, int, int)
  nameWithType: AL.BufferData(int, ALFormat, void*, int, int)
  fullName: OpenTK.Audio.OpenAL.AL.BufferData(int, OpenTK.Audio.OpenAL.ALFormat, void*, int, int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function fills a buffer with audio buffer. All the pre-defined formats are PCM buffer, but this function may be used by extensions to load other buffer types as well.
  example: []
  syntax:
    content: public static extern void BufferData(int bid, ALFormat format, void* buffer, int size, int freq)
    parameters:
    - id: bid
      type: System.Int32
      description: buffer Handle/Name to be filled with buffer.
    - id: format
      type: OpenTK.Audio.OpenAL.ALFormat
      description: 'Format type from among the following: ALFormat.Mono8, ALFormat.Mono16, ALFormat.Stereo8, ALFormat.Stereo16.'
    - id: buffer
      type: System.Void*
      description: Pointer to a pinned audio buffer.
    - id: size
      type: System.Int32
      description: The size of the audio buffer in bytes.
    - id: freq
      type: System.Int32
      description: The frequency of the audio buffer.
    content.vb: Public Shared Sub BufferData(bid As Integer, format As ALFormat, buffer As Void*, size As Integer, freq As Integer)
  overload: OpenTK.Audio.OpenAL.AL.BufferData*
  nameWithType.vb: AL.BufferData(Integer, ALFormat, Void*, Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.BufferData(Integer, OpenTK.Audio.OpenAL.ALFormat, Void*, Integer, Integer)
  name.vb: BufferData(Integer, ALFormat, Void*, Integer, Integer)
- uid: OpenTK.Audio.OpenAL.AL.BufferData(System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.Byte@,System.Int32,System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.AL.BufferData(System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.Byte@,System.Int32,System.Int32)
  id: BufferData(System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.Byte@,System.Int32,System.Int32)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: BufferData(int, ALFormat, ref byte, int, int)
  nameWithType: AL.BufferData(int, ALFormat, ref byte, int, int)
  fullName: OpenTK.Audio.OpenAL.AL.BufferData(int, OpenTK.Audio.OpenAL.ALFormat, ref byte, int, int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function fills a buffer with audio buffer. All the pre-defined formats are PCM buffer, but this function may be used by extensions to load other buffer types as well.
  example: []
  syntax:
    content: public static extern void BufferData(int bid, ALFormat format, ref byte buffer, int size, int freq)
    parameters:
    - id: bid
      type: System.Int32
      description: buffer Handle/Name to be filled with buffer.
    - id: format
      type: OpenTK.Audio.OpenAL.ALFormat
      description: 'Format type from among the following: ALFormat.Mono8, ALFormat.Mono16, ALFormat.Stereo8, ALFormat.Stereo16.'
    - id: buffer
      type: System.Byte
      description: Pointer to a pinned audio buffer.
    - id: size
      type: System.Int32
      description: The size of the audio buffer in bytes.
    - id: freq
      type: System.Int32
      description: The frequency of the audio buffer.
    content.vb: Public Shared Sub BufferData(bid As Integer, format As ALFormat, buffer As Byte, size As Integer, freq As Integer)
  overload: OpenTK.Audio.OpenAL.AL.BufferData*
  nameWithType.vb: AL.BufferData(Integer, ALFormat, Byte, Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.BufferData(Integer, OpenTK.Audio.OpenAL.ALFormat, Byte, Integer, Integer)
  name.vb: BufferData(Integer, ALFormat, Byte, Integer, Integer)
- uid: OpenTK.Audio.OpenAL.AL.BufferData(System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.Int16@,System.Int32,System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.AL.BufferData(System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.Int16@,System.Int32,System.Int32)
  id: BufferData(System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.Int16@,System.Int32,System.Int32)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: BufferData(int, ALFormat, ref short, int, int)
  nameWithType: AL.BufferData(int, ALFormat, ref short, int, int)
  fullName: OpenTK.Audio.OpenAL.AL.BufferData(int, OpenTK.Audio.OpenAL.ALFormat, ref short, int, int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function fills a buffer with audio buffer. All the pre-defined formats are PCM buffer, but this function may be used by extensions to load other buffer types as well.
  example: []
  syntax:
    content: public static extern void BufferData(int bid, ALFormat format, ref short buffer, int bytes, int freq)
    parameters:
    - id: bid
      type: System.Int32
      description: buffer Handle/Name to be filled with buffer.
    - id: format
      type: OpenTK.Audio.OpenAL.ALFormat
      description: 'Format type from among the following: ALFormat.Mono8, ALFormat.Mono16, ALFormat.Stereo8, ALFormat.Stereo16.'
    - id: buffer
      type: System.Int16
      description: Pointer to a pinned audio buffer.
    - id: bytes
      type: System.Int32
      description: The size of the audio buffer in bytes.
    - id: freq
      type: System.Int32
      description: The frequency of the audio buffer.
    content.vb: Public Shared Sub BufferData(bid As Integer, format As ALFormat, buffer As Short, bytes As Integer, freq As Integer)
  overload: OpenTK.Audio.OpenAL.AL.BufferData*
  nameWithType.vb: AL.BufferData(Integer, ALFormat, Short, Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.BufferData(Integer, OpenTK.Audio.OpenAL.ALFormat, Short, Integer, Integer)
  name.vb: BufferData(Integer, ALFormat, Short, Integer, Integer)
- uid: OpenTK.Audio.OpenAL.AL.BufferData``1(System.Int32,OpenTK.Audio.OpenAL.ALFormat,``0[],System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.AL.BufferData``1(System.Int32,OpenTK.Audio.OpenAL.ALFormat,``0[],System.Int32)
  id: BufferData``1(System.Int32,OpenTK.Audio.OpenAL.ALFormat,``0[],System.Int32)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: BufferData<TBuffer>(int, ALFormat, TBuffer[], int)
  nameWithType: AL.BufferData<TBuffer>(int, ALFormat, TBuffer[], int)
  fullName: OpenTK.Audio.OpenAL.AL.BufferData<TBuffer>(int, OpenTK.Audio.OpenAL.ALFormat, TBuffer[], int)
  type: Method
  source:
    id: BufferData
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 1037
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function fills a buffer with audio buffer. All the pre-defined formats are PCM buffer, but this function may be used by extensions to load other buffer types as well.
  example: []
  syntax:
    content: 'public static void BufferData<TBuffer>(int bid, ALFormat format, TBuffer[] buffer, int freq) where TBuffer : unmanaged'
    parameters:
    - id: bid
      type: System.Int32
      description: buffer Handle/Name to be filled with buffer.
    - id: format
      type: OpenTK.Audio.OpenAL.ALFormat
      description: 'Format type from among the following: ALFormat.Mono8, ALFormat.Mono16, ALFormat.Stereo8, ALFormat.Stereo16.'
    - id: buffer
      type: '{TBuffer}[]'
      description: The audio buffer.
    - id: freq
      type: System.Int32
      description: The frequency of the audio buffer.
    typeParameters:
    - id: TBuffer
      description: The type of the data buffer.
    content.vb: Public Shared Sub BufferData(Of TBuffer As Structure)(bid As Integer, format As ALFormat, buffer As TBuffer(), freq As Integer)
  overload: OpenTK.Audio.OpenAL.AL.BufferData*
  nameWithType.vb: AL.BufferData(Of TBuffer)(Integer, ALFormat, TBuffer(), Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.BufferData(Of TBuffer)(Integer, OpenTK.Audio.OpenAL.ALFormat, TBuffer(), Integer)
  name.vb: BufferData(Of TBuffer)(Integer, ALFormat, TBuffer(), Integer)
- uid: OpenTK.Audio.OpenAL.AL.BufferData``1(System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.ReadOnlySpan{``0},System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.AL.BufferData``1(System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.ReadOnlySpan{``0},System.Int32)
  id: BufferData``1(System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.ReadOnlySpan{``0},System.Int32)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: BufferData<TBuffer>(int, ALFormat, ReadOnlySpan<TBuffer>, int)
  nameWithType: AL.BufferData<TBuffer>(int, ALFormat, ReadOnlySpan<TBuffer>, int)
  fullName: OpenTK.Audio.OpenAL.AL.BufferData<TBuffer>(int, OpenTK.Audio.OpenAL.ALFormat, System.ReadOnlySpan<TBuffer>, int)
  type: Method
  source:
    id: BufferData
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 1052
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function fills a buffer with audio buffer. All the pre-defined formats are PCM buffer, but this function may be used by extensions to load other buffer types as well.
  example: []
  syntax:
    content: 'public static void BufferData<TBuffer>(int bid, ALFormat format, ReadOnlySpan<TBuffer> buffer, int freq) where TBuffer : unmanaged'
    parameters:
    - id: bid
      type: System.Int32
      description: buffer Handle/Name to be filled with buffer.
    - id: format
      type: OpenTK.Audio.OpenAL.ALFormat
      description: 'Format type from among the following: ALFormat.Mono8, ALFormat.Mono16, ALFormat.Stereo8, ALFormat.Stereo16.'
    - id: buffer
      type: System.ReadOnlySpan{{TBuffer}}
      description: Span representing the audio buffer.
    - id: freq
      type: System.Int32
      description: The frequency of the audio buffer.
    typeParameters:
    - id: TBuffer
      description: The type of the buffer elements.
    content.vb: Public Shared Sub BufferData(Of TBuffer As Structure)(bid As Integer, format As ALFormat, buffer As ReadOnlySpan(Of TBuffer), freq As Integer)
  overload: OpenTK.Audio.OpenAL.AL.BufferData*
  nameWithType.vb: AL.BufferData(Of TBuffer)(Integer, ALFormat, ReadOnlySpan(Of TBuffer), Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.BufferData(Of TBuffer)(Integer, OpenTK.Audio.OpenAL.ALFormat, System.ReadOnlySpan(Of TBuffer), Integer)
  name.vb: BufferData(Of TBuffer)(Integer, ALFormat, ReadOnlySpan(Of TBuffer), Integer)
- uid: OpenTK.Audio.OpenAL.AL.GetBuffer(System.Int32,OpenTK.Audio.OpenAL.ALGetBufferi,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.AL.GetBuffer(System.Int32,OpenTK.Audio.OpenAL.ALGetBufferi,System.Int32@)
  id: GetBuffer(System.Int32,OpenTK.Audio.OpenAL.ALGetBufferi,System.Int32@)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GetBuffer(int, ALGetBufferi, out int)
  nameWithType: AL.GetBuffer(int, ALGetBufferi, out int)
  fullName: OpenTK.Audio.OpenAL.AL.GetBuffer(int, OpenTK.Audio.OpenAL.ALGetBufferi, out int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function retrieves an integer property of a buffer.
  example: []
  syntax:
    content: public static extern void GetBuffer(int bid, ALGetBufferi param, out int value)
    parameters:
    - id: bid
      type: System.Int32
      description: Buffer name whose attribute is being retrieved.
    - id: param
      type: OpenTK.Audio.OpenAL.ALGetBufferi
      description: 'The name of the attribute to be retrieved: ALGetBufferi.Frequency, Bits, Channels, Size, and the currently hidden AL_DATA (dangerous).'
    - id: value
      type: System.Int32
      description: A pointer to an int to hold the retrieved buffer.
    content.vb: Public Shared Sub GetBuffer(bid As Integer, param As ALGetBufferi, value As Integer)
  overload: OpenTK.Audio.OpenAL.AL.GetBuffer*
  nameWithType.vb: AL.GetBuffer(Integer, ALGetBufferi, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.GetBuffer(Integer, OpenTK.Audio.OpenAL.ALGetBufferi, Integer)
  name.vb: GetBuffer(Integer, ALGetBufferi, Integer)
- uid: OpenTK.Audio.OpenAL.AL.GetBuffer(System.Int32,OpenTK.Audio.OpenAL.ALGetBufferi)
  commentId: M:OpenTK.Audio.OpenAL.AL.GetBuffer(System.Int32,OpenTK.Audio.OpenAL.ALGetBufferi)
  id: GetBuffer(System.Int32,OpenTK.Audio.OpenAL.ALGetBufferi)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GetBuffer(int, ALGetBufferi)
  nameWithType: AL.GetBuffer(int, ALGetBufferi)
  fullName: OpenTK.Audio.OpenAL.AL.GetBuffer(int, OpenTK.Audio.OpenAL.ALGetBufferi)
  type: Method
  source:
    id: GetBuffer
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 1095
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function retrieves an integer property of a buffer.
  example: []
  syntax:
    content: public static int GetBuffer(int bid, ALGetBufferi param)
    parameters:
    - id: bid
      type: System.Int32
      description: Buffer name whose attribute is being retrieved.
    - id: param
      type: OpenTK.Audio.OpenAL.ALGetBufferi
      description: 'The name of the attribute to be retrieved: ALGetBufferi.Frequency, Bits, Channels, Size, and the currently hidden AL_DATA (dangerous).'
    return:
      type: System.Int32
      description: An int to hold the retrieved buffer.
    content.vb: Public Shared Function GetBuffer(bid As Integer, param As ALGetBufferi) As Integer
  overload: OpenTK.Audio.OpenAL.AL.GetBuffer*
  nameWithType.vb: AL.GetBuffer(Integer, ALGetBufferi)
  fullName.vb: OpenTK.Audio.OpenAL.AL.GetBuffer(Integer, OpenTK.Audio.OpenAL.ALGetBufferi)
  name.vb: GetBuffer(Integer, ALGetBufferi)
- uid: OpenTK.Audio.OpenAL.AL.DopplerFactor(System.Single)
  commentId: M:OpenTK.Audio.OpenAL.AL.DopplerFactor(System.Single)
  id: DopplerFactor(System.Single)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: DopplerFactor(float)
  nameWithType: AL.DopplerFactor(float)
  fullName: OpenTK.Audio.OpenAL.AL.DopplerFactor(float)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: AL.DopplerFactor is a simple scaling of source and listener velocities to exaggerate or deemphasize the Doppler (pitch) shift resulting from the calculation.
  example: []
  syntax:
    content: public static extern void DopplerFactor(float value)
    parameters:
    - id: value
      type: System.Single
      description: A negative value will result in an error, the command is then ignored. The default value is 1f. The current setting can be queried using AL.Get with parameter ALGetFloat.SpeedOfSound.
    content.vb: Public Shared Sub DopplerFactor(value As Single)
  overload: OpenTK.Audio.OpenAL.AL.DopplerFactor*
  nameWithType.vb: AL.DopplerFactor(Single)
  fullName.vb: OpenTK.Audio.OpenAL.AL.DopplerFactor(Single)
  name.vb: DopplerFactor(Single)
- uid: OpenTK.Audio.OpenAL.AL.DopplerVelocity(System.Single)
  commentId: M:OpenTK.Audio.OpenAL.AL.DopplerVelocity(System.Single)
  id: DopplerVelocity(System.Single)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: DopplerVelocity(float)
  nameWithType: AL.DopplerVelocity(float)
  fullName: OpenTK.Audio.OpenAL.AL.DopplerVelocity(float)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function is deprecated and should not be used.
  example: []
  syntax:
    content: public static extern void DopplerVelocity(float value)
    parameters:
    - id: value
      type: System.Single
      description: The default is 1.0f.
    content.vb: Public Shared Sub DopplerVelocity(value As Single)
  overload: OpenTK.Audio.OpenAL.AL.DopplerVelocity*
  nameWithType.vb: AL.DopplerVelocity(Single)
  fullName.vb: OpenTK.Audio.OpenAL.AL.DopplerVelocity(Single)
  name.vb: DopplerVelocity(Single)
- uid: OpenTK.Audio.OpenAL.AL.SpeedOfSound(System.Single)
  commentId: M:OpenTK.Audio.OpenAL.AL.SpeedOfSound(System.Single)
  id: SpeedOfSound(System.Single)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: SpeedOfSound(float)
  nameWithType: AL.SpeedOfSound(float)
  fullName: OpenTK.Audio.OpenAL.AL.SpeedOfSound(float)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: AL.SpeedOfSound allows the application to change the reference (propagation) speed used in the Doppler calculation. The source and listener velocities should be expressed in the same units as the speed of sound.
  example: []
  syntax:
    content: public static extern void SpeedOfSound(float value)
    parameters:
    - id: value
      type: System.Single
      description: 'A negative or zero value will result in an error, and the command is ignored. Default: 343.3f (appropriate for velocity units of meters and air as the propagation medium). The current setting can be queried using AL.Get with parameter ALGetFloat.SpeedOfSound.'
    content.vb: Public Shared Sub SpeedOfSound(value As Single)
  overload: OpenTK.Audio.OpenAL.AL.SpeedOfSound*
  nameWithType.vb: AL.SpeedOfSound(Single)
  fullName.vb: OpenTK.Audio.OpenAL.AL.SpeedOfSound(Single)
  name.vb: SpeedOfSound(Single)
- uid: OpenTK.Audio.OpenAL.AL.DistanceModel(OpenTK.Audio.OpenAL.ALDistanceModel)
  commentId: M:OpenTK.Audio.OpenAL.AL.DistanceModel(OpenTK.Audio.OpenAL.ALDistanceModel)
  id: DistanceModel(OpenTK.Audio.OpenAL.ALDistanceModel)
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: DistanceModel(ALDistanceModel)
  nameWithType: AL.DistanceModel(ALDistanceModel)
  fullName: OpenTK.Audio.OpenAL.AL.DistanceModel(OpenTK.Audio.OpenAL.ALDistanceModel)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function selects the OpenAL distance model – ALDistanceModel.InverseDistance, ALDistanceModel.InverseDistanceClamped, ALDistanceModel.LinearDistance, ALDistanceModel.LinearDistanceClamped, ALDistanceModel.ExponentDistance, ALDistanceModel.ExponentDistanceClamped, or ALDistanceModel.None. The default distance model in OpenAL is ALDistanceModel.InverseDistanceClamped.
  remarks: >-
    The ALDistanceModel .InverseDistance model works according to the following formula:

    gain = ALSourcef.ReferenceDistance / (ALSourcef.ReferenceDistance + ALSourcef.RolloffFactor * (distance – ALSourcef.ReferenceDistance));


    The ALDistanceModel .InverseDistanceClamped model works according to the following formula:

    distance = max(distance,ALSourcef.ReferenceDistance);

    distance = min(distance,ALSourcef.MaxDistance);

    gain = ALSourcef.ReferenceDistance / (ALSourcef.ReferenceDistance + ALSourcef.RolloffFactor * (distance – ALSourcef.ReferenceDistance));


    The ALDistanceModel.LinearDistance model works according to the following formula:

    distance = min(distance, ALSourcef.MaxDistance) // avoid negative gain

    gain = (1 – ALSourcef.RolloffFactor * (distance – ALSourcef.ReferenceDistance) / (ALSourcef.MaxDistance – ALSourcef.ReferenceDistance))


    The ALDistanceModel.LinearDistanceClamped model works according to the following formula:

    distance = max(distance, ALSourcef.ReferenceDistance)

    distance = min(distance, ALSourcef.MaxDistance)

    gain = (1 – ALSourcef.RolloffFactor * (distance – ALSourcef.ReferenceDistance) / (ALSourcef.MaxDistance – ALSourcef.ReferenceDistance))


    The ALDistanceModel.ExponentDistance model works according to the following formula:

    gain = (distance / ALSourcef.ReferenceDistance) ^ (- ALSourcef.RolloffFactor)


    The ALDistanceModel.ExponentDistanceClamped model works according to the following formula:

    distance = max(distance, ALSourcef.ReferenceDistance)

    distance = min(distance, ALSourcef.MaxDistance)

    gain = (distance / ALSourcef.ReferenceDistance) ^ (- ALSourcef.RolloffFactor)


    The ALDistanceModel.None model works according to the following formula:

    <pre><code class="lang-csharp">gain = 1f;</code></pre>.
  example: []
  syntax:
    content: public static extern void DistanceModel(ALDistanceModel distancemodel)
    parameters:
    - id: distancemodel
      type: OpenTK.Audio.OpenAL.ALDistanceModel
      description: The distance model to use.
    content.vb: Public Shared Sub DistanceModel(distancemodel As ALDistanceModel)
  overload: OpenTK.Audio.OpenAL.AL.DistanceModel*
- uid: OpenTK.Audio.OpenAL.AL.GetDistanceModel
  commentId: M:OpenTK.Audio.OpenAL.AL.GetDistanceModel
  id: GetDistanceModel
  parent: OpenTK.Audio.OpenAL.AL
  langs:
  - csharp
  - vb
  name: GetDistanceModel()
  nameWithType: AL.GetDistanceModel()
  fullName: OpenTK.Audio.OpenAL.AL.GetDistanceModel()
  type: Method
  source:
    id: GetDistanceModel
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\AL\AL.cs
    startLine: 1164
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Returns the <xref href="OpenTK.Audio.OpenAL.ALDistanceModel" data-throw-if-not-resolved="false"></xref> of the current context.
  example: []
  syntax:
    content: public static ALDistanceModel GetDistanceModel()
    return:
      type: OpenTK.Audio.OpenAL.ALDistanceModel
      description: The <xref href="OpenTK.Audio.OpenAL.ALDistanceModel" data-throw-if-not-resolved="false"></xref> of the current context.
    content.vb: Public Shared Function GetDistanceModel() As ALDistanceModel
  overload: OpenTK.Audio.OpenAL.AL.GetDistanceModel*
references:
- uid: OpenTK.Audio.OpenAL
  commentId: N:OpenTK.Audio.OpenAL
  href: OpenTK.html
  name: OpenTK.Audio.OpenAL
  nameWithType: OpenTK.Audio.OpenAL
  fullName: OpenTK.Audio.OpenAL
  spec.csharp:
  - uid: OpenTK
    name: OpenTK
    href: OpenTK.html
  - name: .
  - uid: OpenTK.Audio
    name: Audio
    href: OpenTK.Audio.html
  - name: .
  - uid: OpenTK.Audio.OpenAL
    name: OpenAL
    href: OpenTK.Audio.OpenAL.html
  spec.vb:
  - uid: OpenTK
    name: OpenTK
    href: OpenTK.html
  - name: .
  - uid: OpenTK.Audio
    name: Audio
    href: OpenTK.Audio.html
  - name: .
  - uid: OpenTK.Audio.OpenAL
    name: OpenAL
    href: OpenTK.Audio.OpenAL.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: OpenTK.Audio.OpenAL.ALBase
  commentId: T:OpenTK.Audio.OpenAL.ALBase
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.ALBase.html
  name: ALBase
  nameWithType: ALBase
  fullName: OpenTK.Audio.OpenAL.ALBase
- uid: OpenTK.Audio.OpenAL.ALBase.RegisterOpenALResolver
  commentId: M:OpenTK.Audio.OpenAL.ALBase.RegisterOpenALResolver
  parent: OpenTK.Audio.OpenAL.ALBase
  href: OpenTK.Audio.OpenAL.ALBase.html#OpenTK_Audio_OpenAL_ALBase_RegisterOpenALResolver
  name: RegisterOpenALResolver()
  nameWithType: ALBase.RegisterOpenALResolver()
  fullName: OpenTK.Audio.OpenAL.ALBase.RegisterOpenALResolver()
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALBase.RegisterOpenALResolver
    name: RegisterOpenALResolver
    href: OpenTK.Audio.OpenAL.ALBase.html#OpenTK_Audio_OpenAL_ALBase_RegisterOpenALResolver
  - name: (
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALBase.RegisterOpenALResolver
    name: RegisterOpenALResolver
    href: OpenTK.Audio.OpenAL.ALBase.html#OpenTK_Audio_OpenAL_ALBase_RegisterOpenALResolver
  - name: (
  - name: )
- uid: OpenTK.Audio.OpenAL.ALBase.LoadDelegate``1(System.String)
  commentId: M:OpenTK.Audio.OpenAL.ALBase.LoadDelegate``1(System.String)
  parent: OpenTK.Audio.OpenAL.ALBase
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALBase.html#OpenTK_Audio_OpenAL_ALBase_LoadDelegate__1_System_String_
  name: LoadDelegate<TDelegate>(string)
  nameWithType: ALBase.LoadDelegate<TDelegate>(string)
  fullName: OpenTK.Audio.OpenAL.ALBase.LoadDelegate<TDelegate>(string)
  nameWithType.vb: ALBase.LoadDelegate(Of TDelegate)(String)
  fullName.vb: OpenTK.Audio.OpenAL.ALBase.LoadDelegate(Of TDelegate)(String)
  name.vb: LoadDelegate(Of TDelegate)(String)
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALBase.LoadDelegate``1(System.String)
    name: LoadDelegate
    href: OpenTK.Audio.OpenAL.ALBase.html#OpenTK_Audio_OpenAL_ALBase_LoadDelegate__1_System_String_
  - name: <
  - name: TDelegate
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALBase.LoadDelegate``1(System.String)
    name: LoadDelegate
    href: OpenTK.Audio.OpenAL.ALBase.html#OpenTK_Audio_OpenAL_ALBase_LoadDelegate__1_System_String_
  - name: (
  - name: Of
  - name: " "
  - name: TDelegate
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: OpenTK.Audio.OpenAL.AL.Enable*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.Enable
  isExternal: true
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_Enable_OpenTK_Audio_OpenAL_ALCapability_
  name: Enable
  nameWithType: AL.Enable
  fullName: OpenTK.Audio.OpenAL.AL.Enable
- uid: OpenTK.Audio.OpenAL.ALCapability
  commentId: T:OpenTK.Audio.OpenAL.ALCapability
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.ALCapability.html
  name: ALCapability
  nameWithType: ALCapability
  fullName: OpenTK.Audio.OpenAL.ALCapability
- uid: OpenTK.Audio.OpenAL.AL.Disable*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.Disable
  isExternal: true
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_Disable_OpenTK_Audio_OpenAL_ALCapability_
  name: Disable
  nameWithType: AL.Disable
  fullName: OpenTK.Audio.OpenAL.AL.Disable
- uid: OpenTK.Audio.OpenAL.AL.IsEnabled*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.IsEnabled
  isExternal: true
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_IsEnabled_OpenTK_Audio_OpenAL_ALCapability_
  name: IsEnabled
  nameWithType: AL.IsEnabled
  fullName: OpenTK.Audio.OpenAL.AL.IsEnabled
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: OpenTK.Audio.OpenAL.AL.Get*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.Get
  isExternal: true
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_Get_OpenTK_Audio_OpenAL_ALGetString_
  name: Get
  nameWithType: AL.Get
  fullName: OpenTK.Audio.OpenAL.AL.Get
- uid: OpenTK.Audio.OpenAL.ALGetString
  commentId: T:OpenTK.Audio.OpenAL.ALGetString
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.ALGetString.html
  name: ALGetString
  nameWithType: ALGetString
  fullName: OpenTK.Audio.OpenAL.ALGetString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: OpenTK.Audio.OpenAL.AL.GetErrorString*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.GetErrorString
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_GetErrorString_OpenTK_Audio_OpenAL_ALError_
  name: GetErrorString
  nameWithType: AL.GetErrorString
  fullName: OpenTK.Audio.OpenAL.AL.GetErrorString
- uid: OpenTK.Audio.OpenAL.ALError
  commentId: T:OpenTK.Audio.OpenAL.ALError
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.ALError.html
  name: ALError
  nameWithType: ALError
  fullName: OpenTK.Audio.OpenAL.ALError
- uid: OpenTK.Audio.OpenAL.ALGetInteger
  commentId: T:OpenTK.Audio.OpenAL.ALGetInteger
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.ALGetInteger.html
  name: ALGetInteger
  nameWithType: ALGetInteger
  fullName: OpenTK.Audio.OpenAL.ALGetInteger
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: OpenTK.Audio.OpenAL.ALGetFloat
  commentId: T:OpenTK.Audio.OpenAL.ALGetFloat
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.ALGetFloat.html
  name: ALGetFloat
  nameWithType: ALGetFloat
  fullName: OpenTK.Audio.OpenAL.ALGetFloat
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: OpenTK.Audio.OpenAL.AL.GetError*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.GetError
  isExternal: true
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_GetError
  name: GetError
  nameWithType: AL.GetError
  fullName: OpenTK.Audio.OpenAL.AL.GetError
- uid: OpenTK.Audio.OpenAL.AL.IsExtensionPresent*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.IsExtensionPresent
  isExternal: true
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_IsExtensionPresent_System_String_
  name: IsExtensionPresent
  nameWithType: AL.IsExtensionPresent
  fullName: OpenTK.Audio.OpenAL.AL.IsExtensionPresent
- uid: OpenTK.Audio.OpenAL.AL.GetProcAddress*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.GetProcAddress
  isExternal: true
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_GetProcAddress_System_String_
  name: GetProcAddress
  nameWithType: AL.GetProcAddress
  fullName: OpenTK.Audio.OpenAL.AL.GetProcAddress
- uid: System.IntPtr
  commentId: T:System.IntPtr
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.intptr
  name: nint
  nameWithType: nint
  fullName: nint
  nameWithType.vb: IntPtr
  fullName.vb: System.IntPtr
  name.vb: IntPtr
- uid: OpenTK.Audio.OpenAL.AL.GetEnumValue*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.GetEnumValue
  isExternal: true
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_GetEnumValue_System_String_
  name: GetEnumValue
  nameWithType: AL.GetEnumValue
  fullName: OpenTK.Audio.OpenAL.AL.GetEnumValue
- uid: OpenTK.Audio.OpenAL.AL.Listener*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.Listener
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_Listener_OpenTK_Audio_OpenAL_ALListenerf_System_Single_
  name: Listener
  nameWithType: AL.Listener
  fullName: OpenTK.Audio.OpenAL.AL.Listener
- uid: OpenTK.Audio.OpenAL.ALListenerf
  commentId: T:OpenTK.Audio.OpenAL.ALListenerf
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.ALListenerf.html
  name: ALListenerf
  nameWithType: ALListenerf
  fullName: OpenTK.Audio.OpenAL.ALListenerf
- uid: OpenTK.Audio.OpenAL.ALListener3f
  commentId: T:OpenTK.Audio.OpenAL.ALListener3f
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.ALListener3f.html
  name: ALListener3f
  nameWithType: ALListener3f
  fullName: OpenTK.Audio.OpenAL.ALListener3f
- uid: OpenTK.Mathematics.Vector3
  commentId: T:OpenTK.Mathematics.Vector3
  parent: OpenTK.Mathematics
  href: OpenTK.Mathematics.Vector3.html
  name: Vector3
  nameWithType: Vector3
  fullName: OpenTK.Mathematics.Vector3
- uid: OpenTK.Mathematics
  commentId: N:OpenTK.Mathematics
  href: OpenTK.html
  name: OpenTK.Mathematics
  nameWithType: OpenTK.Mathematics
  fullName: OpenTK.Mathematics
  spec.csharp:
  - uid: OpenTK
    name: OpenTK
    href: OpenTK.html
  - name: .
  - uid: OpenTK.Mathematics
    name: Mathematics
    href: OpenTK.Mathematics.html
  spec.vb:
  - uid: OpenTK
    name: OpenTK
    href: OpenTK.html
  - name: .
  - uid: OpenTK.Mathematics
    name: Mathematics
    href: OpenTK.Mathematics.html
- uid: OpenTK.Audio.OpenAL.ALListenerfv
  commentId: T:OpenTK.Audio.OpenAL.ALListenerfv
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.ALListenerfv.html
  name: ALListenerfv
  nameWithType: ALListenerfv
  fullName: OpenTK.Audio.OpenAL.ALListenerfv
- uid: System.Single*
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float*
  nameWithType: float*
  fullName: float*
  nameWithType.vb: Single*
  fullName.vb: Single*
  name.vb: Single*
  spec.csharp:
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '*'
  spec.vb:
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '*'
- uid: System.Single[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float[]
  nameWithType: float[]
  fullName: float[]
  nameWithType.vb: Single()
  fullName.vb: Single()
  name.vb: Single()
  spec.csharp:
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: (
  - name: )
- uid: OpenTK.Audio.OpenAL.AL.GetListener*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.GetListener
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_GetListener_OpenTK_Audio_OpenAL_ALListenerf_System_Single__
  name: GetListener
  nameWithType: AL.GetListener
  fullName: OpenTK.Audio.OpenAL.AL.GetListener
- uid: OpenTK.Audio.OpenAL.AL.GenSources*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.GenSources
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_GenSources_System_Int32_System_Int32__
  name: GenSources
  nameWithType: AL.GenSources
  fullName: OpenTK.Audio.OpenAL.AL.GenSources
- uid: System.Int32*
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int*
  nameWithType: int*
  fullName: int*
  nameWithType.vb: Integer*
  fullName.vb: Integer*
  name.vb: Integer*
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '*'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '*'
- uid: System.Int32[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int[]
  nameWithType: int[]
  fullName: int[]
  nameWithType.vb: Integer()
  fullName.vb: Integer()
  name.vb: Integer()
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
- uid: System.Span{System.Int32}
  commentId: T:System.Span{System.Int32}
  parent: System
  definition: System.Span`1
  href: https://learn.microsoft.com/dotnet/api/system.span-1
  name: Span<int>
  nameWithType: Span<int>
  fullName: System.Span<int>
  nameWithType.vb: Span(Of Integer)
  fullName.vb: System.Span(Of Integer)
  name.vb: Span(Of Integer)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Span`1
  commentId: T:System.Span`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.span-1
  name: Span<T>
  nameWithType: Span<T>
  fullName: System.Span<T>
  nameWithType.vb: Span(Of T)
  fullName.vb: System.Span(Of T)
  name.vb: Span(Of T)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: OpenTK.Audio.OpenAL.AL.GenSource*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.GenSource
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_GenSource
  name: GenSource
  nameWithType: AL.GenSource
  fullName: OpenTK.Audio.OpenAL.AL.GenSource
- uid: OpenTK.Audio.OpenAL.AL.DeleteSources*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.DeleteSources
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_DeleteSources_System_Int32_System_Int32__
  name: DeleteSources
  nameWithType: AL.DeleteSources
  fullName: OpenTK.Audio.OpenAL.AL.DeleteSources
- uid: System.ReadOnlySpan{System.Int32}
  commentId: T:System.ReadOnlySpan{System.Int32}
  parent: System
  definition: System.ReadOnlySpan`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<int>
  nameWithType: ReadOnlySpan<int>
  fullName: System.ReadOnlySpan<int>
  nameWithType.vb: ReadOnlySpan(Of Integer)
  fullName.vb: System.ReadOnlySpan(Of Integer)
  name.vb: ReadOnlySpan(Of Integer)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.ReadOnlySpan`1
  commentId: T:System.ReadOnlySpan`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: OpenTK.Audio.OpenAL.AL.DeleteSource*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.DeleteSource
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_DeleteSource_System_Int32_
  name: DeleteSource
  nameWithType: AL.DeleteSource
  fullName: OpenTK.Audio.OpenAL.AL.DeleteSource
- uid: OpenTK.Audio.OpenAL.AL.IsSource*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.IsSource
  isExternal: true
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_IsSource_System_Int32_
  name: IsSource
  nameWithType: AL.IsSource
  fullName: OpenTK.Audio.OpenAL.AL.IsSource
- uid: OpenTK.Audio.OpenAL.AL.Source*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.Source
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_Source_System_Int32_OpenTK_Audio_OpenAL_ALSourcef_System_Single_
  name: Source
  nameWithType: AL.Source
  fullName: OpenTK.Audio.OpenAL.AL.Source
- uid: OpenTK.Audio.OpenAL.ALSourcef
  commentId: T:OpenTK.Audio.OpenAL.ALSourcef
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.ALSourcef.html
  name: ALSourcef
  nameWithType: ALSourcef
  fullName: OpenTK.Audio.OpenAL.ALSourcef
- uid: OpenTK.Audio.OpenAL.ALSource3f
  commentId: T:OpenTK.Audio.OpenAL.ALSource3f
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.ALSource3f.html
  name: ALSource3f
  nameWithType: ALSource3f
  fullName: OpenTK.Audio.OpenAL.ALSource3f
- uid: OpenTK.Audio.OpenAL.ALSourcei
  commentId: T:OpenTK.Audio.OpenAL.ALSourcei
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.ALSourcei.html
  name: ALSourcei
  nameWithType: ALSourcei
  fullName: OpenTK.Audio.OpenAL.ALSourcei
- uid: OpenTK.Audio.OpenAL.ALSourceb
  commentId: T:OpenTK.Audio.OpenAL.ALSourceb
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.ALSourceb.html
  name: ALSourceb
  nameWithType: ALSourceb
  fullName: OpenTK.Audio.OpenAL.ALSourceb
- uid: OpenTK.Audio.OpenAL.ALSource3i
  commentId: T:OpenTK.Audio.OpenAL.ALSource3i
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.ALSource3i.html
  name: ALSource3i
  nameWithType: ALSource3i
  fullName: OpenTK.Audio.OpenAL.ALSource3i
- uid: OpenTK.Audio.OpenAL.AL.GetSource*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.GetSource
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_GetSource_System_Int32_OpenTK_Audio_OpenAL_ALSourcef_System_Single__
  name: GetSource
  nameWithType: AL.GetSource
  fullName: OpenTK.Audio.OpenAL.AL.GetSource
- uid: OpenTK.Mathematics.Vector3i
  commentId: T:OpenTK.Mathematics.Vector3i
  parent: OpenTK.Mathematics
  href: OpenTK.Mathematics.Vector3i.html
  name: Vector3i
  nameWithType: Vector3i
  fullName: OpenTK.Mathematics.Vector3i
- uid: OpenTK.Audio.OpenAL.ALGetSourcei
  commentId: T:OpenTK.Audio.OpenAL.ALGetSourcei
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.ALGetSourcei.html
  name: ALGetSourcei
  nameWithType: ALGetSourcei
  fullName: OpenTK.Audio.OpenAL.ALGetSourcei
- uid: OpenTK.Audio.OpenAL.AL.SourcePlay*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.SourcePlay
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_SourcePlay_System_Int32_System_Int32__
  name: SourcePlay
  nameWithType: AL.SourcePlay
  fullName: OpenTK.Audio.OpenAL.AL.SourcePlay
- uid: OpenTK.Audio.OpenAL.AL.SourceStop*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.SourceStop
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_SourceStop_System_Int32_System_Int32__
  name: SourceStop
  nameWithType: AL.SourceStop
  fullName: OpenTK.Audio.OpenAL.AL.SourceStop
- uid: OpenTK.Audio.OpenAL.AL.SourceRewind*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.SourceRewind
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_SourceRewind_System_Int32_System_Int32__
  name: SourceRewind
  nameWithType: AL.SourceRewind
  fullName: OpenTK.Audio.OpenAL.AL.SourceRewind
- uid: OpenTK.Audio.OpenAL.AL.SourcePause*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.SourcePause
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_SourcePause_System_Int32_System_Int32__
  name: SourcePause
  nameWithType: AL.SourcePause
  fullName: OpenTK.Audio.OpenAL.AL.SourcePause
- uid: OpenTK.Audio.OpenAL.AL.SourceQueueBuffers*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.SourceQueueBuffers
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_SourceQueueBuffers_System_Int32_System_Int32_System_Int32__
  name: SourceQueueBuffers
  nameWithType: AL.SourceQueueBuffers
  fullName: OpenTK.Audio.OpenAL.AL.SourceQueueBuffers
- uid: OpenTK.Audio.OpenAL.AL.SourceQueueBuffer*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.SourceQueueBuffer
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_SourceQueueBuffer_System_Int32_System_Int32_
  name: SourceQueueBuffer
  nameWithType: AL.SourceQueueBuffer
  fullName: OpenTK.Audio.OpenAL.AL.SourceQueueBuffer
- uid: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_SourceUnqueueBuffers_System_Int32_System_Int32_System_Int32__
  name: SourceUnqueueBuffers
  nameWithType: AL.SourceUnqueueBuffers
  fullName: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffers
- uid: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffer*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffer
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_SourceUnqueueBuffer_System_Int32_
  name: SourceUnqueueBuffer
  nameWithType: AL.SourceUnqueueBuffer
  fullName: OpenTK.Audio.OpenAL.AL.SourceUnqueueBuffer
- uid: OpenTK.Audio.OpenAL.AL.GenBuffers*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.GenBuffers
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_GenBuffers_System_Int32_System_Int32__
  name: GenBuffers
  nameWithType: AL.GenBuffers
  fullName: OpenTK.Audio.OpenAL.AL.GenBuffers
- uid: OpenTK.Audio.OpenAL.AL.GenBuffer*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.GenBuffer
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_GenBuffer
  name: GenBuffer
  nameWithType: AL.GenBuffer
  fullName: OpenTK.Audio.OpenAL.AL.GenBuffer
- uid: OpenTK.Audio.OpenAL.AL.DeleteBuffers*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.DeleteBuffers
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_DeleteBuffers_System_Int32_System_Int32__
  name: DeleteBuffers
  nameWithType: AL.DeleteBuffers
  fullName: OpenTK.Audio.OpenAL.AL.DeleteBuffers
- uid: OpenTK.Audio.OpenAL.AL.DeleteBuffer*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.DeleteBuffer
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_DeleteBuffer_System_Int32_
  name: DeleteBuffer
  nameWithType: AL.DeleteBuffer
  fullName: OpenTK.Audio.OpenAL.AL.DeleteBuffer
- uid: OpenTK.Audio.OpenAL.AL.GenBuffers(System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.AL.GenBuffers(System.Int32)
  isExternal: true
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_GenBuffers_System_Int32_
  name: GenBuffers(int)
  nameWithType: AL.GenBuffers(int)
  fullName: OpenTK.Audio.OpenAL.AL.GenBuffers(int)
  nameWithType.vb: AL.GenBuffers(Integer)
  fullName.vb: OpenTK.Audio.OpenAL.AL.GenBuffers(Integer)
  name.vb: GenBuffers(Integer)
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.AL.GenBuffers(System.Int32)
    name: GenBuffers
    href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_GenBuffers_System_Int32_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.AL.GenBuffers(System.Int32)
    name: GenBuffers
    href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_GenBuffers_System_Int32_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: OpenTK.Audio.OpenAL.AL.IsBuffer*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.IsBuffer
  isExternal: true
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_IsBuffer_System_Int32_
  name: IsBuffer
  nameWithType: AL.IsBuffer
  fullName: OpenTK.Audio.OpenAL.AL.IsBuffer
- uid: OpenTK.Audio.OpenAL.AL.BufferData*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.BufferData
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_BufferData_System_Int32_OpenTK_Audio_OpenAL_ALFormat_System_IntPtr_System_Int32_System_Int32_
  name: BufferData
  nameWithType: AL.BufferData
  fullName: OpenTK.Audio.OpenAL.AL.BufferData
- uid: OpenTK.Audio.OpenAL.ALFormat
  commentId: T:OpenTK.Audio.OpenAL.ALFormat
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.ALFormat.html
  name: ALFormat
  nameWithType: ALFormat
  fullName: OpenTK.Audio.OpenAL.ALFormat
- uid: System.Void*
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.void
  name: void*
  nameWithType: void*
  fullName: void*
  nameWithType.vb: Void*
  fullName.vb: Void*
  name.vb: Void*
  spec.csharp:
  - uid: System.Void
    name: void
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.void
  - name: '*'
  spec.vb:
  - uid: System.Void
    name: Void
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.void
  - name: '*'
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte
  nameWithType: byte
  fullName: byte
  nameWithType.vb: Byte
  fullName.vb: Byte
  name.vb: Byte
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int16
  name: short
  nameWithType: short
  fullName: short
  nameWithType.vb: Short
  fullName.vb: Short
  name.vb: Short
- uid: '{TBuffer}[]'
  isExternal: true
  name: TBuffer[]
  nameWithType: TBuffer[]
  fullName: TBuffer[]
  nameWithType.vb: TBuffer()
  fullName.vb: TBuffer()
  name.vb: TBuffer()
  spec.csharp:
  - name: TBuffer
  - name: '['
  - name: ']'
  spec.vb:
  - name: TBuffer
  - name: (
  - name: )
- uid: System.ReadOnlySpan{{TBuffer}}
  commentId: T:System.ReadOnlySpan{``0}
  parent: System
  definition: System.ReadOnlySpan`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<TBuffer>
  nameWithType: ReadOnlySpan<TBuffer>
  fullName: System.ReadOnlySpan<TBuffer>
  nameWithType.vb: ReadOnlySpan(Of TBuffer)
  fullName.vb: System.ReadOnlySpan(Of TBuffer)
  name.vb: ReadOnlySpan(Of TBuffer)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - name: TBuffer
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - name: TBuffer
  - name: )
- uid: OpenTK.Audio.OpenAL.AL.GetBuffer*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.GetBuffer
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_GetBuffer_System_Int32_OpenTK_Audio_OpenAL_ALGetBufferi_System_Int32__
  name: GetBuffer
  nameWithType: AL.GetBuffer
  fullName: OpenTK.Audio.OpenAL.AL.GetBuffer
- uid: OpenTK.Audio.OpenAL.ALGetBufferi
  commentId: T:OpenTK.Audio.OpenAL.ALGetBufferi
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.ALGetBufferi.html
  name: ALGetBufferi
  nameWithType: ALGetBufferi
  fullName: OpenTK.Audio.OpenAL.ALGetBufferi
- uid: OpenTK.Audio.OpenAL.AL.DopplerFactor*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.DopplerFactor
  isExternal: true
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_DopplerFactor_System_Single_
  name: DopplerFactor
  nameWithType: AL.DopplerFactor
  fullName: OpenTK.Audio.OpenAL.AL.DopplerFactor
- uid: OpenTK.Audio.OpenAL.AL.DopplerVelocity*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.DopplerVelocity
  isExternal: true
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_DopplerVelocity_System_Single_
  name: DopplerVelocity
  nameWithType: AL.DopplerVelocity
  fullName: OpenTK.Audio.OpenAL.AL.DopplerVelocity
- uid: OpenTK.Audio.OpenAL.AL.SpeedOfSound*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.SpeedOfSound
  isExternal: true
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_SpeedOfSound_System_Single_
  name: SpeedOfSound
  nameWithType: AL.SpeedOfSound
  fullName: OpenTK.Audio.OpenAL.AL.SpeedOfSound
- uid: OpenTK.Audio.OpenAL.AL.DistanceModel*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.DistanceModel
  isExternal: true
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_DistanceModel_OpenTK_Audio_OpenAL_ALDistanceModel_
  name: DistanceModel
  nameWithType: AL.DistanceModel
  fullName: OpenTK.Audio.OpenAL.AL.DistanceModel
- uid: OpenTK.Audio.OpenAL.ALDistanceModel
  commentId: T:OpenTK.Audio.OpenAL.ALDistanceModel
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.ALDistanceModel.html
  name: ALDistanceModel
  nameWithType: ALDistanceModel
  fullName: OpenTK.Audio.OpenAL.ALDistanceModel
- uid: OpenTK.Audio.OpenAL.AL.GetDistanceModel*
  commentId: Overload:OpenTK.Audio.OpenAL.AL.GetDistanceModel
  href: OpenTK.Audio.OpenAL.AL.html#OpenTK_Audio_OpenAL_AL_GetDistanceModel
  name: GetDistanceModel
  nameWithType: AL.GetDistanceModel
  fullName: OpenTK.Audio.OpenAL.AL.GetDistanceModel

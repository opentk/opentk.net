### YamlMime:ManagedReference
items:
- uid: OpenTK.Audio.OpenAL.ALC
  commentId: T:OpenTK.Audio.OpenAL.ALC
  id: ALC
  parent: OpenTK.Audio.OpenAL
  children:
  - OpenTK.Audio.OpenAL.ALC.CaptureCloseDevice(OpenTK.Audio.OpenAL.ALCaptureDevice)
  - OpenTK.Audio.OpenAL.ALC.CaptureOpenDevice(System.String,System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.Int32)
  - OpenTK.Audio.OpenAL.ALC.CaptureOpenDevice(System.String,System.UInt32,OpenTK.Audio.OpenAL.ALFormat,System.Int32)
  - OpenTK.Audio.OpenAL.ALC.CaptureSamples(OpenTK.Audio.OpenAL.ALCaptureDevice,System.Byte@,System.Int32)
  - OpenTK.Audio.OpenAL.ALC.CaptureSamples(OpenTK.Audio.OpenAL.ALCaptureDevice,System.Int16@,System.Int32)
  - OpenTK.Audio.OpenAL.ALC.CaptureSamples(OpenTK.Audio.OpenAL.ALCaptureDevice,System.IntPtr,System.Int32)
  - OpenTK.Audio.OpenAL.ALC.CaptureSamples(OpenTK.Audio.OpenAL.ALCaptureDevice,System.Void*,System.Int32)
  - OpenTK.Audio.OpenAL.ALC.CaptureSamples``1(OpenTK.Audio.OpenAL.ALCaptureDevice,``0@,System.Int32)
  - OpenTK.Audio.OpenAL.ALC.CaptureSamples``1(OpenTK.Audio.OpenAL.ALCaptureDevice,``0[],System.Int32)
  - OpenTK.Audio.OpenAL.ALC.CaptureStart(OpenTK.Audio.OpenAL.ALCaptureDevice)
  - OpenTK.Audio.OpenAL.ALC.CaptureStop(OpenTK.Audio.OpenAL.ALCaptureDevice)
  - OpenTK.Audio.OpenAL.ALC.CloseDevice(OpenTK.Audio.OpenAL.ALDevice)
  - OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.ALContextAttributes)
  - OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice,System.Int32*)
  - OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice,System.Int32@)
  - OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice,System.Int32[])
  - OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice,System.Span{System.Int32})
  - OpenTK.Audio.OpenAL.ALC.DestroyContext(OpenTK.Audio.OpenAL.ALContext)
  - OpenTK.Audio.OpenAL.ALC.GetAttributeArray(OpenTK.Audio.OpenAL.ALDevice)
  - OpenTK.Audio.OpenAL.ALC.GetContextAttributes(OpenTK.Audio.OpenAL.ALDevice)
  - OpenTK.Audio.OpenAL.ALC.GetContextsDevice(OpenTK.Audio.OpenAL.ALContext)
  - OpenTK.Audio.OpenAL.ALC.GetCurrentContext
  - OpenTK.Audio.OpenAL.ALC.GetEnumValue(OpenTK.Audio.OpenAL.ALDevice,System.String)
  - OpenTK.Audio.OpenAL.ALC.GetError(OpenTK.Audio.OpenAL.ALDevice)
  - OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALCaptureDevice,OpenTK.Audio.OpenAL.AlcGetInteger)
  - OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALCaptureDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32*)
  - OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALCaptureDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32@)
  - OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALCaptureDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32[])
  - OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetInteger)
  - OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32*)
  - OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32@)
  - OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32[])
  - OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32@)
  - OpenTK.Audio.OpenAL.ALC.GetProcAddress(OpenTK.Audio.OpenAL.ALDevice,System.String)
  - OpenTK.Audio.OpenAL.ALC.GetString(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetString)
  - OpenTK.Audio.OpenAL.ALC.GetString(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetStringList)
  - OpenTK.Audio.OpenAL.ALC.GetString(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.GetEnumerationString)
  - OpenTK.Audio.OpenAL.ALC.GetString(OpenTK.Audio.OpenAL.AlcGetStringList)
  - OpenTK.Audio.OpenAL.ALC.GetStringList(OpenTK.Audio.OpenAL.GetEnumerationStringList)
  - OpenTK.Audio.OpenAL.ALC.GetStringListPtr(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.GetEnumerationStringList)
  - OpenTK.Audio.OpenAL.ALC.GetStringPtr(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetString)
  - OpenTK.Audio.OpenAL.ALC.IsCaptureExtensionPresent(OpenTK.Audio.OpenAL.ALCaptureDevice)
  - OpenTK.Audio.OpenAL.ALC.IsCaptureExtensionPresent(OpenTK.Audio.OpenAL.ALDevice)
  - OpenTK.Audio.OpenAL.ALC.IsEnumerationExtensionPresent(OpenTK.Audio.OpenAL.ALCaptureDevice)
  - OpenTK.Audio.OpenAL.ALC.IsEnumerationExtensionPresent(OpenTK.Audio.OpenAL.ALDevice)
  - OpenTK.Audio.OpenAL.ALC.IsExtensionPresent(OpenTK.Audio.OpenAL.ALCaptureDevice,System.String)
  - OpenTK.Audio.OpenAL.ALC.IsExtensionPresent(OpenTK.Audio.OpenAL.ALDevice,System.String)
  - OpenTK.Audio.OpenAL.ALC.MakeContextCurrent(OpenTK.Audio.OpenAL.ALContext)
  - OpenTK.Audio.OpenAL.ALC.OpenDevice(System.String)
  - OpenTK.Audio.OpenAL.ALC.ProcessContext(OpenTK.Audio.OpenAL.ALContext)
  - OpenTK.Audio.OpenAL.ALC.SuspendContext(OpenTK.Audio.OpenAL.ALContext)
  langs:
  - csharp
  - vb
  name: ALC
  nameWithType: ALC
  fullName: OpenTK.Audio.OpenAL.ALC
  type: Class
  source:
    id: ALC
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\Extensions\SOFT.DeviceClock\DeviceClock.cs
    startLine: 5
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Alc = Audio Library Context.
  example: []
  syntax:
    content: 'public class ALC : ALBase'
    content.vb: Public Class ALC Inherits ALBase
  inheritance:
  - System.Object
  - OpenTK.Audio.OpenAL.ALBase
  inheritedMembers:
  - OpenTK.Audio.OpenAL.ALBase.RegisterOpenALResolver
  - OpenTK.Audio.OpenAL.ALBase.LoadDelegate``1(System.String)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice,System.Int32*)
  id: CreateContext(OpenTK.Audio.OpenAL.ALDevice,System.Int32*)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: CreateContext(ALDevice, int*)
  nameWithType: ALC.CreateContext(ALDevice, int*)
  fullName: OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice, int*)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function creates a context using a specified device.
  remarks: The attribute list can be NULL, or a zero terminated list of integer pairs composed of valid ALC attribute tokens and requested values.
  example: []
  syntax:
    content: public static extern ALContext CreateContext(ALDevice device, int* attributeList)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: A pointer to a device.
    - id: attributeList
      type: System.Int32*
      description: 'A zero terminated array of a set of attributes: ALC_FREQUENCY, ALC_MONO_SOURCES, ALC_REFRESH, ALC_STEREO_SOURCES, ALC_SYNC.'
    return:
      type: OpenTK.Audio.OpenAL.ALContext
      description: Returns a pointer to the new context (NULL on failure).
    content.vb: Public Shared Function CreateContext(device As ALDevice, attributeList As Integer*) As ALContext
  overload: OpenTK.Audio.OpenAL.ALC.CreateContext*
  nameWithType.vb: ALC.CreateContext(ALDevice, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice, Integer*)
  name.vb: CreateContext(ALDevice, Integer*)
- uid: OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice,System.Int32@)
  id: CreateContext(OpenTK.Audio.OpenAL.ALDevice,System.Int32@)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: CreateContext(ALDevice, ref int)
  nameWithType: ALC.CreateContext(ALDevice, ref int)
  fullName: OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice, ref int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function creates a context using a specified device.
  remarks: The attribute list can be NULL, or a zero terminated list of integer pairs composed of valid ALC attribute tokens and requested values.
  example: []
  syntax:
    content: public static extern ALContext CreateContext(ALDevice device, ref int attributeList)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: A pointer to a device.
    - id: attributeList
      type: System.Int32
      description: 'A zero terminated array of a set of attributes: ALC_FREQUENCY, ALC_MONO_SOURCES, ALC_REFRESH, ALC_STEREO_SOURCES, ALC_SYNC.'
    return:
      type: OpenTK.Audio.OpenAL.ALContext
      description: Returns a pointer to the new context (NULL on failure).
    content.vb: Public Shared Function CreateContext(device As ALDevice, attributeList As Integer) As ALContext
  overload: OpenTK.Audio.OpenAL.ALC.CreateContext*
  nameWithType.vb: ALC.CreateContext(ALDevice, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice, Integer)
  name.vb: CreateContext(ALDevice, Integer)
- uid: OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice,System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice,System.Int32[])
  id: CreateContext(OpenTK.Audio.OpenAL.ALDevice,System.Int32[])
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: CreateContext(ALDevice, int[])
  nameWithType: ALC.CreateContext(ALDevice, int[])
  fullName: OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice, int[])
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function creates a context using a specified device.
  remarks: The attribute list can be NULL, or a zero terminated list of integer pairs composed of valid ALC attribute tokens and requested values.
  example: []
  syntax:
    content: public static extern ALContext CreateContext(ALDevice device, int[] attributeList)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: A pointer to a device.
    - id: attributeList
      type: System.Int32[]
      description: 'A zero terminated array of a set of attributes: ALC_FREQUENCY, ALC_MONO_SOURCES, ALC_REFRESH, ALC_STEREO_SOURCES, ALC_SYNC.'
    return:
      type: OpenTK.Audio.OpenAL.ALContext
      description: Returns a pointer to the new context (NULL on failure).
    content.vb: Public Shared Function CreateContext(device As ALDevice, attributeList As Integer()) As ALContext
  overload: OpenTK.Audio.OpenAL.ALC.CreateContext*
  nameWithType.vb: ALC.CreateContext(ALDevice, Integer())
  fullName.vb: OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice, Integer())
  name.vb: CreateContext(ALDevice, Integer())
- uid: OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice,System.Span{System.Int32})
  commentId: M:OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice,System.Span{System.Int32})
  id: CreateContext(OpenTK.Audio.OpenAL.ALDevice,System.Span{System.Int32})
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: CreateContext(ALDevice, Span<int>)
  nameWithType: ALC.CreateContext(ALDevice, Span<int>)
  fullName: OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice, System.Span<int>)
  type: Method
  source:
    id: CreateContext
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\ALC\ALC.cs
    startLine: 71
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function creates a context using a specified device.
  remarks: The attribute list can be NULL, or a zero terminated list of integer pairs composed of valid ALC attribute tokens and requested values.
  example: []
  syntax:
    content: public static ALContext CreateContext(ALDevice device, Span<int> attributeList)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: A pointer to a device.
    - id: attributeList
      type: System.Span{System.Int32}
      description: 'A zero terminated span of a set of attributes: ALC_FREQUENCY, ALC_MONO_SOURCES, ALC_REFRESH, ALC_STEREO_SOURCES, ALC_SYNC.'
    return:
      type: OpenTK.Audio.OpenAL.ALContext
      description: Returns a pointer to the new context (NULL on failure).
    content.vb: Public Shared Function CreateContext(device As ALDevice, attributeList As Span(Of Integer)) As ALContext
  overload: OpenTK.Audio.OpenAL.ALC.CreateContext*
  nameWithType.vb: ALC.CreateContext(ALDevice, Span(Of Integer))
  fullName.vb: OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice, System.Span(Of Integer))
  name.vb: CreateContext(ALDevice, Span(Of Integer))
- uid: OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.ALContextAttributes)
  commentId: M:OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.ALContextAttributes)
  id: CreateContext(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.ALContextAttributes)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: CreateContext(ALDevice, ALContextAttributes)
  nameWithType: ALC.CreateContext(ALDevice, ALContextAttributes)
  fullName: OpenTK.Audio.OpenAL.ALC.CreateContext(OpenTK.Audio.OpenAL.ALDevice, OpenTK.Audio.OpenAL.ALContextAttributes)
  type: Method
  source:
    id: CreateContext
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\ALC\ALC.cs
    startLine: 81
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function creates a context using a specified device.
  remarks: The attribute list can be NULL, or a zero terminated list of integer pairs composed of valid ALC attribute tokens and requested values.
  example: []
  syntax:
    content: public static ALContext CreateContext(ALDevice device, ALContextAttributes attributes)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: A pointer to a device.
    - id: attributes
      type: OpenTK.Audio.OpenAL.ALContextAttributes
      description: The ALContext attributes to request.
    return:
      type: OpenTK.Audio.OpenAL.ALContext
      description: Returns a pointer to the new context (NULL on failure).
    content.vb: Public Shared Function CreateContext(device As ALDevice, attributes As ALContextAttributes) As ALContext
  overload: OpenTK.Audio.OpenAL.ALC.CreateContext*
- uid: OpenTK.Audio.OpenAL.ALC.MakeContextCurrent(OpenTK.Audio.OpenAL.ALContext)
  commentId: M:OpenTK.Audio.OpenAL.ALC.MakeContextCurrent(OpenTK.Audio.OpenAL.ALContext)
  id: MakeContextCurrent(OpenTK.Audio.OpenAL.ALContext)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: MakeContextCurrent(ALContext)
  nameWithType: ALC.MakeContextCurrent(ALContext)
  fullName: OpenTK.Audio.OpenAL.ALC.MakeContextCurrent(OpenTK.Audio.OpenAL.ALContext)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function makes a specified context the current context.
  example: []
  syntax:
    content: public static extern bool MakeContextCurrent(ALContext context)
    parameters:
    - id: context
      type: OpenTK.Audio.OpenAL.ALContext
      description: A pointer to the new context.
    return:
      type: System.Boolean
      description: Returns True on success, or False on failure.
    content.vb: Public Shared Function MakeContextCurrent(context As ALContext) As Boolean
  overload: OpenTK.Audio.OpenAL.ALC.MakeContextCurrent*
- uid: OpenTK.Audio.OpenAL.ALC.ProcessContext(OpenTK.Audio.OpenAL.ALContext)
  commentId: M:OpenTK.Audio.OpenAL.ALC.ProcessContext(OpenTK.Audio.OpenAL.ALContext)
  id: ProcessContext(OpenTK.Audio.OpenAL.ALContext)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: ProcessContext(ALContext)
  nameWithType: ALC.ProcessContext(ALContext)
  fullName: OpenTK.Audio.OpenAL.ALC.ProcessContext(OpenTK.Audio.OpenAL.ALContext)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function tells a context to begin processing. When a context is suspended, changes in OpenAL state will be accepted but will not be processed. alcSuspendContext can be used to suspend a context, and then all the OpenAL state changes can be applied at once, followed by a call to alcProcessContext to apply all the state changes immediately. In some cases, this procedure may be more efficient than application of properties in a non-suspended state. In some implementations, process and suspend calls are each a NOP.
  example: []
  syntax:
    content: public static extern void ProcessContext(ALContext context)
    parameters:
    - id: context
      type: OpenTK.Audio.OpenAL.ALContext
      description: A pointer to the new context.
    content.vb: Public Shared Sub ProcessContext(context As ALContext)
  overload: OpenTK.Audio.OpenAL.ALC.ProcessContext*
- uid: OpenTK.Audio.OpenAL.ALC.SuspendContext(OpenTK.Audio.OpenAL.ALContext)
  commentId: M:OpenTK.Audio.OpenAL.ALC.SuspendContext(OpenTK.Audio.OpenAL.ALContext)
  id: SuspendContext(OpenTK.Audio.OpenAL.ALContext)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: SuspendContext(ALContext)
  nameWithType: ALC.SuspendContext(ALContext)
  fullName: OpenTK.Audio.OpenAL.ALC.SuspendContext(OpenTK.Audio.OpenAL.ALContext)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function suspends processing on a specified context. When a context is suspended, changes in OpenAL state will be accepted but will not be processed. A typical use of alcSuspendContext would be to suspend a context, apply all the OpenAL state changes at once, and then call alcProcessContext to apply all the state changes at once. In some cases, this procedure may be more efficient than application of properties in a non-suspended state. In some implementations, process and suspend calls are each a NOP.
  example: []
  syntax:
    content: public static extern void SuspendContext(ALContext context)
    parameters:
    - id: context
      type: OpenTK.Audio.OpenAL.ALContext
      description: A pointer to the context to be suspended.
    content.vb: Public Shared Sub SuspendContext(context As ALContext)
  overload: OpenTK.Audio.OpenAL.ALC.SuspendContext*
- uid: OpenTK.Audio.OpenAL.ALC.DestroyContext(OpenTK.Audio.OpenAL.ALContext)
  commentId: M:OpenTK.Audio.OpenAL.ALC.DestroyContext(OpenTK.Audio.OpenAL.ALContext)
  id: DestroyContext(OpenTK.Audio.OpenAL.ALContext)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: DestroyContext(ALContext)
  nameWithType: ALC.DestroyContext(ALContext)
  fullName: OpenTK.Audio.OpenAL.ALC.DestroyContext(OpenTK.Audio.OpenAL.ALContext)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function destroys a context.
  example: []
  syntax:
    content: public static extern void DestroyContext(ALContext context)
    parameters:
    - id: context
      type: OpenTK.Audio.OpenAL.ALContext
      description: A pointer to the new context.
    content.vb: Public Shared Sub DestroyContext(context As ALContext)
  overload: OpenTK.Audio.OpenAL.ALC.DestroyContext*
- uid: OpenTK.Audio.OpenAL.ALC.GetCurrentContext
  commentId: M:OpenTK.Audio.OpenAL.ALC.GetCurrentContext
  id: GetCurrentContext
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: GetCurrentContext()
  nameWithType: ALC.GetCurrentContext()
  fullName: OpenTK.Audio.OpenAL.ALC.GetCurrentContext()
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function retrieves the current context.
  example: []
  syntax:
    content: public static extern ALContext GetCurrentContext()
    return:
      type: OpenTK.Audio.OpenAL.ALContext
      description: Returns a pointer to the current context.
    content.vb: Public Shared Function GetCurrentContext() As ALContext
  overload: OpenTK.Audio.OpenAL.ALC.GetCurrentContext*
- uid: OpenTK.Audio.OpenAL.ALC.GetContextsDevice(OpenTK.Audio.OpenAL.ALContext)
  commentId: M:OpenTK.Audio.OpenAL.ALC.GetContextsDevice(OpenTK.Audio.OpenAL.ALContext)
  id: GetContextsDevice(OpenTK.Audio.OpenAL.ALContext)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: GetContextsDevice(ALContext)
  nameWithType: ALC.GetContextsDevice(ALContext)
  fullName: OpenTK.Audio.OpenAL.ALC.GetContextsDevice(OpenTK.Audio.OpenAL.ALContext)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function retrieves a context's device pointer.
  example: []
  syntax:
    content: public static extern ALDevice GetContextsDevice(ALContext context)
    parameters:
    - id: context
      type: OpenTK.Audio.OpenAL.ALContext
      description: A pointer to a context.
    return:
      type: OpenTK.Audio.OpenAL.ALDevice
      description: Returns a pointer to the specified context's device.
    content.vb: Public Shared Function GetContextsDevice(context As ALContext) As ALDevice
  overload: OpenTK.Audio.OpenAL.ALC.GetContextsDevice*
- uid: OpenTK.Audio.OpenAL.ALC.OpenDevice(System.String)
  commentId: M:OpenTK.Audio.OpenAL.ALC.OpenDevice(System.String)
  id: OpenDevice(System.String)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: OpenDevice(string)
  nameWithType: ALC.OpenDevice(string)
  fullName: OpenTK.Audio.OpenAL.ALC.OpenDevice(string)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function opens a device by name.
  example: []
  syntax:
    content: public static extern ALDevice OpenDevice(string devicename)
    parameters:
    - id: devicename
      type: System.String
      description: A null-terminated string describing a device.
    return:
      type: OpenTK.Audio.OpenAL.ALDevice
      description: Returns a pointer to the opened device. The return value will be NULL if there is an error.
    content.vb: Public Shared Function OpenDevice(devicename As String) As ALDevice
  overload: OpenTK.Audio.OpenAL.ALC.OpenDevice*
  nameWithType.vb: ALC.OpenDevice(String)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.OpenDevice(String)
  name.vb: OpenDevice(String)
- uid: OpenTK.Audio.OpenAL.ALC.CloseDevice(OpenTK.Audio.OpenAL.ALDevice)
  commentId: M:OpenTK.Audio.OpenAL.ALC.CloseDevice(OpenTK.Audio.OpenAL.ALDevice)
  id: CloseDevice(OpenTK.Audio.OpenAL.ALDevice)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: CloseDevice(ALDevice)
  nameWithType: ALC.CloseDevice(ALDevice)
  fullName: OpenTK.Audio.OpenAL.ALC.CloseDevice(OpenTK.Audio.OpenAL.ALDevice)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function closes a device by name.
  example: []
  syntax:
    content: public static extern bool CloseDevice(ALDevice device)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: A pointer to an opened device.
    return:
      type: System.Boolean
      description: True will be returned on success or False on failure. Closing a device will fail if the device contains any contexts or buffers.
    content.vb: Public Shared Function CloseDevice(device As ALDevice) As Boolean
  overload: OpenTK.Audio.OpenAL.ALC.CloseDevice*
- uid: OpenTK.Audio.OpenAL.ALC.GetError(OpenTK.Audio.OpenAL.ALDevice)
  commentId: M:OpenTK.Audio.OpenAL.ALC.GetError(OpenTK.Audio.OpenAL.ALDevice)
  id: GetError(OpenTK.Audio.OpenAL.ALDevice)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: GetError(ALDevice)
  nameWithType: ALC.GetError(ALDevice)
  fullName: OpenTK.Audio.OpenAL.ALC.GetError(OpenTK.Audio.OpenAL.ALDevice)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function retrieves the current context error state.
  example: []
  syntax:
    content: public static extern AlcError GetError(ALDevice device)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: A pointer to the device to retrieve the error state from.
    return:
      type: OpenTK.Audio.OpenAL.AlcError
      description: Errorcode Int32.
    content.vb: Public Shared Function GetError(device As ALDevice) As AlcError
  overload: OpenTK.Audio.OpenAL.ALC.GetError*
- uid: OpenTK.Audio.OpenAL.ALC.IsExtensionPresent(OpenTK.Audio.OpenAL.ALDevice,System.String)
  commentId: M:OpenTK.Audio.OpenAL.ALC.IsExtensionPresent(OpenTK.Audio.OpenAL.ALDevice,System.String)
  id: IsExtensionPresent(OpenTK.Audio.OpenAL.ALDevice,System.String)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: IsExtensionPresent(ALDevice, string)
  nameWithType: ALC.IsExtensionPresent(ALDevice, string)
  fullName: OpenTK.Audio.OpenAL.ALC.IsExtensionPresent(OpenTK.Audio.OpenAL.ALDevice, string)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function queries if a specified context extension is available.
  example: []
  syntax:
    content: public static extern bool IsExtensionPresent(ALDevice device, string extname)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: A pointer to the device to be queried for an extension.
    - id: extname
      type: System.String
      description: A null-terminated string describing the extension.
    return:
      type: System.Boolean
      description: Returns True if the extension is available, False if the extension is not available.
    content.vb: Public Shared Function IsExtensionPresent(device As ALDevice, extname As String) As Boolean
  overload: OpenTK.Audio.OpenAL.ALC.IsExtensionPresent*
  nameWithType.vb: ALC.IsExtensionPresent(ALDevice, String)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.IsExtensionPresent(OpenTK.Audio.OpenAL.ALDevice, String)
  name.vb: IsExtensionPresent(ALDevice, String)
- uid: OpenTK.Audio.OpenAL.ALC.IsExtensionPresent(OpenTK.Audio.OpenAL.ALCaptureDevice,System.String)
  commentId: M:OpenTK.Audio.OpenAL.ALC.IsExtensionPresent(OpenTK.Audio.OpenAL.ALCaptureDevice,System.String)
  id: IsExtensionPresent(OpenTK.Audio.OpenAL.ALCaptureDevice,System.String)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: IsExtensionPresent(ALCaptureDevice, string)
  nameWithType: ALC.IsExtensionPresent(ALCaptureDevice, string)
  fullName: OpenTK.Audio.OpenAL.ALC.IsExtensionPresent(OpenTK.Audio.OpenAL.ALCaptureDevice, string)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function queries if a specified context extension is available.
  example: []
  syntax:
    content: public static extern bool IsExtensionPresent(ALCaptureDevice device, string extname)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALCaptureDevice
      description: A pointer to the device to be queried for an extension.
    - id: extname
      type: System.String
      description: A null-terminated string describing the extension.
    return:
      type: System.Boolean
      description: Returns True if the extension is available, False if the extension is not available.
    content.vb: Public Shared Function IsExtensionPresent(device As ALCaptureDevice, extname As String) As Boolean
  overload: OpenTK.Audio.OpenAL.ALC.IsExtensionPresent*
  nameWithType.vb: ALC.IsExtensionPresent(ALCaptureDevice, String)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.IsExtensionPresent(OpenTK.Audio.OpenAL.ALCaptureDevice, String)
  name.vb: IsExtensionPresent(ALCaptureDevice, String)
- uid: OpenTK.Audio.OpenAL.ALC.GetProcAddress(OpenTK.Audio.OpenAL.ALDevice,System.String)
  commentId: M:OpenTK.Audio.OpenAL.ALC.GetProcAddress(OpenTK.Audio.OpenAL.ALDevice,System.String)
  id: GetProcAddress(OpenTK.Audio.OpenAL.ALDevice,System.String)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: GetProcAddress(ALDevice, string)
  nameWithType: ALC.GetProcAddress(ALDevice, string)
  fullName: OpenTK.Audio.OpenAL.ALC.GetProcAddress(OpenTK.Audio.OpenAL.ALDevice, string)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function retrieves the address of a specified context extension function.
  example: []
  syntax:
    content: public static extern nint GetProcAddress(ALDevice device, string funcname)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: a pointer to the device to be queried for the function.
    - id: funcname
      type: System.String
      description: a null-terminated string describing the function.
    return:
      type: System.IntPtr
      description: Returns the address of the function, or NULL if it is not found.
    content.vb: Public Shared Function GetProcAddress(device As ALDevice, funcname As String) As IntPtr
  overload: OpenTK.Audio.OpenAL.ALC.GetProcAddress*
  nameWithType.vb: ALC.GetProcAddress(ALDevice, String)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.GetProcAddress(OpenTK.Audio.OpenAL.ALDevice, String)
  name.vb: GetProcAddress(ALDevice, String)
- uid: OpenTK.Audio.OpenAL.ALC.GetEnumValue(OpenTK.Audio.OpenAL.ALDevice,System.String)
  commentId: M:OpenTK.Audio.OpenAL.ALC.GetEnumValue(OpenTK.Audio.OpenAL.ALDevice,System.String)
  id: GetEnumValue(OpenTK.Audio.OpenAL.ALDevice,System.String)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: GetEnumValue(ALDevice, string)
  nameWithType: ALC.GetEnumValue(ALDevice, string)
  fullName: OpenTK.Audio.OpenAL.ALC.GetEnumValue(OpenTK.Audio.OpenAL.ALDevice, string)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function retrieves the enum value for a specified enumeration name.
  example: []
  syntax:
    content: public static extern int GetEnumValue(ALDevice device, string enumname)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: a pointer to the device to be queried.
    - id: enumname
      type: System.String
      description: a null terminated string describing the enum value.
    return:
      type: System.Int32
      description: Returns the enum value described by the enumName string. This is most often used for querying an enum value for an ALC extension.
    content.vb: Public Shared Function GetEnumValue(device As ALDevice, enumname As String) As Integer
  overload: OpenTK.Audio.OpenAL.ALC.GetEnumValue*
  nameWithType.vb: ALC.GetEnumValue(ALDevice, String)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.GetEnumValue(OpenTK.Audio.OpenAL.ALDevice, String)
  name.vb: GetEnumValue(ALDevice, String)
- uid: OpenTK.Audio.OpenAL.ALC.GetStringPtr(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetString)
  commentId: M:OpenTK.Audio.OpenAL.ALC.GetStringPtr(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetString)
  id: GetStringPtr(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetString)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: GetStringPtr(ALDevice, AlcGetString)
  nameWithType: ALC.GetStringPtr(ALDevice, AlcGetString)
  fullName: OpenTK.Audio.OpenAL.ALC.GetStringPtr(OpenTK.Audio.OpenAL.ALDevice, OpenTK.Audio.OpenAL.AlcGetString)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This strings related to the context.
  remarks: >-
    ALC_DEFAULT_DEVICE_SPECIFIER will return the name of the default output device.

    ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER will return the name of the default capture device.

    ALC_DEVICE_SPECIFIER will return the name of the specified output device if a pointer is supplied, or will return a list of all available devices if a NULL device pointer is supplied. A list is a pointer to a series of strings separated by NULL characters, with the list terminated by two NULL characters. See Enumeration Extension for more details.

    ALC_CAPTURE_DEVICE_SPECIFIER will return the name of the specified capture device if a pointer is supplied, or will return a list of all available devices if a NULL device pointer is supplied.

    ALC_EXTENSIONS returns a list of available context extensions, with each extension separated by a space and the list terminated by a NULL character.
  example: []
  syntax:
    content: public static extern byte* GetStringPtr(ALDevice device, AlcGetString param)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: A pointer to the device to be queried.
    - id: param
      type: OpenTK.Audio.OpenAL.AlcGetString
      description: 'An attribute to be retrieved: ALC_DEFAULT_DEVICE_SPECIFIER, ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER, ALC_DEVICE_SPECIFIER, ALC_CAPTURE_DEVICE_SPECIFIER, ALC_EXTENSIONS.'
    return:
      type: System.Byte*
      description: A string containing the name of the Device.
    content.vb: Public Shared Function GetStringPtr(device As ALDevice, param As AlcGetString) As Byte*
  overload: OpenTK.Audio.OpenAL.ALC.GetStringPtr*
- uid: OpenTK.Audio.OpenAL.ALC.GetString(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetString)
  commentId: M:OpenTK.Audio.OpenAL.ALC.GetString(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetString)
  id: GetString(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetString)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: GetString(ALDevice, AlcGetString)
  nameWithType: ALC.GetString(ALDevice, AlcGetString)
  fullName: OpenTK.Audio.OpenAL.ALC.GetString(OpenTK.Audio.OpenAL.ALDevice, OpenTK.Audio.OpenAL.AlcGetString)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This strings related to the context.
  remarks: >-
    ALC_DEFAULT_DEVICE_SPECIFIER will return the name of the default output device.

    ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER will return the name of the default capture device.

    ALC_DEVICE_SPECIFIER will return the name of the specified output device if a pointer is supplied, or will return a list of all available devices if a NULL device pointer is supplied. A list is a pointer to a series of strings separated by NULL characters, with the list terminated by two NULL characters. See Enumeration Extension for more details.

    ALC_CAPTURE_DEVICE_SPECIFIER will return the name of the specified capture device if a pointer is supplied, or will return a list of all available devices if a NULL device pointer is supplied.

    ALC_EXTENSIONS returns a list of available context extensions, with each extension separated by a space and the list terminated by a NULL character.
  example: []
  syntax:
    content: public static extern string GetString(ALDevice device, AlcGetString param)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: A pointer to the device to be queried.
    - id: param
      type: OpenTK.Audio.OpenAL.AlcGetString
      description: 'An attribute to be retrieved: ALC_DEFAULT_DEVICE_SPECIFIER, ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER, ALC_DEVICE_SPECIFIER, ALC_CAPTURE_DEVICE_SPECIFIER, ALC_EXTENSIONS.'
    return:
      type: System.String
      description: A string containing the name of the Device.
    content.vb: Public Shared Function GetString(device As ALDevice, param As AlcGetString) As String
  overload: OpenTK.Audio.OpenAL.ALC.GetString*
- uid: OpenTK.Audio.OpenAL.ALC.GetString(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetStringList)
  commentId: M:OpenTK.Audio.OpenAL.ALC.GetString(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetStringList)
  id: GetString(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetStringList)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: GetString(ALDevice, AlcGetStringList)
  nameWithType: ALC.GetString(ALDevice, AlcGetStringList)
  fullName: OpenTK.Audio.OpenAL.ALC.GetString(OpenTK.Audio.OpenAL.ALDevice, OpenTK.Audio.OpenAL.AlcGetStringList)
  type: Method
  source:
    id: GetString
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\ALC\ALC.cs
    startLine: 217
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function returns a List of strings related to the context.
  remarks: >-
    ALC_DEVICE_SPECIFIER will return the name of the specified output device if a pointer is supplied, or will return a list of all available devices if a NULL device pointer is supplied. A list is a pointer to a series of strings separated by NULL characters, with the list terminated by two NULL characters. See Enumeration Extension for more details.

    ALC_CAPTURE_DEVICE_SPECIFIER will return the name of the specified capture device if a pointer is supplied, or will return a list of all available devices if a NULL device pointer is supplied.

    ALC_EXTENSIONS returns a list of available context extensions, with each extension separated by a space and the list terminated by a NULL character.
  example: []
  syntax:
    content: public static List<string> GetString(ALDevice device, AlcGetStringList param)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: A pointer to the device to be queried.
    - id: param
      type: OpenTK.Audio.OpenAL.AlcGetStringList
      description: 'An attribute to be retrieved: ALC_DEVICE_SPECIFIER, ALC_CAPTURE_DEVICE_SPECIFIER, ALC_ALL_DEVICES_SPECIFIER.'
    return:
      type: System.Collections.Generic.List{System.String}
      description: A List of strings containing the names of the Devices.
    content.vb: Public Shared Function GetString(device As ALDevice, param As AlcGetStringList) As List(Of String)
  overload: OpenTK.Audio.OpenAL.ALC.GetString*
- uid: OpenTK.Audio.OpenAL.ALC.GetString(OpenTK.Audio.OpenAL.AlcGetStringList)
  commentId: M:OpenTK.Audio.OpenAL.ALC.GetString(OpenTK.Audio.OpenAL.AlcGetStringList)
  id: GetString(OpenTK.Audio.OpenAL.AlcGetStringList)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: GetString(AlcGetStringList)
  nameWithType: ALC.GetString(AlcGetStringList)
  fullName: OpenTK.Audio.OpenAL.ALC.GetString(OpenTK.Audio.OpenAL.AlcGetStringList)
  type: Method
  source:
    id: GetString
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\ALC\ALC.cs
    startLine: 231
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function returns a List of strings related to the context.
  remarks: >-
    ALC_DEVICE_SPECIFIER will return the name of the specified output device if a pointer is supplied, or will return a list of all available devices if a NULL device pointer is supplied. A list is a pointer to a series of strings separated by NULL characters, with the list terminated by two NULL characters. See Enumeration Extension for more details.

    ALC_CAPTURE_DEVICE_SPECIFIER will return the name of the specified capture device if a pointer is supplied, or will return a list of all available devices if a NULL device pointer is supplied.

    ALC_EXTENSIONS returns a list of available context extensions, with each extension separated by a space and the list terminated by a NULL character.
  example: []
  syntax:
    content: public static List<string> GetString(AlcGetStringList param)
    parameters:
    - id: param
      type: OpenTK.Audio.OpenAL.AlcGetStringList
      description: 'An attribute to be retrieved: ALC_DEVICE_SPECIFIER, ALC_CAPTURE_DEVICE_SPECIFIER, ALC_ALL_DEVICES_SPECIFIER.'
    return:
      type: System.Collections.Generic.List{System.String}
      description: A List of strings containing the names of the Devices.
    content.vb: Public Shared Function GetString(param As AlcGetStringList) As List(Of String)
  overload: OpenTK.Audio.OpenAL.ALC.GetString*
- uid: OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32*)
  id: GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32*)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: GetInteger(ALDevice, AlcGetInteger, int, int*)
  nameWithType: ALC.GetInteger(ALDevice, AlcGetInteger, int, int*)
  fullName: OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALDevice, OpenTK.Audio.OpenAL.AlcGetInteger, int, int*)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function returns integers related to the context.
  example: []
  syntax:
    content: public static extern void GetInteger(ALDevice device, AlcGetInteger param, int size, int* data)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: a pointer to the device to be queried.
    - id: param
      type: OpenTK.Audio.OpenAL.AlcGetInteger
      description: 'an attribute to be retrieved: ALC_MAJOR_VERSION, ALC_MINOR_VERSION, ALC_ATTRIBUTES_SIZE, ALC_ALL_ATTRIBUTES.'
    - id: size
      type: System.Int32
      description: the size of the destination buffer provided, in number of integers.
    - id: data
      type: System.Int32*
      description: a pointer to the buffer to be returned.
    content.vb: Public Shared Sub GetInteger(device As ALDevice, param As AlcGetInteger, size As Integer, data As Integer*)
  overload: OpenTK.Audio.OpenAL.ALC.GetInteger*
  nameWithType.vb: ALC.GetInteger(ALDevice, AlcGetInteger, Integer, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALDevice, OpenTK.Audio.OpenAL.AlcGetInteger, Integer, Integer*)
  name.vb: GetInteger(ALDevice, AlcGetInteger, Integer, Integer*)
- uid: OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32[])
  id: GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32[])
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: GetInteger(ALDevice, AlcGetInteger, int, int[])
  nameWithType: ALC.GetInteger(ALDevice, AlcGetInteger, int, int[])
  fullName: OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALDevice, OpenTK.Audio.OpenAL.AlcGetInteger, int, int[])
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function returns integers related to the context.
  example: []
  syntax:
    content: public static extern void GetInteger(ALDevice device, AlcGetInteger param, int size, int[] data)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: a pointer to the device to be queried.
    - id: param
      type: OpenTK.Audio.OpenAL.AlcGetInteger
      description: 'an attribute to be retrieved: ALC_MAJOR_VERSION, ALC_MINOR_VERSION, ALC_ATTRIBUTES_SIZE, ALC_ALL_ATTRIBUTES.'
    - id: size
      type: System.Int32
      description: the size of the destination buffer provided, in number of integers.
    - id: data
      type: System.Int32[]
      description: a pointer to the buffer to be returned.
    content.vb: Public Shared Sub GetInteger(device As ALDevice, param As AlcGetInteger, size As Integer, data As Integer())
  overload: OpenTK.Audio.OpenAL.ALC.GetInteger*
  nameWithType.vb: ALC.GetInteger(ALDevice, AlcGetInteger, Integer, Integer())
  fullName.vb: OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALDevice, OpenTK.Audio.OpenAL.AlcGetInteger, Integer, Integer())
  name.vb: GetInteger(ALDevice, AlcGetInteger, Integer, Integer())
- uid: OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32@)
  id: GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32@)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: GetInteger(ALDevice, AlcGetInteger, int, out int)
  nameWithType: ALC.GetInteger(ALDevice, AlcGetInteger, int, out int)
  fullName: OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALDevice, OpenTK.Audio.OpenAL.AlcGetInteger, int, out int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function returns integers related to the context.
  example: []
  syntax:
    content: public static extern void GetInteger(ALDevice device, AlcGetInteger param, int size, out int data)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: A pointer to the device to be queried.
    - id: param
      type: OpenTK.Audio.OpenAL.AlcGetInteger
      description: 'An attribute to be retrieved: ALC_MAJOR_VERSION, ALC_MINOR_VERSION, ALC_ATTRIBUTES_SIZE, ALC_ALL_ATTRIBUTES.'
    - id: size
      type: System.Int32
      description: The size of the destination buffer provided, in number of integers.
    - id: data
      type: System.Int32
      description: A pointer to the buffer to be returned.
    content.vb: Public Shared Sub GetInteger(device As ALDevice, param As AlcGetInteger, size As Integer, data As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.GetInteger*
  nameWithType.vb: ALC.GetInteger(ALDevice, AlcGetInteger, Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALDevice, OpenTK.Audio.OpenAL.AlcGetInteger, Integer, Integer)
  name.vb: GetInteger(ALDevice, AlcGetInteger, Integer, Integer)
- uid: OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32@)
  id: GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32@)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: GetInteger(ALDevice, AlcGetInteger, out int)
  nameWithType: ALC.GetInteger(ALDevice, AlcGetInteger, out int)
  fullName: OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALDevice, OpenTK.Audio.OpenAL.AlcGetInteger, out int)
  type: Method
  source:
    id: GetInteger
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\ALC\ALC.cs
    startLine: 264
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function returns integers related to the context.
  example: []
  syntax:
    content: public static void GetInteger(ALDevice device, AlcGetInteger param, out int data)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: A pointer to the device to be queried.
    - id: param
      type: OpenTK.Audio.OpenAL.AlcGetInteger
      description: 'An attribute to be retrieved: ALC_MAJOR_VERSION, ALC_MINOR_VERSION, ALC_ATTRIBUTES_SIZE, ALC_ALL_ATTRIBUTES.'
    - id: data
      type: System.Int32
      description: A pointer to the buffer to be returned.
    content.vb: Public Shared Sub GetInteger(device As ALDevice, param As AlcGetInteger, data As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.GetInteger*
  nameWithType.vb: ALC.GetInteger(ALDevice, AlcGetInteger, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALDevice, OpenTK.Audio.OpenAL.AlcGetInteger, Integer)
  name.vb: GetInteger(ALDevice, AlcGetInteger, Integer)
- uid: OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetInteger)
  commentId: M:OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetInteger)
  id: GetInteger(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.AlcGetInteger)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: GetInteger(ALDevice, AlcGetInteger)
  nameWithType: ALC.GetInteger(ALDevice, AlcGetInteger)
  fullName: OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALDevice, OpenTK.Audio.OpenAL.AlcGetInteger)
  type: Method
  source:
    id: GetInteger
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\ALC\ALC.cs
    startLine: 273
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function returns integers related to the context.
  example: []
  syntax:
    content: public static int GetInteger(ALDevice device, AlcGetInteger param)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: A pointer to the device to be queried.
    - id: param
      type: OpenTK.Audio.OpenAL.AlcGetInteger
      description: 'An attribute to be retrieved: ALC_MAJOR_VERSION, ALC_MINOR_VERSION, ALC_ATTRIBUTES_SIZE, ALC_ALL_ATTRIBUTES.'
    return:
      type: System.Int32
      description: The value returned.
    content.vb: Public Shared Function GetInteger(device As ALDevice, param As AlcGetInteger) As Integer
  overload: OpenTK.Audio.OpenAL.ALC.GetInteger*
- uid: OpenTK.Audio.OpenAL.ALC.GetAttributeArray(OpenTK.Audio.OpenAL.ALDevice)
  commentId: M:OpenTK.Audio.OpenAL.ALC.GetAttributeArray(OpenTK.Audio.OpenAL.ALDevice)
  id: GetAttributeArray(OpenTK.Audio.OpenAL.ALDevice)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: GetAttributeArray(ALDevice)
  nameWithType: ALC.GetAttributeArray(ALDevice)
  fullName: OpenTK.Audio.OpenAL.ALC.GetAttributeArray(OpenTK.Audio.OpenAL.ALDevice)
  type: Method
  source:
    id: GetAttributeArray
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\ALC\ALC.cs
    startLine: 284
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Returns a list of attributes for the current context of the specified device.
  example: []
  syntax:
    content: public static int[] GetAttributeArray(ALDevice device)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: The device to get attributes from.
    return:
      type: System.Int32[]
      description: A list of attributes for the device.
    content.vb: Public Shared Function GetAttributeArray(device As ALDevice) As Integer()
  overload: OpenTK.Audio.OpenAL.ALC.GetAttributeArray*
- uid: OpenTK.Audio.OpenAL.ALC.GetContextAttributes(OpenTK.Audio.OpenAL.ALDevice)
  commentId: M:OpenTK.Audio.OpenAL.ALC.GetContextAttributes(OpenTK.Audio.OpenAL.ALDevice)
  id: GetContextAttributes(OpenTK.Audio.OpenAL.ALDevice)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: GetContextAttributes(ALDevice)
  nameWithType: ALC.GetContextAttributes(ALDevice)
  fullName: OpenTK.Audio.OpenAL.ALC.GetContextAttributes(OpenTK.Audio.OpenAL.ALDevice)
  type: Method
  source:
    id: GetContextAttributes
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\ALC\ALC.cs
    startLine: 297
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Returns a list of attributes for the current context of the specified device.
  example: []
  syntax:
    content: public static ALContextAttributes GetContextAttributes(ALDevice device)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: The device to get attributes from.
    return:
      type: OpenTK.Audio.OpenAL.ALContextAttributes
      description: A list of attributes for the device.
    content.vb: Public Shared Function GetContextAttributes(device As ALDevice) As ALContextAttributes
  overload: OpenTK.Audio.OpenAL.ALC.GetContextAttributes*
- uid: OpenTK.Audio.OpenAL.ALC.IsCaptureExtensionPresent(OpenTK.Audio.OpenAL.ALDevice)
  commentId: M:OpenTK.Audio.OpenAL.ALC.IsCaptureExtensionPresent(OpenTK.Audio.OpenAL.ALDevice)
  id: IsCaptureExtensionPresent(OpenTK.Audio.OpenAL.ALDevice)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: IsCaptureExtensionPresent(ALDevice)
  nameWithType: ALC.IsCaptureExtensionPresent(ALDevice)
  fullName: OpenTK.Audio.OpenAL.ALC.IsCaptureExtensionPresent(OpenTK.Audio.OpenAL.ALDevice)
  type: Method
  source:
    id: IsCaptureExtensionPresent
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\ALC\ALC.cs
    startLine: 312
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Checks to see that the ALC_EXT_CAPTURE extension is present. This will always be available in 1.1 devices or later.
  example: []
  syntax:
    content: public static bool IsCaptureExtensionPresent(ALDevice device)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: The device to check the extension is present for.
    return:
      type: System.Boolean
      description: If the ALC_EXT_CAPTURE extension was present.
    content.vb: Public Shared Function IsCaptureExtensionPresent(device As ALDevice) As Boolean
  overload: OpenTK.Audio.OpenAL.ALC.IsCaptureExtensionPresent*
- uid: OpenTK.Audio.OpenAL.ALC.IsCaptureExtensionPresent(OpenTK.Audio.OpenAL.ALCaptureDevice)
  commentId: M:OpenTK.Audio.OpenAL.ALC.IsCaptureExtensionPresent(OpenTK.Audio.OpenAL.ALCaptureDevice)
  id: IsCaptureExtensionPresent(OpenTK.Audio.OpenAL.ALCaptureDevice)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: IsCaptureExtensionPresent(ALCaptureDevice)
  nameWithType: ALC.IsCaptureExtensionPresent(ALCaptureDevice)
  fullName: OpenTK.Audio.OpenAL.ALC.IsCaptureExtensionPresent(OpenTK.Audio.OpenAL.ALCaptureDevice)
  type: Method
  source:
    id: IsCaptureExtensionPresent
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\ALC\ALC.cs
    startLine: 322
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Checks to see that the ALC_EXT_CAPTURE extension is present. This will always be available in 1.1 devices or later.
  example: []
  syntax:
    content: public static bool IsCaptureExtensionPresent(ALCaptureDevice device)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALCaptureDevice
      description: The device to check the extension is present for.
    return:
      type: System.Boolean
      description: If the ALC_EXT_CAPTURE extension was present.
    content.vb: Public Shared Function IsCaptureExtensionPresent(device As ALCaptureDevice) As Boolean
  overload: OpenTK.Audio.OpenAL.ALC.IsCaptureExtensionPresent*
- uid: OpenTK.Audio.OpenAL.ALC.CaptureOpenDevice(System.String,System.UInt32,OpenTK.Audio.OpenAL.ALFormat,System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.ALC.CaptureOpenDevice(System.String,System.UInt32,OpenTK.Audio.OpenAL.ALFormat,System.Int32)
  id: CaptureOpenDevice(System.String,System.UInt32,OpenTK.Audio.OpenAL.ALFormat,System.Int32)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: CaptureOpenDevice(string, uint, ALFormat, int)
  nameWithType: ALC.CaptureOpenDevice(string, uint, ALFormat, int)
  fullName: OpenTK.Audio.OpenAL.ALC.CaptureOpenDevice(string, uint, OpenTK.Audio.OpenAL.ALFormat, int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function opens a capture device by name.
  example: []
  syntax:
    content: public static extern ALCaptureDevice CaptureOpenDevice(string devicename, uint frequency, ALFormat format, int buffersize)
    parameters:
    - id: devicename
      type: System.String
      description: A pointer to a device name string.
    - id: frequency
      type: System.UInt32
      description: The frequency that the buffer should be captured at.
    - id: format
      type: OpenTK.Audio.OpenAL.ALFormat
      description: The requested capture buffer format.
    - id: buffersize
      type: System.Int32
      description: The size of the capture buffer in samples, not bytes.
    return:
      type: OpenTK.Audio.OpenAL.ALCaptureDevice
      description: Returns the capture device pointer, or <xref href="OpenTK.Audio.OpenAL.ALCaptureDevice.Null" data-throw-if-not-resolved="false"></xref> on failure.
    content.vb: Public Shared Function CaptureOpenDevice(devicename As String, frequency As UInteger, format As ALFormat, buffersize As Integer) As ALCaptureDevice
  overload: OpenTK.Audio.OpenAL.ALC.CaptureOpenDevice*
  nameWithType.vb: ALC.CaptureOpenDevice(String, UInteger, ALFormat, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.CaptureOpenDevice(String, UInteger, OpenTK.Audio.OpenAL.ALFormat, Integer)
  name.vb: CaptureOpenDevice(String, UInteger, ALFormat, Integer)
- uid: OpenTK.Audio.OpenAL.ALC.CaptureOpenDevice(System.String,System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.ALC.CaptureOpenDevice(System.String,System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.Int32)
  id: CaptureOpenDevice(System.String,System.Int32,OpenTK.Audio.OpenAL.ALFormat,System.Int32)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: CaptureOpenDevice(string, int, ALFormat, int)
  nameWithType: ALC.CaptureOpenDevice(string, int, ALFormat, int)
  fullName: OpenTK.Audio.OpenAL.ALC.CaptureOpenDevice(string, int, OpenTK.Audio.OpenAL.ALFormat, int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function opens a capture device by name.
  example: []
  syntax:
    content: public static extern ALCaptureDevice CaptureOpenDevice(string devicename, int frequency, ALFormat format, int buffersize)
    parameters:
    - id: devicename
      type: System.String
      description: A pointer to a device name string.
    - id: frequency
      type: System.Int32
      description: The frequency that the buffer should be captured at.
    - id: format
      type: OpenTK.Audio.OpenAL.ALFormat
      description: The requested capture buffer format.
    - id: buffersize
      type: System.Int32
      description: The size of the capture buffer in samples, not bytes.
    return:
      type: OpenTK.Audio.OpenAL.ALCaptureDevice
      description: Returns the capture device pointer, or <xref href="OpenTK.Audio.OpenAL.ALCaptureDevice.Null" data-throw-if-not-resolved="false"></xref> on failure.
    content.vb: Public Shared Function CaptureOpenDevice(devicename As String, frequency As Integer, format As ALFormat, buffersize As Integer) As ALCaptureDevice
  overload: OpenTK.Audio.OpenAL.ALC.CaptureOpenDevice*
  nameWithType.vb: ALC.CaptureOpenDevice(String, Integer, ALFormat, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.CaptureOpenDevice(String, Integer, OpenTK.Audio.OpenAL.ALFormat, Integer)
  name.vb: CaptureOpenDevice(String, Integer, ALFormat, Integer)
- uid: OpenTK.Audio.OpenAL.ALC.CaptureCloseDevice(OpenTK.Audio.OpenAL.ALCaptureDevice)
  commentId: M:OpenTK.Audio.OpenAL.ALC.CaptureCloseDevice(OpenTK.Audio.OpenAL.ALCaptureDevice)
  id: CaptureCloseDevice(OpenTK.Audio.OpenAL.ALCaptureDevice)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: CaptureCloseDevice(ALCaptureDevice)
  nameWithType: ALC.CaptureCloseDevice(ALCaptureDevice)
  fullName: OpenTK.Audio.OpenAL.ALC.CaptureCloseDevice(OpenTK.Audio.OpenAL.ALCaptureDevice)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function closes the specified capture device.
  example: []
  syntax:
    content: public static extern bool CaptureCloseDevice(ALCaptureDevice device)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALCaptureDevice
      description: A pointer to a capture device.
    return:
      type: System.Boolean
      description: Returns True if the close operation was successful, False on failure.
    content.vb: Public Shared Function CaptureCloseDevice(device As ALCaptureDevice) As Boolean
  overload: OpenTK.Audio.OpenAL.ALC.CaptureCloseDevice*
- uid: OpenTK.Audio.OpenAL.ALC.CaptureStart(OpenTK.Audio.OpenAL.ALCaptureDevice)
  commentId: M:OpenTK.Audio.OpenAL.ALC.CaptureStart(OpenTK.Audio.OpenAL.ALCaptureDevice)
  id: CaptureStart(OpenTK.Audio.OpenAL.ALCaptureDevice)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: CaptureStart(ALCaptureDevice)
  nameWithType: ALC.CaptureStart(ALCaptureDevice)
  fullName: OpenTK.Audio.OpenAL.ALC.CaptureStart(OpenTK.Audio.OpenAL.ALCaptureDevice)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function begins a capture operation.
  remarks: alcCaptureStart will begin recording to an internal ring buffer of the size specified when opening the capture device. The application can then retrieve the number of samples currently available using the ALC_CAPTURE_SAPMPLES token with alcGetIntegerv. When the application determines that enough samples are available for processing, then it can obtain them with a call to alcCaptureSamples.
  example: []
  syntax:
    content: public static extern void CaptureStart(ALCaptureDevice device)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALCaptureDevice
      description: A pointer to a capture device.
    content.vb: Public Shared Sub CaptureStart(device As ALCaptureDevice)
  overload: OpenTK.Audio.OpenAL.ALC.CaptureStart*
- uid: OpenTK.Audio.OpenAL.ALC.CaptureStop(OpenTK.Audio.OpenAL.ALCaptureDevice)
  commentId: M:OpenTK.Audio.OpenAL.ALC.CaptureStop(OpenTK.Audio.OpenAL.ALCaptureDevice)
  id: CaptureStop(OpenTK.Audio.OpenAL.ALCaptureDevice)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: CaptureStop(ALCaptureDevice)
  nameWithType: ALC.CaptureStop(ALCaptureDevice)
  fullName: OpenTK.Audio.OpenAL.ALC.CaptureStop(OpenTK.Audio.OpenAL.ALCaptureDevice)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function stops a capture operation.
  example: []
  syntax:
    content: public static extern void CaptureStop(ALCaptureDevice device)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALCaptureDevice
      description: A pointer to a capture device.
    content.vb: Public Shared Sub CaptureStop(device As ALCaptureDevice)
  overload: OpenTK.Audio.OpenAL.ALC.CaptureStop*
- uid: OpenTK.Audio.OpenAL.ALC.CaptureSamples(OpenTK.Audio.OpenAL.ALCaptureDevice,System.IntPtr,System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.ALC.CaptureSamples(OpenTK.Audio.OpenAL.ALCaptureDevice,System.IntPtr,System.Int32)
  id: CaptureSamples(OpenTK.Audio.OpenAL.ALCaptureDevice,System.IntPtr,System.Int32)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: CaptureSamples(ALCaptureDevice, nint, int)
  nameWithType: ALC.CaptureSamples(ALCaptureDevice, nint, int)
  fullName: OpenTK.Audio.OpenAL.ALC.CaptureSamples(OpenTK.Audio.OpenAL.ALCaptureDevice, nint, int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function completes a capture operation, and does not block.
  example: []
  syntax:
    content: public static extern void CaptureSamples(ALCaptureDevice device, nint buffer, int samples)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALCaptureDevice
      description: A pointer to a capture device.
    - id: buffer
      type: System.IntPtr
      description: A pointer to a buffer, which must be large enough to accommodate the number of samples.
    - id: samples
      type: System.Int32
      description: The number of samples to be retrieved.
    content.vb: Public Shared Sub CaptureSamples(device As ALCaptureDevice, buffer As IntPtr, samples As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.CaptureSamples*
  nameWithType.vb: ALC.CaptureSamples(ALCaptureDevice, IntPtr, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.CaptureSamples(OpenTK.Audio.OpenAL.ALCaptureDevice, System.IntPtr, Integer)
  name.vb: CaptureSamples(ALCaptureDevice, IntPtr, Integer)
- uid: OpenTK.Audio.OpenAL.ALC.CaptureSamples(OpenTK.Audio.OpenAL.ALCaptureDevice,System.Void*,System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.ALC.CaptureSamples(OpenTK.Audio.OpenAL.ALCaptureDevice,System.Void*,System.Int32)
  id: CaptureSamples(OpenTK.Audio.OpenAL.ALCaptureDevice,System.Void*,System.Int32)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: CaptureSamples(ALCaptureDevice, void*, int)
  nameWithType: ALC.CaptureSamples(ALCaptureDevice, void*, int)
  fullName: OpenTK.Audio.OpenAL.ALC.CaptureSamples(OpenTK.Audio.OpenAL.ALCaptureDevice, void*, int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function completes a capture operation, and does not block.
  example: []
  syntax:
    content: public static extern void CaptureSamples(ALCaptureDevice device, void* buffer, int samples)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALCaptureDevice
      description: A pointer to a capture device.
    - id: buffer
      type: System.Void*
      description: A pointer to a buffer, which must be large enough to accommodate the number of samples.
    - id: samples
      type: System.Int32
      description: The number of samples to be retrieved.
    content.vb: Public Shared Sub CaptureSamples(device As ALCaptureDevice, buffer As Void*, samples As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.CaptureSamples*
  nameWithType.vb: ALC.CaptureSamples(ALCaptureDevice, Void*, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.CaptureSamples(OpenTK.Audio.OpenAL.ALCaptureDevice, Void*, Integer)
  name.vb: CaptureSamples(ALCaptureDevice, Void*, Integer)
- uid: OpenTK.Audio.OpenAL.ALC.CaptureSamples(OpenTK.Audio.OpenAL.ALCaptureDevice,System.Byte@,System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.ALC.CaptureSamples(OpenTK.Audio.OpenAL.ALCaptureDevice,System.Byte@,System.Int32)
  id: CaptureSamples(OpenTK.Audio.OpenAL.ALCaptureDevice,System.Byte@,System.Int32)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: CaptureSamples(ALCaptureDevice, ref byte, int)
  nameWithType: ALC.CaptureSamples(ALCaptureDevice, ref byte, int)
  fullName: OpenTK.Audio.OpenAL.ALC.CaptureSamples(OpenTK.Audio.OpenAL.ALCaptureDevice, ref byte, int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function completes a capture operation, and does not block.
  example: []
  syntax:
    content: public static extern void CaptureSamples(ALCaptureDevice device, ref byte buffer, int samples)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALCaptureDevice
      description: A pointer to a capture device.
    - id: buffer
      type: System.Byte
      description: A pointer to a buffer, which must be large enough to accommodate the number of samples.
    - id: samples
      type: System.Int32
      description: The number of samples to be retrieved.
    content.vb: Public Shared Sub CaptureSamples(device As ALCaptureDevice, buffer As Byte, samples As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.CaptureSamples*
  nameWithType.vb: ALC.CaptureSamples(ALCaptureDevice, Byte, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.CaptureSamples(OpenTK.Audio.OpenAL.ALCaptureDevice, Byte, Integer)
  name.vb: CaptureSamples(ALCaptureDevice, Byte, Integer)
- uid: OpenTK.Audio.OpenAL.ALC.CaptureSamples(OpenTK.Audio.OpenAL.ALCaptureDevice,System.Int16@,System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.ALC.CaptureSamples(OpenTK.Audio.OpenAL.ALCaptureDevice,System.Int16@,System.Int32)
  id: CaptureSamples(OpenTK.Audio.OpenAL.ALCaptureDevice,System.Int16@,System.Int32)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: CaptureSamples(ALCaptureDevice, ref short, int)
  nameWithType: ALC.CaptureSamples(ALCaptureDevice, ref short, int)
  fullName: OpenTK.Audio.OpenAL.ALC.CaptureSamples(OpenTK.Audio.OpenAL.ALCaptureDevice, ref short, int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function completes a capture operation, and does not block.
  example: []
  syntax:
    content: public static extern void CaptureSamples(ALCaptureDevice device, ref short buffer, int samples)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALCaptureDevice
      description: A pointer to a capture device.
    - id: buffer
      type: System.Int16
      description: A pointer to a buffer, which must be large enough to accommodate the number of samples.
    - id: samples
      type: System.Int32
      description: The number of samples to be retrieved.
    content.vb: Public Shared Sub CaptureSamples(device As ALCaptureDevice, buffer As Short, samples As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.CaptureSamples*
  nameWithType.vb: ALC.CaptureSamples(ALCaptureDevice, Short, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.CaptureSamples(OpenTK.Audio.OpenAL.ALCaptureDevice, Short, Integer)
  name.vb: CaptureSamples(ALCaptureDevice, Short, Integer)
- uid: OpenTK.Audio.OpenAL.ALC.CaptureSamples``1(OpenTK.Audio.OpenAL.ALCaptureDevice,``0@,System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.ALC.CaptureSamples``1(OpenTK.Audio.OpenAL.ALCaptureDevice,``0@,System.Int32)
  id: CaptureSamples``1(OpenTK.Audio.OpenAL.ALCaptureDevice,``0@,System.Int32)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: CaptureSamples<T>(ALCaptureDevice, ref T, int)
  nameWithType: ALC.CaptureSamples<T>(ALCaptureDevice, ref T, int)
  fullName: OpenTK.Audio.OpenAL.ALC.CaptureSamples<T>(OpenTK.Audio.OpenAL.ALCaptureDevice, ref T, int)
  type: Method
  source:
    id: CaptureSamples
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\ALC\ALC.cs
    startLine: 404
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function completes a capture operation, and does not block.
  example: []
  syntax:
    content: 'public static void CaptureSamples<T>(ALCaptureDevice device, ref T buffer, int samples) where T : unmanaged'
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALCaptureDevice
      description: A pointer to a capture device.
    - id: buffer
      type: '{T}'
      description: A reference to a buffer, which must be large enough to accommodate the number of samples.
    - id: samples
      type: System.Int32
      description: The number of samples to be retrieved.
    typeParameters:
    - id: T
      description: The buffer datatype.
    content.vb: Public Shared Sub CaptureSamples(Of T As Structure)(device As ALCaptureDevice, buffer As T, samples As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.CaptureSamples*
  nameWithType.vb: ALC.CaptureSamples(Of T)(ALCaptureDevice, T, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.CaptureSamples(Of T)(OpenTK.Audio.OpenAL.ALCaptureDevice, T, Integer)
  name.vb: CaptureSamples(Of T)(ALCaptureDevice, T, Integer)
- uid: OpenTK.Audio.OpenAL.ALC.CaptureSamples``1(OpenTK.Audio.OpenAL.ALCaptureDevice,``0[],System.Int32)
  commentId: M:OpenTK.Audio.OpenAL.ALC.CaptureSamples``1(OpenTK.Audio.OpenAL.ALCaptureDevice,``0[],System.Int32)
  id: CaptureSamples``1(OpenTK.Audio.OpenAL.ALCaptureDevice,``0[],System.Int32)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: CaptureSamples<T>(ALCaptureDevice, T[], int)
  nameWithType: ALC.CaptureSamples<T>(ALCaptureDevice, T[], int)
  fullName: OpenTK.Audio.OpenAL.ALC.CaptureSamples<T>(OpenTK.Audio.OpenAL.ALCaptureDevice, T[], int)
  type: Method
  source:
    id: CaptureSamples
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\ALC\ALC.cs
    startLine: 418
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function completes a capture operation, and does not block.
  example: []
  syntax:
    content: 'public static void CaptureSamples<T>(ALCaptureDevice device, T[] buffer, int samples) where T : unmanaged'
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALCaptureDevice
      description: A pointer to a capture device.
    - id: buffer
      type: '{T}[]'
      description: A buffer, which must be large enough to accommodate the number of samples.
    - id: samples
      type: System.Int32
      description: The number of samples to be retrieved.
    typeParameters:
    - id: T
      description: The buffer datatype.
    content.vb: Public Shared Sub CaptureSamples(Of T As Structure)(device As ALCaptureDevice, buffer As T(), samples As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.CaptureSamples*
  nameWithType.vb: ALC.CaptureSamples(Of T)(ALCaptureDevice, T(), Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.CaptureSamples(Of T)(OpenTK.Audio.OpenAL.ALCaptureDevice, T(), Integer)
  name.vb: CaptureSamples(Of T)(ALCaptureDevice, T(), Integer)
- uid: OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALCaptureDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32*)
  commentId: M:OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALCaptureDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32*)
  id: GetInteger(OpenTK.Audio.OpenAL.ALCaptureDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32*)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: GetInteger(ALCaptureDevice, AlcGetInteger, int, int*)
  nameWithType: ALC.GetInteger(ALCaptureDevice, AlcGetInteger, int, int*)
  fullName: OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALCaptureDevice, OpenTK.Audio.OpenAL.AlcGetInteger, int, int*)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function returns integers related to the context.
  example: []
  syntax:
    content: public static extern void GetInteger(ALCaptureDevice device, AlcGetInteger param, int size, int* data)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALCaptureDevice
      description: A pointer to the device to be queried.
    - id: param
      type: OpenTK.Audio.OpenAL.AlcGetInteger
      description: 'An attribute to be retrieved: ALC_MAJOR_VERSION, ALC_MINOR_VERSION, ALC_ATTRIBUTES_SIZE, ALC_ALL_ATTRIBUTES.'
    - id: size
      type: System.Int32
      description: The size of the destination buffer provided, in number of integers.
    - id: data
      type: System.Int32*
      description: A pointer to the buffer to be returned.
    content.vb: Public Shared Sub GetInteger(device As ALCaptureDevice, param As AlcGetInteger, size As Integer, data As Integer*)
  overload: OpenTK.Audio.OpenAL.ALC.GetInteger*
  nameWithType.vb: ALC.GetInteger(ALCaptureDevice, AlcGetInteger, Integer, Integer*)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALCaptureDevice, OpenTK.Audio.OpenAL.AlcGetInteger, Integer, Integer*)
  name.vb: GetInteger(ALCaptureDevice, AlcGetInteger, Integer, Integer*)
- uid: OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALCaptureDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32[])
  commentId: M:OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALCaptureDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32[])
  id: GetInteger(OpenTK.Audio.OpenAL.ALCaptureDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32[])
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: GetInteger(ALCaptureDevice, AlcGetInteger, int, int[])
  nameWithType: ALC.GetInteger(ALCaptureDevice, AlcGetInteger, int, int[])
  fullName: OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALCaptureDevice, OpenTK.Audio.OpenAL.AlcGetInteger, int, int[])
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function returns integers related to the context.
  example: []
  syntax:
    content: public static extern void GetInteger(ALCaptureDevice device, AlcGetInteger param, int size, int[] data)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALCaptureDevice
      description: A pointer to the device to be queried.
    - id: param
      type: OpenTK.Audio.OpenAL.AlcGetInteger
      description: 'An attribute to be retrieved: ALC_MAJOR_VERSION, ALC_MINOR_VERSION, ALC_ATTRIBUTES_SIZE, ALC_ALL_ATTRIBUTES.'
    - id: size
      type: System.Int32
      description: The size of the destination buffer provided, in number of integers.
    - id: data
      type: System.Int32[]
      description: A pointer to the buffer to be returned.
    content.vb: Public Shared Sub GetInteger(device As ALCaptureDevice, param As AlcGetInteger, size As Integer, data As Integer())
  overload: OpenTK.Audio.OpenAL.ALC.GetInteger*
  nameWithType.vb: ALC.GetInteger(ALCaptureDevice, AlcGetInteger, Integer, Integer())
  fullName.vb: OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALCaptureDevice, OpenTK.Audio.OpenAL.AlcGetInteger, Integer, Integer())
  name.vb: GetInteger(ALCaptureDevice, AlcGetInteger, Integer, Integer())
- uid: OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALCaptureDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32@)
  commentId: M:OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALCaptureDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32@)
  id: GetInteger(OpenTK.Audio.OpenAL.ALCaptureDevice,OpenTK.Audio.OpenAL.AlcGetInteger,System.Int32,System.Int32@)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: GetInteger(ALCaptureDevice, AlcGetInteger, int, out int)
  nameWithType: ALC.GetInteger(ALCaptureDevice, AlcGetInteger, int, out int)
  fullName: OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALCaptureDevice, OpenTK.Audio.OpenAL.AlcGetInteger, int, out int)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function returns integers related to the context.
  example: []
  syntax:
    content: public static extern void GetInteger(ALCaptureDevice device, AlcGetInteger param, int size, out int data)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALCaptureDevice
      description: A pointer to the device to be queried.
    - id: param
      type: OpenTK.Audio.OpenAL.AlcGetInteger
      description: 'An attribute to be retrieved: ALC_MAJOR_VERSION, ALC_MINOR_VERSION, ALC_ATTRIBUTES_SIZE, ALC_ALL_ATTRIBUTES.'
    - id: size
      type: System.Int32
      description: The size of the destination buffer provided, in number of integers.
    - id: data
      type: System.Int32
      description: A pointer to the buffer to be returned.
    content.vb: Public Shared Sub GetInteger(device As ALCaptureDevice, param As AlcGetInteger, size As Integer, data As Integer)
  overload: OpenTK.Audio.OpenAL.ALC.GetInteger*
  nameWithType.vb: ALC.GetInteger(ALCaptureDevice, AlcGetInteger, Integer, Integer)
  fullName.vb: OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALCaptureDevice, OpenTK.Audio.OpenAL.AlcGetInteger, Integer, Integer)
  name.vb: GetInteger(ALCaptureDevice, AlcGetInteger, Integer, Integer)
- uid: OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALCaptureDevice,OpenTK.Audio.OpenAL.AlcGetInteger)
  commentId: M:OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALCaptureDevice,OpenTK.Audio.OpenAL.AlcGetInteger)
  id: GetInteger(OpenTK.Audio.OpenAL.ALCaptureDevice,OpenTK.Audio.OpenAL.AlcGetInteger)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: GetInteger(ALCaptureDevice, AlcGetInteger)
  nameWithType: ALC.GetInteger(ALCaptureDevice, AlcGetInteger)
  fullName: OpenTK.Audio.OpenAL.ALC.GetInteger(OpenTK.Audio.OpenAL.ALCaptureDevice, OpenTK.Audio.OpenAL.AlcGetInteger)
  type: Method
  source:
    id: GetInteger
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\ALC\ALC.cs
    startLine: 455
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: This function returns integers related to the context.
  example: []
  syntax:
    content: public static int GetInteger(ALCaptureDevice device, AlcGetInteger param)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALCaptureDevice
      description: A pointer to the device to be queried.
    - id: param
      type: OpenTK.Audio.OpenAL.AlcGetInteger
      description: 'An attribute to be retrieved: ALC_MAJOR_VERSION, ALC_MINOR_VERSION, ALC_ATTRIBUTES_SIZE, ALC_ALL_ATTRIBUTES.'
    return:
      type: System.Int32
      description: The int returned.
    content.vb: Public Shared Function GetInteger(device As ALCaptureDevice, param As AlcGetInteger) As Integer
  overload: OpenTK.Audio.OpenAL.ALC.GetInteger*
- uid: OpenTK.Audio.OpenAL.ALC.IsEnumerationExtensionPresent(OpenTK.Audio.OpenAL.ALDevice)
  commentId: M:OpenTK.Audio.OpenAL.ALC.IsEnumerationExtensionPresent(OpenTK.Audio.OpenAL.ALDevice)
  id: IsEnumerationExtensionPresent(OpenTK.Audio.OpenAL.ALDevice)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: IsEnumerationExtensionPresent(ALDevice)
  nameWithType: ALC.IsEnumerationExtensionPresent(ALDevice)
  fullName: OpenTK.Audio.OpenAL.ALC.IsEnumerationExtensionPresent(OpenTK.Audio.OpenAL.ALDevice)
  type: Method
  source:
    id: IsEnumerationExtensionPresent
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\ALC\ALC.cs
    startLine: 468
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Checks to see that the ALC_ENUMERATION_EXT extension is present. This will always be available in 1.1 devices or later.
  example: []
  syntax:
    content: public static bool IsEnumerationExtensionPresent(ALDevice device)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: The device to check the extension is present for.
    return:
      type: System.Boolean
      description: If the ALC_ENUMERATION_EXT extension was present.
    content.vb: Public Shared Function IsEnumerationExtensionPresent(device As ALDevice) As Boolean
  overload: OpenTK.Audio.OpenAL.ALC.IsEnumerationExtensionPresent*
- uid: OpenTK.Audio.OpenAL.ALC.IsEnumerationExtensionPresent(OpenTK.Audio.OpenAL.ALCaptureDevice)
  commentId: M:OpenTK.Audio.OpenAL.ALC.IsEnumerationExtensionPresent(OpenTK.Audio.OpenAL.ALCaptureDevice)
  id: IsEnumerationExtensionPresent(OpenTK.Audio.OpenAL.ALCaptureDevice)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: IsEnumerationExtensionPresent(ALCaptureDevice)
  nameWithType: ALC.IsEnumerationExtensionPresent(ALCaptureDevice)
  fullName: OpenTK.Audio.OpenAL.ALC.IsEnumerationExtensionPresent(OpenTK.Audio.OpenAL.ALCaptureDevice)
  type: Method
  source:
    id: IsEnumerationExtensionPresent
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\ALC\ALC.cs
    startLine: 478
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Checks to see that the ALC_ENUMERATION_EXT extension is present. This will always be available in 1.1 devices or later.
  example: []
  syntax:
    content: public static bool IsEnumerationExtensionPresent(ALCaptureDevice device)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALCaptureDevice
      description: The device to check the extension is present for.
    return:
      type: System.Boolean
      description: If the ALC_ENUMERATION_EXT extension was present.
    content.vb: Public Shared Function IsEnumerationExtensionPresent(device As ALCaptureDevice) As Boolean
  overload: OpenTK.Audio.OpenAL.ALC.IsEnumerationExtensionPresent*
- uid: OpenTK.Audio.OpenAL.ALC.GetString(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.GetEnumerationString)
  commentId: M:OpenTK.Audio.OpenAL.ALC.GetString(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.GetEnumerationString)
  id: GetString(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.GetEnumerationString)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: GetString(ALDevice, GetEnumerationString)
  nameWithType: ALC.GetString(ALDevice, GetEnumerationString)
  fullName: OpenTK.Audio.OpenAL.ALC.GetString(OpenTK.Audio.OpenAL.ALDevice, OpenTK.Audio.OpenAL.GetEnumerationString)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets a named property on the context.
  example: []
  syntax:
    content: public static extern string GetString(ALDevice device, GetEnumerationString param)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: The device for the context.
    - id: param
      type: OpenTK.Audio.OpenAL.GetEnumerationString
      description: The named property.
    return:
      type: System.String
      description: The value.
    content.vb: Public Shared Function GetString(device As ALDevice, param As GetEnumerationString) As String
  overload: OpenTK.Audio.OpenAL.ALC.GetString*
- uid: OpenTK.Audio.OpenAL.ALC.GetStringListPtr(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.GetEnumerationStringList)
  commentId: M:OpenTK.Audio.OpenAL.ALC.GetStringListPtr(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.GetEnumerationStringList)
  id: GetStringListPtr(OpenTK.Audio.OpenAL.ALDevice,OpenTK.Audio.OpenAL.GetEnumerationStringList)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: GetStringListPtr(ALDevice, GetEnumerationStringList)
  nameWithType: ALC.GetStringListPtr(ALDevice, GetEnumerationStringList)
  fullName: OpenTK.Audio.OpenAL.ALC.GetStringListPtr(OpenTK.Audio.OpenAL.ALDevice, OpenTK.Audio.OpenAL.GetEnumerationStringList)
  type: Method
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets a named property on the context.
  example: []
  syntax:
    content: public static extern byte* GetStringListPtr(ALDevice device, GetEnumerationStringList param)
    parameters:
    - id: device
      type: OpenTK.Audio.OpenAL.ALDevice
      description: The device for the context.
    - id: param
      type: OpenTK.Audio.OpenAL.GetEnumerationStringList
      description: The named property.
    return:
      type: System.Byte*
      description: The value.
    content.vb: Public Shared Function GetStringListPtr(device As ALDevice, param As GetEnumerationStringList) As Byte*
  overload: OpenTK.Audio.OpenAL.ALC.GetStringListPtr*
- uid: OpenTK.Audio.OpenAL.ALC.GetStringList(OpenTK.Audio.OpenAL.GetEnumerationStringList)
  commentId: M:OpenTK.Audio.OpenAL.ALC.GetStringList(OpenTK.Audio.OpenAL.GetEnumerationStringList)
  id: GetStringList(OpenTK.Audio.OpenAL.GetEnumerationStringList)
  parent: OpenTK.Audio.OpenAL.ALC
  langs:
  - csharp
  - vb
  name: GetStringList(GetEnumerationStringList)
  nameWithType: ALC.GetStringList(GetEnumerationStringList)
  fullName: OpenTK.Audio.OpenAL.ALC.GetStringList(OpenTK.Audio.OpenAL.GetEnumerationStringList)
  type: Method
  source:
    id: GetStringList
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenAL\OpenTK.Audio.OpenAL\ALC\ALC.cs
    startLine: 503
  assemblies:
  - OpenTK.Audio.OpenAL
  namespace: OpenTK.Audio.OpenAL
  summary: Gets a named property on the context.
  example: []
  syntax:
    content: public static IEnumerable<string> GetStringList(GetEnumerationStringList param)
    parameters:
    - id: param
      type: OpenTK.Audio.OpenAL.GetEnumerationStringList
      description: The named property.
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The value.
    content.vb: Public Shared Function GetStringList(param As GetEnumerationStringList) As IEnumerable(Of String)
  overload: OpenTK.Audio.OpenAL.ALC.GetStringList*
references:
- uid: OpenTK.Audio.OpenAL
  commentId: N:OpenTK.Audio.OpenAL
  href: OpenTK.html
  name: OpenTK.Audio.OpenAL
  nameWithType: OpenTK.Audio.OpenAL
  fullName: OpenTK.Audio.OpenAL
  spec.csharp:
  - uid: OpenTK
    name: OpenTK
    href: OpenTK.html
  - name: .
  - uid: OpenTK.Audio
    name: Audio
    href: OpenTK.Audio.html
  - name: .
  - uid: OpenTK.Audio.OpenAL
    name: OpenAL
    href: OpenTK.Audio.OpenAL.html
  spec.vb:
  - uid: OpenTK
    name: OpenTK
    href: OpenTK.html
  - name: .
  - uid: OpenTK.Audio
    name: Audio
    href: OpenTK.Audio.html
  - name: .
  - uid: OpenTK.Audio.OpenAL
    name: OpenAL
    href: OpenTK.Audio.OpenAL.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: OpenTK.Audio.OpenAL.ALBase
  commentId: T:OpenTK.Audio.OpenAL.ALBase
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.ALBase.html
  name: ALBase
  nameWithType: ALBase
  fullName: OpenTK.Audio.OpenAL.ALBase
- uid: OpenTK.Audio.OpenAL.ALBase.RegisterOpenALResolver
  commentId: M:OpenTK.Audio.OpenAL.ALBase.RegisterOpenALResolver
  parent: OpenTK.Audio.OpenAL.ALBase
  href: OpenTK.Audio.OpenAL.ALBase.html#OpenTK_Audio_OpenAL_ALBase_RegisterOpenALResolver
  name: RegisterOpenALResolver()
  nameWithType: ALBase.RegisterOpenALResolver()
  fullName: OpenTK.Audio.OpenAL.ALBase.RegisterOpenALResolver()
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALBase.RegisterOpenALResolver
    name: RegisterOpenALResolver
    href: OpenTK.Audio.OpenAL.ALBase.html#OpenTK_Audio_OpenAL_ALBase_RegisterOpenALResolver
  - name: (
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALBase.RegisterOpenALResolver
    name: RegisterOpenALResolver
    href: OpenTK.Audio.OpenAL.ALBase.html#OpenTK_Audio_OpenAL_ALBase_RegisterOpenALResolver
  - name: (
  - name: )
- uid: OpenTK.Audio.OpenAL.ALBase.LoadDelegate``1(System.String)
  commentId: M:OpenTK.Audio.OpenAL.ALBase.LoadDelegate``1(System.String)
  parent: OpenTK.Audio.OpenAL.ALBase
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALBase.html#OpenTK_Audio_OpenAL_ALBase_LoadDelegate__1_System_String_
  name: LoadDelegate<TDelegate>(string)
  nameWithType: ALBase.LoadDelegate<TDelegate>(string)
  fullName: OpenTK.Audio.OpenAL.ALBase.LoadDelegate<TDelegate>(string)
  nameWithType.vb: ALBase.LoadDelegate(Of TDelegate)(String)
  fullName.vb: OpenTK.Audio.OpenAL.ALBase.LoadDelegate(Of TDelegate)(String)
  name.vb: LoadDelegate(Of TDelegate)(String)
  spec.csharp:
  - uid: OpenTK.Audio.OpenAL.ALBase.LoadDelegate``1(System.String)
    name: LoadDelegate
    href: OpenTK.Audio.OpenAL.ALBase.html#OpenTK_Audio_OpenAL_ALBase_LoadDelegate__1_System_String_
  - name: <
  - name: TDelegate
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: OpenTK.Audio.OpenAL.ALBase.LoadDelegate``1(System.String)
    name: LoadDelegate
    href: OpenTK.Audio.OpenAL.ALBase.html#OpenTK_Audio_OpenAL_ALBase_LoadDelegate__1_System_String_
  - name: (
  - name: Of
  - name: " "
  - name: TDelegate
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: OpenTK.Audio.OpenAL.ALC.CreateContext*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.CreateContext
  href: OpenTK.Audio.OpenAL.ALC.html#OpenTK_Audio_OpenAL_ALC_CreateContext_OpenTK_Audio_OpenAL_ALDevice_System_Int32__
  name: CreateContext
  nameWithType: ALC.CreateContext
  fullName: OpenTK.Audio.OpenAL.ALC.CreateContext
- uid: OpenTK.Audio.OpenAL.ALDevice
  commentId: T:OpenTK.Audio.OpenAL.ALDevice
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.ALDevice.html
  name: ALDevice
  nameWithType: ALDevice
  fullName: OpenTK.Audio.OpenAL.ALDevice
- uid: System.Int32*
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int*
  nameWithType: int*
  fullName: int*
  nameWithType.vb: Integer*
  fullName.vb: Integer*
  name.vb: Integer*
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '*'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '*'
- uid: OpenTK.Audio.OpenAL.ALContext
  commentId: T:OpenTK.Audio.OpenAL.ALContext
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.ALContext.html
  name: ALContext
  nameWithType: ALContext
  fullName: OpenTK.Audio.OpenAL.ALContext
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Int32[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int[]
  nameWithType: int[]
  fullName: int[]
  nameWithType.vb: Integer()
  fullName.vb: Integer()
  name.vb: Integer()
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
- uid: System.Span{System.Int32}
  commentId: T:System.Span{System.Int32}
  parent: System
  definition: System.Span`1
  href: https://learn.microsoft.com/dotnet/api/system.span-1
  name: Span<int>
  nameWithType: Span<int>
  fullName: System.Span<int>
  nameWithType.vb: Span(Of Integer)
  fullName.vb: System.Span(Of Integer)
  name.vb: Span(Of Integer)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Span`1
  commentId: T:System.Span`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.span-1
  name: Span<T>
  nameWithType: Span<T>
  fullName: System.Span<T>
  nameWithType.vb: Span(Of T)
  fullName.vb: System.Span(Of T)
  name.vb: Span(Of T)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: OpenTK.Audio.OpenAL.ALContextAttributes
  commentId: T:OpenTK.Audio.OpenAL.ALContextAttributes
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.ALContextAttributes.html
  name: ALContextAttributes
  nameWithType: ALContextAttributes
  fullName: OpenTK.Audio.OpenAL.ALContextAttributes
- uid: OpenTK.Audio.OpenAL.ALC.MakeContextCurrent*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.MakeContextCurrent
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.html#OpenTK_Audio_OpenAL_ALC_MakeContextCurrent_OpenTK_Audio_OpenAL_ALContext_
  name: MakeContextCurrent
  nameWithType: ALC.MakeContextCurrent
  fullName: OpenTK.Audio.OpenAL.ALC.MakeContextCurrent
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: OpenTK.Audio.OpenAL.ALC.ProcessContext*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.ProcessContext
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.html#OpenTK_Audio_OpenAL_ALC_ProcessContext_OpenTK_Audio_OpenAL_ALContext_
  name: ProcessContext
  nameWithType: ALC.ProcessContext
  fullName: OpenTK.Audio.OpenAL.ALC.ProcessContext
- uid: OpenTK.Audio.OpenAL.ALC.SuspendContext*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.SuspendContext
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.html#OpenTK_Audio_OpenAL_ALC_SuspendContext_OpenTK_Audio_OpenAL_ALContext_
  name: SuspendContext
  nameWithType: ALC.SuspendContext
  fullName: OpenTK.Audio.OpenAL.ALC.SuspendContext
- uid: OpenTK.Audio.OpenAL.ALC.DestroyContext*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.DestroyContext
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.html#OpenTK_Audio_OpenAL_ALC_DestroyContext_OpenTK_Audio_OpenAL_ALContext_
  name: DestroyContext
  nameWithType: ALC.DestroyContext
  fullName: OpenTK.Audio.OpenAL.ALC.DestroyContext
- uid: OpenTK.Audio.OpenAL.ALC.GetCurrentContext*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.GetCurrentContext
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.html#OpenTK_Audio_OpenAL_ALC_GetCurrentContext
  name: GetCurrentContext
  nameWithType: ALC.GetCurrentContext
  fullName: OpenTK.Audio.OpenAL.ALC.GetCurrentContext
- uid: OpenTK.Audio.OpenAL.ALC.GetContextsDevice*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.GetContextsDevice
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.html#OpenTK_Audio_OpenAL_ALC_GetContextsDevice_OpenTK_Audio_OpenAL_ALContext_
  name: GetContextsDevice
  nameWithType: ALC.GetContextsDevice
  fullName: OpenTK.Audio.OpenAL.ALC.GetContextsDevice
- uid: OpenTK.Audio.OpenAL.ALC.OpenDevice*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.OpenDevice
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.html#OpenTK_Audio_OpenAL_ALC_OpenDevice_System_String_
  name: OpenDevice
  nameWithType: ALC.OpenDevice
  fullName: OpenTK.Audio.OpenAL.ALC.OpenDevice
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: OpenTK.Audio.OpenAL.ALC.CloseDevice*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.CloseDevice
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.html#OpenTK_Audio_OpenAL_ALC_CloseDevice_OpenTK_Audio_OpenAL_ALDevice_
  name: CloseDevice
  nameWithType: ALC.CloseDevice
  fullName: OpenTK.Audio.OpenAL.ALC.CloseDevice
- uid: OpenTK.Audio.OpenAL.ALC.GetError*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.GetError
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.html#OpenTK_Audio_OpenAL_ALC_GetError_OpenTK_Audio_OpenAL_ALDevice_
  name: GetError
  nameWithType: ALC.GetError
  fullName: OpenTK.Audio.OpenAL.ALC.GetError
- uid: OpenTK.Audio.OpenAL.AlcError
  commentId: T:OpenTK.Audio.OpenAL.AlcError
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.AlcError.html
  name: AlcError
  nameWithType: AlcError
  fullName: OpenTK.Audio.OpenAL.AlcError
- uid: OpenTK.Audio.OpenAL.ALC.IsExtensionPresent*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.IsExtensionPresent
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.html#OpenTK_Audio_OpenAL_ALC_IsExtensionPresent_OpenTK_Audio_OpenAL_ALDevice_System_String_
  name: IsExtensionPresent
  nameWithType: ALC.IsExtensionPresent
  fullName: OpenTK.Audio.OpenAL.ALC.IsExtensionPresent
- uid: OpenTK.Audio.OpenAL.ALCaptureDevice
  commentId: T:OpenTK.Audio.OpenAL.ALCaptureDevice
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.ALCaptureDevice.html
  name: ALCaptureDevice
  nameWithType: ALCaptureDevice
  fullName: OpenTK.Audio.OpenAL.ALCaptureDevice
- uid: OpenTK.Audio.OpenAL.ALC.GetProcAddress*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.GetProcAddress
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.html#OpenTK_Audio_OpenAL_ALC_GetProcAddress_OpenTK_Audio_OpenAL_ALDevice_System_String_
  name: GetProcAddress
  nameWithType: ALC.GetProcAddress
  fullName: OpenTK.Audio.OpenAL.ALC.GetProcAddress
- uid: System.IntPtr
  commentId: T:System.IntPtr
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.intptr
  name: nint
  nameWithType: nint
  fullName: nint
  nameWithType.vb: IntPtr
  fullName.vb: System.IntPtr
  name.vb: IntPtr
- uid: OpenTK.Audio.OpenAL.ALC.GetEnumValue*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.GetEnumValue
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.html#OpenTK_Audio_OpenAL_ALC_GetEnumValue_OpenTK_Audio_OpenAL_ALDevice_System_String_
  name: GetEnumValue
  nameWithType: ALC.GetEnumValue
  fullName: OpenTK.Audio.OpenAL.ALC.GetEnumValue
- uid: OpenTK.Audio.OpenAL.ALC.GetStringPtr*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.GetStringPtr
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.html#OpenTK_Audio_OpenAL_ALC_GetStringPtr_OpenTK_Audio_OpenAL_ALDevice_OpenTK_Audio_OpenAL_AlcGetString_
  name: GetStringPtr
  nameWithType: ALC.GetStringPtr
  fullName: OpenTK.Audio.OpenAL.ALC.GetStringPtr
- uid: OpenTK.Audio.OpenAL.AlcGetString
  commentId: T:OpenTK.Audio.OpenAL.AlcGetString
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.AlcGetString.html
  name: AlcGetString
  nameWithType: AlcGetString
  fullName: OpenTK.Audio.OpenAL.AlcGetString
- uid: System.Byte*
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte*
  nameWithType: byte*
  fullName: byte*
  nameWithType.vb: Byte*
  fullName.vb: Byte*
  name.vb: Byte*
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '*'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '*'
- uid: OpenTK.Audio.OpenAL.ALC.GetString*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.GetString
  href: OpenTK.Audio.OpenAL.ALC.html#OpenTK_Audio_OpenAL_ALC_GetString_OpenTK_Audio_OpenAL_ALDevice_OpenTK_Audio_OpenAL_AlcGetString_
  name: GetString
  nameWithType: ALC.GetString
  fullName: OpenTK.Audio.OpenAL.ALC.GetString
- uid: OpenTK.Audio.OpenAL.AlcGetStringList
  commentId: T:OpenTK.Audio.OpenAL.AlcGetStringList
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.AlcGetStringList.html
  name: AlcGetStringList
  nameWithType: AlcGetStringList
  fullName: OpenTK.Audio.OpenAL.AlcGetStringList
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<string>
  nameWithType: List<string>
  fullName: System.Collections.Generic.List<string>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: OpenTK.Audio.OpenAL.ALC.GetInteger*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.GetInteger
  href: OpenTK.Audio.OpenAL.ALC.html#OpenTK_Audio_OpenAL_ALC_GetInteger_OpenTK_Audio_OpenAL_ALDevice_OpenTK_Audio_OpenAL_AlcGetInteger_System_Int32_System_Int32__
  name: GetInteger
  nameWithType: ALC.GetInteger
  fullName: OpenTK.Audio.OpenAL.ALC.GetInteger
- uid: OpenTK.Audio.OpenAL.AlcGetInteger
  commentId: T:OpenTK.Audio.OpenAL.AlcGetInteger
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.AlcGetInteger.html
  name: AlcGetInteger
  nameWithType: AlcGetInteger
  fullName: OpenTK.Audio.OpenAL.AlcGetInteger
- uid: OpenTK.Audio.OpenAL.ALC.GetAttributeArray*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.GetAttributeArray
  href: OpenTK.Audio.OpenAL.ALC.html#OpenTK_Audio_OpenAL_ALC_GetAttributeArray_OpenTK_Audio_OpenAL_ALDevice_
  name: GetAttributeArray
  nameWithType: ALC.GetAttributeArray
  fullName: OpenTK.Audio.OpenAL.ALC.GetAttributeArray
- uid: OpenTK.Audio.OpenAL.ALC.GetContextAttributes*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.GetContextAttributes
  href: OpenTK.Audio.OpenAL.ALC.html#OpenTK_Audio_OpenAL_ALC_GetContextAttributes_OpenTK_Audio_OpenAL_ALDevice_
  name: GetContextAttributes
  nameWithType: ALC.GetContextAttributes
  fullName: OpenTK.Audio.OpenAL.ALC.GetContextAttributes
- uid: OpenTK.Audio.OpenAL.ALC.IsCaptureExtensionPresent*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.IsCaptureExtensionPresent
  href: OpenTK.Audio.OpenAL.ALC.html#OpenTK_Audio_OpenAL_ALC_IsCaptureExtensionPresent_OpenTK_Audio_OpenAL_ALDevice_
  name: IsCaptureExtensionPresent
  nameWithType: ALC.IsCaptureExtensionPresent
  fullName: OpenTK.Audio.OpenAL.ALC.IsCaptureExtensionPresent
- uid: OpenTK.Audio.OpenAL.ALCaptureDevice.Null
  commentId: F:OpenTK.Audio.OpenAL.ALCaptureDevice.Null
  href: OpenTK.Audio.OpenAL.ALCaptureDevice.html#OpenTK_Audio_OpenAL_ALCaptureDevice_Null
  name: "Null"
  nameWithType: ALCaptureDevice.Null
  fullName: OpenTK.Audio.OpenAL.ALCaptureDevice.Null
- uid: OpenTK.Audio.OpenAL.ALC.CaptureOpenDevice*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.CaptureOpenDevice
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.html#OpenTK_Audio_OpenAL_ALC_CaptureOpenDevice_System_String_System_UInt32_OpenTK_Audio_OpenAL_ALFormat_System_Int32_
  name: CaptureOpenDevice
  nameWithType: ALC.CaptureOpenDevice
  fullName: OpenTK.Audio.OpenAL.ALC.CaptureOpenDevice
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint32
  name: uint
  nameWithType: uint
  fullName: uint
  nameWithType.vb: UInteger
  fullName.vb: UInteger
  name.vb: UInteger
- uid: OpenTK.Audio.OpenAL.ALFormat
  commentId: T:OpenTK.Audio.OpenAL.ALFormat
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.ALFormat.html
  name: ALFormat
  nameWithType: ALFormat
  fullName: OpenTK.Audio.OpenAL.ALFormat
- uid: OpenTK.Audio.OpenAL.ALC.CaptureCloseDevice*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.CaptureCloseDevice
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.html#OpenTK_Audio_OpenAL_ALC_CaptureCloseDevice_OpenTK_Audio_OpenAL_ALCaptureDevice_
  name: CaptureCloseDevice
  nameWithType: ALC.CaptureCloseDevice
  fullName: OpenTK.Audio.OpenAL.ALC.CaptureCloseDevice
- uid: OpenTK.Audio.OpenAL.ALC.CaptureStart*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.CaptureStart
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.html#OpenTK_Audio_OpenAL_ALC_CaptureStart_OpenTK_Audio_OpenAL_ALCaptureDevice_
  name: CaptureStart
  nameWithType: ALC.CaptureStart
  fullName: OpenTK.Audio.OpenAL.ALC.CaptureStart
- uid: OpenTK.Audio.OpenAL.ALC.CaptureStop*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.CaptureStop
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.html#OpenTK_Audio_OpenAL_ALC_CaptureStop_OpenTK_Audio_OpenAL_ALCaptureDevice_
  name: CaptureStop
  nameWithType: ALC.CaptureStop
  fullName: OpenTK.Audio.OpenAL.ALC.CaptureStop
- uid: OpenTK.Audio.OpenAL.ALC.CaptureSamples*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.CaptureSamples
  href: OpenTK.Audio.OpenAL.ALC.html#OpenTK_Audio_OpenAL_ALC_CaptureSamples_OpenTK_Audio_OpenAL_ALCaptureDevice_System_IntPtr_System_Int32_
  name: CaptureSamples
  nameWithType: ALC.CaptureSamples
  fullName: OpenTK.Audio.OpenAL.ALC.CaptureSamples
- uid: System.Void*
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.void
  name: void*
  nameWithType: void*
  fullName: void*
  nameWithType.vb: Void*
  fullName.vb: Void*
  name.vb: Void*
  spec.csharp:
  - uid: System.Void
    name: void
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.void
  - name: '*'
  spec.vb:
  - uid: System.Void
    name: Void
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.void
  - name: '*'
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte
  nameWithType: byte
  fullName: byte
  nameWithType.vb: Byte
  fullName.vb: Byte
  name.vb: Byte
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int16
  name: short
  nameWithType: short
  fullName: short
  nameWithType.vb: Short
  fullName.vb: Short
  name.vb: Short
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: OpenTK.Audio.OpenAL.ALC.IsEnumerationExtensionPresent*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.IsEnumerationExtensionPresent
  href: OpenTK.Audio.OpenAL.ALC.html#OpenTK_Audio_OpenAL_ALC_IsEnumerationExtensionPresent_OpenTK_Audio_OpenAL_ALDevice_
  name: IsEnumerationExtensionPresent
  nameWithType: ALC.IsEnumerationExtensionPresent
  fullName: OpenTK.Audio.OpenAL.ALC.IsEnumerationExtensionPresent
- uid: OpenTK.Audio.OpenAL.GetEnumerationString
  commentId: T:OpenTK.Audio.OpenAL.GetEnumerationString
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.GetEnumerationString.html
  name: GetEnumerationString
  nameWithType: GetEnumerationString
  fullName: OpenTK.Audio.OpenAL.GetEnumerationString
- uid: OpenTK.Audio.OpenAL.ALC.GetStringListPtr*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.GetStringListPtr
  isExternal: true
  href: OpenTK.Audio.OpenAL.ALC.html#OpenTK_Audio_OpenAL_ALC_GetStringListPtr_OpenTK_Audio_OpenAL_ALDevice_OpenTK_Audio_OpenAL_GetEnumerationStringList_
  name: GetStringListPtr
  nameWithType: ALC.GetStringListPtr
  fullName: OpenTK.Audio.OpenAL.ALC.GetStringListPtr
- uid: OpenTK.Audio.OpenAL.GetEnumerationStringList
  commentId: T:OpenTK.Audio.OpenAL.GetEnumerationStringList
  parent: OpenTK.Audio.OpenAL
  href: OpenTK.Audio.OpenAL.GetEnumerationStringList.html
  name: GetEnumerationStringList
  nameWithType: GetEnumerationStringList
  fullName: OpenTK.Audio.OpenAL.GetEnumerationStringList
- uid: OpenTK.Audio.OpenAL.ALC.GetStringList*
  commentId: Overload:OpenTK.Audio.OpenAL.ALC.GetStringList
  href: OpenTK.Audio.OpenAL.ALC.html#OpenTK_Audio_OpenAL_ALC_GetStringList_OpenTK_Audio_OpenAL_GetEnumerationStringList_
  name: GetStringList
  nameWithType: ALC.GetStringList
  fullName: OpenTK.Audio.OpenAL.ALC.GetStringList
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<string>
  nameWithType: IEnumerable<string>
  fullName: System.Collections.Generic.IEnumerable<string>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )

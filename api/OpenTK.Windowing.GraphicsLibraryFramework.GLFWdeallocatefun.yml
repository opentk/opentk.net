### YamlMime:ManagedReference
items:
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWdeallocatefun
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.GLFWdeallocatefun
  id: GLFWdeallocatefun
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  children: []
  langs:
  - csharp
  - vb
  name: GLFWdeallocatefun
  nameWithType: GLFWdeallocatefun
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFWdeallocatefun
  type: Delegate
  source:
    id: GLFWdeallocatefun
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFWCallbacks.cs
    startLine: 345
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    The function pointer type for memory deallocation callbacks.


    This is the function pointer type for memory deallocation callbacks.

    A memory deallocation callback function has the following signature:

    @code

    void function_name(void* block, void* user)

    @endcode


    This function may deallocate the specified memory block.This memory block

    will have been allocated with the same allocator.


    This function must support being called during @ref glfwInit but before the library is

    flagged as initialized, as well as during @ref glfwTerminate after the library is no

    longer flagged as initialized.


    The block address will never be `NULL`.  Deallocations of `NULL` are filtered out

    before reaching the custom allocator.


    If this function returns `NULL`, GLFW will emit @ref GLFW_OUT_OF_MEMORY.


    This function must not call any GLFW function.
  remarks: >-
    The specified memory block will not be accessed by GLFW after this function is called.


    This function should not call any GLFW function.


    This function must support being called from any thread that calls GLFW functions.
  example: []
  syntax:
    content: public delegate void GLFWdeallocatefun(void* block, void* user)
    parameters:
    - id: block
      type: System.Void*
      description: The address of the memory block to deallocate.
    - id: user
      type: System.Void*
      description: The user-defined pointer from the allocator.
    content.vb: Public Delegate Sub GLFWdeallocatefun(block As Void*, user As Void*)
references:
- uid: OpenTK.Windowing.GraphicsLibraryFramework
  commentId: N:OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.html
  name: OpenTK.Windowing.GraphicsLibraryFramework
  nameWithType: OpenTK.Windowing.GraphicsLibraryFramework
  fullName: OpenTK.Windowing.GraphicsLibraryFramework
  spec.csharp:
  - uid: OpenTK
    name: OpenTK
    href: OpenTK.html
  - name: .
  - uid: OpenTK.Windowing
    name: Windowing
    href: OpenTK.Windowing.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework
    name: GraphicsLibraryFramework
    href: OpenTK.Windowing.GraphicsLibraryFramework.html
  spec.vb:
  - uid: OpenTK
    name: OpenTK
    href: OpenTK.html
  - name: .
  - uid: OpenTK.Windowing
    name: Windowing
    href: OpenTK.Windowing.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework
    name: GraphicsLibraryFramework
    href: OpenTK.Windowing.GraphicsLibraryFramework.html
- uid: System.Void*
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.void
  name: void*
  nameWithType: void*
  fullName: void*
  nameWithType.vb: Void*
  fullName.vb: Void*
  name.vb: Void*
  spec.csharp:
  - uid: System.Void
    name: void
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.void
  - name: '*'
  spec.vb:
  - uid: System.Void
    name: Void
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.void
  - name: '*'

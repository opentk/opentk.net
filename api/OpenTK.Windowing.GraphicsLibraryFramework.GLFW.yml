### YamlMime:ManagedReference
items:
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  id: GLFW
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  children:
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.AnyPosition
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateCursor(OpenTK.Windowing.GraphicsLibraryFramework.Image@,System.Int32,System.Int32)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateCursorRaw(OpenTK.Windowing.GraphicsLibraryFramework.Image*,System.Int32,System.Int32)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateStandardCursor(OpenTK.Windowing.GraphicsLibraryFramework.CursorShape)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow(System.Int32,System.Int32,System.String,OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindowRaw(System.Int32,System.Int32,System.Byte*,OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindowSurface(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Void*,OpenTK.Windowing.GraphicsLibraryFramework.VkHandle@)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DestroyCursor(OpenTK.Windowing.GraphicsLibraryFramework.Cursor*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DestroyWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DontCare
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ExtensionSupported(System.String)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ExtensionSupportedRaw(System.Byte*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.FocusWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetClipboardStringRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCocoaMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCocoaView(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCocoaWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCurrentContext
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCursorPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Double@,System.Double@)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCursorPosRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Double*,System.Double*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetEGLContext(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetEGLDisplay
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetEGLSurface(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetError(System.String@)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetErrorRaw(System.Byte*@)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetFramebufferSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetFramebufferSizeRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32*,System.Int32*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGLXContext(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGLXWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadName(System.Int32)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadNameRaw(System.Int32)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadState(System.Int32,OpenTK.Windowing.GraphicsLibraryFramework.GamepadState@)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadStateRaw(System.Int32,OpenTK.Windowing.GraphicsLibraryFramework.GamepadState*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGammaRamp(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInstanceProcAddress(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,System.String)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInstanceProcAddressRaw(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,System.Byte*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickAxes(System.Int32)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickAxesRaw(System.Int32,System.Int32*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickAxesRaw(System.Int32,System.Int32@)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickButtons(System.Int32)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickButtonsRaw(System.Int32,System.Int32*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickButtonsRaw(System.Int32,System.Int32@)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickGUID(System.Int32)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickGUIDRaw(System.Int32)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHats(System.Int32)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHatsRaw(System.Int32,System.Int32*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHatsRaw(System.Int32,System.Int32@)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickName(System.Int32)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickNameRaw(System.Int32)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickUserPointer(System.Int32)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKey(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.Keys)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyName(OpenTK.Windowing.GraphicsLibraryFramework.Keys,System.Int32)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyNameRaw(OpenTK.Windowing.GraphicsLibraryFramework.Keys,System.Int32)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyScancode(OpenTK.Windowing.GraphicsLibraryFramework.Keys)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorContentScale(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Single@,System.Single@)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorContentScaleRaw(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Single*,System.Single*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorName(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorNameRaw(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorPhysicalSize(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32@,System.Int32@)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorPos(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32*,System.Int32*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorPos(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32@,System.Int32@)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorUserPointer(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorWorkarea(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32*,System.Int32*,System.Int32*,System.Int32*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorWorkarea(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32@,System.Int32@,System.Int32@,System.Int32@)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitors
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorsRaw(System.Int32*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorsRaw(System.Int32@)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMouseButton(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.MouseButton)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetNSGLContext(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetOSMesaColorBuffer(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@,System.Int32@,System.IntPtr@)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetOSMesaContext(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetOSMesaDepthBuffer(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@,System.Int32@,System.IntPtr@)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPhysicalDevicePresentationSupport(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,System.Int32)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPlatform
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPrimaryMonitor
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetProcAddress(System.String)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetProcAddressRaw(System.Byte*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensions
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensionsRaw(System.UInt32*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensionsRaw(System.UInt32@)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTime
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTimerFrequency
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTimerValue
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersion(System.Int32@,System.Int32@,System.Int32@)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersionString
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersionStringRaw
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoMode(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoModes(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoModesRaw(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoModesRaw(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32@)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWGLContext(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWaylandDisplay
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWaylandMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWaylandWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWin32Adapter(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWin32Monitor(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWin32Window(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetBool)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetClientApi)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetContextApi)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetInt)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetOpenGlProfile)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetReleaseBehavior)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetRobustness)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowContentScale(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Single@,System.Single@)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowFrameSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@,System.Int32@,System.Int32@)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowOpacity(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowPosRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32*,System.Int32*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSizeRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32*,System.Int32*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowTitle(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowTitleRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowUserPointer(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Adapter(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Display
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Monitor(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11SelectionString
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Window(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.HideWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.IconifyWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Init
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitAllocator(OpenTK.Windowing.GraphicsLibraryFramework.GLFWallocator@)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitHint(OpenTK.Windowing.GraphicsLibraryFramework.InitHintANGLEPlatformType,OpenTK.Windowing.GraphicsLibraryFramework.ANGLEPlatformType)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitHint(OpenTK.Windowing.GraphicsLibraryFramework.InitHintBool,System.Boolean)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitHint(OpenTK.Windowing.GraphicsLibraryFramework.InitHintInt,System.Int32)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitHint(OpenTK.Windowing.GraphicsLibraryFramework.InitHintPlatform,OpenTK.Windowing.GraphicsLibraryFramework.Platform)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitVulkanLoader(System.IntPtr)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickIsGamepad(System.Int32)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent(System.Int32)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.MakeContextCurrent(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.MaximizeWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PlatformSupported(OpenTK.Windowing.GraphicsLibraryFramework.Platform)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PollEvents
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PostEmptyEvent
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.RawMouseMotionSupported
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.RequestWindowAttention(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.RestoreWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCharCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharCallback)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCharModsCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharModsCallback)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.String)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetClipboardStringRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Byte*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursor(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.Cursor*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursorEnterCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CursorEnterCallback)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursorPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Double,System.Double)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursorPosCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CursorPosCallback)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetDropCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.DropCallback)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetErrorCallback(OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ErrorCallback)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetFramebufferSizeCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.FramebufferSizeCallback)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetGamma(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Single)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetGammaRamp(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,OpenTK.Windowing.GraphicsLibraryFramework.GammaRamp*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute,OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute,System.Boolean)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute,System.Boolean)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes,System.Boolean)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetJoystickCallback(OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.JoystickCallback)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetJoystickUserPointer(System.Int32,System.Void*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetKeyCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.KeyCallback)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetMonitorCallback(OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MonitorCallback)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetMonitorUserPointer(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Void*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetMouseButtonCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MouseButtonCallback)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetScrollCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ScrollCallback)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetTime(System.Double)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowAspectRatio(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute,System.Boolean)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowCloseCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowCloseCallback)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowContentScaleCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowContentScaleCallback)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowFocusCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowFocusCallback)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIcon(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.ReadOnlySpan{OpenTK.Windowing.GraphicsLibraryFramework.Image})
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIconRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,OpenTK.Windowing.GraphicsLibraryFramework.Image*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIconifyCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowIconifyCallback)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowMaximizeCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowMaximizeCallback)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowOpacity(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Single)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowPosCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowPosCallback)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowRefreshCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowRefreshCallback)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowShouldClose(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Boolean)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSizeCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowSizeCallback)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSizeLimits(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32,System.Int32,System.Int32)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowTitle(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.String)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowTitleRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Byte*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowUserPointer(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Void*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetX11SelectionString(System.String)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ShowWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SwapBuffers(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SwapInterval(System.Int32)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Terminate
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.UpdateGamepadMappings(System.String)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.UpdateGamepadMappingsRaw(System.Byte*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.VulkanSupported
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEvents
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEventsTimeout(System.Double)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool,System.Boolean)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintClientApi,OpenTK.Windowing.GraphicsLibraryFramework.ClientApi)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintContextApi,OpenTK.Windowing.GraphicsLibraryFramework.ContextApi)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintInt,System.Int32)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintOpenGlProfile,OpenTK.Windowing.GraphicsLibraryFramework.OpenGlProfile)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintReleaseBehavior,OpenTK.Windowing.GraphicsLibraryFramework.ReleaseBehavior)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintRobustness,OpenTK.Windowing.GraphicsLibraryFramework.Robustness)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintString,System.String)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHintRaw(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintString,System.Byte*)
  - OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowShouldClose(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  langs:
  - csharp
  - vb
  name: GLFW
  nameWithType: GLFW
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  type: Class
  source:
    id: GLFW
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 20
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    Provides access to the GLFW API.

    On Linux to use GLFW compiled for Wayland set the environment variable <code>OPENTK_4_USE_WAYLAND=1</code>.
  example: []
  syntax:
    content: public static class GLFW
    content.vb: Public Module GLFW
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DontCare
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DontCare
  id: DontCare
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: DontCare
  nameWithType: GLFW.DontCare
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DontCare
  type: Field
  source:
    id: DontCare
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 28
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Gets an integer equal to GLFW_DONT_CARE. This can be used for several window hints to use the platform default.
  example: []
  syntax:
    content: public const int DontCare = -1
    return:
      type: System.Int32
    content.vb: Public Const DontCare As Integer = -1
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.AnyPosition
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.AnyPosition
  id: AnyPosition
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: AnyPosition
  nameWithType: GLFW.AnyPosition
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.AnyPosition
  type: Field
  source:
    id: AnyPosition
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 30
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  syntax:
    content: public const int AnyPosition = -2147483648
    return:
      type: System.Int32
    content.vb: Public Const AnyPosition As Integer = -2147483648
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Init
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Init
  id: Init
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: Init()
  nameWithType: GLFW.Init()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Init()
  type: Method
  source:
    id: Init
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 62
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function initializes the GLFW library. Before most GLFW functions can be used,

    GLFW must be initialized, and before an application terminates GLFW should be terminated in order to

    free any resources allocated during or after initialization.

    </p>

    <p>

    If this function fails, it calls <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Terminate" data-throw-if-not-resolved="false"></xref> before returning.

    </p>

    <p>

    If it succeeds, you should call <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Terminate" data-throw-if-not-resolved="false"></xref> before the application exits.

    </p>

    <p>

    Additional calls to this function after successful initialization

    but before termination will return <code>true</code> immediately.

    </p>
  remarks: >-
    <p>

    OS X: This function will change the current directory of the application

    to the Contents/Resources subdirectory of the application's bundle, if present.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static bool Init()
    return:
      type: System.Boolean
      description: <code>true</code> if successful, or <code>false</code> if an error occurred.
    content.vb: Public Shared Function Init() As Boolean
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Init*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Terminate
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Terminate
  id: Terminate
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: Terminate()
  nameWithType: GLFW.Terminate()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Terminate()
  type: Method
  source:
    id: Terminate
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 95
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function destroys all remaining windows and cursors, restores any modified gamma ramps

    and frees any other allocated resources. Once this function is called,

    you must again call <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Init" data-throw-if-not-resolved="false"></xref> successfully before you will be able to use most GLFW functions.

    </p>

    <p>

    If GLFW has been successfully initialized, this function should be called before the application exits.

    </p>

    <p>

    If initialization fails, there is no need to call this function,

    as it is called by <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Init" data-throw-if-not-resolved="false"></xref> before it returns failure.

    </p>
  remarks: >-
    <p>

    The contexts of any remaining windows must not be current on any other thread when this function is called.

    </p>

    <p>

    This function may be called before <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Init" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    This function must not be called from a callback.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void Terminate()
    content.vb: Public Shared Sub Terminate()
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Terminate*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitHint(OpenTK.Windowing.GraphicsLibraryFramework.InitHintBool,System.Boolean)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitHint(OpenTK.Windowing.GraphicsLibraryFramework.InitHintBool,System.Boolean)
  id: InitHint(OpenTK.Windowing.GraphicsLibraryFramework.InitHintBool,System.Boolean)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: InitHint(InitHintBool, bool)
  nameWithType: GLFW.InitHint(InitHintBool, bool)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitHint(OpenTK.Windowing.GraphicsLibraryFramework.InitHintBool, bool)
  type: Method
  source:
    id: InitHint
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 126
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets hints for the next initialization of GLFW.

    </p>

    <p>

    The values you set hints to are never reset by GLFW, but they only take effect during initialization.

    </p>

    <p>

    Once GLFW has been initialized,

    any values you set will be ignored until the library is terminated and initialized again.

    </p>

    <p>Some hints are platform specific.

    These may be set on any platform but they will only affect their specific platform.

    Other platforms will ignore them. Setting these hints requires no platform specific headers or functions.

    </p>
  remarks: >-
    <p>

    This function may be called before <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Init" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidValue" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void InitHint(InitHintBool hintBool, bool value)
    parameters:
    - id: hintBool
      type: OpenTK.Windowing.GraphicsLibraryFramework.InitHintBool
      description: The <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InitHintBool" data-throw-if-not-resolved="false"></xref> to set.
    - id: value
      type: System.Boolean
      description: The new value of the <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InitHintBool" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Sub InitHint(hintBool As InitHintBool, value As Boolean)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitHint*
  nameWithType.vb: GLFW.InitHint(InitHintBool, Boolean)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitHint(OpenTK.Windowing.GraphicsLibraryFramework.InitHintBool, Boolean)
  name.vb: InitHint(InitHintBool, Boolean)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitHint(OpenTK.Windowing.GraphicsLibraryFramework.InitHintInt,System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitHint(OpenTK.Windowing.GraphicsLibraryFramework.InitHintInt,System.Int32)
  id: InitHint(OpenTK.Windowing.GraphicsLibraryFramework.InitHintInt,System.Int32)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: InitHint(InitHintInt, int)
  nameWithType: GLFW.InitHint(InitHintInt, int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitHint(OpenTK.Windowing.GraphicsLibraryFramework.InitHintInt, int)
  type: Method
  source:
    id: InitHint
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 158
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets hints for the next initialization of GLFW.

    </p>

    <p>

    The values you set hints to are never reset by GLFW, but they only take effect during initialization.

    </p>

    <p>

    Once GLFW has been initialized,

    any values you set will be ignored until the library is terminated and initialized again.

    </p>

    <p>Some hints are platform specific.

    These may be set on any platform but they will only affect their specific platform.

    Other platforms will ignore them. Setting these hints requires no platform specific headers or functions.

    </p>
  remarks: >-
    <p>

    This function may be called before <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Init" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidValue" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void InitHint(InitHintInt hintInt, int value)
    parameters:
    - id: hintInt
      type: OpenTK.Windowing.GraphicsLibraryFramework.InitHintInt
      description: The <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InitHintInt" data-throw-if-not-resolved="false"></xref> to set.
    - id: value
      type: System.Int32
      description: The new value of the <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InitHintInt" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Sub InitHint(hintInt As InitHintInt, value As Integer)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitHint*
  nameWithType.vb: GLFW.InitHint(InitHintInt, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitHint(OpenTK.Windowing.GraphicsLibraryFramework.InitHintInt, Integer)
  name.vb: InitHint(InitHintInt, Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitHint(OpenTK.Windowing.GraphicsLibraryFramework.InitHintPlatform,OpenTK.Windowing.GraphicsLibraryFramework.Platform)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitHint(OpenTK.Windowing.GraphicsLibraryFramework.InitHintPlatform,OpenTK.Windowing.GraphicsLibraryFramework.Platform)
  id: InitHint(OpenTK.Windowing.GraphicsLibraryFramework.InitHintPlatform,OpenTK.Windowing.GraphicsLibraryFramework.Platform)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: InitHint(InitHintPlatform, Platform)
  nameWithType: GLFW.InitHint(InitHintPlatform, Platform)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitHint(OpenTK.Windowing.GraphicsLibraryFramework.InitHintPlatform, OpenTK.Windowing.GraphicsLibraryFramework.Platform)
  type: Method
  source:
    id: InitHint
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 189
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets hints for the next initialization of GLFW.

    </p>

    <p>

    The values you set hints to are never reset by GLFW, but they only take effect during initialization.

    </p>

    <p>

    Once GLFW has been initialized,

    any values you set will be ignored until the library is terminated and initialized again.

    </p>

    <p>Some hints are platform specific.

    These may be set on any platform but they will only affect their specific platform.

    Other platforms will ignore them. Setting these hints requires no platform specific headers or functions.

    </p>
  remarks: >-
    <p>

    This function may be called before <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Init" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidValue" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void InitHint(InitHintPlatform hintInt, Platform value)
    parameters:
    - id: hintInt
      type: OpenTK.Windowing.GraphicsLibraryFramework.InitHintPlatform
      description: The <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InitHintPlatform" data-throw-if-not-resolved="false"></xref> to set.
    - id: value
      type: OpenTK.Windowing.GraphicsLibraryFramework.Platform
      description: The new value of the <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InitHintPlatform" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Sub InitHint(hintInt As InitHintPlatform, value As Platform)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitHint*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitHint(OpenTK.Windowing.GraphicsLibraryFramework.InitHintANGLEPlatformType,OpenTK.Windowing.GraphicsLibraryFramework.ANGLEPlatformType)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitHint(OpenTK.Windowing.GraphicsLibraryFramework.InitHintANGLEPlatformType,OpenTK.Windowing.GraphicsLibraryFramework.ANGLEPlatformType)
  id: InitHint(OpenTK.Windowing.GraphicsLibraryFramework.InitHintANGLEPlatformType,OpenTK.Windowing.GraphicsLibraryFramework.ANGLEPlatformType)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: InitHint(InitHintANGLEPlatformType, ANGLEPlatformType)
  nameWithType: GLFW.InitHint(InitHintANGLEPlatformType, ANGLEPlatformType)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitHint(OpenTK.Windowing.GraphicsLibraryFramework.InitHintANGLEPlatformType, OpenTK.Windowing.GraphicsLibraryFramework.ANGLEPlatformType)
  type: Method
  source:
    id: InitHint
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 220
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets hints for the next initialization of GLFW.

    </p>

    <p>

    The values you set hints to are never reset by GLFW, but they only take effect during initialization.

    </p>

    <p>

    Once GLFW has been initialized,

    any values you set will be ignored until the library is terminated and initialized again.

    </p>

    <p>Some hints are platform specific.

    These may be set on any platform but they will only affect their specific platform.

    Other platforms will ignore them. Setting these hints requires no platform specific headers or functions.

    </p>
  remarks: >-
    <p>

    This function may be called before <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Init" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidValue" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void InitHint(InitHintANGLEPlatformType hintInt, ANGLEPlatformType value)
    parameters:
    - id: hintInt
      type: OpenTK.Windowing.GraphicsLibraryFramework.InitHintANGLEPlatformType
      description: The <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InitHintANGLEPlatformType" data-throw-if-not-resolved="false"></xref> to set.
    - id: value
      type: OpenTK.Windowing.GraphicsLibraryFramework.ANGLEPlatformType
      description: The new value of the <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InitHintANGLEPlatformType" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Sub InitHint(hintInt As InitHintANGLEPlatformType, value As ANGLEPlatformType)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitHint*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitAllocator(OpenTK.Windowing.GraphicsLibraryFramework.GLFWallocator@)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitAllocator(OpenTK.Windowing.GraphicsLibraryFramework.GLFWallocator@)
  id: InitAllocator(OpenTK.Windowing.GraphicsLibraryFramework.GLFWallocator@)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: InitAllocator(ref GLFWallocator)
  nameWithType: GLFW.InitAllocator(ref GLFWallocator)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitAllocator(ref OpenTK.Windowing.GraphicsLibraryFramework.GLFWallocator)
  type: Method
  source:
    id: InitAllocator
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 232
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    To use the default allocator, call this function with a NULL argument.


    If you specify an allocator struct, every member must be a valid function pointer.

    If any member is NULL, this function will emit GLFW_INVALID_VALUE and the init allocator will be unchanged.


    The functions in the allocator must fulfill a number of requirements.

    See the documentation for <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFWallocatefun" data-throw-if-not-resolved="false"></xref> , <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFWreallocatefun" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFWdeallocatefun" data-throw-if-not-resolved="false"></xref> for details.
  example: []
  syntax:
    content: public static void InitAllocator(ref GLFWallocator allocator)
    parameters:
    - id: allocator
      type: OpenTK.Windowing.GraphicsLibraryFramework.GLFWallocator
      description: The allocator to use at the next initialization, or <xref href="System.Runtime.CompilerServices.Unsafe.NullRef%60%601" data-throw-if-not-resolved="false"></xref> to use the default one.
    content.vb: Public Shared Sub InitAllocator(allocator As GLFWallocator)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitAllocator*
  nameWithType.vb: GLFW.InitAllocator(GLFWallocator)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitAllocator(OpenTK.Windowing.GraphicsLibraryFramework.GLFWallocator)
  name.vb: InitAllocator(GLFWallocator)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitVulkanLoader(System.IntPtr)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitVulkanLoader(System.IntPtr)
  id: InitVulkanLoader(System.IntPtr)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: InitVulkanLoader(nint)
  nameWithType: GLFW.InitVulkanLoader(nint)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitVulkanLoader(nint)
  type: Method
  source:
    id: InitVulkanLoader
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 251
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    This function sets the vkGetInstanceProcAddr function that GLFW will use for all Vulkan related entry point queries.


    This feature is mostly useful on macOS,

    if your copy of the Vulkan loader is in a location where GLFW cannot find it through dynamic loading,

    or if you are still using the static library version of the loader.


    If set to NULL, GLFW will try to load the Vulkan loader dynamically by its standard name and get this function from there.

    This is the default behavior.


    The standard name of the loader is vulkan-1.dll on Windows, libvulkan.so.1 on Linux and other Unix-like systems and libvulkan.1.dylib on macOS.

    If your code is also loading it via these names then you probably don't need to use this function.


    The function address you set is never reset by GLFW, but it only takes effect during initialization.

    Once GLFW has been initialized, any updates will be ignored until the library is terminated and initialized again.
  example: []
  syntax:
    content: public static void InitVulkanLoader(nint loader)
    parameters:
    - id: loader
      type: System.IntPtr
      description: The address of the function to use, or NULL.
    content.vb: Public Shared Sub InitVulkanLoader(loader As IntPtr)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitVulkanLoader*
  nameWithType.vb: GLFW.InitVulkanLoader(IntPtr)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitVulkanLoader(System.IntPtr)
  name.vb: InitVulkanLoader(IntPtr)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersion(System.Int32@,System.Int32@,System.Int32@)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersion(System.Int32@,System.Int32@,System.Int32@)
  id: GetVersion(System.Int32@,System.Int32@,System.Int32@)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetVersion(out int, out int, out int)
  nameWithType: GLFW.GetVersion(out int, out int, out int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersion(out int, out int, out int)
  type: Method
  source:
    id: GetVersion
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 274
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function retrieves the major, minor and revision numbers of the GLFW library.

    It is intended for when you are using GLFW

    as a shared library and want to ensure that you are using the minimum required version.

    </p>

    <p>

    Any or all of the version arguments may be <code>out _</code>.

    </p>
  remarks: >-
    <p>

    This function may be called before <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Init" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    This function may be called from any thread.

    </p>
  example: []
  syntax:
    content: public static void GetVersion(out int major, out int minor, out int revision)
    parameters:
    - id: major
      type: System.Int32
      description: Where to store the major version number, or <code>out _</code>.
    - id: minor
      type: System.Int32
      description: Where to store the minor version number, or <code>out _</code>.
    - id: revision
      type: System.Int32
      description: Where to store the revision number, or <code>out _</code>.
    content.vb: Public Shared Sub GetVersion(major As Integer, minor As Integer, revision As Integer)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersion*
  nameWithType.vb: GLFW.GetVersion(Integer, Integer, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersion(Integer, Integer, Integer)
  name.vb: GetVersion(Integer, Integer, Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersionString
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersionString
  id: GetVersionString
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetVersionString()
  nameWithType: GLFW.GetVersionString()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersionString()
  type: Method
  source:
    id: GetVersionString
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 307
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the compile-time generated version string of the GLFW library binary.

    It describes the version, platform, compiler and any platform-specific compile-time options.

    It should not be confused with the OpenGL or OpenGL ES version string, queried with <code>glGetString</code>.

    </p>

    <p>

    Do not use the version string to parse the GLFW library version.

    The <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersion(System.Int32%40%2cSystem.Int32%40%2cSystem.Int32%40)" data-throw-if-not-resolved="false"></xref> function provides the version of the running library binary in numerical format.

    </p>
  remarks: >-
    <p>

    This function may be called before <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Init" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    The returned string is static and compile-time generated.

    </p>

    <p>

    This function may be called from any thread.

    </p>
  example: []
  syntax:
    content: public static string GetVersionString()
    return:
      type: System.String
      description: The ASCII-encoded GLFW version string.
    content.vb: Public Shared Function GetVersionString() As String
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersionString*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersion(System.Int32@,System.Int32@,System.Int32@)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersion(System.Int32@,System.Int32@,System.Int32@)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersionStringRaw
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersionStringRaw
  id: GetVersionStringRaw
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetVersionStringRaw()
  nameWithType: GLFW.GetVersionStringRaw()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersionStringRaw()
  type: Method
  source:
    id: GetVersionStringRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 336
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the compile-time generated version string of the GLFW library binary.

    It describes the version, platform, compiler and any platform-specific compile-time options.

    It should not be confused with the OpenGL or OpenGL ES version string, queried with <code>glGetString</code>.

    </p>

    <p>

    Do not use the version string to parse the GLFW library version.

    The <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersion(System.Int32%40%2cSystem.Int32%40%2cSystem.Int32%40)" data-throw-if-not-resolved="false"></xref> function provides the version of the running library binary in numerical format.

    </p>
  remarks: >-
    <p>

    This function may be called before <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Init" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    The returned string is static and compile-time generated.

    </p>

    <p>

    This function may be called from any thread.

    </p>
  example: []
  syntax:
    content: public static byte* GetVersionStringRaw()
    return:
      type: System.Byte*
      description: The ASCII-encoded GLFW version string.
    content.vb: Public Shared Function GetVersionStringRaw() As Byte*
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersionStringRaw*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersion(System.Int32@,System.Int32@,System.Int32@)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersion(System.Int32@,System.Int32@,System.Int32@)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetError(System.String@)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetError(System.String@)
  id: GetError(System.String@)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetError(out string)
  nameWithType: GLFW.GetError(out string)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetError(out string)
  type: Method
  source:
    id: GetError
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 366
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns and clears the error code of the last error that occurred on the calling thread,

    and optionally a UTF-8 encoded human-readable description of it.

    </p>

    <p>

    If no error has occurred since the last call,

    it returns <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NoError" data-throw-if-not-resolved="false"></xref> (zero) and the description pointer is set to <code>null</code>.

    </p>
  remarks: >-
    <p>

    The returned string is allocated and freed by GLFW. You should not free it yourself.

    It is only guaranteed to be valid until the next error occurs or the library is terminated.

    </p>

    <p>

    This function may be called before <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Init" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    This function may be called from any thread.

    </p>
  example: []
  syntax:
    content: public static ErrorCode GetError(out string description)
    parameters:
    - id: description
      type: System.String
      description: Where to store the error description pointer, or <code>out _</code>"/&gt;.
    return:
      type: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode
      description: The last error code for the calling thread, or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NoError" data-throw-if-not-resolved="false"></xref> (zero).
    content.vb: Public Shared Function GetError(description As String) As ErrorCode
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetError*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetErrorCallback(OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ErrorCallback)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetErrorCallback(OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ErrorCallback)
  nameWithType.vb: GLFW.GetError(String)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetError(String)
  name.vb: GetError(String)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetErrorRaw(System.Byte*@)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetErrorRaw(System.Byte*@)
  id: GetErrorRaw(System.Byte*@)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetErrorRaw(out byte*)
  nameWithType: GLFW.GetErrorRaw(out byte*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetErrorRaw(out byte*)
  type: Method
  source:
    id: GetErrorRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 399
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns and clears the error code of the last error that occurred on the calling thread,

    and optionally a UTF-8 encoded human-readable description of it.

    </p>

    <p>

    If no error has occurred since the last call,

    it returns <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NoError" data-throw-if-not-resolved="false"></xref> (zero) and the description pointer is set to <code>null</code>.

    </p>
  remarks: >-
    <p>

    The returned string is allocated and freed by GLFW. You should not free it yourself.

    It is only guaranteed to be valid until the next error occurs or the library is terminated.

    </p>

    <p>

    This function may be called before <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Init" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    This function may be called from any thread.

    </p>
  example: []
  syntax:
    content: public static ErrorCode GetErrorRaw(out byte* description)
    parameters:
    - id: description
      type: System.Byte*
      description: Where to store the error description pointer, or <code>out _</code>"/&gt;.
    return:
      type: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode
      description: The last error code for the calling thread, or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NoError" data-throw-if-not-resolved="false"></xref> (zero).
    content.vb: Public Shared Function GetErrorRaw(description As Byte*) As ErrorCode
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetErrorRaw*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetErrorCallback(OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ErrorCallback)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetErrorCallback(OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ErrorCallback)
  nameWithType.vb: GLFW.GetErrorRaw(Byte*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetErrorRaw(Byte*)
  name.vb: GetErrorRaw(Byte*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPlatform
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPlatform
  id: GetPlatform
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetPlatform()
  nameWithType: GLFW.GetPlatform()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPlatform()
  type: Method
  source:
    id: GetPlatform
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 412
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    This function returns the platform that was selected during initialization.

    The returned value will be one of <xref href="OpenTK.Windowing.GraphicsLibraryFramework.Platform.Win32" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.Platform.Cocoa" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.Platform.Wayland" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.Platform.X11" data-throw-if-not-resolved="false"></xref> or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.Platform.Null" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static Platform GetPlatform()
    return:
      type: OpenTK.Windowing.GraphicsLibraryFramework.Platform
      description: The currently selected platform, or zero if an error occurred.
    content.vb: Public Shared Function GetPlatform() As Platform
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPlatform*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PlatformSupported(OpenTK.Windowing.GraphicsLibraryFramework.Platform)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PlatformSupported(OpenTK.Windowing.GraphicsLibraryFramework.Platform)
  id: PlatformSupported(OpenTK.Windowing.GraphicsLibraryFramework.Platform)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: PlatformSupported(Platform)
  nameWithType: GLFW.PlatformSupported(Platform)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PlatformSupported(OpenTK.Windowing.GraphicsLibraryFramework.Platform)
  type: Method
  source:
    id: PlatformSupported
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 420
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    This function returns whether the library was compiled with support for the specified platform.

    The platform must be one of <xref href="OpenTK.Windowing.GraphicsLibraryFramework.Platform.Win32" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.Platform.Cocoa" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.Platform.Wayland" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.Platform.X11" data-throw-if-not-resolved="false"></xref> or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.Platform.Null" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static bool PlatformSupported(Platform platform)
    parameters:
    - id: platform
      type: OpenTK.Windowing.GraphicsLibraryFramework.Platform
      description: The platform to query.
    return:
      type: System.Boolean
      description: <code>true</code> if the platform is supported, or <code>false</code> otherwise.
    content.vb: Public Shared Function PlatformSupported(platform As Platform) As Boolean
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PlatformSupported*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorsRaw(System.Int32@)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorsRaw(System.Int32@)
  id: GetMonitorsRaw(System.Int32@)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetMonitorsRaw(out int)
  nameWithType: GLFW.GetMonitorsRaw(out int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorsRaw(out int)
  type: Method
  source:
    id: GetMonitorsRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 450
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns an array of handles for all currently connected monitors.

    The primary monitor is always first in the returned array.

    </p>

    <p>

    If no monitors were found, this function returns <code>null</code>.

    </p>
  remarks: >-
    <p>

    The returned array is allocated and freed by GLFW. You should not free it yourself.

    It is only guaranteed to be valid until the monitor configuration changes or the library is terminated.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static Monitor** GetMonitorsRaw(out int count)
    parameters:
    - id: count
      type: System.Int32
      description: Where to store the number of monitors in the returned array. This is set to zero if an error occurred.
    return:
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor**
      description: An array of monitor handles, or <code>null</code> if no monitors were found or if an error occurred.
    content.vb: Public Shared Function GetMonitorsRaw(count As Integer) As Monitor**
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorsRaw*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPrimaryMonitor
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPrimaryMonitor
  nameWithType.vb: GLFW.GetMonitorsRaw(Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorsRaw(Integer)
  name.vb: GetMonitorsRaw(Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorsRaw(System.Int32*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorsRaw(System.Int32*)
  id: GetMonitorsRaw(System.Int32*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetMonitorsRaw(int*)
  nameWithType: GLFW.GetMonitorsRaw(int*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorsRaw(int*)
  type: Method
  source:
    id: GetMonitorsRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 486
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns an array of handles for all currently connected monitors.

    The primary monitor is always first in the returned array.

    </p>

    <p>

    If no monitors were found, this function returns <code>null</code>.

    </p>
  remarks: >-
    <p>

    The returned array is allocated and freed by GLFW. You should not free it yourself.

    It is only guaranteed to be valid until the monitor configuration changes or the library is terminated.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static Monitor** GetMonitorsRaw(int* count)
    parameters:
    - id: count
      type: System.Int32*
      description: Where to store the number of monitors in the returned array. This is set to zero if an error occurred.
    return:
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor**
      description: An array of monitor handles, or <code>null</code> if no monitors were found or if an error occurred.
    content.vb: Public Shared Function GetMonitorsRaw(count As Integer*) As Monitor**
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorsRaw*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPrimaryMonitor
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPrimaryMonitor
  nameWithType.vb: GLFW.GetMonitorsRaw(Integer*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorsRaw(Integer*)
  name.vb: GetMonitorsRaw(Integer*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitors
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitors
  id: GetMonitors
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetMonitors()
  nameWithType: GLFW.GetMonitors()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitors()
  type: Method
  source:
    id: GetMonitors
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 516
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns an array of handles for all currently connected monitors.

    The primary monitor is always first in the returned array.

    </p>

    <p>

    If no monitors were found, this function returns <code>null</code>.

    </p>
  remarks: >-
    <p>

    The returned array is allocated and freed by GLFW. You should not free it yourself.

    It is only guaranteed to be valid until the monitor configuration changes or the library is terminated.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static Monitor*[] GetMonitors()
    return:
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*[]
      description: An array of monitor handles, or <code>null</code> if no monitors were found or if an error occurred.
    content.vb: Public Shared Function GetMonitors() As Monitor*()
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitors*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPrimaryMonitor
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPrimaryMonitor
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorPos(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32@,System.Int32@)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorPos(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32@,System.Int32@)
  id: GetMonitorPos(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32@,System.Int32@)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetMonitorPos(Monitor*, out int, out int)
  nameWithType: GLFW.GetMonitorPos(Monitor*, out int, out int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorPos(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, out int, out int)
  type: Method
  source:
    id: GetMonitorPos
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 551
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the position, in screen coordinates, of the upper-left corner of the specified monitor.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void GetMonitorPos(Monitor* monitor, out int x, out int y)
    parameters:
    - id: monitor
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*
      description: The monitor to query.
    - id: x
      type: System.Int32
      description: Where to store the monitor x-coordinate, or <code>out _</code>.
    - id: y
      type: System.Int32
      description: Where to store the monitor y-coordinate, or <code>out _</code>.
    content.vb: Public Shared Sub GetMonitorPos(monitor As Monitor*, x As Integer, y As Integer)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorPos*
  nameWithType.vb: GLFW.GetMonitorPos(Monitor*, Integer, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorPos(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, Integer, Integer)
  name.vb: GetMonitorPos(Monitor*, Integer, Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorPos(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32*,System.Int32*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorPos(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32*,System.Int32*)
  id: GetMonitorPos(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32*,System.Int32*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetMonitorPos(Monitor*, int*, int*)
  nameWithType: GLFW.GetMonitorPos(Monitor*, int*, int*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorPos(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, int*, int*)
  type: Method
  source:
    id: GetMonitorPos
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 577
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the position, in screen coordinates, of the upper-left corner of the specified monitor.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void GetMonitorPos(Monitor* monitor, int* x, int* y)
    parameters:
    - id: monitor
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*
      description: The monitor to query.
    - id: x
      type: System.Int32*
      description: Where to store the monitor x-coordinate.
    - id: y
      type: System.Int32*
      description: Where to store the monitor y-coordinate.
    content.vb: Public Shared Sub GetMonitorPos(monitor As Monitor*, x As Integer*, y As Integer*)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorPos*
  nameWithType.vb: GLFW.GetMonitorPos(Monitor*, Integer*, Integer*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorPos(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, Integer*, Integer*)
  name.vb: GetMonitorPos(Monitor*, Integer*, Integer*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorWorkarea(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32@,System.Int32@,System.Int32@,System.Int32@)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorWorkarea(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32@,System.Int32@,System.Int32@,System.Int32@)
  id: GetMonitorWorkarea(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32@,System.Int32@,System.Int32@,System.Int32@)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetMonitorWorkarea(Monitor*, out int, out int, out int, out int)
  nameWithType: GLFW.GetMonitorWorkarea(Monitor*, out int, out int, out int, out int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorWorkarea(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, out int, out int, out int, out int)
  type: Method
  source:
    id: GetMonitorWorkarea
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 608
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the position, in screen coordinates, of the upper-left corner of the work area of the specified monitor along with the work area size in screen coordinates.

    The work area is defined as the area of the monitor not occluded by the operating system task bar where present.

    If no task bar exists then the work area is the monitor resolution in screen coordinates.

    </p>

    <p>

    Any or all of the position and size arguments may be NULL. If an error occurs, all non-NULL position and size arguments will be set to zero.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include GLFW_NOT_INITIALIZED and GLFW_PLATFORM_ERROR.

    </p>

    <p>

    Added in version GLFW 3.3.

    </p>
  example: []
  syntax:
    content: public static void GetMonitorWorkarea(Monitor* monitor, out int x, out int y, out int width, out int height)
    parameters:
    - id: monitor
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*
      description: The monitor to query.
    - id: x
      type: System.Int32
      description: Where to store the monitor x-coordinate.
    - id: y
      type: System.Int32
      description: Where to store the monitor y-coordinate.
    - id: width
      type: System.Int32
      description: Where to store the monitor width.
    - id: height
      type: System.Int32
      description: Where to store the monitor height.
    content.vb: Public Shared Sub GetMonitorWorkarea(monitor As Monitor*, x As Integer, y As Integer, width As Integer, height As Integer)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorWorkarea*
  nameWithType.vb: GLFW.GetMonitorWorkarea(Monitor*, Integer, Integer, Integer, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorWorkarea(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, Integer, Integer, Integer, Integer)
  name.vb: GetMonitorWorkarea(Monitor*, Integer, Integer, Integer, Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorWorkarea(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32*,System.Int32*,System.Int32*,System.Int32*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorWorkarea(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32*,System.Int32*,System.Int32*,System.Int32*)
  id: GetMonitorWorkarea(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32*,System.Int32*,System.Int32*,System.Int32*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetMonitorWorkarea(Monitor*, int*, int*, int*, int*)
  nameWithType: GLFW.GetMonitorWorkarea(Monitor*, int*, int*, int*, int*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorWorkarea(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, int*, int*, int*, int*)
  type: Method
  source:
    id: GetMonitorWorkarea
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 646
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the position, in screen coordinates, of the upper-left corner of the work area of the specified monitor along with the work area size in screen coordinates.

    The work area is defined as the area of the monitor not occluded by the operating system task bar where present.

    If no task bar exists then the work area is the monitor resolution in screen coordinates.

    </p>

    <p>

    Any or all of the position and size arguments may be NULL. If an error occurs, all non-NULL position and size arguments will be set to zero.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include GLFW_NOT_INITIALIZED and GLFW_PLATFORM_ERROR.

    </p>

    <p>

    Added in version GLFW 3.3.

    </p>
  example: []
  syntax:
    content: public static void GetMonitorWorkarea(Monitor* monitor, int* x, int* y, int* width, int* height)
    parameters:
    - id: monitor
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*
      description: The monitor to query.
    - id: x
      type: System.Int32*
      description: Where to store the monitor x-coordinate, or NULL.
    - id: y
      type: System.Int32*
      description: Where to store the monitor y-coordinate, or NULL.
    - id: width
      type: System.Int32*
      description: Where to store the monitor width, or NULL.
    - id: height
      type: System.Int32*
      description: Where to store the monitor height, or NULL.
    content.vb: Public Shared Sub GetMonitorWorkarea(monitor As Monitor*, x As Integer*, y As Integer*, width As Integer*, height As Integer*)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorWorkarea*
  nameWithType.vb: GLFW.GetMonitorWorkarea(Monitor*, Integer*, Integer*, Integer*, Integer*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorWorkarea(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, Integer*, Integer*, Integer*, Integer*)
  name.vb: GetMonitorWorkarea(Monitor*, Integer*, Integer*, Integer*, Integer*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorPhysicalSize(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32@,System.Int32@)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorPhysicalSize(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32@,System.Int32@)
  id: GetMonitorPhysicalSize(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32@,System.Int32@)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetMonitorPhysicalSize(Monitor*, out int, out int)
  nameWithType: GLFW.GetMonitorPhysicalSize(Monitor*, out int, out int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorPhysicalSize(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, out int, out int)
  type: Method
  source:
    id: GetMonitorPhysicalSize
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 684
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the size, in millimetres, of the display area of the specified monitor.

    </p>

    <p>

    Some systems do not provide accurate monitor size information,

    either because the monitor EDID(Extended Display Identification Data) data is incorrect

    or because the driver does not report it accurately.

    </p>

    <p>

    Any or all of the size arguments may be <code>out _</code>.

    If an error occurs, all non-<code>out _</code> size arguments will be set to zero.

    </p>
  remarks: >-
    <p>

    Windows: calculates the returned physical size from the current resolution
             and system DPI instead of querying the monitor EDID data.
    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void GetMonitorPhysicalSize(Monitor* monitor, out int width, out int height)
    parameters:
    - id: monitor
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*
      description: The monitor to query.
    - id: width
      type: System.Int32
      description: Where to store the width, in millimetres, of the monitor's display area, or <code>out _</code>.
    - id: height
      type: System.Int32
      description: Where to store the height, in millimetres, of the monitor's display area, or <code>out _</code>.
    content.vb: Public Shared Sub GetMonitorPhysicalSize(monitor As Monitor*, width As Integer, height As Integer)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorPhysicalSize*
  nameWithType.vb: GLFW.GetMonitorPhysicalSize(Monitor*, Integer, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorPhysicalSize(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, Integer, Integer)
  name.vb: GetMonitorPhysicalSize(Monitor*, Integer, Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorContentScale(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Single@,System.Single@)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorContentScale(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Single@,System.Single@)
  id: GetMonitorContentScale(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Single@,System.Single@)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetMonitorContentScale(Monitor*, out float, out float)
  nameWithType: GLFW.GetMonitorContentScale(Monitor*, out float, out float)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorContentScale(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, out float, out float)
  type: Method
  source:
    id: GetMonitorContentScale
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 714
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>
     This function retrieves the content scale for the specified monitor.
     </p>
    <p>
     The content scale is the ratio between the current DPI and the platform's default DPI.
     </p>
    <p>
     If you scale all pixel dimensions by this scale then your content should appear at an appropriate size.
     This is especially important for text and any UI elements.
     </p>
    <p>
     The content scale may depend on both the monitor resolution and pixel density and on user settings.
     It may be very different from the raw DPI calculated from the physical size and current resolution.
     </p>
  example: []
  syntax:
    content: public static void GetMonitorContentScale(Monitor* monitor, out float xScale, out float yScale)
    parameters:
    - id: monitor
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*
      description: The monitor to query.
    - id: xScale
      type: System.Single
      description: Where to store the x-axis content scale, or <code>out _</code>.
    - id: yScale
      type: System.Single
      description: Where to store the y-axis content scale, or <code>out _</code>.
    content.vb: Public Shared Sub GetMonitorContentScale(monitor As Monitor*, xScale As Single, yScale As Single)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorContentScale*
  nameWithType.vb: GLFW.GetMonitorContentScale(Monitor*, Single, Single)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorContentScale(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, Single, Single)
  name.vb: GetMonitorContentScale(Monitor*, Single, Single)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorContentScaleRaw(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Single*,System.Single*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorContentScaleRaw(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Single*,System.Single*)
  id: GetMonitorContentScaleRaw(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Single*,System.Single*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetMonitorContentScaleRaw(Monitor*, float*, float*)
  nameWithType: GLFW.GetMonitorContentScaleRaw(Monitor*, float*, float*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorContentScaleRaw(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, float*, float*)
  type: Method
  source:
    id: GetMonitorContentScaleRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 744
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>
     This function retrieves the content scale for the specified monitor.
     </p>
    <p>
     The content scale is the ratio between the current DPI and the platform's default DPI.
     </p>
    <p>
     If you scale all pixel dimensions by this scale then your content should appear at an appropriate size.
     This is especially important for text and any UI elements.
     </p>
    <p>
     The content scale may depend on both the monitor resolution and pixel density and on user settings.
     It may be very different from the raw DPI calculated from the physical size and current resolution.
     </p>
  example: []
  syntax:
    content: public static void GetMonitorContentScaleRaw(Monitor* monitor, float* xScale, float* yScale)
    parameters:
    - id: monitor
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*
      description: The monitor to query.
    - id: xScale
      type: System.Single*
      description: Where to store the x-axis content scale, or <code>out _</code>.
    - id: yScale
      type: System.Single*
      description: Where to store the y-axis content scale, or <code>out _</code>.
    content.vb: Public Shared Sub GetMonitorContentScaleRaw(monitor As Monitor*, xScale As Single*, yScale As Single*)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorContentScaleRaw*
  nameWithType.vb: GLFW.GetMonitorContentScaleRaw(Monitor*, Single*, Single*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorContentScaleRaw(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, Single*, Single*)
  name.vb: GetMonitorContentScaleRaw(Monitor*, Single*, Single*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorName(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorName(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  id: GetMonitorName(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetMonitorName(Monitor*)
  nameWithType: GLFW.GetMonitorName(Monitor*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorName(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  type: Method
  source:
    id: GetMonitorName
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 770
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns a human-readable name, encoded as UTF-8, of the specified monitor.

    The name typically reflects the make and model of the monitor

    and is not guaranteed to be unique among the connected monitors.

    </p>
  remarks: >-
    <p>

    The returned string is allocated and freed by GLFW. You should not free it yourself.

    It is valid until the specified monitor is disconnected or the library is terminated.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static string GetMonitorName(Monitor* monitor)
    parameters:
    - id: monitor
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*
      description: The monitor to query.
    return:
      type: System.String
      description: The UTF-8 encoded name of the monitor, or <code>null</code> if an error occurred.
    content.vb: Public Shared Function GetMonitorName(monitor As Monitor*) As String
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorName*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorNameRaw(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorNameRaw(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  id: GetMonitorNameRaw(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetMonitorNameRaw(Monitor*)
  nameWithType: GLFW.GetMonitorNameRaw(Monitor*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorNameRaw(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  type: Method
  source:
    id: GetMonitorNameRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 796
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns a human-readable name, encoded as UTF-8, of the specified monitor.

    The name typically reflects the make and model of the monitor

    and is not guaranteed to be unique among the connected monitors.

    </p>
  remarks: >-
    <p>

    The returned string is allocated and freed by GLFW. You should not free it yourself.

    It is valid until the specified monitor is disconnected or the library is terminated.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static byte* GetMonitorNameRaw(Monitor* monitor)
    parameters:
    - id: monitor
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*
      description: The monitor to query.
    return:
      type: System.Byte*
      description: The UTF-8 encoded name of the monitor, or <code>null</code> if an error occurred.
    content.vb: Public Shared Function GetMonitorNameRaw(monitor As Monitor*) As Byte*
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorNameRaw*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetMonitorUserPointer(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Void*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetMonitorUserPointer(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Void*)
  id: SetMonitorUserPointer(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Void*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetMonitorUserPointer(Monitor*, void*)
  nameWithType: GLFW.SetMonitorUserPointer(Monitor*, void*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetMonitorUserPointer(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, void*)
  type: Method
  source:
    id: SetMonitorUserPointer
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 821
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the user-defined pointer of the specified monitor.

    The current value is retained until the monitor is disconnected.

    The initial value is <xref href="System.IntPtr.Zero" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    This function may be called from the monitor callback, even for a monitor that is being disconnected.

    </p>
  remarks: >-
    <p>

    This function may be called from any thread. Access is not synchronized.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void SetMonitorUserPointer(Monitor* monitor, void* pointer)
    parameters:
    - id: monitor
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*
      description: The monitor whose pointer to set.
    - id: pointer
      type: System.Void*
      description: The new value.
    content.vb: Public Shared Sub SetMonitorUserPointer(monitor As Monitor*, pointer As Void*)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetMonitorUserPointer*
  nameWithType.vb: GLFW.SetMonitorUserPointer(Monitor*, Void*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetMonitorUserPointer(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, Void*)
  name.vb: SetMonitorUserPointer(Monitor*, Void*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorUserPointer(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorUserPointer(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  id: GetMonitorUserPointer(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetMonitorUserPointer(Monitor*)
  nameWithType: GLFW.GetMonitorUserPointer(Monitor*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorUserPointer(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  type: Method
  source:
    id: GetMonitorUserPointer
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 845
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the current value of the user-defined pointer of the specified monitor.

    The initial value is <xref href="System.IntPtr.Zero" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    This function may be called from the monitor callback, even for a monitor that is being disconnected.

    </p>
  remarks: >-
    <p>

    This function may be called from any thread. Access is not synchronized.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void* GetMonitorUserPointer(Monitor* monitor)
    parameters:
    - id: monitor
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*
      description: The monitor whose pointer to return.
    return:
      type: System.Void*
      description: The user-defined pointer of the given <code class="paramref">monitor</code>.
    content.vb: Public Shared Function GetMonitorUserPointer(monitor As Monitor*) As Void*
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorUserPointer*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoModesRaw(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32@)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoModesRaw(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32@)
  id: GetVideoModesRaw(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32@)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetVideoModesRaw(Monitor*, out int)
  nameWithType: GLFW.GetVideoModesRaw(Monitor*, out int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoModesRaw(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, out int)
  type: Method
  source:
    id: GetVideoModesRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 877
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns an array of all video modes supported by the specified monitor.

    The returned array is sorted in ascending order, first by color bit depth (the sum of all channel depths)

    and then by resolution area (the product of width and height).

    </p>
  remarks: >-
    <p>

    The returned array is allocated and freed by GLFW. You should not free it yourself.

    It is valid until the specified monitor is disconnected,

    this function is called again for that monitor, or the library is terminated.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static VideoMode* GetVideoModesRaw(Monitor* monitor, out int count)
    parameters:
    - id: monitor
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*
      description: The monitor to query.
    - id: count
      type: System.Int32
      description: >-
        Where to store the number of video modes in the returned array.

        This is set to zero if an error occurred.
    return:
      type: OpenTK.Windowing.GraphicsLibraryFramework.VideoMode*
      description: An array of video modes, or <code>null</code> if an error occurred.
    content.vb: Public Shared Function GetVideoModesRaw(monitor As Monitor*, count As Integer) As VideoMode*
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoModesRaw*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoMode(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoMode(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  nameWithType.vb: GLFW.GetVideoModesRaw(Monitor*, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoModesRaw(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, Integer)
  name.vb: GetVideoModesRaw(Monitor*, Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoModesRaw(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoModesRaw(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32*)
  id: GetVideoModesRaw(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetVideoModesRaw(Monitor*, int*)
  nameWithType: GLFW.GetVideoModesRaw(Monitor*, int*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoModesRaw(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, int*)
  type: Method
  source:
    id: GetVideoModesRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 912
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns an array of all video modes supported by the specified monitor.

    The returned array is sorted in ascending order, first by color bit depth (the sum of all channel depths)

    and then by resolution area (the product of width and height).

    </p>
  remarks: >-
    <p>

    The returned array is allocated and freed by GLFW. You should not free it yourself.

    It is valid until the specified monitor is disconnected,

    this function is called again for that monitor, or the library is terminated.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static VideoMode* GetVideoModesRaw(Monitor* monitor, int* count)
    parameters:
    - id: monitor
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*
      description: The monitor to query.
    - id: count
      type: System.Int32*
      description: >-
        Where to store the number of video modes in the returned array.

        This is set to zero if an error occurred.
    return:
      type: OpenTK.Windowing.GraphicsLibraryFramework.VideoMode*
      description: An array of video modes, or <code>null</code> if an error occurred.
    content.vb: Public Shared Function GetVideoModesRaw(monitor As Monitor*, count As Integer*) As VideoMode*
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoModesRaw*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoMode(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoMode(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  nameWithType.vb: GLFW.GetVideoModesRaw(Monitor*, Integer*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoModesRaw(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, Integer*)
  name.vb: GetVideoModesRaw(Monitor*, Integer*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoModes(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoModes(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  id: GetVideoModes(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetVideoModes(Monitor*)
  nameWithType: GLFW.GetVideoModes(Monitor*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoModes(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  type: Method
  source:
    id: GetVideoModes
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 940
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns an array of all video modes supported by the specified monitor.

    The returned array is sorted in ascending order, first by color bit depth (the sum of all channel depths)

    and then by resolution area (the product of width and height).

    </p>
  remarks: >-
    <p>

    The returned array is allocated and freed by GLFW. You should not free it yourself.

    It is valid until the specified monitor is disconnected,

    this function is called again for that monitor, or the library is terminated.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static VideoMode[] GetVideoModes(Monitor* monitor)
    parameters:
    - id: monitor
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*
      description: The monitor to query.
    return:
      type: OpenTK.Windowing.GraphicsLibraryFramework.VideoMode[]
      description: An array of video modes, or <code>null</code> if an error occurred.
    content.vb: Public Shared Function GetVideoModes(monitor As Monitor*) As VideoMode()
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoModes*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoMode(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoMode(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetGamma(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Single)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetGamma(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Single)
  id: SetGamma(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Single)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetGamma(Monitor*, float)
  nameWithType: GLFW.SetGamma(Monitor*, float)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetGamma(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, float)
  type: Method
  source:
    id: SetGamma
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 974
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function generates a 256-element gamma ramp from the specified exponent and then calls

    <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetGamma(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*%2cSystem.Single)" data-throw-if-not-resolved="false"></xref> with it. The value must be a finite number greater than zero.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidValue" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void SetGamma(Monitor* monitor, float gamma)
    parameters:
    - id: monitor
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*
      description: The monitor whose gamma ramp to set.
    - id: gamma
      type: System.Single
      description: The desired exponent.
    content.vb: Public Shared Sub SetGamma(monitor As Monitor*, gamma As Single)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetGamma*
  nameWithType.vb: GLFW.SetGamma(Monitor*, Single)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetGamma(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, Single)
  name.vb: SetGamma(Monitor*, Single)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGammaRamp(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGammaRamp(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  id: GetGammaRamp(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetGammaRamp(Monitor*)
  nameWithType: GLFW.GetGammaRamp(Monitor*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGammaRamp(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  type: Method
  source:
    id: GetGammaRamp
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 999
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the current gamma ramp of the specified monitor.

    </p>
  remarks: >-
    <p>

    The returned structure and its arrays are allocated and freed by GLFW.

    You should not free them yourself. They are valid until the specified monitor is disconnected,

    this function is called again for that monitor or the library is terminated.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static GammaRamp* GetGammaRamp(Monitor* monitor)
    parameters:
    - id: monitor
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*
      description: The monitor to query.
    return:
      type: OpenTK.Windowing.GraphicsLibraryFramework.GammaRamp*
      description: The current gamma ramp, or <code>null</code> if an error occurred.
    content.vb: Public Shared Function GetGammaRamp(monitor As Monitor*) As GammaRamp*
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGammaRamp*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetGammaRamp(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,OpenTK.Windowing.GraphicsLibraryFramework.GammaRamp*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetGammaRamp(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,OpenTK.Windowing.GraphicsLibraryFramework.GammaRamp*)
  id: SetGammaRamp(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,OpenTK.Windowing.GraphicsLibraryFramework.GammaRamp*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetGammaRamp(Monitor*, GammaRamp*)
  nameWithType: GLFW.SetGammaRamp(Monitor*, GammaRamp*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetGammaRamp(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, OpenTK.Windowing.GraphicsLibraryFramework.GammaRamp*)
  type: Method
  source:
    id: SetGammaRamp
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 1032
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the current gamma ramp for the specified monitor.

    </p>

    <p>

    The original gamma ramp for that monitor

    is saved by GLFW the first time this function is called and is restored by <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Terminate" data-throw-if-not-resolved="false"></xref>.

    </p>
  remarks: >-
    <p>

    Gamma ramp sizes other than 256 are not supported by all platforms or graphics hardware.

    </p>

    <p>

    Windows: The gamma ramp size must be 256.

    </p>

    <p>

    The specified gamma ramp is copied before this function returns.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void SetGammaRamp(Monitor* monitor, GammaRamp* ramp)
    parameters:
    - id: monitor
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*
      description: The monitor whose gamma ramp to set.
    - id: ramp
      type: OpenTK.Windowing.GraphicsLibraryFramework.GammaRamp*
      description: The gamma ramp to use.
    content.vb: Public Shared Sub SetGammaRamp(monitor As Monitor*, ramp As GammaRamp*)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetGammaRamp*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints
  id: DefaultWindowHints
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: DefaultWindowHints()
  nameWithType: GLFW.DefaultWindowHints()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints()
  type: Method
  source:
    id: DefaultWindowHints
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 1047
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function resets all window hints to their default values.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>
  example: []
  syntax:
    content: public static void DefaultWindowHints()
    content.vb: Public Shared Sub DefaultWindowHints()
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintString,System.String)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintString,System.String)
  id: WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintString,System.String)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: WindowHint(WindowHintString, string)
  nameWithType: GLFW.WindowHint(WindowHintString, string)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintString, string)
  type: Method
  source:
    id: WindowHint
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 1082
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    Sets the specified window hint to the desired value.

    </p>

    <p>

    This function sets hints for the next call to @ref glfwCreateWindow.  The

    hints, once set, retain their values until changed by a call to this

    function or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints" data-throw-if-not-resolved="false"></xref>, or until the library is terminated.

    </p>

    <p>

    This function does not check whether the specified hint values are valid.

    If you set hints to invalid values this will instead be reported by the next

    call to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow(System.Int32%2cSystem.Int32%2cSystem.String%2cOpenTK.Windowing.GraphicsLibraryFramework.Monitor*%2cOpenTK.Windowing.GraphicsLibraryFramework.Window*)" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    Some hints are platform specific.  These may be set on any platform but they

    will only affect their specific platform.  Other platforms will ignore them.

    Setting these hints requires no platform specific headers or functions.

    </p>
  remarks: >-
    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref><xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    The string is copied before this function returns.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>
  example: []
  syntax:
    content: public static void WindowHint(WindowHintString hint, string value)
    parameters:
    - id: hint
      type: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintString
      description: The window hint to set.
    - id: value
      type: System.String
      description: The new value of the set hint.
    content.vb: Public Shared Sub WindowHint(hint As WindowHintString, value As String)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint*
  nameWithType.vb: GLFW.WindowHint(WindowHintString, String)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintString, String)
  name.vb: WindowHint(WindowHintString, String)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHintRaw(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintString,System.Byte*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHintRaw(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintString,System.Byte*)
  id: WindowHintRaw(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintString,System.Byte*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: WindowHintRaw(WindowHintString, byte*)
  nameWithType: GLFW.WindowHintRaw(WindowHintString, byte*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHintRaw(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintString, byte*)
  type: Method
  source:
    id: WindowHintRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 1129
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    Sets the specified window hint to the desired value.

    </p>

    <p>

    This function sets hints for the next call to @ref glfwCreateWindow.  The

    hints, once set, retain their values until changed by a call to this

    function or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints" data-throw-if-not-resolved="false"></xref>, or until the library is terminated.

    </p>

    <p>

    This function does not check whether the specified hint values are valid.

    If you set hints to invalid values this will instead be reported by the next

    call to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow(System.Int32%2cSystem.Int32%2cSystem.String%2cOpenTK.Windowing.GraphicsLibraryFramework.Monitor*%2cOpenTK.Windowing.GraphicsLibraryFramework.Window*)" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    Some hints are platform specific.  These may be set on any platform but they

    will only affect their specific platform.  Other platforms will ignore them.

    Setting these hints requires no platform specific headers or functions.

    </p>
  remarks: >-
    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref><xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    The string is copied before this function returns.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>
  example: []
  syntax:
    content: public static void WindowHintRaw(WindowHintString hint, byte* value)
    parameters:
    - id: hint
      type: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintString
      description: The window hint to set.
    - id: value
      type: System.Byte*
      description: The new value of the set hint.
    content.vb: Public Shared Sub WindowHintRaw(hint As WindowHintString, value As Byte*)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHintRaw*
  nameWithType.vb: GLFW.WindowHintRaw(WindowHintString, Byte*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHintRaw(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintString, Byte*)
  name.vb: WindowHintRaw(WindowHintString, Byte*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSizeLimits(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSizeLimits(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32,System.Int32,System.Int32)
  id: SetWindowSizeLimits(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetWindowSizeLimits(Window*, int, int, int, int)
  nameWithType: GLFW.SetWindowSizeLimits(Window*, int, int, int, int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSizeLimits(OpenTK.Windowing.GraphicsLibraryFramework.Window*, int, int, int, int)
  type: Method
  source:
    id: SetWindowSizeLimits
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 1176
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the size limits of the client area of the specified window.

    </p>

    <p>

    If the window is full screen, the size limits only take effect once it is made windowed.

    </p>

    <p>

    If the window is not resizable, this function does nothing.

    </p>

    <p>

    The size limits are applied immediately to a windowed mode window and may cause it to be resized.

    </p>

    <p>

    The maximum dimensions must be greater than or equal to the minimum dimensions

    and all must be greater than or equal to zero.

    </p>
  remarks: >-
    <p>

    If you set size limits and an aspect ratio that conflict, the results are undefined.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidValue" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void SetWindowSizeLimits(Window* window, int minWidth, int minHeight, int maxWidth, int maxHeight)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to set limits for.
    - id: minWidth
      type: System.Int32
      description: The minimum width, in screen coordinates, of the client area, or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DontCare" data-throw-if-not-resolved="false"></xref>.
    - id: minHeight
      type: System.Int32
      description: The minimum height, in screen coordinates, of the client area, or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DontCare" data-throw-if-not-resolved="false"></xref>.
    - id: maxWidth
      type: System.Int32
      description: The maximum width, in screen coordinates, of the client area, or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DontCare" data-throw-if-not-resolved="false"></xref>.
    - id: maxHeight
      type: System.Int32
      description: The maximum height, in screen coordinates, of the client area, or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DontCare" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Sub SetWindowSizeLimits(window As Window*, minWidth As Integer, minHeight As Integer, maxWidth As Integer, maxHeight As Integer)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSizeLimits*
  nameWithType.vb: GLFW.SetWindowSizeLimits(Window*, Integer, Integer, Integer, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSizeLimits(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Integer, Integer, Integer, Integer)
  name.vb: SetWindowSizeLimits(Window*, Integer, Integer, Integer, Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowAspectRatio(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowAspectRatio(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32)
  id: SetWindowAspectRatio(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetWindowAspectRatio(Window*, int, int)
  nameWithType: GLFW.SetWindowAspectRatio(Window*, int, int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowAspectRatio(OpenTK.Windowing.GraphicsLibraryFramework.Window*, int, int)
  type: Method
  source:
    id: SetWindowAspectRatio
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 1221
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the required aspect ratio of the client area of the specified window.

    </p>

    <p>

    If the window is full screen, the aspect ratio only takes effect once it is made windowed.

    </p>

    <p>

    If the window is not resizable, this function does nothing.

    </p>

    <p>

    The aspect ratio is specified as a numerator and a denominator and both values must be greater than zero.

    For example, the common 16:9 aspect ratio is specified as 16 and 9, respectively.

    </p>

    <p>

    If the numerator and denominator is set to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DontCare" data-throw-if-not-resolved="false"></xref> then the aspect ratio limit is disabled.

    </p>

    <p>

    The aspect ratio is applied immediately to a windowed mode window and may cause it to be resized.

    </p>
  remarks: >-
    <p>

    If you set size limits and an aspect ratio that conflict, the results are undefined.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidValue" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void SetWindowAspectRatio(Window* window, int numer, int denom)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to set limits for.
    - id: numer
      type: System.Int32
      description: The numerator of the desired aspect ratio, or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DontCare" data-throw-if-not-resolved="false"></xref>.
    - id: denom
      type: System.Int32
      description: The denominator of the desired aspect ratio, or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DontCare" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Sub SetWindowAspectRatio(window As Window*, numer As Integer, denom As Integer)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowAspectRatio*
  nameWithType.vb: GLFW.SetWindowAspectRatio(Window*, Integer, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowAspectRatio(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Integer, Integer)
  name.vb: SetWindowAspectRatio(Window*, Integer, Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowFrameSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@,System.Int32@,System.Int32@)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowFrameSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@,System.Int32@,System.Int32@)
  id: GetWindowFrameSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@,System.Int32@,System.Int32@)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetWindowFrameSize(Window*, out int, out int, out int, out int)
  nameWithType: GLFW.GetWindowFrameSize(Window*, out int, out int, out int, out int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowFrameSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*, out int, out int, out int, out int)
  type: Method
  source:
    id: GetWindowFrameSize
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 1266
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>
     This function retrieves the size, in screen coordinates, of each edge of the frame of the specified window.
     </p>
    <p>
     This size includes the title bar, if the window has one.
     The size of the frame may vary depending on the window-related hints used to create it.
     </p>
    <p>
     Because this function retrieves the size of each window frame edge
     and not the offset along a particular coordinate axis, the retrieved values will always be zero or positive.
     </p>
    <p>
     Any or all of the size arguments may be <code>out _</code>.
     If an error occurs, all non-<code>out _</code> size arguments will be set to zero.
     </p>
  remarks: >-
    <p>
     This function must only be called from the main thread.
     </p>
    <p>
     Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.
     </p>
  example: []
  syntax:
    content: public static void GetWindowFrameSize(Window* window, out int left, out int top, out int right, out int bottom)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose frame size to query.
    - id: left
      type: System.Int32
      description: Where to store the size, in screen coordinates, of the left edge of the window frame, or <code>out _</code>.
    - id: top
      type: System.Int32
      description: Where to store the size, in screen coordinates, of the top edge of the window frame, or <code>out _</code>.
    - id: right
      type: System.Int32
      description: Where to store the size, in screen coordinates, of the right edge of the window frame, or <code>out _</code>.
    - id: bottom
      type: System.Int32
      description: Where to store the size, in screen coordinates, of the bottom edge of the window frame, or <code>out _</code>.
    content.vb: Public Shared Sub GetWindowFrameSize(window As Window*, left As Integer, top As Integer, right As Integer, bottom As Integer)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowFrameSize*
  nameWithType.vb: GLFW.GetWindowFrameSize(Window*, Integer, Integer, Integer, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowFrameSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Integer, Integer, Integer, Integer)
  name.vb: GetWindowFrameSize(Window*, Integer, Integer, Integer, Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowContentScale(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Single@,System.Single@)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowContentScale(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Single@,System.Single@)
  id: GetWindowContentScale(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Single@,System.Single@)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetWindowContentScale(Window*, out float, out float)
  nameWithType: GLFW.GetWindowContentScale(Window*, out float, out float)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowContentScale(OpenTK.Windowing.GraphicsLibraryFramework.Window*, out float, out float)
  type: Method
  source:
    id: GetWindowContentScale
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 1309
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>
     This function retrieves the content scale for the specified window.
     </p>
    <p>
     The content scale is the ratio between the current DPI and the platform's default DPI.
     This is especially important for text and any UI elements.
     If the pixel dimensions of your UI scaled by this look appropriate on your machine then it should
     appear at a reasonable size on other machines regardless of their DPI and scaling settings.
     This relies on the system DPI and scaling settings being somewhat correct.
     </p>
    <p>
     On systems where each monitors can have its own content scale,
     the window content scale will depend on which monitor the system considers the window to be on.
     </p>
  remarks: >-
    <p>
     This function must only be called from the main thread.
     </p>
    <p>
     Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.
     </p>
  example: []
  syntax:
    content: public static void GetWindowContentScale(Window* window, out float xScale, out float yScale)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to query.
    - id: xScale
      type: System.Single
      description: Where to store the x-axis content scale, or <code>out _</code>.
    - id: yScale
      type: System.Single
      description: Where to store the y-axis content scale, or <code>out _</code>.
    content.vb: Public Shared Sub GetWindowContentScale(window As Window*, xScale As Single, yScale As Single)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowContentScale*
  nameWithType.vb: GLFW.GetWindowContentScale(Window*, Single, Single)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowContentScale(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Single, Single)
  name.vb: GetWindowContentScale(Window*, Single, Single)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowOpacity(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowOpacity(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: GetWindowOpacity(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetWindowOpacity(Window*)
  nameWithType: GLFW.GetWindowOpacity(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowOpacity(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: GetWindowOpacity
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 1346
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the opacity of the window, including any decorations.

    </p>

    <p>

    The opacity (or alpha) value is a positive finite number between zero and one,

    where zero is fully transparent and one is fully opaque.

    </p>

    <p>

    If the system does not support whole window transparency, this function always returns one.

    </p>

    <p>

    The initial opacity value for newly created windows is one.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static float GetWindowOpacity(Window* window)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to query.
    return:
      type: System.Single
      description: The opacity value of the specified window.
    content.vb: Public Shared Function GetWindowOpacity(window As Window*) As Single
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowOpacity*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowOpacity(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Single)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowOpacity(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Single)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowOpacity(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Single)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowOpacity(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Single)
  id: SetWindowOpacity(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Single)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetWindowOpacity(Window*, float)
  nameWithType: GLFW.SetWindowOpacity(Window*, float)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowOpacity(OpenTK.Windowing.GraphicsLibraryFramework.Window*, float)
  type: Method
  source:
    id: SetWindowOpacity
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 1375
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the opacity of the window, including any decorations.

    </p>

    <p>

    The opacity (or alpha) value is a positive finite number between zero and one,

    where zero is fully transparent and one is fully opaque.

    </p>

    <p>

    The initial opacity value for newly created windows is one.

    </p>

    <p>

    A window created with framebuffer transparency may not use whole window transparency.

    The results of doing this are undefined.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void SetWindowOpacity(Window* window, float opacity)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to set the opacity for.
    - id: opacity
      type: System.Single
      description: The desired opacity of the specified window.
    content.vb: Public Shared Sub SetWindowOpacity(window As Window*, opacity As Single)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowOpacity*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowOpacity(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowOpacity(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  nameWithType.vb: GLFW.SetWindowOpacity(Window*, Single)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowOpacity(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Single)
  name.vb: SetWindowOpacity(Window*, Single)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.RequestWindowAttention(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.RequestWindowAttention(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: RequestWindowAttention(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: RequestWindowAttention(Window*)
  nameWithType: GLFW.RequestWindowAttention(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.RequestWindowAttention(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: RequestWindowAttention
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 1402
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function requests user attention to the specified window.

    On platforms where this is not supported, attention is requested to the application as a whole.

    </p>

    <p>

    Once the user has given attention, usually by focusing the window or application,

    the system will end the request automatically.

    </p>
  remarks: >-
    <p>

    macOS: Attention is requested to the application as a whole, not the specific window.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void RequestWindowAttention(Window* window)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to request attention to.
    content.vb: Public Shared Sub RequestWindowAttention(window As Window*)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.RequestWindowAttention*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute,System.Boolean)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute,System.Boolean)
  id: SetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute,System.Boolean)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetWindowAttrib(Window*, WindowAttribute, bool)
  nameWithType: GLFW.SetWindowAttrib(Window*, WindowAttribute, bool)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute, bool)
  type: Method
  source:
    id: SetWindowAttrib
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 1437
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the value of an attribute of the specified window.

    </p>

    <p>

    The supported attributes are <xref href="OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute.Decorated" data-throw-if-not-resolved="false"></xref>,

    <xref href="OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute.Resizable" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute.Floating" data-throw-if-not-resolved="false"></xref>,

    <xref href="OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute.AutoIconify" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute.FocusOnShow" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    Some of these attributes are ignored for full screen windows.

    The new value will take effect if the window is later made windowed.

    </p>

    <p>

    Some of these attributes are ignored for windowed mode windows.

    The new value will take effect if the window is later made full screen.

    </p>
  remarks: >-
    <p>

    Calling <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cOpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetBool)" data-throw-if-not-resolved="false"></xref> will always return the latest value,

    even if that value is ignored by the current mode of the window.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidValue" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void SetWindowAttrib(Window* window, WindowAttribute attribute, bool value)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to set the attribute for.
    - id: attribute
      type: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute
      description: A supported window attribute.
    - id: value
      type: System.Boolean
      description: <code>true</code> or <code>false</code>.
    content.vb: Public Shared Sub SetWindowAttrib(window As Window*, attribute As WindowAttribute, value As Boolean)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowAttrib*
  nameWithType.vb: GLFW.SetWindowAttrib(Window*, WindowAttribute, Boolean)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute, Boolean)
  name.vb: SetWindowAttrib(Window*, WindowAttribute, Boolean)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.RawMouseMotionSupported
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.RawMouseMotionSupported
  id: RawMouseMotionSupported
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: RawMouseMotionSupported()
  nameWithType: GLFW.RawMouseMotionSupported()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.RawMouseMotionSupported()
  type: Method
  source:
    id: RawMouseMotionSupported
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 1467
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns whether raw mouse motion is supported on the current system.

    This status does not change after GLFW has been initialized so you only need to check this once.

    If you attempt to enable raw motion on a system that does not support it,

    <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref> will be emitted.

    </p>

    <p>

    Raw mouse motion is closer to the actual motion of the mouse across a surface.

    It is not affected by the scaling and acceleration applied to the motion of the desktop cursor.

    That processing is suitable for a cursor while raw motion is better for controlling for example a 3D camera.

    Because of this, raw mouse motion is only provided when the cursor is disabled.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static bool RawMouseMotionSupported()
    return:
      type: System.Boolean
      description: <code>true</code> if raw mouse motion is supported on the current machine, or <code>false</code> otherwise.
    content.vb: Public Shared Function RawMouseMotionSupported() As Boolean
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.RawMouseMotionSupported*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyName(OpenTK.Windowing.GraphicsLibraryFramework.Keys,System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyName(OpenTK.Windowing.GraphicsLibraryFramework.Keys,System.Int32)
  id: GetKeyName(OpenTK.Windowing.GraphicsLibraryFramework.Keys,System.Int32)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetKeyName(Keys, int)
  nameWithType: GLFW.GetKeyName(Keys, int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyName(OpenTK.Windowing.GraphicsLibraryFramework.Keys, int)
  type: Method
  source:
    id: GetKeyName
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 1538
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the name of the specified printable key, encoded as UTF-8.

    This is typically the character that key would produce without any modifier keys,

    intended for displaying key bindings to the user.

    </p>

    <p>

    For dead keys, it is typically the diacritic it would add to a character.

    </p>

    <p>

    Do not use this function for text input.

    You will break text input for many languages even if it happens to work for yours.

    </p>

    <p>

    If the key is <xref href="OpenTK.Windowing.GraphicsLibraryFramework.Keys.Unknown" data-throw-if-not-resolved="false"></xref>, the scancode is used to identify the key, otherwise the scancode is ignored.

    If you specify a non-printable key, or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.Keys.Unknown" data-throw-if-not-resolved="false"></xref> and a scancode that maps to a non-printable key,

    this function returns <code>null</code> but does not emit an error.

    </p>

    <p>

    This behavior allows you to always pass in the arguments in the key callback without modification.

    </p>

    <p>

    The printable keys are:

    </p>

    <p>

    Names for printable keys depend on keyboard layout,

    while names for non-printable keys are the same across layouts but depend on the application language

    and should be localized along with other user interface text.

    </p>
  remarks: >-
    <p>

    The returned string is allocated and freed by GLFW. You should not free it yourself.

    It is valid until the next call to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyName(OpenTK.Windowing.GraphicsLibraryFramework.Keys%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>, or until the library is terminated.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static string GetKeyName(Keys key, int scanCode)
    parameters:
    - id: key
      type: OpenTK.Windowing.GraphicsLibraryFramework.Keys
      description: The key to query, or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.Keys.Unknown" data-throw-if-not-resolved="false"></xref>.
    - id: scanCode
      type: System.Int32
      description: The scancode of the key to query.
    return:
      type: System.String
      description: The UTF-8 encoded, layout-specific name of the key, or <code>null</code>.
    content.vb: Public Shared Function GetKeyName(key As Keys, scanCode As Integer) As String
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyName*
  nameWithType.vb: GLFW.GetKeyName(Keys, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyName(OpenTK.Windowing.GraphicsLibraryFramework.Keys, Integer)
  name.vb: GetKeyName(Keys, Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyNameRaw(OpenTK.Windowing.GraphicsLibraryFramework.Keys,System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyNameRaw(OpenTK.Windowing.GraphicsLibraryFramework.Keys,System.Int32)
  id: GetKeyNameRaw(OpenTK.Windowing.GraphicsLibraryFramework.Keys,System.Int32)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetKeyNameRaw(Keys, int)
  nameWithType: GLFW.GetKeyNameRaw(Keys, int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyNameRaw(OpenTK.Windowing.GraphicsLibraryFramework.Keys, int)
  type: Method
  source:
    id: GetKeyNameRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 1609
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the name of the specified printable key, encoded as UTF-8.

    This is typically the character that key would produce without any modifier keys,

    intended for displaying key bindings to the user.

    </p>

    <p>

    For dead keys, it is typically the diacritic it would add to a character.

    </p>

    <p>

    Do not use this function for text input.

    You will break text input for many languages even if it happens to work for yours.

    </p>

    <p>

    If the key is <xref href="OpenTK.Windowing.GraphicsLibraryFramework.Keys.Unknown" data-throw-if-not-resolved="false"></xref>, the scancode is used to identify the key, otherwise the scancode is ignored.

    If you specify a non-printable key, or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.Keys.Unknown" data-throw-if-not-resolved="false"></xref> and a scancode that maps to a non-printable key,

    this function returns <code>null</code> but does not emit an error.

    </p>

    <p>

    This behavior allows you to always pass in the arguments in the key callback without modification.

    </p>

    <p>

    The printable keys are:

    </p>

    <p>

    Names for printable keys depend on keyboard layout,

    while names for non-printable keys are the same across layouts but depend on the application language

    and should be localized along with other user interface text.

    </p>
  remarks: >-
    <p>

    The returned string is allocated and freed by GLFW. You should not free it yourself.

    It is valid until the next call to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyName(OpenTK.Windowing.GraphicsLibraryFramework.Keys%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>, or until the library is terminated.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static byte* GetKeyNameRaw(Keys key, int scancode)
    parameters:
    - id: key
      type: OpenTK.Windowing.GraphicsLibraryFramework.Keys
      description: The key to query, or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.Keys.Unknown" data-throw-if-not-resolved="false"></xref>.
    - id: scancode
      type: System.Int32
      description: The scancode of the key to query.
    return:
      type: System.Byte*
      description: The UTF-8 encoded, layout-specific name of the key, or <code>null</code>.
    content.vb: Public Shared Function GetKeyNameRaw(key As Keys, scancode As Integer) As Byte*
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyNameRaw*
  nameWithType.vb: GLFW.GetKeyNameRaw(Keys, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyNameRaw(OpenTK.Windowing.GraphicsLibraryFramework.Keys, Integer)
  name.vb: GetKeyNameRaw(Keys, Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyScancode(OpenTK.Windowing.GraphicsLibraryFramework.Keys)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyScancode(OpenTK.Windowing.GraphicsLibraryFramework.Keys)
  id: GetKeyScancode(OpenTK.Windowing.GraphicsLibraryFramework.Keys)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetKeyScancode(Keys)
  nameWithType: GLFW.GetKeyScancode(Keys)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyScancode(OpenTK.Windowing.GraphicsLibraryFramework.Keys)
  type: Method
  source:
    id: GetKeyScancode
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 1632
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the platform-specific scancode of the specified key.

    </p>

    <p>

    If the key is <xref href="OpenTK.Windowing.GraphicsLibraryFramework.Keys.Unknown" data-throw-if-not-resolved="false"></xref> or does not exist on the keyboard this method will return -1.

    </p>
  remarks: >-
    <p>

    This function may be called from any thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static int GetKeyScancode(Keys key)
    parameters:
    - id: key
      type: OpenTK.Windowing.GraphicsLibraryFramework.Keys
      description: Any named key.
    return:
      type: System.Int32
      description: The platform-specific scancode for the key, or -1 if an error occurred.
    content.vb: Public Shared Function GetKeyScancode(key As Keys) As Integer
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyScancode*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKey(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.Keys)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKey(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.Keys)
  id: GetKey(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.Keys)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetKey(Window*, Keys)
  nameWithType: GLFW.GetKey(Window*, Keys)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKey(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.Keys)
  type: Method
  source:
    id: GetKey
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 1673
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the last state reported for the specified key to the specified window.

    The returned state is one of <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InputAction.Press" data-throw-if-not-resolved="false"></xref> or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InputAction.Release" data-throw-if-not-resolved="false"></xref>.

    The higher-level action <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InputAction.Repeat" data-throw-if-not-resolved="false"></xref> is only reported to the key callback.

    </p>

    <p>

    If the <xref href="OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes.StickyKeys" data-throw-if-not-resolved="false"></xref> input mode is enabled, this function returns

    <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InputAction.Press" data-throw-if-not-resolved="false"></xref> the first time you call it for a key that was pressed,

    even if that key has already been released.

    </p>

    <p>

    The key functions deal with physical keys,

    with key tokens named after their use on the standard US keyboard layout.

    If you want to input text, use the Unicode character callback instead.

    </p>

    <p>

    The modifier key bit masks are not key tokens and cannot be used with this function.

    </p>

    <p>

    Do not use this function to implement text input.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static InputAction GetKey(Window* window, Keys key)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The desired window.
    - id: key
      type: OpenTK.Windowing.GraphicsLibraryFramework.Keys
      description: The desired keyboard key. <xref href="OpenTK.Windowing.GraphicsLibraryFramework.Keys.Unknown" data-throw-if-not-resolved="false"></xref> is not a valid key for this function.
    return:
      type: OpenTK.Windowing.GraphicsLibraryFramework.InputAction
      description: One of <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InputAction.Press" data-throw-if-not-resolved="false"></xref> or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InputAction.Release" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function GetKey(window As Window*, key As Keys) As InputAction
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKey*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMouseButton(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.MouseButton)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMouseButton(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.MouseButton)
  id: GetMouseButton(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.MouseButton)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetMouseButton(Window*, MouseButton)
  nameWithType: GLFW.GetMouseButton(Window*, MouseButton)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMouseButton(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.MouseButton)
  type: Method
  source:
    id: GetMouseButton
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 1700
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the last state reported for the specified mouse button to the specified window.

    The returned state is one of <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InputAction.Press" data-throw-if-not-resolved="false"></xref> or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InputAction.Release" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    If the <xref href="OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes.StickyMouseButtons" data-throw-if-not-resolved="false"></xref> input mode is enabled, this function returns

    <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InputAction.Press" data-throw-if-not-resolved="false"></xref> the first time you call it for a mouse button that was pressed,

    even if that mouse button has already been released.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static InputAction GetMouseButton(Window* window, MouseButton button)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The desired window.
    - id: button
      type: OpenTK.Windowing.GraphicsLibraryFramework.MouseButton
      description: The desired mouse button.
    return:
      type: OpenTK.Windowing.GraphicsLibraryFramework.InputAction
      description: One of <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InputAction.Press" data-throw-if-not-resolved="false"></xref> or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InputAction.Release" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function GetMouseButton(window As Window*, button As MouseButton) As InputAction
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMouseButton*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCursorPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Double@,System.Double@)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCursorPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Double@,System.Double@)
  id: GetCursorPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Double@,System.Double@)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetCursorPos(Window*, out double, out double)
  nameWithType: GLFW.GetCursorPos(Window*, out double, out double)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCursorPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*, out double, out double)
  type: Method
  source:
    id: GetCursorPos
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 1738
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the position of the cursor,

    in screen coordinates, relative to the upper-left corner of the client area of the specified window.

    </p>

    <p>

    If the cursor is disabled (with <xref href="OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue.CursorDisabled" data-throw-if-not-resolved="false"></xref>) then the cursor position

    is unbounded and limited only by the minimum and maximum values of a double.

    </p>

    <p>

    The coordinate can be converted to their integer equivalents with the floor function.

    Casting directly to an integer type works for positive coordinates, but fails for negative ones.

    </p>

    <p>

    Any or all of the position arguments may be <code>out _</code>.

    If an error occurs, all non-<code>out _</code> position arguments will be set to zero.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void GetCursorPos(Window* window, out double xPos, out double yPos)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The desired window.
    - id: xPos
      type: System.Double
      description: Where to store the cursor x-coordinate, relative to the left edge of the client area, or <code>out _</code>.
    - id: yPos
      type: System.Double
      description: Where to store the cursor y-coordinate, relative to the to top edge of the client area, or <code>out _</code>.
    content.vb: Public Shared Sub GetCursorPos(window As Window*, xPos As Double, yPos As Double)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCursorPos*
  nameWithType.vb: GLFW.GetCursorPos(Window*, Double, Double)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCursorPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Double, Double)
  name.vb: GetCursorPos(Window*, Double, Double)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCursorPosRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Double*,System.Double*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCursorPosRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Double*,System.Double*)
  id: GetCursorPosRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Double*,System.Double*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetCursorPosRaw(Window*, double*, double*)
  nameWithType: GLFW.GetCursorPosRaw(Window*, double*, double*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCursorPosRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*, double*, double*)
  type: Method
  source:
    id: GetCursorPosRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 1779
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the position of the cursor,

    in screen coordinates, relative to the upper-left corner of the client area of the specified window.

    </p>

    <p>

    If the cursor is disabled (with <xref href="OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue.CursorDisabled" data-throw-if-not-resolved="false"></xref>) then the cursor position

    is unbounded and limited only by the minimum and maximum values of a double.

    </p>

    <p>

    The coordinate can be converted to their integer equivalents with the floor function.

    Casting directly to an integer type works for positive coordinates, but fails for negative ones.

    </p>

    <p>

    Any or all of the position arguments may be <code>out _</code>.

    If an error occurs, all non-<code>out _</code> position arguments will be set to zero.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void GetCursorPosRaw(Window* window, double* xPos, double* yPos)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The desired window.
    - id: xPos
      type: System.Double*
      description: Where to store the cursor x-coordinate, relative to the left edge of the client area, or <code>out _</code>.
    - id: yPos
      type: System.Double*
      description: Where to store the cursor y-coordinate, relative to the to top edge of the client area, or <code>out _</code>.
    content.vb: Public Shared Sub GetCursorPosRaw(window As Window*, xPos As Double*, yPos As Double*)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCursorPosRaw*
  nameWithType.vb: GLFW.GetCursorPosRaw(Window*, Double*, Double*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCursorPosRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Double*, Double*)
  name.vb: GetCursorPosRaw(Window*, Double*, Double*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursorPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Double,System.Double)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursorPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Double,System.Double)
  id: SetCursorPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Double,System.Double)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetCursorPos(Window*, double, double)
  nameWithType: GLFW.SetCursorPos(Window*, double, double)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursorPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*, double, double)
  type: Method
  source:
    id: SetCursorPos
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 1819
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the position, in screen coordinates,

    of the cursor relative to the upper-left corner of the client area of the specified window.

    </p>

    <p>

    The window must have input focus.

    If the window does not have input focus when this function is called, it fails silently.

    </p>

    <p>

    Do not use this function to implement things like camera controls.

    GLFW already provides the <xref href="OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue.CursorDisabled" data-throw-if-not-resolved="false"></xref> cursor mode that hides the cursor,

    transparently re-centers it and provides unconstrained cursor motion.

    See <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cOpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute%2cOpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue)" data-throw-if-not-resolved="false"></xref> for more information.

    </p>

    <p>

    If the cursor mode is <xref href="OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue.CursorDisabled" data-throw-if-not-resolved="false"></xref> then the cursor position is unconstrained

    and limited only by the minimum and maximum values of a double.

    </p>
  remarks: >-
    <p>

    Wayland: This function will only work when the cursor mode is <xref href="OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue.CursorDisabled" data-throw-if-not-resolved="false"></xref>,
             otherwise it will do nothing.
    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void SetCursorPos(Window* window, double xPos, double yPos)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The desired window.
    - id: xPos
      type: System.Double
      description: The desired x-coordinate, relative to the left edge of the client area.
    - id: yPos
      type: System.Double
      description: The desired y-coordinate, relative to the top edge of the client area.
    content.vb: Public Shared Sub SetCursorPos(window As Window*, xPos As Double, yPos As Double)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursorPos*
  nameWithType.vb: GLFW.SetCursorPos(Window*, Double, Double)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursorPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Double, Double)
  name.vb: SetCursorPos(Window*, Double, Double)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateCursor(OpenTK.Windowing.GraphicsLibraryFramework.Image@,System.Int32,System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateCursor(OpenTK.Windowing.GraphicsLibraryFramework.Image@,System.Int32,System.Int32)
  id: CreateCursor(OpenTK.Windowing.GraphicsLibraryFramework.Image@,System.Int32,System.Int32)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: CreateCursor(in Image, int, int)
  nameWithType: GLFW.CreateCursor(in Image, int, int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateCursor(in OpenTK.Windowing.GraphicsLibraryFramework.Image, int, int)
  type: Method
  source:
    id: CreateCursor
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 1857
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    Creates a new custom cursor image that can be set for a window with <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursor(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cOpenTK.Windowing.GraphicsLibraryFramework.Cursor*)" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    The cursor can be destroyed with <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DestroyCursor(OpenTK.Windowing.GraphicsLibraryFramework.Cursor*)" data-throw-if-not-resolved="false"></xref>.

    Any remaining cursors are destroyed by <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Terminate" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    The pixels are 32-bit, little-endian, non-premultiplied RGBA,

    i.e. eight bits per channel with the red channel first.

    They are arranged canonically as packed sequential rows, starting from the top-left corner.

    </p>

    <p>

    The cursor hotspot is specified in pixels, relative to the upper-left corner of the cursor image.

    Like all other coordinate systems in GLFW, the X-axis points to the right and the Y-axis points down.

    </p>
  remarks: >-
    <p>

    The specified image data is copied before this function returns.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static Cursor* CreateCursor(in Image image, int xHot, int yHot)
    parameters:
    - id: image
      type: OpenTK.Windowing.GraphicsLibraryFramework.Image
      description: The desired cursor image.
    - id: xHot
      type: System.Int32
      description: The desired x-coordinate, in pixels, of the cursor hotspot.
    - id: yHot
      type: System.Int32
      description: The desired y-coordinate, in pixels, of the cursor hotspot.
    return:
      type: OpenTK.Windowing.GraphicsLibraryFramework.Cursor*
      description: The handle of the created cursor, or <code>null</code> if an error occurred.
    content.vb: Public Shared Function CreateCursor(image As Image, xHot As Integer, yHot As Integer) As Cursor*
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateCursor*
  nameWithType.vb: GLFW.CreateCursor(Image, Integer, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateCursor(OpenTK.Windowing.GraphicsLibraryFramework.Image, Integer, Integer)
  name.vb: CreateCursor(Image, Integer, Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateCursorRaw(OpenTK.Windowing.GraphicsLibraryFramework.Image*,System.Int32,System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateCursorRaw(OpenTK.Windowing.GraphicsLibraryFramework.Image*,System.Int32,System.Int32)
  id: CreateCursorRaw(OpenTK.Windowing.GraphicsLibraryFramework.Image*,System.Int32,System.Int32)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: CreateCursorRaw(Image*, int, int)
  nameWithType: GLFW.CreateCursorRaw(Image*, int, int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateCursorRaw(OpenTK.Windowing.GraphicsLibraryFramework.Image*, int, int)
  type: Method
  source:
    id: CreateCursorRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 1898
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    Creates a new custom cursor image that can be set for a window with <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursor(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cOpenTK.Windowing.GraphicsLibraryFramework.Cursor*)" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    The cursor can be destroyed with <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DestroyCursor(OpenTK.Windowing.GraphicsLibraryFramework.Cursor*)" data-throw-if-not-resolved="false"></xref>.

    Any remaining cursors are destroyed by <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Terminate" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    The pixels are 32-bit, little-endian, non-premultiplied RGBA,

    i.e. eight bits per channel with the red channel first.

    They are arranged canonically as packed sequential rows, starting from the top-left corner.

    </p>

    <p>

    The cursor hotspot is specified in pixels, relative to the upper-left corner of the cursor image.

    Like all other coordinate systems in GLFW, the X-axis points to the right and the Y-axis points down.

    </p>
  remarks: >-
    <p>

    The specified image data is copied before this function returns.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static Cursor* CreateCursorRaw(Image* image, int xHot, int yHot)
    parameters:
    - id: image
      type: OpenTK.Windowing.GraphicsLibraryFramework.Image*
      description: The desired cursor image.
    - id: xHot
      type: System.Int32
      description: The desired x-coordinate, in pixels, of the cursor hotspot.
    - id: yHot
      type: System.Int32
      description: The desired y-coordinate, in pixels, of the cursor hotspot.
    return:
      type: OpenTK.Windowing.GraphicsLibraryFramework.Cursor*
      description: The handle of the created cursor, or <code>null</code> if an error occurred.
    content.vb: Public Shared Function CreateCursorRaw(image As Image*, xHot As Integer, yHot As Integer) As Cursor*
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateCursorRaw*
  nameWithType.vb: GLFW.CreateCursorRaw(Image*, Integer, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateCursorRaw(OpenTK.Windowing.GraphicsLibraryFramework.Image*, Integer, Integer)
  name.vb: CreateCursorRaw(Image*, Integer, Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateStandardCursor(OpenTK.Windowing.GraphicsLibraryFramework.CursorShape)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateStandardCursor(OpenTK.Windowing.GraphicsLibraryFramework.CursorShape)
  id: CreateStandardCursor(OpenTK.Windowing.GraphicsLibraryFramework.CursorShape)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: CreateStandardCursor(CursorShape)
  nameWithType: GLFW.CreateStandardCursor(CursorShape)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateStandardCursor(OpenTK.Windowing.GraphicsLibraryFramework.CursorShape)
  type: Method
  source:
    id: CreateStandardCursor
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 1918
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    Returns a cursor with a standard shape, that can be set for a window with <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursor(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cOpenTK.Windowing.GraphicsLibraryFramework.Cursor*)" data-throw-if-not-resolved="false"></xref>.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static Cursor* CreateStandardCursor(CursorShape shape)
    parameters:
    - id: shape
      type: OpenTK.Windowing.GraphicsLibraryFramework.CursorShape
      description: One of the standard shapes.
    return:
      type: OpenTK.Windowing.GraphicsLibraryFramework.Cursor*
      description: A new cursor ready to use or <code>null</code> if an error occurred.
    content.vb: Public Shared Function CreateStandardCursor(shape As CursorShape) As Cursor*
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateStandardCursor*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DestroyCursor(OpenTK.Windowing.GraphicsLibraryFramework.Cursor*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DestroyCursor(OpenTK.Windowing.GraphicsLibraryFramework.Cursor*)
  id: DestroyCursor(OpenTK.Windowing.GraphicsLibraryFramework.Cursor*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: DestroyCursor(Cursor*)
  nameWithType: GLFW.DestroyCursor(Cursor*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DestroyCursor(OpenTK.Windowing.GraphicsLibraryFramework.Cursor*)
  type: Method
  source:
    id: DestroyCursor
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 1945
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function destroys a cursor previously created with <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateCursor(OpenTK.Windowing.GraphicsLibraryFramework.Image%40%2cSystem.Int32%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>.

    Any remaining cursors will be destroyed by <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Terminate" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    If the specified cursor is current for any window, that window will be reverted to the default cursor.

    This does not affect the cursor mode.

    </p>
  remarks: >-
    <p>

    This function must not be called from a callback.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void DestroyCursor(Cursor* cursor)
    parameters:
    - id: cursor
      type: OpenTK.Windowing.GraphicsLibraryFramework.Cursor*
      description: The cursor object to destroy.
    content.vb: Public Shared Sub DestroyCursor(cursor As Cursor*)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DestroyCursor*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursor(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.Cursor*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursor(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.Cursor*)
  id: SetCursor(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.Cursor*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetCursor(Window*, Cursor*)
  nameWithType: GLFW.SetCursor(Window*, Cursor*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursor(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.Cursor*)
  type: Method
  source:
    id: SetCursor
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 1970
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the cursor image to be used when the cursor is over the client area

    of the specified window.

    </p>

    <p>

    The set cursor will only be visible

    when the cursor mode of the window is <xref href="OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue.CursorNormal" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    On some platforms, the set cursor may not be visible unless the window also has input focus.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void SetCursor(Window* window, Cursor* cursor)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to set the cursor for.
    - id: cursor
      type: OpenTK.Windowing.GraphicsLibraryFramework.Cursor*
      description: The cursor to set, or <code>null</code> to switch back to the default arrow cursor.
    content.vb: Public Shared Sub SetCursor(window As Window*, cursor As Cursor*)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursor*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent(System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent(System.Int32)
  id: JoystickPresent(System.Int32)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: JoystickPresent(int)
  nameWithType: GLFW.JoystickPresent(int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent(int)
  type: Method
  source:
    id: JoystickPresent
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 1994
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns whether the specified joystick is present.

    </p>

    <p>

    There is no need to call this function before other functions that accept a joystick ID,

    as they all check for presence before performing any other work.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static bool JoystickPresent(int jid)
    parameters:
    - id: jid
      type: System.Int32
      description: The joystick to query.
    return:
      type: System.Boolean
      description: <code>true</code> if the joystick is present, or <code>false</code> otherwise.
    content.vb: Public Shared Function JoystickPresent(jid As Integer) As Boolean
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent*
  nameWithType.vb: GLFW.JoystickPresent(Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent(Integer)
  name.vb: JoystickPresent(Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickAxes(System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickAxes(System.Int32)
  id: GetJoystickAxes(System.Int32)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetJoystickAxes(int)
  nameWithType: GLFW.GetJoystickAxes(int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickAxes(int)
  type: Method
  source:
    id: GetJoystickAxes
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 2027
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the values of all axes of the specified joystick.

    Each element in the array is a value between -1.0 and 1.0.

    </p>

    <p>

    If the specified joystick is not present

    this function will return <code>null</code> but will not generate an error.

    This can be used instead of first calling <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent(System.Int32)" data-throw-if-not-resolved="false"></xref>.

    </p>
  remarks: >-
    <p>

    The returned array is allocated and freed by GLFW.

    You should not free it yourself.

    It is valid until the specified joystick is disconnected or the library is terminated.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static ReadOnlySpan<float> GetJoystickAxes(int jid)
    parameters:
    - id: jid
      type: System.Int32
      description: The joystick to query.
    return:
      type: System.ReadOnlySpan{System.Single}
      description: An array of axis values, or <code>null</code> if the joystick is not present or an error occurred.
    content.vb: Public Shared Function GetJoystickAxes(jid As Integer) As ReadOnlySpan(Of Single)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickAxes*
  nameWithType.vb: GLFW.GetJoystickAxes(Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickAxes(Integer)
  name.vb: GetJoystickAxes(Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickAxesRaw(System.Int32,System.Int32@)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickAxesRaw(System.Int32,System.Int32@)
  id: GetJoystickAxesRaw(System.Int32,System.Int32@)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetJoystickAxesRaw(int, out int)
  nameWithType: GLFW.GetJoystickAxesRaw(int, out int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickAxesRaw(int, out int)
  type: Method
  source:
    id: GetJoystickAxesRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 2072
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the values of all axes of the specified joystick.

    Each element in the array is a value between -1.0 and 1.0.

    </p>

    <p>

    If the specified joystick is not present

    this function will return <code>null</code> but will not generate an error.

    This can be used instead of first calling <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent(System.Int32)" data-throw-if-not-resolved="false"></xref>.

    </p>
  remarks: >-
    <p>

    The returned array is allocated and freed by GLFW.

    You should not free it yourself.

    It is valid until the specified joystick is disconnected or the library is terminated.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static float* GetJoystickAxesRaw(int jid, out int count)
    parameters:
    - id: jid
      type: System.Int32
      description: The joystick to query.
    - id: count
      type: System.Int32
      description: >-
        Where to store the number of axis values in the returned array.

        This is set to zero if the joystick is not present or an error occurred.
    return:
      type: System.Single*
      description: An array of axis values, or <code>null</code> if the joystick is not present or an error occurred.
    content.vb: Public Shared Function GetJoystickAxesRaw(jid As Integer, count As Integer) As Single*
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickAxesRaw*
  nameWithType.vb: GLFW.GetJoystickAxesRaw(Integer, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickAxesRaw(Integer, Integer)
  name.vb: GetJoystickAxesRaw(Integer, Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickAxesRaw(System.Int32,System.Int32*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickAxesRaw(System.Int32,System.Int32*)
  id: GetJoystickAxesRaw(System.Int32,System.Int32*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetJoystickAxesRaw(int, int*)
  nameWithType: GLFW.GetJoystickAxesRaw(int, int*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickAxesRaw(int, int*)
  type: Method
  source:
    id: GetJoystickAxesRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 2112
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the values of all axes of the specified joystick.

    Each element in the array is a value between -1.0 and 1.0.

    </p>

    <p>

    If the specified joystick is not present

    this function will return <code>null</code> but will not generate an error.

    This can be used instead of first calling <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent(System.Int32)" data-throw-if-not-resolved="false"></xref>.

    </p>
  remarks: >-
    <p>

    The returned array is allocated and freed by GLFW.

    You should not free it yourself.

    It is valid until the specified joystick is disconnected or the library is terminated.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static float* GetJoystickAxesRaw(int jid, int* count)
    parameters:
    - id: jid
      type: System.Int32
      description: The joystick to query.
    - id: count
      type: System.Int32*
      description: >-
        Where to store the number of axis values in the returned array.

        This is set to zero if the joystick is not present or an error occurred.
    return:
      type: System.Single*
      description: An array of axis values, or <code>null</code> if the joystick is not present or an error occurred.
    content.vb: Public Shared Function GetJoystickAxesRaw(jid As Integer, count As Integer*) As Single*
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickAxesRaw*
  nameWithType.vb: GLFW.GetJoystickAxesRaw(Integer, Integer*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickAxesRaw(Integer, Integer*)
  name.vb: GetJoystickAxesRaw(Integer, Integer*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickButtons(System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickButtons(System.Int32)
  id: GetJoystickButtons(System.Int32)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetJoystickButtons(int)
  nameWithType: GLFW.GetJoystickButtons(int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickButtons(int)
  type: Method
  source:
    id: GetJoystickButtons
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 2155
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the state of all buttons of the specified joystick.

    Each element in the array is either <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InputAction.Press" data-throw-if-not-resolved="false"></xref> or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InputAction.Release" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    For backward compatibility with earlier versions that did not have <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHats(System.Int32)" data-throw-if-not-resolved="false"></xref>,

    the button array also includes all hats, each represented as four buttons.

    </p>

    <p>

    The hats are in the same order as returned by <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHats(System.Int32)" data-throw-if-not-resolved="false"></xref> and are in the order

    up, right, down and left.

    </p>

    <p>

    To disable these extra buttons, set the <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InitHintBool.JoystickHatButtons" data-throw-if-not-resolved="false"></xref>

    init hint before initialization.

    </p>

    <p>

    If the specified joystick is not present this function will return <code>null</code> but will not generate an error.

    This can be used instead of first calling <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent(System.Int32)" data-throw-if-not-resolved="false"></xref>.

    </p>
  remarks: >-
    <p>

    The returned array is allocated and freed by GLFW. You should not free it yourself.

    It is valid until the specified joystick is disconnected or the library is terminated.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static ReadOnlySpan<JoystickInputAction> GetJoystickButtons(int jid)
    parameters:
    - id: jid
      type: System.Int32
      description: The joystick to query.
    return:
      type: System.ReadOnlySpan{OpenTK.Windowing.GraphicsLibraryFramework.JoystickInputAction}
      description: An array of button states, or <code>null</code> if the joystick is not present or an error occurred.
    content.vb: Public Shared Function GetJoystickButtons(jid As Integer) As ReadOnlySpan(Of JoystickInputAction)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickButtons*
  nameWithType.vb: GLFW.GetJoystickButtons(Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickButtons(Integer)
  name.vb: GetJoystickButtons(Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickButtonsRaw(System.Int32,System.Int32@)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickButtonsRaw(System.Int32,System.Int32@)
  id: GetJoystickButtonsRaw(System.Int32,System.Int32@)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetJoystickButtonsRaw(int, out int)
  nameWithType: GLFW.GetJoystickButtonsRaw(int, out int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickButtonsRaw(int, out int)
  type: Method
  source:
    id: GetJoystickButtonsRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 2210
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the state of all buttons of the specified joystick.

    Each element in the array is either <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InputAction.Press" data-throw-if-not-resolved="false"></xref> or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InputAction.Release" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    For backward compatibility with earlier versions that did not have <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHats(System.Int32)" data-throw-if-not-resolved="false"></xref>,

    the button array also includes all hats, each represented as four buttons.

    </p>

    <p>

    The hats are in the same order as returned by <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHats(System.Int32)" data-throw-if-not-resolved="false"></xref> and are in the order

    up, right, down and left.

    </p>

    <p>

    To disable these extra buttons, set the <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InitHintBool.JoystickHatButtons" data-throw-if-not-resolved="false"></xref>

    init hint before initialization.

    </p>

    <p>

    If the specified joystick is not present this function will return <code>null</code> but will not generate an error.

    This can be used instead of first calling <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent(System.Int32)" data-throw-if-not-resolved="false"></xref>.

    </p>
  remarks: >-
    <p>

    The returned array is allocated and freed by GLFW. You should not free it yourself.

    It is valid until the specified joystick is disconnected or the library is terminated.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static JoystickInputAction* GetJoystickButtonsRaw(int jid, out int count)
    parameters:
    - id: jid
      type: System.Int32
      description: The joystick to query.
    - id: count
      type: System.Int32
      description: >-
        Where to store the number of button states in the returned array.

        This is set to zero if the joystick is not present or an error occurred.
    return:
      type: OpenTK.Windowing.GraphicsLibraryFramework.JoystickInputAction*
      description: An array of button states, or <code>null</code> if the joystick is not present or an error occurred.
    content.vb: Public Shared Function GetJoystickButtonsRaw(jid As Integer, count As Integer) As JoystickInputAction*
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickButtonsRaw*
  nameWithType.vb: GLFW.GetJoystickButtonsRaw(Integer, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickButtonsRaw(Integer, Integer)
  name.vb: GetJoystickButtonsRaw(Integer, Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickButtonsRaw(System.Int32,System.Int32*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickButtonsRaw(System.Int32,System.Int32*)
  id: GetJoystickButtonsRaw(System.Int32,System.Int32*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetJoystickButtonsRaw(int, int*)
  nameWithType: GLFW.GetJoystickButtonsRaw(int, int*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickButtonsRaw(int, int*)
  type: Method
  source:
    id: GetJoystickButtonsRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 2260
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the state of all buttons of the specified joystick.

    Each element in the array is either <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InputAction.Press" data-throw-if-not-resolved="false"></xref> or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InputAction.Release" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    For backward compatibility with earlier versions that did not have <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHats(System.Int32)" data-throw-if-not-resolved="false"></xref>,

    the button array also includes all hats, each represented as four buttons.

    </p>

    <p>

    The hats are in the same order as returned by <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHats(System.Int32)" data-throw-if-not-resolved="false"></xref> and are in the order

    up, right, down and left.

    </p>

    <p>

    To disable these extra buttons, set the <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InitHintBool.JoystickHatButtons" data-throw-if-not-resolved="false"></xref>

    init hint before initialization.

    </p>

    <p>

    If the specified joystick is not present this function will return <code>null</code> but will not generate an error.

    This can be used instead of first calling <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent(System.Int32)" data-throw-if-not-resolved="false"></xref>.

    </p>
  remarks: >-
    <p>

    The returned array is allocated and freed by GLFW. You should not free it yourself.

    It is valid until the specified joystick is disconnected or the library is terminated.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static JoystickInputAction* GetJoystickButtonsRaw(int jid, int* count)
    parameters:
    - id: jid
      type: System.Int32
      description: The joystick to query.
    - id: count
      type: System.Int32*
      description: >-
        Where to store the number of button states in the returned array.

        This is set to zero if the joystick is not present or an error occurred.
    return:
      type: OpenTK.Windowing.GraphicsLibraryFramework.JoystickInputAction*
      description: An array of button states, or <code>null</code> if the joystick is not present or an error occurred.
    content.vb: Public Shared Function GetJoystickButtonsRaw(jid As Integer, count As Integer*) As JoystickInputAction*
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickButtonsRaw*
  nameWithType.vb: GLFW.GetJoystickButtonsRaw(Integer, Integer*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickButtonsRaw(Integer, Integer*)
  name.vb: GetJoystickButtonsRaw(Integer, Integer*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHats(System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHats(System.Int32)
  id: GetJoystickHats(System.Int32)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetJoystickHats(int)
  nameWithType: GLFW.GetJoystickHats(int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHats(int)
  type: Method
  source:
    id: GetJoystickHats
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 2302
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the state of all hats of the specified joystick.

    Each element in the array is one of the <xref href="OpenTK.Windowing.GraphicsLibraryFramework.JoystickHats" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    The diagonal directions are bitwise combinations of the primary (up, right, down and left) directions

    and you can test for these individually by ANDing it with the corresponding direction.

    <pre><code class="lang-csharp">if (hats[2].HasFlag(JoystickHats.Right))

    {
       // State of hat 2 could be right-up, right or right-down
    }</code></pre></p>

    <p>

    If the specified joystick is not present, this function will return NULL but will not generate an error.

    This can be used instead of first calling <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent(System.Int32)" data-throw-if-not-resolved="false"></xref>.

    </p>
  remarks: >-
    <p>

    The returned array is allocated and freed by GLFW. You should not free it yourself

    It is valid until the specified joystick is disconnected,

    this function is called again for that joystick or the library is terminated.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static ReadOnlySpan<JoystickHats> GetJoystickHats(int jid)
    parameters:
    - id: jid
      type: System.Int32
      description: The joystick to query.
    return:
      type: System.ReadOnlySpan{OpenTK.Windowing.GraphicsLibraryFramework.JoystickHats}
      description: An array of hat states, or <code>null</code> if the joystick is not present or an error occurred.
    content.vb: Public Shared Function GetJoystickHats(jid As Integer) As ReadOnlySpan(Of JoystickHats)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHats*
  nameWithType.vb: GLFW.GetJoystickHats(Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHats(Integer)
  name.vb: GetJoystickHats(Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHatsRaw(System.Int32,System.Int32@)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHatsRaw(System.Int32,System.Int32@)
  id: GetJoystickHatsRaw(System.Int32,System.Int32@)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetJoystickHatsRaw(int, out int)
  nameWithType: GLFW.GetJoystickHatsRaw(int, out int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHatsRaw(int, out int)
  type: Method
  source:
    id: GetJoystickHatsRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 2356
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the state of all hats of the specified joystick.

    Each element in the array is one of the <xref href="OpenTK.Windowing.GraphicsLibraryFramework.JoystickHats" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    The diagonal directions are bitwise combinations of the primary (up, right, down and left) directions

    and you can test for these individually by ANDing it with the corresponding direction.

    <pre><code class="lang-csharp">if (hats[2].HasFlag(JoystickHats.Right))

    {
       // State of hat 2 could be right-up, right or right-down
    }</code></pre></p>

    <p>

    If the specified joystick is not present, this function will return NULL but will not generate an error.

    This can be used instead of first calling <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent(System.Int32)" data-throw-if-not-resolved="false"></xref>.

    </p>
  remarks: >-
    <p>

    The returned array is allocated and freed by GLFW. You should not free it yourself

    It is valid until the specified joystick is disconnected,

    this function is called again for that joystick or the library is terminated.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static JoystickHats* GetJoystickHatsRaw(int jid, out int count)
    parameters:
    - id: jid
      type: System.Int32
      description: The joystick to query.
    - id: count
      type: System.Int32
      description: >-
        Where to store the number of hat states in the returned array.

        This is set to zero if the joystick is not present or an error occurred.
    return:
      type: OpenTK.Windowing.GraphicsLibraryFramework.JoystickHats*
      description: An array of hat states, or <code>null</code> if the joystick is not present or an error occurred.
    content.vb: Public Shared Function GetJoystickHatsRaw(jid As Integer, count As Integer) As JoystickHats*
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHatsRaw*
  nameWithType.vb: GLFW.GetJoystickHatsRaw(Integer, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHatsRaw(Integer, Integer)
  name.vb: GetJoystickHatsRaw(Integer, Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHatsRaw(System.Int32,System.Int32*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHatsRaw(System.Int32,System.Int32*)
  id: GetJoystickHatsRaw(System.Int32,System.Int32*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetJoystickHatsRaw(int, int*)
  nameWithType: GLFW.GetJoystickHatsRaw(int, int*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHatsRaw(int, int*)
  type: Method
  source:
    id: GetJoystickHatsRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 2405
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the state of all hats of the specified joystick.

    Each element in the array is one of the <xref href="OpenTK.Windowing.GraphicsLibraryFramework.JoystickHats" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    The diagonal directions are bitwise combinations of the primary (up, right, down and left) directions

    and you can test for these individually by ANDing it with the corresponding direction.

    <pre><code class="lang-csharp">if (hats[2].HasFlag(JoystickHats.Right))

    {
       // State of hat 2 could be right-up, right or right-down
    }</code></pre></p>

    <p>

    If the specified joystick is not present, this function will return NULL but will not generate an error.

    This can be used instead of first calling <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent(System.Int32)" data-throw-if-not-resolved="false"></xref>.

    </p>
  remarks: >-
    <p>

    The returned array is allocated and freed by GLFW. You should not free it yourself

    It is valid until the specified joystick is disconnected,

    this function is called again for that joystick or the library is terminated.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static JoystickHats* GetJoystickHatsRaw(int jid, int* count)
    parameters:
    - id: jid
      type: System.Int32
      description: The joystick to query.
    - id: count
      type: System.Int32*
      description: >-
        Where to store the number of hat states in the returned array.

        This is set to zero if the joystick is not present or an error occurred.
    return:
      type: OpenTK.Windowing.GraphicsLibraryFramework.JoystickHats*
      description: An array of hat states, or <code>null</code> if the joystick is not present or an error occurred.
    content.vb: Public Shared Function GetJoystickHatsRaw(jid As Integer, count As Integer*) As JoystickHats*
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHatsRaw*
  nameWithType.vb: GLFW.GetJoystickHatsRaw(Integer, Integer*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHatsRaw(Integer, Integer*)
  name.vb: GetJoystickHatsRaw(Integer, Integer*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickName(System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickName(System.Int32)
  id: GetJoystickName(System.Int32)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetJoystickName(int)
  nameWithType: GLFW.GetJoystickName(int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickName(int)
  type: Method
  source:
    id: GetJoystickName
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 2435
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the name, encoded as UTF-8, of the specified joystick.

    </p>

    <p>

    If the specified joystick is not present this function will return <code>null</code> but will not generate an error.

    This can be used instead of first calling <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent(System.Int32)" data-throw-if-not-resolved="false"></xref>.

    </p>
  remarks: >-
    <p>

    The returned string is allocated and freed by GLFW. You should not free it yourself.

    It is valid until the specified joystick is disconnected or the library is terminated.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static string GetJoystickName(int jid)
    parameters:
    - id: jid
      type: System.Int32
      description: The joystick to query.
    return:
      type: System.String
      description: The UTF-8 encoded name of the joystick, or <code>null</code> if the joystick is not present or an error occurred.
    content.vb: Public Shared Function GetJoystickName(jid As Integer) As String
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickName*
  nameWithType.vb: GLFW.GetJoystickName(Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickName(Integer)
  name.vb: GetJoystickName(Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickNameRaw(System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickNameRaw(System.Int32)
  id: GetJoystickNameRaw(System.Int32)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetJoystickNameRaw(int)
  nameWithType: GLFW.GetJoystickNameRaw(int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickNameRaw(int)
  type: Method
  source:
    id: GetJoystickNameRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 2465
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the name, encoded as UTF-8, of the specified joystick.

    </p>

    <p>

    If the specified joystick is not present this function will return <code>null</code> but will not generate an error.

    This can be used instead of first calling <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent(System.Int32)" data-throw-if-not-resolved="false"></xref>.

    </p>
  remarks: >-
    <p>

    The returned string is allocated and freed by GLFW. You should not free it yourself.

    It is valid until the specified joystick is disconnected or the library is terminated.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static byte* GetJoystickNameRaw(int jid)
    parameters:
    - id: jid
      type: System.Int32
      description: The joystick to query.
    return:
      type: System.Byte*
      description: The UTF-8 encoded name of the joystick, or <code>null</code> if the joystick is not present or an error occurred.
    content.vb: Public Shared Function GetJoystickNameRaw(jid As Integer) As Byte*
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickNameRaw*
  nameWithType.vb: GLFW.GetJoystickNameRaw(Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickNameRaw(Integer)
  name.vb: GetJoystickNameRaw(Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickGUID(System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickGUID(System.Int32)
  id: GetJoystickGUID(System.Int32)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetJoystickGUID(int)
  nameWithType: GLFW.GetJoystickGUID(int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickGUID(int)
  type: Method
  source:
    id: GetJoystickGUID
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 2508
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the SDL compatible GUID, as a UTF-8 encoded hexadecimal string,

    of the specified joystick.

    The returned string is allocated and freed by GLFW. You should not free it yourself.

    </p>

    <p>

    The GUID is what connects a joystick to a gamepad mapping.

    A connected joystick will always have a GUID even if there is no gamepad mapping assigned to it.

    </p>

    <p>

    If the specified joystick is not present this function will return <code>null</code> but will not generate an error.

    This can be used instead of first calling <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent(System.Int32)" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    The GUID uses the format introduced in SDL 2.0.5.

    This GUID tries to uniquely identify the make and model of a joystick but does not identify a specific unit,

    e.g. all wired Xbox 360 controllers will have the same GUID on that platform.

    The GUID for a unit may vary between platforms

    depending on what hardware information the platform specific APIs provide.

    </p>
  remarks: >-
    <p>

    The returned string is allocated and freed by GLFW. You should not free it yourself.

    It is valid until the specified joystick is disconnected or the library is terminated.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static string GetJoystickGUID(int jid)
    parameters:
    - id: jid
      type: System.Int32
      description: The joystick to query.
    return:
      type: System.String
      description: The UTF-8 encoded GUID of the joystick, or <code>null</code> if the joystick is not present or an error occurred.
    content.vb: Public Shared Function GetJoystickGUID(jid As Integer) As String
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickGUID*
  nameWithType.vb: GLFW.GetJoystickGUID(Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickGUID(Integer)
  name.vb: GetJoystickGUID(Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickGUIDRaw(System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickGUIDRaw(System.Int32)
  id: GetJoystickGUIDRaw(System.Int32)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetJoystickGUIDRaw(int)
  nameWithType: GLFW.GetJoystickGUIDRaw(int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickGUIDRaw(int)
  type: Method
  source:
    id: GetJoystickGUIDRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 2551
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the SDL compatible GUID, as a UTF-8 encoded hexadecimal string,

    of the specified joystick.

    The returned string is allocated and freed by GLFW. You should not free it yourself.

    </p>

    <p>

    The GUID is what connects a joystick to a gamepad mapping.

    A connected joystick will always have a GUID even if there is no gamepad mapping assigned to it.

    </p>

    <p>

    If the specified joystick is not present this function will return <code>null</code> but will not generate an error.

    This can be used instead of first calling <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent(System.Int32)" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    The GUID uses the format introduced in SDL 2.0.5.

    This GUID tries to uniquely identify the make and model of a joystick but does not identify a specific unit,

    e.g. all wired Xbox 360 controllers will have the same GUID on that platform.

    The GUID for a unit may vary between platforms

    depending on what hardware information the platform specific APIs provide.

    </p>
  remarks: >-
    <p>

    The returned string is allocated and freed by GLFW. You should not free it yourself.

    It is valid until the specified joystick is disconnected or the library is terminated.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static byte* GetJoystickGUIDRaw(int jid)
    parameters:
    - id: jid
      type: System.Int32
      description: The joystick to query.
    return:
      type: System.Byte*
      description: The UTF-8 encoded GUID of the joystick, or <code>null</code> if the joystick is not present or an error occurred.
    content.vb: Public Shared Function GetJoystickGUIDRaw(jid As Integer) As Byte*
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickGUIDRaw*
  nameWithType.vb: GLFW.GetJoystickGUIDRaw(Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickGUIDRaw(Integer)
  name.vb: GetJoystickGUIDRaw(Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetJoystickUserPointer(System.Int32,System.Void*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetJoystickUserPointer(System.Int32,System.Void*)
  id: SetJoystickUserPointer(System.Int32,System.Void*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetJoystickUserPointer(int, void*)
  nameWithType: GLFW.SetJoystickUserPointer(int, void*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetJoystickUserPointer(int, void*)
  type: Method
  source:
    id: SetJoystickUserPointer
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 2576
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the user-defined pointer of the specified joystick.

    The current value is retained until the joystick is disconnected.

    The initial value is <xref href="System.IntPtr.Zero" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    This function may be called from the joystick callback, even for a joystick that is being disconnected.

    </p>
  remarks: >-
    <p>

    This function may be called from any thread. Access is not synchronized.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void SetJoystickUserPointer(int jid, void* ptr)
    parameters:
    - id: jid
      type: System.Int32
      description: The joystick whose pointer to set.
    - id: ptr
      type: System.Void*
      description: The new value.
    content.vb: Public Shared Sub SetJoystickUserPointer(jid As Integer, ptr As Void*)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetJoystickUserPointer*
  nameWithType.vb: GLFW.SetJoystickUserPointer(Integer, Void*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetJoystickUserPointer(Integer, Void*)
  name.vb: SetJoystickUserPointer(Integer, Void*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickUserPointer(System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickUserPointer(System.Int32)
  id: GetJoystickUserPointer(System.Int32)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetJoystickUserPointer(int)
  nameWithType: GLFW.GetJoystickUserPointer(int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickUserPointer(int)
  type: Method
  source:
    id: GetJoystickUserPointer
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 2600
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the current value of the user-defined pointer of the specified joystick.

    The initial value is <xref href="System.IntPtr.Zero" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    This function may be called from the joystick callback, even for a joystick that is being disconnected.

    </p>
  remarks: >-
    <p>

    This function may be called from any thread. Access is not synchronized.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void* GetJoystickUserPointer(int jid)
    parameters:
    - id: jid
      type: System.Int32
      description: The joystick whose pointer to return.
    return:
      type: System.Void*
      description: The user-defined pointer of the given <code class="paramref">jid</code>.
    content.vb: Public Shared Function GetJoystickUserPointer(jid As Integer) As Void*
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickUserPointer*
  nameWithType.vb: GLFW.GetJoystickUserPointer(Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickUserPointer(Integer)
  name.vb: GetJoystickUserPointer(Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickIsGamepad(System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickIsGamepad(System.Int32)
  id: JoystickIsGamepad(System.Int32)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: JoystickIsGamepad(int)
  nameWithType: GLFW.JoystickIsGamepad(int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickIsGamepad(int)
  type: Method
  source:
    id: JoystickIsGamepad
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 2631
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>
     This function returns whether the specified joystick is both present and has a gamepad mapping.
     </p>
    <p>
     If the specified joystick is present but does not have a gamepad mapping
     this function will return <code>false</code> but will not generate an error.
     </p>
  remarks: >-
    <p>
     Call <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent(System.Int32)" data-throw-if-not-resolved="false"></xref> to check if a joystick is present regardless of whether it has a mapping.
     </p>
    <p>
     This function must only be called from the main thread.
     </p>
    <p>
     Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref>.
     </p>
  example: []
  syntax:
    content: public static bool JoystickIsGamepad(int jid)
    parameters:
    - id: jid
      type: System.Int32
      description: The joystick to query.
    return:
      type: System.Boolean
      description: <code>true</code> if a joystick is both present and has a gamepad mapping, or <code>false</code> otherwise.
    content.vb: Public Shared Function JoystickIsGamepad(jid As Integer) As Boolean
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickIsGamepad*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadState(System.Int32,OpenTK.Windowing.GraphicsLibraryFramework.GamepadState@)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadState(System.Int32,OpenTK.Windowing.GraphicsLibraryFramework.GamepadState@)
  nameWithType.vb: GLFW.JoystickIsGamepad(Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickIsGamepad(Integer)
  name.vb: JoystickIsGamepad(Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.UpdateGamepadMappings(System.String)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.UpdateGamepadMappings(System.String)
  id: UpdateGamepadMappings(System.String)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: UpdateGamepadMappings(string)
  nameWithType: GLFW.UpdateGamepadMappings(string)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.UpdateGamepadMappings(string)
  type: Method
  source:
    id: UpdateGamepadMappings
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 2666
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function parses the specified ASCII encoded string

    and updates the internal list with any gamepad mappings it finds.

    </p>

    <p>

    This string may contain either a single gamepad mapping or many mappings separated by newlines.

    </p>

    <p>

    The parser supports the full format of the gamecontrollerdb.txt source file

    including empty lines and comments.

    </p>

    <p>

    See <a href="https://www.glfw.org/docs/3.3/input_guide.html#gamepad_mapping">Gamepad mappings</a>

    for a description of the format.

    </p>

    <p>

    If there is already a gamepad mapping for a given GUID in the internal list, it will be replaced by the one passed to this function. If the library is terminated and re-initialized the internal list will revert to the built-in default.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidValue" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static bool UpdateGamepadMappings(string newMapping)
    parameters:
    - id: newMapping
      type: System.String
      description: The string containing the gamepad mappings.
    return:
      type: System.Boolean
      description: <code>true</code> if successful, or <code>false</code> if an error occurred.
    content.vb: Public Shared Function UpdateGamepadMappings(newMapping As String) As Boolean
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.UpdateGamepadMappings*
  nameWithType.vb: GLFW.UpdateGamepadMappings(String)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.UpdateGamepadMappings(String)
  name.vb: UpdateGamepadMappings(String)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.UpdateGamepadMappingsRaw(System.Byte*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.UpdateGamepadMappingsRaw(System.Byte*)
  id: UpdateGamepadMappingsRaw(System.Byte*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: UpdateGamepadMappingsRaw(byte*)
  nameWithType: GLFW.UpdateGamepadMappingsRaw(byte*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.UpdateGamepadMappingsRaw(byte*)
  type: Method
  source:
    id: UpdateGamepadMappingsRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 2709
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function parses the specified ASCII encoded string

    and updates the internal list with any gamepad mappings it finds.

    </p>

    <p>

    This string may contain either a single gamepad mapping or many mappings separated by newlines.

    </p>

    <p>

    The parser supports the full format of the gamecontrollerdb.txt source file

    including empty lines and comments.

    </p>

    <p>

    See <a href="https://www.glfw.org/docs/3.3/input_guide.html#gamepad_mapping">Gamepad mappings</a>

    for a description of the format.

    </p>

    <p>

    If there is already a gamepad mapping for a given GUID in the internal list, it will be replaced by the one passed to this function. If the library is terminated and re-initialized the internal list will revert to the built-in default.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidValue" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static bool UpdateGamepadMappingsRaw(byte* newMapping)
    parameters:
    - id: newMapping
      type: System.Byte*
      description: The string containing the gamepad mappings.
    return:
      type: System.Boolean
      description: <code>true</code> if successful, or <code>false</code> if an error occurred.
    content.vb: Public Shared Function UpdateGamepadMappingsRaw(newMapping As Byte*) As Boolean
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.UpdateGamepadMappingsRaw*
  nameWithType.vb: GLFW.UpdateGamepadMappingsRaw(Byte*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.UpdateGamepadMappingsRaw(Byte*)
  name.vb: UpdateGamepadMappingsRaw(Byte*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadName(System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadName(System.Int32)
  id: GetGamepadName(System.Int32)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetGamepadName(int)
  nameWithType: GLFW.GetGamepadName(int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadName(int)
  type: Method
  source:
    id: GetGamepadName
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 2742
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the human-readable name of the gamepad

    from the gamepad mapping assigned to the specified joystick.

    </p>

    <p>

    If the specified joystick is not present or does not have a gamepad mapping

    this function will return <code>null</code> but will not generate an error.

    </p>
  remarks: >-
    <p>

    Call <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent(System.Int32)" data-throw-if-not-resolved="false"></xref> to check whether it is present regardless of whether it has a mapping.

    </p>

    <p>

    The returned string is allocated and freed by GLFW. You should not free it yourself.

    It is valid until the specified joystick is disconnected,

    the gamepad mappings are updated or the library is terminated.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>
  example: []
  syntax:
    content: public static string GetGamepadName(int jid)
    parameters:
    - id: jid
      type: System.Int32
      description: The joystick to query.
    return:
      type: System.String
      description: >-
        The UTF-8 encoded name of the gamepad, or <code>null</code> if the joystick is not present,

        does not have a mapping or an error occurred.
    content.vb: Public Shared Function GetGamepadName(jid As Integer) As String
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadName*
  nameWithType.vb: GLFW.GetGamepadName(Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadName(Integer)
  name.vb: GetGamepadName(Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadNameRaw(System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadNameRaw(System.Int32)
  id: GetGamepadNameRaw(System.Int32)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetGamepadNameRaw(int)
  nameWithType: GLFW.GetGamepadNameRaw(int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadNameRaw(int)
  type: Method
  source:
    id: GetGamepadNameRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 2775
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the human-readable name of the gamepad

    from the gamepad mapping assigned to the specified joystick.

    </p>

    <p>

    If the specified joystick is not present or does not have a gamepad mapping

    this function will return <code>null</code> but will not generate an error.

    </p>
  remarks: >-
    <p>

    Call <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent(System.Int32)" data-throw-if-not-resolved="false"></xref> to check whether it is present regardless of whether it has a mapping.

    </p>

    <p>

    The returned string is allocated and freed by GLFW. You should not free it yourself.

    It is valid until the specified joystick is disconnected,

    the gamepad mappings are updated or the library is terminated.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>
  example: []
  syntax:
    content: public static byte* GetGamepadNameRaw(int jid)
    parameters:
    - id: jid
      type: System.Int32
      description: The joystick to query.
    return:
      type: System.Byte*
      description: >-
        The UTF-8 encoded name of the gamepad, or <code>null</code> if the joystick is not present,

        does not have a mapping or an error occurred.
    content.vb: Public Shared Function GetGamepadNameRaw(jid As Integer) As Byte*
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadNameRaw*
  nameWithType.vb: GLFW.GetGamepadNameRaw(Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadNameRaw(Integer)
  name.vb: GetGamepadNameRaw(Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadState(System.Int32,OpenTK.Windowing.GraphicsLibraryFramework.GamepadState@)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadState(System.Int32,OpenTK.Windowing.GraphicsLibraryFramework.GamepadState@)
  id: GetGamepadState(System.Int32,OpenTK.Windowing.GraphicsLibraryFramework.GamepadState@)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetGamepadState(int, out GamepadState)
  nameWithType: GLFW.GetGamepadState(int, out GamepadState)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadState(int, out OpenTK.Windowing.GraphicsLibraryFramework.GamepadState)
  type: Method
  source:
    id: GetGamepadState
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 2811
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function retrieves the state of the specified joystick remapped to an Xbox-like gamepad.

    </p>

    <p>

    If the specified joystick is not present or does not have a gamepad mapping

    this function will return <code>false</code> but will not generate an error.

    Call <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent(System.Int32)" data-throw-if-not-resolved="false"></xref> to check whether it is present regardless of whether it has a mapping.

    </p>

    <p>

    The Guide button may not be available for input as it is often hooked by the system or the Steam client.

    </p>

    <p>

    Not all devices have all the buttons or axes provided by <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GamepadState" data-throw-if-not-resolved="false"></xref>.

    Unavailable buttons and axes will always report <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InputAction.Release" data-throw-if-not-resolved="false"></xref> and 0.0 respectively.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static bool GetGamepadState(int jid, out GamepadState state)
    parameters:
    - id: jid
      type: System.Int32
      description: The joystick to query.
    - id: state
      type: OpenTK.Windowing.GraphicsLibraryFramework.GamepadState
      description: The gamepad input state of the joystick.
    return:
      type: System.Boolean
      description: >-
        <code>true</code> if successful, or <code>false</code> if no joystick is connected,

        it has no gamepad mapping or an error occurred.
    content.vb: Public Shared Function GetGamepadState(jid As Integer, state As GamepadState) As Boolean
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadState*
  nameWithType.vb: GLFW.GetGamepadState(Integer, GamepadState)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadState(Integer, OpenTK.Windowing.GraphicsLibraryFramework.GamepadState)
  name.vb: GetGamepadState(Integer, GamepadState)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadStateRaw(System.Int32,OpenTK.Windowing.GraphicsLibraryFramework.GamepadState*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadStateRaw(System.Int32,OpenTK.Windowing.GraphicsLibraryFramework.GamepadState*)
  id: GetGamepadStateRaw(System.Int32,OpenTK.Windowing.GraphicsLibraryFramework.GamepadState*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetGamepadStateRaw(int, GamepadState*)
  nameWithType: GLFW.GetGamepadStateRaw(int, GamepadState*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadStateRaw(int, OpenTK.Windowing.GraphicsLibraryFramework.GamepadState*)
  type: Method
  source:
    id: GetGamepadStateRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 2850
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function retrieves the state of the specified joystick remapped to an Xbox-like gamepad.

    </p>

    <p>

    If the specified joystick is not present or does not have a gamepad mapping

    this function will return <code>false</code> but will not generate an error.

    Call <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent(System.Int32)" data-throw-if-not-resolved="false"></xref> to check whether it is present regardless of whether it has a mapping.

    </p>

    <p>

    The Guide button may not be available for input as it is often hooked by the system or the Steam client.

    </p>

    <p>

    Not all devices have all the buttons or axes provided by <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GamepadState" data-throw-if-not-resolved="false"></xref>.

    Unavailable buttons and axes will always report <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InputAction.Release" data-throw-if-not-resolved="false"></xref> and 0.0 respectively.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static bool GetGamepadStateRaw(int jid, GamepadState* state)
    parameters:
    - id: jid
      type: System.Int32
      description: The joystick to query.
    - id: state
      type: OpenTK.Windowing.GraphicsLibraryFramework.GamepadState*
      description: The gamepad input state of the joystick.
    return:
      type: System.Boolean
      description: >-
        <code>true</code> if successful, or <code>false</code> if no joystick is connected,

        it has no gamepad mapping or an error occurred.
    content.vb: Public Shared Function GetGamepadStateRaw(jid As Integer, state As GamepadState*) As Boolean
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadStateRaw*
  nameWithType.vb: GLFW.GetGamepadStateRaw(Integer, GamepadState*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadStateRaw(Integer, OpenTK.Windowing.GraphicsLibraryFramework.GamepadState*)
  name.vb: GetGamepadStateRaw(Integer, GamepadState*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTime
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTime
  id: GetTime
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetTime()
  nameWithType: GLFW.GetTime()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTime()
  type: Method
  source:
    id: GetTime
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 2882
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>
     This function returns the value of the GLFW timer.
     </p>
    <p>
     Unless the timer has been set using <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetTime(System.Double)" data-throw-if-not-resolved="false"></xref>,
     the timer measures time elapsed since GLFW was initialized.
     </p>
    <p>
     The resolution of the timer is system dependent, but is usually on the order of a few micro- or nanoseconds.
     It uses the highest-resolution monotonic time source on each supported platform.
     </p>
  remarks: >-
    <p>
     This function may be called from any thread.
     </p>
    <p>
     Reading and writing of the internal timer offset is not atomic,
     so it needs to be externally synchronized with calls to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetTime(System.Double)" data-throw-if-not-resolved="false"></xref>.
     </p>
    <p>
     Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.
     </p>
  example: []
  syntax:
    content: public static double GetTime()
    return:
      type: System.Double
      description: The current value, in seconds, or zero if an error occurred.
    content.vb: Public Shared Function GetTime() As Double
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTime*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetTime(System.Double)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetTime(System.Double)
  id: SetTime(System.Double)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetTime(double)
  nameWithType: GLFW.SetTime(double)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetTime(double)
  type: Method
  source:
    id: SetTime
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 2906
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the value of the GLFW timer. It then continues to count up from that value.

    The value must be a positive finite number less than or equal to 18446744073.0,

    which is approximately 584.5 years.

    </p>
  remarks: >-
    <p>

    The upper limit of the timer is calculated as floor((2^64 - 1) / 109) and is due to implementations

    storing nanoseconds in 64 bits. The limit may be increased in the future.

    </p>

    <p>

    This function may be called from any thread.

    Reading and writing of the internal timer offset is not atomic,

    so it needs to be externally synchronized with calls to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTime" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidValue" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void SetTime(double time)
    parameters:
    - id: time
      type: System.Double
      description: The new value, in seconds.
    content.vb: Public Shared Sub SetTime(time As Double)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetTime*
  nameWithType.vb: GLFW.SetTime(Double)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetTime(Double)
  name.vb: SetTime(Double)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTimerValue
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTimerValue
  id: GetTimerValue
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetTimerValue()
  nameWithType: GLFW.GetTimerValue()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTimerValue()
  type: Method
  source:
    id: GetTimerValue
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 2923
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the current value of the raw timer, measured in 1 / frequency seconds.

    To get the frequency, call <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTimerFrequency" data-throw-if-not-resolved="false"></xref>.

    </p>
  remarks: >-
    <p>

    This function may be called from any thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static long GetTimerValue()
    return:
      type: System.Int64
      description: The value of the timer, or zero if an error occurred.
    content.vb: Public Shared Function GetTimerValue() As Long
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTimerValue*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTimerFrequency
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTimerFrequency
  id: GetTimerFrequency
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetTimerFrequency()
  nameWithType: GLFW.GetTimerFrequency()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTimerFrequency()
  type: Method
  source:
    id: GetTimerFrequency
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 2939
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the frequency, in Hz, of the raw timer.

    </p>
  remarks: >-
    <p>

    This function may be called from any thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static long GetTimerFrequency()
    return:
      type: System.Int64
      description: he frequency of the timer, in Hz, or zero if an error occurred.
    content.vb: Public Shared Function GetTimerFrequency() As Long
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTimerFrequency*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCurrentContext
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCurrentContext
  id: GetCurrentContext
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetCurrentContext()
  nameWithType: GLFW.GetCurrentContext()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCurrentContext()
  type: Method
  source:
    id: GetCurrentContext
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 2955
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the window whose OpenGL or OpenGL ES context is current on the calling thread.

    </p>
  remarks: >-
    <p>

    This function may be called from any thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static Window* GetCurrentContext()
    return:
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose context is current, or <code>null</code> if no window's context is current.
    content.vb: Public Shared Function GetCurrentContext() As Window*
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCurrentContext*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SwapBuffers(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SwapBuffers(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: SwapBuffers(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SwapBuffers(Window*)
  nameWithType: GLFW.SwapBuffers(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SwapBuffers(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: SwapBuffers
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 2983
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function swaps the front and back buffers of the specified window

    when rendering with OpenGL or OpenGL ES.

    </p>

    <p>

    If the swap interval is greater than zero,

    the GPU driver waits the specified number of screen updates before swapping the buffers.

    </p>

    <p>

    The specified window must have an OpenGL or OpenGL ES context.

    Specifying a window without a context will generate a <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NoWindowContext" data-throw-if-not-resolved="false"></xref> error.

    </p>
  remarks: >-
    <p>

    EGL: The context of the specified window must be current on the calling thread.

    </p>

    <p>

    This function may be called from any thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NoWindowContext" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void SwapBuffers(Window* window)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose buffers to swap.
    content.vb: Public Shared Sub SwapBuffers(window As Window*)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SwapBuffers*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ExtensionSupported(System.String)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ExtensionSupported(System.String)
  id: ExtensionSupported(System.String)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: ExtensionSupported(string)
  nameWithType: GLFW.ExtensionSupported(string)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ExtensionSupported(string)
  type: Method
  source:
    id: ExtensionSupported
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3011
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns whether the specified API extension is supported

    by the current OpenGL or OpenGL ES context.

    It searches both for client API extension and context creation API extensions.

    </p>

    <p>

    A context must be current on the calling thread.

    Calling this function without a current context will cause a <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NoWindowContext" data-throw-if-not-resolved="false"></xref> error.

    </p>

    <p>

    As this functions retrieves and searches one or more extension strings each call,

    it is recommended that you cache its results if it is going to be used frequently.

    The extension strings will not change during the lifetime of a context, so there is no danger in doing this.

    </p>
  remarks: >-
    <p>

    This function may be called from any thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NoContext" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidValue" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static bool ExtensionSupported(string extensionName)
    parameters:
    - id: extensionName
      type: System.String
      description: The ASCII encoded name of the extension.
    return:
      type: System.Boolean
      description: <code>true</code> if the extension is available, or <code>false</code> otherwise.
    content.vb: Public Shared Function ExtensionSupported(extensionName As String) As Boolean
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ExtensionSupported*
  nameWithType.vb: GLFW.ExtensionSupported(String)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ExtensionSupported(String)
  name.vb: ExtensionSupported(String)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetProcAddress(System.String)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetProcAddress(System.String)
  id: GetProcAddress(System.String)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetProcAddress(string)
  nameWithType: GLFW.GetProcAddress(string)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetProcAddress(string)
  type: Method
  source:
    id: GetProcAddress
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3050
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    This function returns the address of the specified OpenGL or OpenGL ES core or extension function, if it is supported by the current context.

    A context must be current on the calling thread. Calling this function without a current context will cause a <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NoContext" data-throw-if-not-resolved="false"></xref> error.
  remarks: >-
    <p>

    This function does not apply to Vulkan. If you are rendering with Vulkan, see <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInstanceProcAddress(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle%2cSystem.String)" data-throw-if-not-resolved="false"></xref>, <code>vkGetInstanceProcAddr</code> and <code>vkGetDeviceProcAddr</code> instead.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NoContext" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    The address of a given function is not guaranteed to be the same between contexts.

    This function may return a non-<code>null</code> address despite the associated version or extension not being available. Always check the context version or extension string first.

    </p>

    <p>

    The returned function pointer is valid until the context is destroyed or the library is terminated.

    </p>

    <p>

    This function may be called from any thread.

    </p>
  example: []
  syntax:
    content: public static nint GetProcAddress(string procName)
    parameters:
    - id: procName
      type: System.String
      description: The name of the function.
    return:
      type: System.IntPtr
      description: The address of the function, or <code>null</code> if an error occurred.
    content.vb: Public Shared Function GetProcAddress(procName As String) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetProcAddress*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ExtensionSupported(System.String)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ExtensionSupported(System.String)
  nameWithType.vb: GLFW.GetProcAddress(String)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetProcAddress(String)
  name.vb: GetProcAddress(String)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetProcAddressRaw(System.Byte*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetProcAddressRaw(System.Byte*)
  id: GetProcAddressRaw(System.Byte*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetProcAddressRaw(byte*)
  nameWithType: GLFW.GetProcAddressRaw(byte*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetProcAddressRaw(byte*)
  type: Method
  source:
    id: GetProcAddressRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3080
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    This function returns the address of the specified OpenGL or OpenGL ES core or extension function, if it is supported by the current context.

    A context must be current on the calling thread. Calling this function without a current context will cause a <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NoContext" data-throw-if-not-resolved="false"></xref> error.
  remarks: >-
    <p>

    This function does not apply to Vulkan. If you are rendering with Vulkan, see <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInstanceProcAddress(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle%2cSystem.String)" data-throw-if-not-resolved="false"></xref>, <code>vkGetInstanceProcAddr</code> and <code>vkGetDeviceProcAddr</code> instead.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NoContext" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    The address of a given function is not guaranteed to be the same between contexts.

    This function may return a non-<code>null</code> address despite the associated version or extension not being available. Always check the context version or extension string first.

    </p>

    <p>

    The returned function pointer is valid until the context is destroyed or the library is terminated.

    </p>

    <p>

    This function may be called from any thread.

    </p>
  example: []
  syntax:
    content: public static nint GetProcAddressRaw(byte* procName)
    parameters:
    - id: procName
      type: System.Byte*
      description: The ASCII-encoded name of the function.
    return:
      type: System.IntPtr
      description: The address of the function, or <code>null</code> if an error occurred.
    content.vb: Public Shared Function GetProcAddressRaw(procName As Byte*) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetProcAddressRaw*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ExtensionSupported(System.String)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ExtensionSupported(System.String)
  nameWithType.vb: GLFW.GetProcAddressRaw(Byte*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetProcAddressRaw(Byte*)
  name.vb: GetProcAddressRaw(Byte*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ExtensionSupportedRaw(System.Byte*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ExtensionSupportedRaw(System.Byte*)
  id: ExtensionSupportedRaw(System.Byte*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: ExtensionSupportedRaw(byte*)
  nameWithType: GLFW.ExtensionSupportedRaw(byte*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ExtensionSupportedRaw(byte*)
  type: Method
  source:
    id: ExtensionSupportedRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3111
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns whether the specified API extension is supported

    by the current OpenGL or OpenGL ES context.

    It searches both for client API extension and context creation API extensions.

    </p>

    <p>

    A context must be current on the calling thread.

    Calling this function without a current context will cause a <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NoWindowContext" data-throw-if-not-resolved="false"></xref> error.

    </p>

    <p>

    As this functions retrieves and searches one or more extension strings each call,

    it is recommended that you cache its results if it is going to be used frequently.

    The extension strings will not change during the lifetime of a context, so there is no danger in doing this.

    </p>
  remarks: >-
    <p>

    This function may be called from any thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NoContext" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidValue" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static bool ExtensionSupportedRaw(byte* extensionName)
    parameters:
    - id: extensionName
      type: System.Byte*
      description: The ASCII encoded name of the extension.
    return:
      type: System.Boolean
      description: <code>true</code> if the extension is available, or <code>false</code> otherwise.
    content.vb: Public Shared Function ExtensionSupportedRaw(extensionName As Byte*) As Boolean
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ExtensionSupportedRaw*
  nameWithType.vb: GLFW.ExtensionSupportedRaw(Byte*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ExtensionSupportedRaw(Byte*)
  name.vb: ExtensionSupportedRaw(Byte*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow(System.Int32,System.Int32,System.String,OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow(System.Int32,System.Int32,System.String,OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: CreateWindow(System.Int32,System.Int32,System.String,OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: CreateWindow(int, int, string, Monitor*, Window*)
  nameWithType: GLFW.CreateWindow(int, int, string, Monitor*, Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow(int, int, string, OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: CreateWindow
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3233
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function creates a window and its associated OpenGL or OpenGL ES context.

    Most of the options controlling how the window and its context should be created

    are specified with window hints.

    </p>

    <p>

    Successful creation does not change which context is current.

    Before you can use the newly created context, you need to make it current.

    For information about the share parameter, see

    <a href="">Context object sharing</a>.

    </p>

    <p>

    The created window, framebuffer and context may differ from what you requested,

    as not all parameters and hints are

    <a href="https://www.glfw.org/docs/latest/window_guide.html#window_hints_hard">hard constraints</a>.

    This includes the size of the window, especially for full screen windows.

    To query the actual attributes of the created window, framebuffer and context,

    see <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cOpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetBool)" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cSystem.Int32%40%2cSystem.Int32%40)" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetFramebufferSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cSystem.Int32%40%2cSystem.Int32%40)" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    To create a full screen window, you need to specify the monitor the window will cover.

    If no monitor is specified, the window will be windowed mode.

    Unless you have a way for the user to choose a specific monitor,

    it is recommended that you pick the primary monitor.

    For more information on how to query connected monitors, see

    <a href="https://www.glfw.org/docs/latest/monitor_guide.html#monitor_monitors">Retrieving monitors</a>.

    </p>

    <p>

    For full screen windows, the specified size becomes the resolution of the window's desired video mode.

    As long as a full screen window is not iconified,

    the supported video mode most closely matching the desired video mode is set for the specified monitor.

    For more information about full screen windows, including the creation of so called windowed full screen

    or borderless full screen windows, see

    <a href="https://www.glfw.org/docs/latest/window_guide.html#window_windowed_full_screen">

    "Windowed full screen" windows

    </a>.

    </p>

    <p>

    Once you have created the window, you can switch it between windowed and full screen mode

    with <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cOpenTK.Windowing.GraphicsLibraryFramework.Monitor*%2cSystem.Int32%2cSystem.Int32%2cSystem.Int32%2cSystem.Int32%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>. If the window has an OpenGL or OpenGL ES context, it will be unaffected.

    </p>

    <p>

    By default, newly created windows use the placement recommended by the window system.

    To create the window at a specific position,

    make it initially invisible using the <xref href="OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool.Visible" data-throw-if-not-resolved="false"></xref> window hint,

    set its position(see <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cSystem.Int32%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>) and then show it

    (see <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ShowWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)" data-throw-if-not-resolved="false"></xref>).

    </p>

    <p>

    As long as at least one full screen window is not iconified, the screensaver is prohibited from starting.

    </p>

    <p>

    Window systems put limits on window sizes.

    Very large or very small window dimensions may be overridden by the window system on creation.

    Check the actual size after creation(see <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cSystem.Int32%40%2cSystem.Int32%40)" data-throw-if-not-resolved="false"></xref> or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSizeCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cOpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowSizeCallback)" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    The <a href="https://www.glfw.org/docs/latest/window_guide.html#buffer_swap">swap interval</a>

    is not set during window creation and the initial value may vary

    depending on driver settings and defaults.

    </p>
  remarks: >-
    <p>

    Windows: Window creation will fail if the Microsoft GDI software OpenGL implementation is the only one available.

    </p>

    <p>

    Windows: If the executable has an icon resource named GLFW_ICON, it will be set as the initial icon for the window.
             If no such icon is present, the IDI_WINLOGO icon will be used instead. To set a different icon, see <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIcon(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cSystem.ReadOnlySpan%7bOpenTK.Windowing.GraphicsLibraryFramework.Image%7d)" data-throw-if-not-resolved="false"></xref>.
    </p>

    <p>

    Windows: The context to share resources with must not be current on any other thread.

    </p>

    <p>

    OS X: The GLFW window has no icon, as it is not a document window, but the dock icon will be the same as the application bundle's icon.

    For more information on bundles, see the Bundle Programming Guide in the Mac Developer Library.

    </p>

    <p>

    OS X: The first time a window is created the menu bar is populated with common commands like Hide, Quit and About.
          The About entry opens a minimal about dialog with information from the application's bundle.
          The menu bar can be disabled with a compile-time option.
    </p>

    <p>

    OS X: On OS X 10.10 and later the window frame will not be rendered at full resolution on Retina displays
          unless the NSHighResolutionCapable key is enabled in the application bundle's Info.plist.
          For more information, see High Resolution Guidelines for OS X in the Mac Developer Library.
          The GLFW test and example programs use a custom Info.plist template for this, which can be found as CMake/MacOSXBundleInfo.plist.in in the source tree.
    </p>

    <p>

    X11: Some window managers will not respect the placement of initially hidden windows.

    X11: Due to the asynchronous nature of X11, it may take a moment for a window to reach its requested state.
         This means you may not be able to query the final size, position or other attributes directly after window creation.
    </p>

    <p>

    This function must not be called from a callback.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidValue" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.ApiUnavailable" data-throw-if-not-resolved="false"></xref>,

    <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.VersionUnavailable" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.FormatUnavailable" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static Window* CreateWindow(int width, int height, string title, Monitor* monitor, Window* share)
    parameters:
    - id: width
      type: System.Int32
      description: The desired width, in screen coordinates, of the window. This must be greater than zero.
    - id: height
      type: System.Int32
      description: The desired height, in screen coordinates, of the window. This must be greater than zero.
    - id: title
      type: System.String
      description: The initial, UTF-8 encoded window title.
    - id: monitor
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*
      description: The monitor to use for full screen mode, or <code>null</code> for windowed mode.
    - id: share
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose context to share resources with, or <code>null</code> to not share resources.
    return:
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The handle of the created window, or <code>null</code> if an error occurred.
    content.vb: Public Shared Function CreateWindow(width As Integer, height As Integer, title As String, monitor As Monitor*, share As Window*) As Window*
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow*
  nameWithType.vb: GLFW.CreateWindow(Integer, Integer, String, Monitor*, Window*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow(Integer, Integer, String, OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  name.vb: CreateWindow(Integer, Integer, String, Monitor*, Window*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindowRaw(System.Int32,System.Int32,System.Byte*,OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindowRaw(System.Int32,System.Int32,System.Byte*,OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: CreateWindowRaw(System.Int32,System.Int32,System.Byte*,OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: CreateWindowRaw(int, int, byte*, Monitor*, Window*)
  nameWithType: GLFW.CreateWindowRaw(int, int, byte*, Monitor*, Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindowRaw(int, int, byte*, OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: CreateWindowRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3367
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function creates a window and its associated OpenGL or OpenGL ES context.

    Most of the options controlling how the window and its context should be created

    are specified with window hints.

    </p>

    <p>

    Successful creation does not change which context is current.

    Before you can use the newly created context, you need to make it current.

    For information about the share parameter, see

    <a href="">Context object sharing</a>.

    </p>

    <p>

    The created window, framebuffer and context may differ from what you requested,

    as not all parameters and hints are

    <a href="https://www.glfw.org/docs/latest/window_guide.html#window_hints_hard">hard constraints</a>.

    This includes the size of the window, especially for full screen windows.

    To query the actual attributes of the created window, framebuffer and context,

    see <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cOpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetBool)" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cSystem.Int32%40%2cSystem.Int32%40)" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetFramebufferSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cSystem.Int32%40%2cSystem.Int32%40)" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    To create a full screen window, you need to specify the monitor the window will cover.

    If no monitor is specified, the window will be windowed mode.

    Unless you have a way for the user to choose a specific monitor,

    it is recommended that you pick the primary monitor.

    For more information on how to query connected monitors, see

    <a href="https://www.glfw.org/docs/latest/monitor_guide.html#monitor_monitors">Retrieving monitors</a>.

    </p>

    <p>

    For full screen windows, the specified size becomes the resolution of the window's desired video mode.

    As long as a full screen window is not iconified,

    the supported video mode most closely matching the desired video mode is set for the specified monitor.

    For more information about full screen windows, including the creation of so called windowed full screen

    or borderless full screen windows, see

    <a href="https://www.glfw.org/docs/latest/window_guide.html#window_windowed_full_screen">

    "Windowed full screen" windows

    </a>.

    </p>

    <p>

    Once you have created the window, you can switch it between windowed and full screen mode

    with <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cOpenTK.Windowing.GraphicsLibraryFramework.Monitor*%2cSystem.Int32%2cSystem.Int32%2cSystem.Int32%2cSystem.Int32%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>. If the window has an OpenGL or OpenGL ES context, it will be unaffected.

    </p>

    <p>

    By default, newly created windows use the placement recommended by the window system.

    To create the window at a specific position,

    make it initially invisible using the <xref href="OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool.Visible" data-throw-if-not-resolved="false"></xref> window hint,

    set its position(see <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cSystem.Int32%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>) and then show it

    (see <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ShowWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)" data-throw-if-not-resolved="false"></xref>).

    </p>

    <p>

    As long as at least one full screen window is not iconified, the screensaver is prohibited from starting.

    </p>

    <p>

    Window systems put limits on window sizes.

    Very large or very small window dimensions may be overridden by the window system on creation.

    Check the actual size after creation(see <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cSystem.Int32%40%2cSystem.Int32%40)" data-throw-if-not-resolved="false"></xref> or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSizeCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cOpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowSizeCallback)" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    The <a href="https://www.glfw.org/docs/latest/window_guide.html#buffer_swap">swap interval</a>

    is not set during window creation and the initial value may vary

    depending on driver settings and defaults.

    </p>
  remarks: >-
    <p>

    Windows: Window creation will fail if the Microsoft GDI software OpenGL implementation is the only one available.

    </p>

    <p>

    Windows: If the executable has an icon resource named GLFW_ICON, it will be set as the initial icon for the window.
             If no such icon is present, the IDI_WINLOGO icon will be used instead. To set a different icon, see <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIcon(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cSystem.ReadOnlySpan%7bOpenTK.Windowing.GraphicsLibraryFramework.Image%7d)" data-throw-if-not-resolved="false"></xref>.
    </p>

    <p>

    Windows: The context to share resources with must not be current on any other thread.

    </p>

    <p>

    OS X: The GLFW window has no icon, as it is not a document window, but the dock icon will be the same as the application bundle's icon.

    For more information on bundles, see the Bundle Programming Guide in the Mac Developer Library.

    </p>

    <p>

    OS X: The first time a window is created the menu bar is populated with common commands like Hide, Quit and About.
          The About entry opens a minimal about dialog with information from the application's bundle.
          The menu bar can be disabled with a compile-time option.
    </p>

    <p>

    OS X: On OS X 10.10 and later the window frame will not be rendered at full resolution on Retina displays
          unless the NSHighResolutionCapable key is enabled in the application bundle's Info.plist.
          For more information, see High Resolution Guidelines for OS X in the Mac Developer Library.
          The GLFW test and example programs use a custom Info.plist template for this, which can be found as CMake/MacOSXBundleInfo.plist.in in the source tree.
    </p>

    <p>

    X11: Some window managers will not respect the placement of initially hidden windows.

    X11: Due to the asynchronous nature of X11, it may take a moment for a window to reach its requested state.
         This means you may not be able to query the final size, position or other attributes directly after window creation.
    </p>

    <p>

    This function must not be called from a callback.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidValue" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.ApiUnavailable" data-throw-if-not-resolved="false"></xref>,

    <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.VersionUnavailable" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.FormatUnavailable" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static Window* CreateWindowRaw(int width, int height, byte* title, Monitor* monitor, Window* share)
    parameters:
    - id: width
      type: System.Int32
      description: The desired width, in screen coordinates, of the window. This must be greater than zero.
    - id: height
      type: System.Int32
      description: The desired height, in screen coordinates, of the window. This must be greater than zero.
    - id: title
      type: System.Byte*
      description: The initial, UTF-8 encoded window title.
    - id: monitor
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*
      description: The monitor to use for full screen mode, or <code>null</code> for windowed mode.
    - id: share
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose context to share resources with, or <code>null</code> to not share resources.
    return:
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The handle of the created window, or <code>null</code> if an error occurred.
    content.vb: Public Shared Function CreateWindowRaw(width As Integer, height As Integer, title As Byte*, monitor As Monitor*, share As Window*) As Window*
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindowRaw*
  nameWithType.vb: GLFW.CreateWindowRaw(Integer, Integer, Byte*, Monitor*, Window*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindowRaw(Integer, Integer, Byte*, OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  name.vb: CreateWindowRaw(Integer, Integer, Byte*, Monitor*, Window*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DestroyWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DestroyWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: DestroyWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: DestroyWindow(Window*)
  nameWithType: GLFW.DestroyWindow(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DestroyWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: DestroyWindow
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3402
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function destroys the specified window and its context. On calling this function,

    no further callbacks will be called for that window.

    </p>

    <p>

    If the context of the specified window is current on the main thread, it is detached before being destroyed.

    </p>
  remarks: >-
    <p>

    The context of the specified window must not be current on any other thread when this function is called.

    </p>

    <p>

    This function must not be called from a callback.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void DestroyWindow(Window* window)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to destroy.
    content.vb: Public Shared Sub DestroyWindow(window As Window*)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DestroyWindow*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow(System.Int32,System.Int32,System.String,OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,OpenTK.Windowing.GraphicsLibraryFramework.Window*)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow(System.Int32,System.Int32,System.String,OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,OpenTK.Windowing.GraphicsLibraryFramework.Window*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.FocusWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.FocusWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: FocusWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: FocusWindow(Window*)
  nameWithType: GLFW.FocusWindow(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.FocusWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: FocusWindow
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3428
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function brings the specified window to front and sets input focus.

    The window should already be visible and not iconified.

    </p>

    <p>

    By default, both windowed and full screen mode windows are focused when initially created.

    Set the <xref href="OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool.Focused" data-throw-if-not-resolved="false"></xref> to disable this behavior.

    </p>

    <p>

    Do not use this function to steal focus from other applications unless you are certain

    that is what the user wants.

    Focus stealing can be extremely disruptive.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void FocusWindow(Window* window)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to give input focus.
    content.vb: Public Shared Sub FocusWindow(window As Window*)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.FocusWindow*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: GetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetClipboardString(Window*)
  nameWithType: GLFW.GetClipboardString(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: GetClipboardString
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3454
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the contents of the system clipboard,

    if it contains or is convertible to a UTF-8 encoded string.

    </p>
  remarks: >-
    <p>

    This function may only be called from the main thread.

    </p>

    <p>

    The returned string is allocated and freed by GLFW. You should not free it yourself.

    The returned string is valid only until the next call to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*)" data-throw-if-not-resolved="false"></xref> or

    <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cSystem.String)" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static string GetClipboardString(Window* window)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window that will request the clipboard contents.
    return:
      type: System.String
      description: The contents of the clipboard as a UTF-8 encoded string, or <code>null</code> if an error occurred.
    content.vb: Public Shared Function GetClipboardString(window As Window*) As String
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetClipboardString*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.String)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.String)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetClipboardStringRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetClipboardStringRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: GetClipboardStringRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetClipboardStringRaw(Window*)
  nameWithType: GLFW.GetClipboardStringRaw(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetClipboardStringRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: GetClipboardStringRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3483
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the contents of the system clipboard,

    if it contains or is convertible to a UTF-8 encoded string.

    </p>
  remarks: >-
    <p>

    This function may only be called from the main thread.

    </p>

    <p>

    The returned string is allocated and freed by GLFW. You should not free it yourself.

    The returned string is valid only until the next call to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*)" data-throw-if-not-resolved="false"></xref> or

    <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cSystem.String)" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static byte* GetClipboardStringRaw(Window* window)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window that will request the clipboard contents.
    return:
      type: System.Byte*
      description: The contents of the clipboard as a UTF-8 encoded string, or <code>null</code> if an error occurred.
    content.vb: Public Shared Function GetClipboardStringRaw(window As Window*) As Byte*
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetClipboardStringRaw*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.String)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.String)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetFramebufferSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetFramebufferSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@)
  id: GetFramebufferSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetFramebufferSize(Window*, out int, out int)
  nameWithType: GLFW.GetFramebufferSize(Window*, out int, out int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetFramebufferSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*, out int, out int)
  type: Method
  source:
    id: GetFramebufferSize
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3509
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function retrieves the size, in pixels, of the framebuffer of the specified window.

    If you wish to retrieve the size of the window in screen coordinates, see <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cSystem.Int32%40%2cSystem.Int32%40)" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    Any or all of the size arguments may be <code>out _</code>.

    If an error occurs, all non-<code>out _</code> size arguments will be set to zero.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void GetFramebufferSize(Window* window, out int width, out int height)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose framebuffer to query.
    - id: width
      type: System.Int32
      description: Where to store the width, in pixels, of the framebuffer.
    - id: height
      type: System.Int32
      description: Where to store the height, in pixels, of the framebuffer.
    content.vb: Public Shared Sub GetFramebufferSize(window As Window*, width As Integer, height As Integer)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetFramebufferSize*
  nameWithType.vb: GLFW.GetFramebufferSize(Window*, Integer, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetFramebufferSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Integer, Integer)
  name.vb: GetFramebufferSize(Window*, Integer, Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetFramebufferSizeRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32*,System.Int32*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetFramebufferSizeRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32*,System.Int32*)
  id: GetFramebufferSizeRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32*,System.Int32*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetFramebufferSizeRaw(Window*, int*, int*)
  nameWithType: GLFW.GetFramebufferSizeRaw(Window*, int*, int*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetFramebufferSizeRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*, int*, int*)
  type: Method
  source:
    id: GetFramebufferSizeRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3538
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function retrieves the size, in pixels, of the framebuffer of the specified window.

    If you wish to retrieve the size of the window in screen coordinates, see <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cSystem.Int32%40%2cSystem.Int32%40)" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    Any or all of the size arguments may be <code>out _</code>.

    If an error occurs, all non-<code>out _</code> size arguments will be set to zero.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void GetFramebufferSizeRaw(Window* window, int* width, int* height)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose framebuffer to query.
    - id: width
      type: System.Int32*
      description: Where to store the width, in pixels, of the framebuffer.
    - id: height
      type: System.Int32*
      description: Where to store the height, in pixels, of the framebuffer.
    content.vb: Public Shared Sub GetFramebufferSizeRaw(window As Window*, width As Integer*, height As Integer*)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetFramebufferSizeRaw*
  nameWithType.vb: GLFW.GetFramebufferSizeRaw(Window*, Integer*, Integer*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetFramebufferSizeRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Integer*, Integer*)
  name.vb: GetFramebufferSizeRaw(Window*, Integer*, Integer*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes)
  id: GetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetInputMode(Window*, StickyAttributes)
  nameWithType: GLFW.GetInputMode(Window*, StickyAttributes)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes)
  type: Method
  source:
    id: GetInputMode
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3563
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the value of an input option for the specified window.

    The mode must be <xref href="OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes.StickyKeys" data-throw-if-not-resolved="false"></xref> or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes.StickyMouseButtons" data-throw-if-not-resolved="false"></xref>.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static bool GetInputMode(Window* window, StickyAttributes mode)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to query.
    - id: mode
      type: OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes
      description: Either <xref href="OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes.StickyKeys" data-throw-if-not-resolved="false"></xref> or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes.StickyMouseButtons" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: Whether sticky keys or sticky mouse buttons are enabled depending on the value of <code class="paramref">mode</code>.
    content.vb: Public Shared Function GetInputMode(window As Window*, mode As StickyAttributes) As Boolean
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInputMode*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes,System.Boolean)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes,System.Boolean)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute)
  id: GetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetInputMode(Window*, CursorStateAttribute)
  nameWithType: GLFW.GetInputMode(Window*, CursorStateAttribute)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute)
  type: Method
  source:
    id: GetInputMode
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3588
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the value of an input option for the specified window.

    The mode must be <xref href="OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute.Cursor" data-throw-if-not-resolved="false"></xref>.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static CursorModeValue GetInputMode(Window* window, CursorStateAttribute mode)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to query.
    - id: mode
      type: OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute
      description: <xref href="OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute.Cursor" data-throw-if-not-resolved="false"></xref>.
    return:
      type: OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue
      description: The current cursor mode.
    content.vb: Public Shared Function GetInputMode(window As Window*, mode As CursorStateAttribute) As CursorModeValue
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInputMode*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute,OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute,OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute)
  id: GetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetInputMode(Window*, LockKeyModAttribute)
  nameWithType: GLFW.GetInputMode(Window*, LockKeyModAttribute)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute)
  type: Method
  source:
    id: GetInputMode
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3613
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the value of an input option for the specified window.

    The mode must be <xref href="OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute.LockKeyMods" data-throw-if-not-resolved="false"></xref>.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static bool GetInputMode(Window* window, LockKeyModAttribute mode)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to query.
    - id: mode
      type: OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute
      description: <xref href="OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute.LockKeyMods" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: Whether or not lock key mods are enabled or not.
    content.vb: Public Shared Function GetInputMode(window As Window*, mode As LockKeyModAttribute) As Boolean
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInputMode*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute,System.Boolean)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute,System.Boolean)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute)
  id: GetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetInputMode(Window*, RawMouseMotionAttribute)
  nameWithType: GLFW.GetInputMode(Window*, RawMouseMotionAttribute)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute)
  type: Method
  source:
    id: GetInputMode
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3638
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the value of an input option for the specified window.

    The mode must be <xref href="OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute.RawMouseMotion" data-throw-if-not-resolved="false"></xref>.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static bool GetInputMode(Window* window, RawMouseMotionAttribute mode)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to query.
    - id: mode
      type: OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute
      description: <xref href="OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute.RawMouseMotion" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: Whether raw mouse motion is enabled or disabled for this window.
    content.vb: Public Shared Function GetInputMode(window As Window*, mode As RawMouseMotionAttribute) As Boolean
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInputMode*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute,System.Boolean)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute,System.Boolean)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPrimaryMonitor
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPrimaryMonitor
  id: GetPrimaryMonitor
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetPrimaryMonitor()
  nameWithType: GLFW.GetPrimaryMonitor()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPrimaryMonitor()
  type: Method
  source:
    id: GetPrimaryMonitor
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3663
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the primary monitor.

    </p>

    <p>

    This is usually the monitor where elements like the task bar or global menu bar are located.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    The primary monitor is always first in the array returned by <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitors" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static Monitor* GetPrimaryMonitor()
    return:
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*
      description: The primary monitor, or <code>null</code> if no monitors were found or if an error occurred.
    content.vb: Public Shared Function GetPrimaryMonitor() As Monitor*
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPrimaryMonitor*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoMode(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoMode(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  id: GetVideoMode(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetVideoMode(Monitor*)
  nameWithType: GLFW.GetVideoMode(Monitor*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoMode(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  type: Method
  source:
    id: GetVideoMode
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3690
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the current video mode of the specified monitor.

    </p>

    <p>

    If you have created a full screen window for that monitor,

    the return value will depend on whether that window is iconified.

    </p>
  remarks: >-
    <p>

    The returned array is allocated and freed by GLFW

    You should not free it yourself.

    It is valid until the specified monitor is disconnected or the library is terminated.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static VideoMode* GetVideoMode(Monitor* monitor)
    parameters:
    - id: monitor
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*
      description: The monitor to query.
    return:
      type: OpenTK.Windowing.GraphicsLibraryFramework.VideoMode*
      description: The current mode of the monitor, or <code>null</code> if an error occurred.
    content.vb: Public Shared Function GetVideoMode(monitor As Monitor*) As VideoMode*
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoMode*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoModes(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoModes(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetBool)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetBool)
  id: GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetBool)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetWindowAttrib(Window*, WindowAttributeGetBool)
  nameWithType: GLFW.GetWindowAttrib(Window*, WindowAttributeGetBool)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetBool)
  type: Method
  source:
    id: GetWindowAttrib
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3715
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the value of an attribute of the specified window or its OpenGL or OpenGL ES context.

    </p>
  remarks: >-
    <p>

    Framebuffer-related hints are not window attributes. See

    <a href="https://www.glfw.org/docs/3.3/window_guide.html#window_hints_fb">

    Framebuffer related attributes

    </a>

    for more information.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static bool GetWindowAttrib(Window* window, WindowAttributeGetBool attribute)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to query.
    - id: attribute
      type: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetBool
      description: The window attribute whose value to return.
    return:
      type: System.Boolean
      description: The value of the attribute, or zero if an error occurred.
    content.vb: Public Shared Function GetWindowAttrib(window As Window*, attribute As WindowAttributeGetBool) As Boolean
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetInt)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetInt)
  id: GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetInt)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetWindowAttrib(Window*, WindowAttributeGetInt)
  nameWithType: GLFW.GetWindowAttrib(Window*, WindowAttributeGetInt)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetInt)
  type: Method
  source:
    id: GetWindowAttrib
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3721
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the value of an attribute of the specified window or its OpenGL or OpenGL ES context.

    </p>
  remarks: >-
    <p>

    Framebuffer-related hints are not window attributes. See

    <a href="https://www.glfw.org/docs/3.3/window_guide.html#window_hints_fb">

    Framebuffer related attributes

    </a>

    for more information.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static int GetWindowAttrib(Window* window, WindowAttributeGetInt attribute)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to query.
    - id: attribute
      type: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetInt
      description: The window attribute whose value to return.
    return:
      type: System.Int32
      description: The value of the attribute, or zero if an error occurred.
    content.vb: Public Shared Function GetWindowAttrib(window As Window*, attribute As WindowAttributeGetInt) As Integer
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetClientApi)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetClientApi)
  id: GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetClientApi)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetWindowAttrib(Window*, WindowAttributeGetClientApi)
  nameWithType: GLFW.GetWindowAttrib(Window*, WindowAttributeGetClientApi)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetClientApi)
  type: Method
  source:
    id: GetWindowAttrib
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3727
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the value of an attribute of the specified window or its OpenGL or OpenGL ES context.

    </p>
  remarks: >-
    <p>

    Framebuffer-related hints are not window attributes. See

    <a href="https://www.glfw.org/docs/3.3/window_guide.html#window_hints_fb">

    Framebuffer related attributes

    </a>

    for more information.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static ClientApi GetWindowAttrib(Window* window, WindowAttributeGetClientApi attribute)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to query.
    - id: attribute
      type: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetClientApi
      description: The window attribute whose value to return.
    return:
      type: OpenTK.Windowing.GraphicsLibraryFramework.ClientApi
      description: The value of the attribute, or zero if an error occurred.
    content.vb: Public Shared Function GetWindowAttrib(window As Window*, attribute As WindowAttributeGetClientApi) As ClientApi
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetContextApi)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetContextApi)
  id: GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetContextApi)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetWindowAttrib(Window*, WindowAttributeGetContextApi)
  nameWithType: GLFW.GetWindowAttrib(Window*, WindowAttributeGetContextApi)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetContextApi)
  type: Method
  source:
    id: GetWindowAttrib
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3733
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the value of an attribute of the specified window or its OpenGL or OpenGL ES context.

    </p>
  remarks: >-
    <p>

    Framebuffer-related hints are not window attributes. See

    <a href="https://www.glfw.org/docs/3.3/window_guide.html#window_hints_fb">

    Framebuffer related attributes

    </a>

    for more information.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static ContextApi GetWindowAttrib(Window* window, WindowAttributeGetContextApi attribute)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to query.
    - id: attribute
      type: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetContextApi
      description: The window attribute whose value to return.
    return:
      type: OpenTK.Windowing.GraphicsLibraryFramework.ContextApi
      description: The value of the attribute, or zero if an error occurred.
    content.vb: Public Shared Function GetWindowAttrib(window As Window*, attribute As WindowAttributeGetContextApi) As ContextApi
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetOpenGlProfile)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetOpenGlProfile)
  id: GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetOpenGlProfile)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetWindowAttrib(Window*, WindowAttributeGetOpenGlProfile)
  nameWithType: GLFW.GetWindowAttrib(Window*, WindowAttributeGetOpenGlProfile)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetOpenGlProfile)
  type: Method
  source:
    id: GetWindowAttrib
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3739
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the value of an attribute of the specified window or its OpenGL or OpenGL ES context.

    </p>
  remarks: >-
    <p>

    Framebuffer-related hints are not window attributes. See

    <a href="https://www.glfw.org/docs/3.3/window_guide.html#window_hints_fb">

    Framebuffer related attributes

    </a>

    for more information.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static OpenGlProfile GetWindowAttrib(Window* window, WindowAttributeGetOpenGlProfile attribute)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to query.
    - id: attribute
      type: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetOpenGlProfile
      description: The window attribute whose value to return.
    return:
      type: OpenTK.Windowing.GraphicsLibraryFramework.OpenGlProfile
      description: The value of the attribute, or zero if an error occurred.
    content.vb: Public Shared Function GetWindowAttrib(window As Window*, attribute As WindowAttributeGetOpenGlProfile) As OpenGlProfile
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetReleaseBehavior)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetReleaseBehavior)
  id: GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetReleaseBehavior)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetWindowAttrib(Window*, WindowAttributeGetReleaseBehavior)
  nameWithType: GLFW.GetWindowAttrib(Window*, WindowAttributeGetReleaseBehavior)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetReleaseBehavior)
  type: Method
  source:
    id: GetWindowAttrib
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3745
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the value of an attribute of the specified window or its OpenGL or OpenGL ES context.

    </p>
  remarks: >-
    <p>

    Framebuffer-related hints are not window attributes. See

    <a href="https://www.glfw.org/docs/3.3/window_guide.html#window_hints_fb">

    Framebuffer related attributes

    </a>

    for more information.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static ReleaseBehavior GetWindowAttrib(Window* window, WindowAttributeGetReleaseBehavior attribute)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to query.
    - id: attribute
      type: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetReleaseBehavior
      description: The window attribute whose value to return.
    return:
      type: OpenTK.Windowing.GraphicsLibraryFramework.ReleaseBehavior
      description: The value of the attribute, or zero if an error occurred.
    content.vb: Public Shared Function GetWindowAttrib(window As Window*, attribute As WindowAttributeGetReleaseBehavior) As ReleaseBehavior
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetRobustness)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetRobustness)
  id: GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetRobustness)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetWindowAttrib(Window*, WindowAttributeGetRobustness)
  nameWithType: GLFW.GetWindowAttrib(Window*, WindowAttributeGetRobustness)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetRobustness)
  type: Method
  source:
    id: GetWindowAttrib
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3751
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the value of an attribute of the specified window or its OpenGL or OpenGL ES context.

    </p>
  remarks: >-
    <p>

    Framebuffer-related hints are not window attributes. See

    <a href="https://www.glfw.org/docs/3.3/window_guide.html#window_hints_fb">

    Framebuffer related attributes

    </a>

    for more information.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static Robustness GetWindowAttrib(Window* window, WindowAttributeGetRobustness attribute)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to query.
    - id: attribute
      type: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetRobustness
      description: The window attribute whose value to return.
    return:
      type: OpenTK.Windowing.GraphicsLibraryFramework.Robustness
      description: The value of the attribute, or zero if an error occurred.
    content.vb: Public Shared Function GetWindowAttrib(window As Window*, attribute As WindowAttributeGetRobustness) As Robustness
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowUserPointer(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Void*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowUserPointer(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Void*)
  id: SetWindowUserPointer(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Void*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetWindowUserPointer(Window*, void*)
  nameWithType: GLFW.SetWindowUserPointer(Window*, void*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowUserPointer(OpenTK.Windowing.GraphicsLibraryFramework.Window*, void*)
  type: Method
  source:
    id: SetWindowUserPointer
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3775
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the user-defined pointer of the specified window.

    </p>

    <p>

    The current value is retained until the window is destroyed.

    The initial value is <xref href="System.IntPtr.Zero" data-throw-if-not-resolved="false"></xref>.

    </p>
  remarks: >-
    <p>

    This function may be called from any thread. Access is not synchronized.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void SetWindowUserPointer(Window* window, void* pointer)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose pointer to set.
    - id: pointer
      type: System.Void*
      description: The new value.
    content.vb: Public Shared Sub SetWindowUserPointer(window As Window*, pointer As Void*)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowUserPointer*
  nameWithType.vb: GLFW.SetWindowUserPointer(Window*, Void*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowUserPointer(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Void*)
  name.vb: SetWindowUserPointer(Window*, Void*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowUserPointer(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowUserPointer(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: GetWindowUserPointer(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetWindowUserPointer(Window*)
  nameWithType: GLFW.GetWindowUserPointer(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowUserPointer(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: GetWindowUserPointer
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3798
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the current value of the user-defined pointer of the specified window.

    </p>

    <p>

    The initial value is <xref href="System.IntPtr.Zero" data-throw-if-not-resolved="false"></xref>.

    </p>
  remarks: >-
    <p>

    This function may be called from any thread. Access is not synchronized.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void* GetWindowUserPointer(Window* window)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose pointer to return.
    return:
      type: System.Void*
      description: The user-defined pointer of the given <code class="paramref">window</code>.
    content.vb: Public Shared Function GetWindowUserPointer(window As Window*) As Void*
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowUserPointer*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@)
  id: GetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetWindowSize(Window*, out int, out int)
  nameWithType: GLFW.GetWindowSize(Window*, out int, out int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*, out int, out int)
  type: Method
  source:
    id: GetWindowSize
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3825
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function retrieves the size, in screen coordinates, of the client area of the specified window.

    If you wish to retrieve the size of the framebuffer of the window in pixels, see <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetFramebufferSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cSystem.Int32%40%2cSystem.Int32%40)" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    Any or all of the size arguments may be <code>out _</code>.

    If an error occurs, all non-<code>out _</code> size arguments will be set to zero.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void GetWindowSize(Window* window, out int width, out int height)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose size to retrieve.
    - id: width
      type: System.Int32
      description: Where to store the width, in screen coordinates, of the client area.
    - id: height
      type: System.Int32
      description: Where to store the height, in screen coordinates, of the client area.
    content.vb: Public Shared Sub GetWindowSize(window As Window*, width As Integer, height As Integer)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSize*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32)
  nameWithType.vb: GLFW.GetWindowSize(Window*, Integer, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Integer, Integer)
  name.vb: GetWindowSize(Window*, Integer, Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSizeRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32*,System.Int32*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSizeRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32*,System.Int32*)
  id: GetWindowSizeRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32*,System.Int32*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetWindowSizeRaw(Window*, int*, int*)
  nameWithType: GLFW.GetWindowSizeRaw(Window*, int*, int*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSizeRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*, int*, int*)
  type: Method
  source:
    id: GetWindowSizeRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3855
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function retrieves the size, in screen coordinates, of the client area of the specified window.

    If you wish to retrieve the size of the framebuffer of the window in pixels, see <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetFramebufferSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cSystem.Int32%40%2cSystem.Int32%40)" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    Any or all of the size arguments may be <code>out _</code>.

    If an error occurs, all non-<code>out _</code> size arguments will be set to zero.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void GetWindowSizeRaw(Window* window, int* width, int* height)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose size to retrieve.
    - id: width
      type: System.Int32*
      description: Where to store the width, in screen coordinates, of the client area.
    - id: height
      type: System.Int32*
      description: Where to store the height, in screen coordinates, of the client area.
    content.vb: Public Shared Sub GetWindowSizeRaw(window As Window*, width As Integer*, height As Integer*)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSizeRaw*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32)
  nameWithType.vb: GLFW.GetWindowSizeRaw(Window*, Integer*, Integer*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSizeRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Integer*, Integer*)
  name.vb: GetWindowSizeRaw(Window*, Integer*, Integer*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@)
  id: GetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetWindowPos(Window*, out int, out int)
  nameWithType: GLFW.GetWindowPos(Window*, out int, out int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*, out int, out int)
  type: Method
  source:
    id: GetWindowPos
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3882
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function retrieves the position, in screen coordinates,

    of the upper-left corner of the client area of the specified window.

    </p>

    <p>

    Any or all of the position arguments may be <code>out _</code>.

    If an error occurs, all non-<code>out _</code> position arguments will be set to zero.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void GetWindowPos(Window* window, out int x, out int y)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to query.
    - id: x
      type: System.Int32
      description: Where to store the x-coordinate of the upper-left corner of the client area.
    - id: y
      type: System.Int32
      description: Where to store the y-coordinate of the upper-left corner of the client area.
    content.vb: Public Shared Sub GetWindowPos(window As Window*, x As Integer, y As Integer)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowPos*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32)
  nameWithType.vb: GLFW.GetWindowPos(Window*, Integer, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Integer, Integer)
  name.vb: GetWindowPos(Window*, Integer, Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowPosRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32*,System.Int32*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowPosRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32*,System.Int32*)
  id: GetWindowPosRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32*,System.Int32*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetWindowPosRaw(Window*, int*, int*)
  nameWithType: GLFW.GetWindowPosRaw(Window*, int*, int*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowPosRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*, int*, int*)
  type: Method
  source:
    id: GetWindowPosRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3912
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function retrieves the position, in screen coordinates,

    of the upper-left corner of the client area of the specified window.

    </p>

    <p>

    Any or all of the position arguments may be <code>out _</code>.

    If an error occurs, all non-<code>out _</code> position arguments will be set to zero.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void GetWindowPosRaw(Window* window, int* x, int* y)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to query.
    - id: x
      type: System.Int32*
      description: Where to store the x-coordinate of the upper-left corner of the client area.
    - id: y
      type: System.Int32*
      description: Where to store the y-coordinate of the upper-left corner of the client area.
    content.vb: Public Shared Sub GetWindowPosRaw(window As Window*, x As Integer*, y As Integer*)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowPosRaw*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32)
  nameWithType.vb: GLFW.GetWindowPosRaw(Window*, Integer*, Integer*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowPosRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Integer*, Integer*)
  name.vb: GetWindowPosRaw(Window*, Integer*, Integer*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: GetWindowMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetWindowMonitor(Window*)
  nameWithType: GLFW.GetWindowMonitor(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: GetWindowMonitor
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3933
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the handle of the monitor that the specified window is in full screen on.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static Monitor* GetWindowMonitor(Window* window)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to query.
    return:
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*
      description: The monitor, or <code>null</code> if the window is in windowed mode or an error occurred.
    content.vb: Public Shared Function GetWindowMonitor(window As Window*) As Monitor*
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowMonitor*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.HideWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.HideWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: HideWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: HideWindow(Window*)
  nameWithType: GLFW.HideWindow(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.HideWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: HideWindow
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3950
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function hides the specified window if it was previously visible.

    If the window is already hidden or is in full screen mode, this function does nothing.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void HideWindow(Window* window)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to hide.
    content.vb: Public Shared Sub HideWindow(window As Window*)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.HideWindow*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.IconifyWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.IconifyWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: IconifyWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: IconifyWindow(Window*)
  nameWithType: GLFW.IconifyWindow(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.IconifyWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: IconifyWindow
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 3971
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function iconifies (minimizes) the specified window if it was previously restored.

    If the window is already iconified, this function does nothing.

    </p>

    <p>

    If the specified window is a full screen window,

    the original monitor resolution is restored until the window is restored.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void IconifyWindow(Window* window)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to iconify.
    content.vb: Public Shared Sub IconifyWindow(window As Window*)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.IconifyWindow*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.MakeContextCurrent(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.MakeContextCurrent(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: MakeContextCurrent(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: MakeContextCurrent(Window*)
  nameWithType: GLFW.MakeContextCurrent(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.MakeContextCurrent(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: MakeContextCurrent
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4006
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function makes the OpenGL or OpenGL ES context of the specified window current on the calling thread.

    </p>

    <p>

    A context can only be made current on a single thread at a time

    and each thread can have only a single current context at a time.

    </p>

    <p>

    By default, making a context non-current implicitly forces a pipeline flush.

    </p>

    <p>

    On machines that support <code>GL_KHR_context_flush_control</code>,

    you can control whether a context performs this flush

    by setting the <xref href="OpenTK.Windowing.GraphicsLibraryFramework.WindowHintReleaseBehavior.ContextReleaseBehavior" data-throw-if-not-resolved="false"></xref> window hint.

    </p>

    <p>

    The specified window must have an OpenGL or OpenGL ES context.

    Specifying a window without a context will generate a <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NoWindowContext" data-throw-if-not-resolved="false"></xref> error.

    </p>
  remarks: >-
    <p>

    This function may be called from any thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NoWindowContext" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void MakeContextCurrent(Window* window)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose context to make current, or <code>null</code> to detach the current context.
    content.vb: Public Shared Sub MakeContextCurrent(window As Window*)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.MakeContextCurrent*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCurrentContext
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCurrentContext
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.MaximizeWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.MaximizeWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: MaximizeWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: MaximizeWindow(Window*)
  nameWithType: GLFW.MaximizeWindow(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.MaximizeWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: MaximizeWindow
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4026
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function maximizes the specified window if it was previously not maximized.

    If the window is already maximized, this function does nothing.

    </p>

    <p>

    If the specified window is a full screen window, this function does nothing.

    </p>
  remarks: >-
    <p>

    This function may only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void MaximizeWindow(Window* window)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to maximize.
    content.vb: Public Shared Sub MaximizeWindow(window As Window*)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.MaximizeWindow*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowMaximizeCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowMaximizeCallback)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowMaximizeCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowMaximizeCallback)
  id: SetWindowMaximizeCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowMaximizeCallback)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetWindowMaximizeCallback(Window*, WindowMaximizeCallback)
  nameWithType: GLFW.SetWindowMaximizeCallback(Window*, GLFWCallbacks.WindowMaximizeCallback)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowMaximizeCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowMaximizeCallback)
  type: Method
  source:
    id: SetWindowMaximizeCallback
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4048
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the maximization callback of the specified window,

    which is called when the window is maximized or restored.

    </p>
  remarks: >-
    <p>

    This function may only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static nint SetWindowMaximizeCallback(Window* window, GLFWCallbacks.WindowMaximizeCallback callback)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose callback to set.
    - id: callback
      type: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowMaximizeCallback
      description: The new callback, or <code>null</code> to remove the currently set callback.
    return:
      type: System.IntPtr
      description: The previously set callback, or <code>null</code> if no callback was set or the library had not been initialized.
    content.vb: Public Shared Function SetWindowMaximizeCallback(window As Window*, callback As GLFWCallbacks.WindowMaximizeCallback) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowMaximizeCallback*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.MaximizeWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.MaximizeWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetFramebufferSizeCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.FramebufferSizeCallback)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetFramebufferSizeCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.FramebufferSizeCallback)
  id: SetFramebufferSizeCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.FramebufferSizeCallback)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetFramebufferSizeCallback(Window*, FramebufferSizeCallback)
  nameWithType: GLFW.SetFramebufferSizeCallback(Window*, GLFWCallbacks.FramebufferSizeCallback)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetFramebufferSizeCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.FramebufferSizeCallback)
  type: Method
  source:
    id: SetFramebufferSizeCallback
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4075
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the framebuffer resize callback of the specified window,

    which is called when the framebuffer of the specified window is resized.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static nint SetFramebufferSizeCallback(Window* window, GLFWCallbacks.FramebufferSizeCallback callback)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose content scale changed.
    - id: callback
      type: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.FramebufferSizeCallback
      description: The new callback, or <code>null</code> to remove the currently set callback.
    return:
      type: System.IntPtr
      description: The previously set callback, or <code>null</code> if no callback was set or the library had not been initialized.
    content.vb: Public Shared Function SetFramebufferSizeCallback(window As Window*, callback As GLFWCallbacks.FramebufferSizeCallback) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetFramebufferSizeCallback*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetFramebufferSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetFramebufferSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowContentScaleCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowContentScaleCallback)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowContentScaleCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowContentScaleCallback)
  id: SetWindowContentScaleCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowContentScaleCallback)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetWindowContentScaleCallback(Window*, WindowContentScaleCallback)
  nameWithType: GLFW.SetWindowContentScaleCallback(Window*, GLFWCallbacks.WindowContentScaleCallback)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowContentScaleCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowContentScaleCallback)
  type: Method
  source:
    id: SetWindowContentScaleCallback
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4102
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the window content scale callback of the specified window,

    which is called when the content scale of the specified window changes.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static nint SetWindowContentScaleCallback(Window* window, GLFWCallbacks.WindowContentScaleCallback callback)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose content scale changed.
    - id: callback
      type: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowContentScaleCallback
      description: The new callback, or <code>null</code> to remove the currently set callback.
    return:
      type: System.IntPtr
      description: The previously set callback, or <code>null</code> if no callback was set or the library had not been initialized.
    content.vb: Public Shared Function SetWindowContentScaleCallback(window As Window*, callback As GLFWCallbacks.WindowContentScaleCallback) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowContentScaleCallback*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowContentScale(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Single@,System.Single@)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowContentScale(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Single@,System.Single@)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PollEvents
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PollEvents
  id: PollEvents
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: PollEvents()
  nameWithType: GLFW.PollEvents()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PollEvents()
  type: Method
  source:
    id: PollEvents
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4140
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function processes only those events that are already in the event queue and then returns immediately.

    Processing events will cause the window and input callbacks associated with those events to be called.

    </p>

    <p>

    On some platforms, a window move, resize or menu operation will cause event processing to block.

    This is due to how event processing is designed on those platforms.

    You can use the

    <a href="https://www.glfw.org/docs/latest/window_guide.html#window_refresh">window refresh callback</a>

    to redraw the contents of your window when necessary during such operations.

    </p>

    <p>

    On some platforms, certain events are sent directly to the application without going through the event queue,

    causing callbacks to be called outside of a call to one of the event processing functions.

    </p>

    <p>

    Event processing is not required for joystick input to work.

    </p>
  remarks: >-
    <p>

    This function must not be called from a callback.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void PollEvents()
    content.vb: Public Shared Sub PollEvents()
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PollEvents*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PostEmptyEvent
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PostEmptyEvent
  id: PostEmptyEvent
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: PostEmptyEvent()
  nameWithType: GLFW.PostEmptyEvent()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PostEmptyEvent()
  type: Method
  source:
    id: PostEmptyEvent
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4160
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function posts an empty event from the current thread to the event queue,

    causing <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEvents" data-throw-if-not-resolved="false"></xref> or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEventsTimeout(System.Double)" data-throw-if-not-resolved="false"></xref> to return.

    </p>

    <p>

    If no windows exist, this function returns immediately.

    For synchronization of threads in applications that do not create windows, use your threading library of choice.

    </p>
  remarks: >-
    <p>

    This function may be called from any thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void PostEmptyEvent()
    content.vb: Public Shared Sub PostEmptyEvent()
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PostEmptyEvent*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.RestoreWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.RestoreWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: RestoreWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: RestoreWindow(Window*)
  nameWithType: GLFW.RestoreWindow(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.RestoreWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: RestoreWindow
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4180
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function restores the specified window if it was previously iconified (minimized) or maximized.

    If the window is already restored, this function does nothing.

    </p>

    <p>

    If the specified window is a full screen window, the resolution chosen for the window is restored on the selected monitor.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void RestoreWindow(Window* window)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to restore.
    content.vb: Public Shared Sub RestoreWindow(window As Window*)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.RestoreWindow*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCharCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharCallback)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCharCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharCallback)
  id: SetCharCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharCallback)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetCharCallback(Window*, CharCallback)
  nameWithType: GLFW.SetCharCallback(Window*, GLFWCallbacks.CharCallback)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCharCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharCallback)
  type: Method
  source:
    id: SetCharCallback
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4216
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the character callback of the specified window, which is called when a Unicode character is input.

    </p>

    <p>

    The character callback is intended for Unicode text input. As it deals with characters,

    it is keyboard layout dependent, whereas the key callback is not. Characters do not map 1:1 to physical keys

    as a key may produce zero, one, or more characters.

    </p>

    <p>

    If you want to know whether a specific physical key was pressed or released, see the key callback instead.

    </p>

    <p>

    The character callback behaves as system text input normally does

    and will not be called if modifier keys are held down that would prevent normal text input on that platform,

    for example a Super (Command) key on OS X or Alt key on Windows.

    </p>

    <p>

    There is a character with modifiers callback(<xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCharModsCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cOpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharModsCallback)" data-throw-if-not-resolved="false"></xref>) that receives these events.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static nint SetCharCallback(Window* window, GLFWCallbacks.CharCallback callback)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose callback to set.
    - id: callback
      type: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharCallback
      description: The new callback, or <code>null</code> to remove the currently set callback.
    return:
      type: System.IntPtr
      description: The previously set callback, or <code>null</code> if no callback was set or the library had not been initialized.
    content.vb: Public Shared Function SetCharCallback(window As Window*, callback As GLFWCallbacks.CharCallback) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCharCallback*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCharModsCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharModsCallback)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCharModsCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharModsCallback)
  id: SetCharModsCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharModsCallback)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetCharModsCallback(Window*, CharModsCallback)
  nameWithType: GLFW.SetCharModsCallback(Window*, GLFWCallbacks.CharModsCallback)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCharModsCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharModsCallback)
  type: Method
  source:
    id: SetCharModsCallback
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4253
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the character with modifiers callback of the specified window,

    which is called when a Unicode character is input regardless of what modifier keys are used.

    </p>

    <p>

    The character with modifiers callback is intended for implementing custom Unicode character input.

    For regular Unicode text input, see the character callback.

    </p>

    <p>

    Like the character callback(<xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCharCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cOpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharCallback)" data-throw-if-not-resolved="false"></xref>),

    the character with modifiers callback deals with characters and is keyboard layout dependent.

    Characters do not map 1:1 to physical keys, as a key may produce zero, one, or more characters.

    </p>

    <p>

    If you want to know whether a specific physical key was pressed or released,

    see the key callback(<xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetKeyCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cOpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.KeyCallback)" data-throw-if-not-resolved="false"></xref>) instead.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static nint SetCharModsCallback(Window* window, GLFWCallbacks.CharModsCallback callback)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose callback to set.
    - id: callback
      type: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharModsCallback
      description: The new callback, or <code>null</code> to remove the currently set callback.
    return:
      type: System.IntPtr
      description: The previously set callback, or <code>null</code> if no callback was set or an error occurred.
    content.vb: Public Shared Function SetCharModsCallback(window As Window*, callback As GLFWCallbacks.CharModsCallback) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCharModsCallback*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.String)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.String)
  id: SetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.String)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetClipboardString(Window*, string)
  nameWithType: GLFW.SetClipboardString(Window*, string)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*, string)
  type: Method
  source:
    id: SetClipboardString
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4279
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the system clipboard to the specified, UTF-8 encoded string.

    </p>
  remarks: >-
    <p>

    The specified string is copied before this function returns.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void SetClipboardString(Window* window, string data)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window that will own the clipboard contents.
    - id: data
      type: System.String
      description: A UTF-8 encoded string.
    content.vb: Public Shared Sub SetClipboardString(window As Window*, data As String)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetClipboardString*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  nameWithType.vb: GLFW.SetClipboardString(Window*, String)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*, String)
  name.vb: SetClipboardString(Window*, String)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetClipboardStringRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Byte*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetClipboardStringRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Byte*)
  id: SetClipboardStringRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Byte*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetClipboardStringRaw(Window*, byte*)
  nameWithType: GLFW.SetClipboardStringRaw(Window*, byte*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetClipboardStringRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*, byte*)
  type: Method
  source:
    id: SetClipboardStringRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4312
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the system clipboard to the specified, UTF-8 encoded string.

    </p>
  remarks: >-
    <p>

    The specified string is copied before this function returns.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void SetClipboardStringRaw(Window* window, byte* data)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window that will own the clipboard contents.
    - id: data
      type: System.Byte*
      description: A UTF-8 encoded string.
    content.vb: Public Shared Sub SetClipboardStringRaw(window As Window*, data As Byte*)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetClipboardStringRaw*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  nameWithType.vb: GLFW.SetClipboardStringRaw(Window*, Byte*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetClipboardStringRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Byte*)
  name.vb: SetClipboardStringRaw(Window*, Byte*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursorEnterCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CursorEnterCallback)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursorEnterCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CursorEnterCallback)
  id: SetCursorEnterCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CursorEnterCallback)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetCursorEnterCallback(Window*, CursorEnterCallback)
  nameWithType: GLFW.SetCursorEnterCallback(Window*, GLFWCallbacks.CursorEnterCallback)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursorEnterCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CursorEnterCallback)
  type: Method
  source:
    id: SetCursorEnterCallback
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4336
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the cursor boundary crossing callback of the specified window

    which is called when the cursor enters or leaves the client area of the window.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static nint SetCursorEnterCallback(Window* window, GLFWCallbacks.CursorEnterCallback callback)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose callback to set.
    - id: callback
      type: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CursorEnterCallback
      description: The new callback, or <code>null</code> to remove the currently set callback.
    return:
      type: System.IntPtr
      description: The previously set callback, or <code>null</code> if no callback was set or the library had not been initialized.
    content.vb: Public Shared Function SetCursorEnterCallback(window As Window*, callback As GLFWCallbacks.CursorEnterCallback) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursorEnterCallback*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursorPosCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CursorPosCallback)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursorPosCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CursorPosCallback)
  id: SetCursorPosCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CursorPosCallback)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetCursorPosCallback(Window*, CursorPosCallback)
  nameWithType: GLFW.SetCursorPosCallback(Window*, GLFWCallbacks.CursorPosCallback)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursorPosCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CursorPosCallback)
  type: Method
  source:
    id: SetCursorPosCallback
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4366
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the cursor position callback of the specified window,

    which is called when the cursor is moved.

    </p>

    <p>

    The callback is provided with the position, in screen coordinates,

    relative to the upper-left corner of the client area of the window.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static nint SetCursorPosCallback(Window* window, GLFWCallbacks.CursorPosCallback callback)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose callback to set.
    - id: callback
      type: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CursorPosCallback
      description: The new callback, or <code>null</code> to remove the currently set callback.
    return:
      type: System.IntPtr
      description: The previously set callback, or <code>null</code> if no callback was set or the library had not been initialized.
    content.vb: Public Shared Function SetCursorPosCallback(window As Window*, callback As GLFWCallbacks.CursorPosCallback) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursorPosCallback*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetDropCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.DropCallback)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetDropCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.DropCallback)
  id: SetDropCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.DropCallback)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetDropCallback(Window*, DropCallback)
  nameWithType: GLFW.SetDropCallback(Window*, GLFWCallbacks.DropCallback)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetDropCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.DropCallback)
  type: Method
  source:
    id: SetDropCallback
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4397
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the file drop callback of the specified window,

    which is called when one or more dragged files are dropped on the window.

    </p>

    <p>

    Because the path array and its strings may have been generated specifically for that event,

    they are not guaranteed to be valid after the callback has returned.

    If you wish to use them after the callback returns, you need to make a deep copy.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static nint SetDropCallback(Window* window, GLFWCallbacks.DropCallback callback)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose callback to set.
    - id: callback
      type: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.DropCallback
      description: The new file drop callback, or <code>null</code> to remove the currently set callback.
    return:
      type: System.IntPtr
      description: The previously set callback, or <code>null</code> if no callback was set or the library had not been initialized.
    content.vb: Public Shared Function SetDropCallback(window As Window*, callback As GLFWCallbacks.DropCallback) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetDropCallback*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetErrorCallback(OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ErrorCallback)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetErrorCallback(OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ErrorCallback)
  id: SetErrorCallback(OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ErrorCallback)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetErrorCallback(ErrorCallback)
  nameWithType: GLFW.SetErrorCallback(GLFWCallbacks.ErrorCallback)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetErrorCallback(OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ErrorCallback)
  type: Method
  source:
    id: SetErrorCallback
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4432
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the error callback, which is called with an error code

    and a human-readable description each time a GLFW error occurs.

    </p>

    <p>

    The error callback is called on the thread where the error occurred.

    If you are using GLFW from multiple threads, your error callback needs to be written accordingly.

    </p>

    <p>

    Because the description string may have been generated specifically for that error,

    it is not guaranteed to be valid after the callback has returned.

    If you wish to use it after the callback returns, you need to make a deep copy.

    </p>

    <p>

    Once set, the error callback remains set even after the library has been terminated.

    </p>
  remarks: >-
    <p>

    This function may be called before <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Init" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    This function must only be called from the main thread.

    </p>
  example: []
  syntax:
    content: public static nint SetErrorCallback(GLFWCallbacks.ErrorCallback callback)
    parameters:
    - id: callback
      type: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ErrorCallback
      description: The new callback, or <code>null</code> to remove the currently set callback.
    return:
      type: System.IntPtr
      description: The previously set callback, or <code>null</code> if no callback was set.
    content.vb: Public Shared Function SetErrorCallback(callback As GLFWCallbacks.ErrorCallback) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetErrorCallback*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute,OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute,OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue)
  id: SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute,OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetInputMode(Window*, CursorStateAttribute, CursorModeValue)
  nameWithType: GLFW.SetInputMode(Window*, CursorStateAttribute, CursorModeValue)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute, OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue)
  type: Method
  source:
    id: SetInputMode
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4462
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets an input mode option for the specified window.

    The mode must be <xref href="OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute.Cursor" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    If the mode is <xref href="OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute.Cursor" data-throw-if-not-resolved="false"></xref>, the value must be one of the following cursor modes:

    - <xref href="OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue.CursorNormal" data-throw-if-not-resolved="false"></xref> makes the cursor visible and behaving normally.

    - <xref href="OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue.CursorHidden" data-throw-if-not-resolved="false"></xref> makes the cursor invisible when it is over the client area of
      the window but does not restrict the cursor from leaving.
    - <xref href="OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue.CursorDisabled" data-throw-if-not-resolved="false"></xref> hides and grabs the cursor, providing virtual
      and unlimited cursor movement. This is useful for implementing for example 3D camera controls.
    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void SetInputMode(Window* window, CursorStateAttribute mode, CursorModeValue value)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose input mode to set.
    - id: mode
      type: OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute
      description: <xref href="OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute.Cursor" data-throw-if-not-resolved="false"></xref>.
    - id: value
      type: OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue
      description: The new value of the specified input mode.
    content.vb: Public Shared Sub SetInputMode(window As Window*, mode As CursorStateAttribute, value As CursorModeValue)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes,System.Boolean)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes,System.Boolean)
  id: SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes,System.Boolean)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetInputMode(Window*, StickyAttributes, bool)
  nameWithType: GLFW.SetInputMode(Window*, StickyAttributes, bool)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes, bool)
  type: Method
  source:
    id: SetInputMode
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4503
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets an input mode option for the specified window.

    The mode must be <xref href="OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes.StickyKeys" data-throw-if-not-resolved="false"></xref>

    or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes.StickyMouseButtons" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    If the mode is <xref href="OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes.StickyKeys" data-throw-if-not-resolved="false"></xref>, the value must be either <code>true</code>

    to enable sticky keys, or <code>false</code> to disable it.

    </p>

    <p>

    If sticky keys are enabled, a key press will ensure that

    <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKey(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cOpenTK.Windowing.GraphicsLibraryFramework.Keys)" data-throw-if-not-resolved="false"></xref> returns <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InputAction.Press" data-throw-if-not-resolved="false"></xref> the next time it is called even if the key had been released before the call.

    This is useful when you are only interested in whether keys have been pressed but not when or in which order.

    </p>

    <p>

    If the mode is <xref href="OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes.StickyMouseButtons" data-throw-if-not-resolved="false"></xref>, the value must be either <code>true</code>

    to enable sticky mouse buttons, or <code>false</code> to disable it.

    If sticky mouse buttons are enabled, a mouse button press will ensure that

    <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMouseButton(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cOpenTK.Windowing.GraphicsLibraryFramework.MouseButton)" data-throw-if-not-resolved="false"></xref> returns <xref href="OpenTK.Windowing.GraphicsLibraryFramework.InputAction.Press" data-throw-if-not-resolved="false"></xref> the next time it is called even if the mouse button had been released before the call.

    This is useful when you are only interested in whether mouse buttons have been pressed but not when or in which order.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void SetInputMode(Window* window, StickyAttributes mode, bool value)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose input mode to set.
    - id: mode
      type: OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes
      description: Either <xref href="OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes.StickyKeys" data-throw-if-not-resolved="false"></xref> or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes.StickyMouseButtons" data-throw-if-not-resolved="false"></xref>.
    - id: value
      type: System.Boolean
      description: The new value of the specified input mode.
    content.vb: Public Shared Sub SetInputMode(window As Window*, mode As StickyAttributes, value As Boolean)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode*
  nameWithType.vb: GLFW.SetInputMode(Window*, StickyAttributes, Boolean)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes, Boolean)
  name.vb: SetInputMode(Window*, StickyAttributes, Boolean)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute,System.Boolean)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute,System.Boolean)
  id: SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute,System.Boolean)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetInputMode(Window*, LockKeyModAttribute, bool)
  nameWithType: GLFW.SetInputMode(Window*, LockKeyModAttribute, bool)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute, bool)
  type: Method
  source:
    id: SetInputMode
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4533
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets an input mode option for the specified window.

    The mode must be <xref href="OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute.LockKeyMods" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    If the mode is <xref href="OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute.LockKeyMods" data-throw-if-not-resolved="false"></xref>, the value must be either true to enable lock key modifier bits,

    or false to disable them. If enabled, callbacks that receive modifier bits will also have the

    caps lock modifier bit set when the event was generated with Caps Lock on, and the

    num lock modifier  bit when Num Lock was on.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void SetInputMode(Window* window, LockKeyModAttribute mode, bool value)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose input mode to set.
    - id: mode
      type: OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute
      description: The value <xref href="OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute.LockKeyMods" data-throw-if-not-resolved="false"></xref>.
    - id: value
      type: System.Boolean
      description: The new value of the specified input mode.
    content.vb: Public Shared Sub SetInputMode(window As Window*, mode As LockKeyModAttribute, value As Boolean)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode*
  nameWithType.vb: GLFW.SetInputMode(Window*, LockKeyModAttribute, Boolean)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute, Boolean)
  name.vb: SetInputMode(Window*, LockKeyModAttribute, Boolean)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute,System.Boolean)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute,System.Boolean)
  id: SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute,System.Boolean)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetInputMode(Window*, RawMouseMotionAttribute, bool)
  nameWithType: GLFW.SetInputMode(Window*, RawMouseMotionAttribute, bool)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute, bool)
  type: Method
  source:
    id: SetInputMode
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4561
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets an input mode option for the specified window.

    The mode must be <xref href="OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute.RawMouseMotion" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    If the mode is <xref href="OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute.RawMouseMotion" data-throw-if-not-resolved="false"></xref>, the value must be either GLFW_TRUE to enable raw (unscaled and unaccelerated) mouse motion when the cursor is disabled, or GLFW_FALSE to disable it.

    If raw motion is not supported, attempting to set this will emit GLFW_PLATFORM_ERROR. Call glfwRawMouseMotionSupported to check for support.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void SetInputMode(Window* window, RawMouseMotionAttribute mode, bool value)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose raw mouse motion mode to set.
    - id: mode
      type: OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute
      description: The value <xref href="OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute.RawMouseMotion" data-throw-if-not-resolved="false"></xref>.
    - id: value
      type: System.Boolean
      description: Whether raw mouse motion should be enabled or disabled.
    content.vb: Public Shared Sub SetInputMode(window As Window*, mode As RawMouseMotionAttribute, value As Boolean)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode*
  nameWithType.vb: GLFW.SetInputMode(Window*, RawMouseMotionAttribute, Boolean)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute, Boolean)
  name.vb: SetInputMode(Window*, RawMouseMotionAttribute, Boolean)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetJoystickCallback(OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.JoystickCallback)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetJoystickCallback(OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.JoystickCallback)
  id: SetJoystickCallback(OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.JoystickCallback)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetJoystickCallback(JoystickCallback)
  nameWithType: GLFW.SetJoystickCallback(GLFWCallbacks.JoystickCallback)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetJoystickCallback(OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.JoystickCallback)
  type: Method
  source:
    id: SetJoystickCallback
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4584
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the joystick configuration callback, or removes the currently set callback.

    This is called when a joystick is connected to or disconnected from the system.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static nint SetJoystickCallback(GLFWCallbacks.JoystickCallback callback)
    parameters:
    - id: callback
      type: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.JoystickCallback
      description: The new callback, or <code>null</code> to remove the currently set callback.
    return:
      type: System.IntPtr
      description: The previously set callback, or <code>null</code> if no callback was set or the library had not been initialized.
    content.vb: Public Shared Function SetJoystickCallback(callback As GLFWCallbacks.JoystickCallback) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetJoystickCallback*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetKeyCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.KeyCallback)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetKeyCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.KeyCallback)
  id: SetKeyCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.KeyCallback)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetKeyCallback(Window*, KeyCallback)
  nameWithType: GLFW.SetKeyCallback(Window*, GLFWCallbacks.KeyCallback)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetKeyCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.KeyCallback)
  type: Method
  source:
    id: SetKeyCallback
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4627
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the key callback of the specified window, which is called when a key is pressed, repeated or released.

    </p>

    <p>

    The key functions deal with physical keys, with layout independent

    key tokens(<xref href="OpenTK.Windowing.GraphicsLibraryFramework.Keys" data-throw-if-not-resolved="false"></xref>) named after their values in the standard US keyboard layout.

    If you want to input text, use the character callback(<xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCharCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cOpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharCallback)" data-throw-if-not-resolved="false"></xref>) instead.

    </p>

    <p>

    When a window loses input focus, it will generate synthetic key release events for all pressed keys.

    You can tell these events from user-generated events by the fact that the synthetic ones are generated

    after the focus loss event has been processed,

    i.e. after the window focus callback(<xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowFocusCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cOpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowFocusCallback)" data-throw-if-not-resolved="false"></xref>) has been called.

    </p>

    <p>

    The scancode of a key is specific to that platform or sometimes even to that machine.

    Scancodes are intended to allow users to bind keys that don't have a GLFW key token.

    Such keys have key set to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.Keys.Unknown" data-throw-if-not-resolved="false"></xref>, their state is not saved

    and so it cannot be queried with <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKey(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cOpenTK.Windowing.GraphicsLibraryFramework.Keys)" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    Sometimes GLFW needs to generate synthetic key events, in which case the scancode may be zero.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static nint SetKeyCallback(Window* window, GLFWCallbacks.KeyCallback callback)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose callback to set.
    - id: callback
      type: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.KeyCallback
      description: The new key callback, or <code>null</code> to remove the currently set callback.
    return:
      type: System.IntPtr
      description: The previously set callback, or <code>null</code> if no callback was set or the library had not been initialized.
    content.vb: Public Shared Function SetKeyCallback(window As Window*, callback As GLFWCallbacks.KeyCallback) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetKeyCallback*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetScrollCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ScrollCallback)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetScrollCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ScrollCallback)
  id: SetScrollCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ScrollCallback)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetScrollCallback(Window*, ScrollCallback)
  nameWithType: GLFW.SetScrollCallback(Window*, GLFWCallbacks.ScrollCallback)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetScrollCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ScrollCallback)
  type: Method
  source:
    id: SetScrollCallback
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4656
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the scroll callback of the specified window,

    which is called when a scrolling device is used, such as a mouse wheel or scrolling area of a touchpad.

    </p>

    <p>

    The scroll callback receives all scrolling input, like that from a mouse wheel or a touchpad scrolling area.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static nint SetScrollCallback(Window* window, GLFWCallbacks.ScrollCallback callback)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose callback to set.
    - id: callback
      type: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ScrollCallback
      description: The new scroll callback, or <code>null</code> to remove the currently set callback.
    return:
      type: System.IntPtr
      description: The previously set callback, or <code>null</code> if no callback was set or the library had not been initialized.
    content.vb: Public Shared Function SetScrollCallback(window As Window*, callback As GLFWCallbacks.ScrollCallback) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetScrollCallback*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetMonitorCallback(OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MonitorCallback)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetMonitorCallback(OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MonitorCallback)
  id: SetMonitorCallback(OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MonitorCallback)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetMonitorCallback(MonitorCallback)
  nameWithType: GLFW.SetMonitorCallback(GLFWCallbacks.MonitorCallback)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetMonitorCallback(OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MonitorCallback)
  type: Method
  source:
    id: SetMonitorCallback
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4681
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the monitor configuration callback, or removes the currently set callback.

    This is called when a monitor is connected to or disconnected from the system.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static nint SetMonitorCallback(GLFWCallbacks.MonitorCallback callback)
    parameters:
    - id: callback
      type: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MonitorCallback
      description: The new callback, or <code>null</code> to remove the currently set callback.
    return:
      type: System.IntPtr
      description: The previously set callback, or <code>null</code> if no callback was set or the library had not been initialized.
    content.vb: Public Shared Function SetMonitorCallback(callback As GLFWCallbacks.MonitorCallback) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetMonitorCallback*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetMouseButtonCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MouseButtonCallback)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetMouseButtonCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MouseButtonCallback)
  id: SetMouseButtonCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MouseButtonCallback)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetMouseButtonCallback(Window*, MouseButtonCallback)
  nameWithType: GLFW.SetMouseButtonCallback(Window*, GLFWCallbacks.MouseButtonCallback)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetMouseButtonCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MouseButtonCallback)
  type: Method
  source:
    id: SetMouseButtonCallback
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4712
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the mouse button callback of the specified window,

    which is called when a mouse button is pressed or released.

    </p>

    <p>

    When a window loses input focus,

    it will generate synthetic mouse button release events for all pressed mouse buttons.

    You can tell these events from user-generated events by the fact that the synthetic ones are generated after

    the focus loss event has been processed,

    i.e. after the window focus callback(<xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowFocusCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cOpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowFocusCallback)" data-throw-if-not-resolved="false"></xref>) has been called.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static nint SetMouseButtonCallback(Window* window, GLFWCallbacks.MouseButtonCallback callback)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose callback to set.
    - id: callback
      type: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MouseButtonCallback
      description: The new callback, or <code>null</code> to remove the currently set callback.
    return:
      type: System.IntPtr
      description: The previously set callback, or <code>null</code> if no callback was set or the library had not been initialized.
    content.vb: Public Shared Function SetMouseButtonCallback(window As Window*, callback As GLFWCallbacks.MouseButtonCallback) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetMouseButtonCallback*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowCloseCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowCloseCallback)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowCloseCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowCloseCallback)
  id: SetWindowCloseCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowCloseCallback)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetWindowCloseCallback(Window*, WindowCloseCallback)
  nameWithType: GLFW.SetWindowCloseCallback(Window*, GLFWCallbacks.WindowCloseCallback)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowCloseCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowCloseCallback)
  type: Method
  source:
    id: SetWindowCloseCallback
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4749
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the close callback of the specified window,

    which is called when the user attempts to close the window,

    for example by clicking the close widget in the title bar.

    </p>

    <p>

    The close flag is set before this callback is called,

    but you can modify it at any time with <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowShouldClose(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    The close callback is not triggered by <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DestroyWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)" data-throw-if-not-resolved="false"></xref>.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    OS X: Selecting Quit from the application menu will trigger the close callback for all windows.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static nint SetWindowCloseCallback(Window* window, GLFWCallbacks.WindowCloseCallback callback)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose callback to set.
    - id: callback
      type: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowCloseCallback
      description: The new callback, or <code>null</code> to remove the currently set callback.
    return:
      type: System.IntPtr
      description: The previously set callback, or <code>null</code> if no callback was set or the library had not been initialized.
    content.vb: Public Shared Function SetWindowCloseCallback(window As Window*, callback As GLFWCallbacks.WindowCloseCallback) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowCloseCallback*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowFocusCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowFocusCallback)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowFocusCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowFocusCallback)
  id: SetWindowFocusCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowFocusCallback)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetWindowFocusCallback(Window*, WindowFocusCallback)
  nameWithType: GLFW.SetWindowFocusCallback(Window*, GLFWCallbacks.WindowFocusCallback)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowFocusCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowFocusCallback)
  type: Method
  source:
    id: SetWindowFocusCallback
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4780
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the focus callback of the specified window,

    which is called when the window gains or loses input focus.

    </p>

    <p>

    After the focus callback is called for a window that lost input focus,

    synthetic key and mouse button release events will be generated for all such that had been pressed.

    For more information, see <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetKeyCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cOpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.KeyCallback)" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetMouseButtonCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cOpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MouseButtonCallback)" data-throw-if-not-resolved="false"></xref>.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static nint SetWindowFocusCallback(Window* window, GLFWCallbacks.WindowFocusCallback callback)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose callback to set.
    - id: callback
      type: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowFocusCallback
      description: The new callback, or <code>null</code> to remove the currently set callback.
    return:
      type: System.IntPtr
      description: The previously set callback, or <code>null</code> if no callback was set or the library had not been initialized.
    content.vb: Public Shared Function SetWindowFocusCallback(window As Window*, callback As GLFWCallbacks.WindowFocusCallback) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowFocusCallback*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIcon(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.ReadOnlySpan{OpenTK.Windowing.GraphicsLibraryFramework.Image})
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIcon(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.ReadOnlySpan{OpenTK.Windowing.GraphicsLibraryFramework.Image})
  id: SetWindowIcon(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.ReadOnlySpan{OpenTK.Windowing.GraphicsLibraryFramework.Image})
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetWindowIcon(Window*, ReadOnlySpan<Image>)
  nameWithType: GLFW.SetWindowIcon(Window*, ReadOnlySpan<Image>)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIcon(OpenTK.Windowing.GraphicsLibraryFramework.Window*, System.ReadOnlySpan<OpenTK.Windowing.GraphicsLibraryFramework.Image>)
  type: Method
  source:
    id: SetWindowIcon
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4817
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the icon of the specified window.

    </p>

    <p>

    If passed an array of candidate images, those of or closest to the sizes desired by the system are selected.

    </p>

    <p>

    If no images are specified, the window reverts to its default icon.

    </p>

    <p>

    The desired image sizes varies depending on platform and system settings.

    The selected images will be rescaled as needed. Good sizes include 16x16, 32x32 and 48x48.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    The specified image data is copied before this function returns.

    </p>

    <p>

    OS X: The GLFW window has no icon, as it is not a document window, so this function does nothing.

    The dock icon will be the same as the application bundle's icon. For more information on bundles,

    see the Bundle Programming Guide in the Mac Developer Library.

    </p>
  example: []
  syntax:
    content: public static void SetWindowIcon(Window* window, ReadOnlySpan<Image> images)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose icon to set.
    - id: images
      type: System.ReadOnlySpan{OpenTK.Windowing.GraphicsLibraryFramework.Image}
      description: The images to create the icon from. If zero images are passed, the window is reset to the default icon.
    content.vb: Public Shared Sub SetWindowIcon(window As Window*, images As ReadOnlySpan(Of Image))
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIcon*
  nameWithType.vb: GLFW.SetWindowIcon(Window*, ReadOnlySpan(Of Image))
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIcon(OpenTK.Windowing.GraphicsLibraryFramework.Window*, System.ReadOnlySpan(Of OpenTK.Windowing.GraphicsLibraryFramework.Image))
  name.vb: SetWindowIcon(Window*, ReadOnlySpan(Of Image))
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIconRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,OpenTK.Windowing.GraphicsLibraryFramework.Image*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIconRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,OpenTK.Windowing.GraphicsLibraryFramework.Image*)
  id: SetWindowIconRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,OpenTK.Windowing.GraphicsLibraryFramework.Image*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetWindowIconRaw(Window*, int, Image*)
  nameWithType: GLFW.SetWindowIconRaw(Window*, int, Image*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIconRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*, int, OpenTK.Windowing.GraphicsLibraryFramework.Image*)
  type: Method
  source:
    id: SetWindowIconRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4856
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the icon of the specified window.

    </p>

    <p>

    If passed an array of candidate images, those of or closest to the sizes desired by the system are selected.

    </p>

    <p>

    If no images are specified, the window reverts to its default icon.

    </p>

    <p>

    The desired image sizes varies depending on platform and system settings.

    The selected images will be rescaled as needed. Good sizes include 16x16, 32x32 and 48x48.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    The specified image data is copied before this function returns.

    </p>

    <p>

    OS X: The GLFW window has no icon, as it is not a document window, so this function does nothing.

    The dock icon will be the same as the application bundle's icon. For more information on bundles,

    see the Bundle Programming Guide in the Mac Developer Library.

    </p>
  example: []
  syntax:
    content: public static void SetWindowIconRaw(Window* window, int count, Image* images)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose icon to set.
    - id: count
      type: System.Int32
      description: The number of images in the specified array, or zero to revert to the default window icon.
    - id: images
      type: OpenTK.Windowing.GraphicsLibraryFramework.Image*
      description: The images to create the icon from. This is ignored if count is zero.
    content.vb: Public Shared Sub SetWindowIconRaw(window As Window*, count As Integer, images As Image*)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIconRaw*
  nameWithType.vb: GLFW.SetWindowIconRaw(Window*, Integer, Image*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIconRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Integer, OpenTK.Windowing.GraphicsLibraryFramework.Image*)
  name.vb: SetWindowIconRaw(Window*, Integer, Image*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIconifyCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowIconifyCallback)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIconifyCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowIconifyCallback)
  id: SetWindowIconifyCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowIconifyCallback)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetWindowIconifyCallback(Window*, WindowIconifyCallback)
  nameWithType: GLFW.SetWindowIconifyCallback(Window*, GLFWCallbacks.WindowIconifyCallback)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIconifyCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowIconifyCallback)
  type: Method
  source:
    id: SetWindowIconifyCallback
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4880
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the iconification callback of the specified window,

    which is called when the window is iconified or restored.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static nint SetWindowIconifyCallback(Window* window, GLFWCallbacks.WindowIconifyCallback callback)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose callback to set.
    - id: callback
      type: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowIconifyCallback
      description: The new callback, or <code>null</code> to remove the currently set callback.
    return:
      type: System.IntPtr
      description: The previously set callback, or <code>null</code> if no callback was set or the library had not been initialized.
    content.vb: Public Shared Function SetWindowIconifyCallback(window As Window*, callback As GLFWCallbacks.WindowIconifyCallback) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIconifyCallback*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: SetWindowMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetWindowMonitor(Window*, Monitor*, int, int, int, int, int)
  nameWithType: GLFW.SetWindowMonitor(Window*, Monitor*, int, int, int, int, int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, int, int, int, int, int)
  type: Method
  source:
    id: SetWindowMonitor
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4930
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the monitor that the window uses for full screen mode or,

    if the monitor is <code>null</code>, makes it windowed mode.

    </p>

    <p>

    When setting a monitor, this function updates the width, height and refresh rate

    of the desired video mode and switches to the video mode closest to it.

    </p>

    <p>

    The window position is ignored when setting a monitor.

    </p>

    <p>

    When the monitor is <code>null</code>, the position, width and height are used to place the window client area.

    The refresh rate is ignored when no monitor is specified.

    </p>

    <p>

    If you only wish to update the resolution of a full screen window or the size of a windowed mode window,

    see <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cSystem.Int32%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    When a window transitions from full screen to windowed mode,

    this function restores any previous window settings such as whether it is decorated,

    floating, resizable, has size or aspect ratio limits, etc..

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void SetWindowMonitor(Window* window, Monitor* monitor, int x, int y, int width, int height, int refreshRate)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose monitor, size or video mode to set.
    - id: monitor
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*
      description: The desired monitor, or <code>null</code> to set windowed mode.
    - id: x
      type: System.Int32
      description: The desired x-coordinate of the upper-left corner of the client area.
    - id: y
      type: System.Int32
      description: The desired y-coordinate of the upper-left corner of the client area.
    - id: width
      type: System.Int32
      description: The desired with, in screen coordinates, of the client area or video mode.
    - id: height
      type: System.Int32
      description: The desired height, in screen coordinates, of the client area or video mode.
    - id: refreshRate
      type: System.Int32
      description: The desired refresh rate, in Hz, of the video mode, or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DontCare" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Sub SetWindowMonitor(window As Window*, monitor As Monitor*, x As Integer, y As Integer, width As Integer, height As Integer, refreshRate As Integer)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowMonitor*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32)
  nameWithType.vb: GLFW.SetWindowMonitor(Window*, Monitor*, Integer, Integer, Integer, Integer, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, Integer, Integer, Integer, Integer, Integer)
  name.vb: SetWindowMonitor(Window*, Monitor*, Integer, Integer, Integer, Integer, Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32)
  id: SetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetWindowPos(Window*, int, int)
  nameWithType: GLFW.SetWindowPos(Window*, int, int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*, int, int)
  type: Method
  source:
    id: SetWindowPos
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4971
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the position, in screen coordinates,

    of the upper-left corner of the client area of the specified windowed mode window.

    </p>

    <p>

    If the window is a full screen window, this function does nothing.

    </p>

    <p>

    Do not use this function to move an already visible window

    unless you have very good reasons for doing so, as it will confuse and annoy the user.

    </p>

    <p>

    The window manager may put limits on what positions are allowed.

    GLFW cannot and should not override these limits.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void SetWindowPos(Window* window, int x, int y)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to query.
    - id: x
      type: System.Int32
      description: The x-coordinate of the upper-left corner of the client area.
    - id: y
      type: System.Int32
      description: The y-coordinate of the upper-left corner of the client area.
    content.vb: Public Shared Sub SetWindowPos(window As Window*, x As Integer, y As Integer)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowPos*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@)
  nameWithType.vb: GLFW.SetWindowPos(Window*, Integer, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Integer, Integer)
  name.vb: SetWindowPos(Window*, Integer, Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowPosCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowPosCallback)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowPosCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowPosCallback)
  id: SetWindowPosCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowPosCallback)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetWindowPosCallback(Window*, WindowPosCallback)
  nameWithType: GLFW.SetWindowPosCallback(Window*, GLFWCallbacks.WindowPosCallback)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowPosCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowPosCallback)
  type: Method
  source:
    id: SetWindowPosCallback
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 4997
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the position callback of the specified window, which is called when the window is moved.

    </p>

    <p>

    The callback is provided with the screen position of the upper-left corner of the client area of the window.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static nint SetWindowPosCallback(Window* window, GLFWCallbacks.WindowPosCallback callback)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose callback to set.
    - id: callback
      type: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowPosCallback
      description: The new callback, or <code>null</code> to remove the currently set callback.
    return:
      type: System.IntPtr
      description: The previously set callback, or <code>null</code> if no callback was set or the library had not been initialized.
    content.vb: Public Shared Function SetWindowPosCallback(window As Window*, callback As GLFWCallbacks.WindowPosCallback) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowPosCallback*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowRefreshCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowRefreshCallback)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowRefreshCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowRefreshCallback)
  id: SetWindowRefreshCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowRefreshCallback)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetWindowRefreshCallback(Window*, WindowRefreshCallback)
  nameWithType: GLFW.SetWindowRefreshCallback(Window*, GLFWCallbacks.WindowRefreshCallback)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowRefreshCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowRefreshCallback)
  type: Method
  source:
    id: SetWindowRefreshCallback
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 5032
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    Sets the refresh callback for the specified window.

    </p>

    <p>

    This function sets the refresh callback of the specified window, which is

    called when the content area of the window needs to be redrawn, for example

    if the window has been exposed after having been covered by another window.

    </p>

    <p>

    On compositing window systems such as Aero, Compiz, Aqua or Wayland, where

    the window contents are saved off-screen, this callback may be called only

    very infrequently or never at all.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static nint SetWindowRefreshCallback(Window* window, GLFWCallbacks.WindowRefreshCallback callback)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose callback to set.
    - id: callback
      type: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowRefreshCallback
      description: The new callback, or <code>null</code> to remove the currently set callback.
    return:
      type: System.IntPtr
      description: The previously set callback, or <code>null</code> if no callback was set or the library had not been initialized.
    content.vb: Public Shared Function SetWindowRefreshCallback(window As Window*, callback As GLFWCallbacks.WindowRefreshCallback) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowRefreshCallback*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32)
  id: SetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetWindowSize(Window*, int, int)
  nameWithType: GLFW.SetWindowSize(Window*, int, int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*, int, int)
  type: Method
  source:
    id: SetWindowSize
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 5072
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the size, in screen coordinates, of the client area of the specified window.

    </p>

    <p>

    For full screen windows, this function updates the resolution of its desired video mode

    and switches to the video mode closest to it, without affecting the window's context.

    </p>

    <p>

    As the context is unaffected, the bit depths of the framebuffer remain unchanged.

    </p>

    <p>

    If you wish to update the refresh rate of the desired video mode in addition to its resolution,

    see <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cOpenTK.Windowing.GraphicsLibraryFramework.Monitor*%2cSystem.Int32%2cSystem.Int32%2cSystem.Int32%2cSystem.Int32%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    The window manager may put limits on what sizes are allowed.

    GLFW cannot and should not override these limits.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void SetWindowSize(Window* window, int width, int height)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to resize.
    - id: width
      type: System.Int32
      description: The desired width, in screen coordinates, of the window client area.
    - id: height
      type: System.Int32
      description: The desired height, in screen coordinates, of the window client area.
    content.vb: Public Shared Sub SetWindowSize(window As Window*, width As Integer, height As Integer)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSize*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@)
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  nameWithType.vb: GLFW.SetWindowSize(Window*, Integer, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Integer, Integer)
  name.vb: SetWindowSize(Window*, Integer, Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSizeCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowSizeCallback)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSizeCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowSizeCallback)
  id: SetWindowSizeCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowSizeCallback)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetWindowSizeCallback(Window*, WindowSizeCallback)
  nameWithType: GLFW.SetWindowSizeCallback(Window*, GLFWCallbacks.WindowSizeCallback)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSizeCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowSizeCallback)
  type: Method
  source:
    id: SetWindowSizeCallback
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 5098
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the size callback of the specified window, which is called when the window is resized.

    </p>

    <p>

    The callback is provided with the size, in screen coordinates, of the client area of the window.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static nint SetWindowSizeCallback(Window* window, GLFWCallbacks.WindowSizeCallback callback)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose callback to set.
    - id: callback
      type: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowSizeCallback
      description: The new callback, or <code>null</code> to remove the currently set callback.
    return:
      type: System.IntPtr
      description: The previously set callback, or <code>null</code> if no callback was set or the library had not been initialized.
    content.vb: Public Shared Function SetWindowSizeCallback(window As Window*, callback As GLFWCallbacks.WindowSizeCallback) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSizeCallback*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowShouldClose(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Boolean)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowShouldClose(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Boolean)
  id: SetWindowShouldClose(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Boolean)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetWindowShouldClose(Window*, bool)
  nameWithType: GLFW.SetWindowShouldClose(Window*, bool)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowShouldClose(OpenTK.Windowing.GraphicsLibraryFramework.Window*, bool)
  type: Method
  source:
    id: SetWindowShouldClose
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 5123
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the value of the close flag of the specified window.

    </p>

    <p>

    This can be used to override the user's attempt to close the window, or to signal that it should be closed.

    </p>
  remarks: >-
    <p>

    This function may be called from any thread. Access is not synchronized.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void SetWindowShouldClose(Window* window, bool value)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose flag to change.
    - id: value
      type: System.Boolean
      description: The new value.
    content.vb: Public Shared Sub SetWindowShouldClose(window As Window*, value As Boolean)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowShouldClose*
  nameWithType.vb: GLFW.SetWindowShouldClose(Window*, Boolean)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowShouldClose(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Boolean)
  name.vb: SetWindowShouldClose(Window*, Boolean)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowTitleRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowTitleRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: GetWindowTitleRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetWindowTitleRaw(Window*)
  nameWithType: GLFW.GetWindowTitleRaw(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowTitleRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: GetWindowTitleRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 5149
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    This function returns the window title, encoded as UTF-8, of the specified

    window. This is the title set previously by <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFWNative.glfwCreateWindow(System.Int32%2cSystem.Int32%2cSystem.Byte*%2cOpenTK.Windowing.GraphicsLibraryFramework.Monitor*%2cOpenTK.Windowing.GraphicsLibraryFramework.Window*)" data-throw-if-not-resolved="false"></xref>

    or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFWNative.glfwSetWindowTitle(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cSystem.Byte*)" data-throw-if-not-resolved="false"></xref>.


    The returned title is currently a copy of the title last set by <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFWNative.glfwCreateWindow(System.Int32%2cSystem.Int32%2cSystem.Byte*%2cOpenTK.Windowing.GraphicsLibraryFramework.Monitor*%2cOpenTK.Windowing.GraphicsLibraryFramework.Window*)" data-throw-if-not-resolved="false"></xref>

    or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFWNative.glfwSetWindowTitle(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cSystem.Byte*)" data-throw-if-not-resolved="false"></xref>.

    It does not include any additional text which may be appended by the platform or another program.


    The returned string is allocated and freed by GLFW.

    You should not free it yourself.

    It is valid until the next call to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFWNative.glfwCreateWindow(System.Int32%2cSystem.Int32%2cSystem.Byte*%2cOpenTK.Windowing.GraphicsLibraryFramework.Monitor*%2cOpenTK.Windowing.GraphicsLibraryFramework.Window*)" data-throw-if-not-resolved="false"></xref>

    or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFWNative.glfwSetWindowTitle(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cSystem.Byte*)" data-throw-if-not-resolved="false"></xref>, or until the library is terminated.


    This function must only be called from the main thread.


    Added in version 3.4.
  example: []
  syntax:
    content: public static byte* GetWindowTitleRaw(Window* window)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to query.
    return:
      type: System.Byte*
      description: The UTF-8 encoded window title, or `NULL` if an error occurred.
    content.vb: Public Shared Function GetWindowTitleRaw(window As Window*) As Byte*
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowTitleRaw*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowTitleRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Byte*)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowTitleRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Byte*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowTitle(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowTitle(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: GetWindowTitle(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetWindowTitle(Window*)
  nameWithType: GLFW.GetWindowTitle(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowTitle(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: GetWindowTitle
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 5166
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    This function returns the window title, of the specified

    window. This is the title set previously by <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFWNative.glfwCreateWindow(System.Int32%2cSystem.Int32%2cSystem.Byte*%2cOpenTK.Windowing.GraphicsLibraryFramework.Monitor*%2cOpenTK.Windowing.GraphicsLibraryFramework.Window*)" data-throw-if-not-resolved="false"></xref>

    or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFWNative.glfwSetWindowTitle(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cSystem.Byte*)" data-throw-if-not-resolved="false"></xref>.


    The returned title is currently a copy of the title last set by <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFWNative.glfwCreateWindow(System.Int32%2cSystem.Int32%2cSystem.Byte*%2cOpenTK.Windowing.GraphicsLibraryFramework.Monitor*%2cOpenTK.Windowing.GraphicsLibraryFramework.Window*)" data-throw-if-not-resolved="false"></xref>

    or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFWNative.glfwSetWindowTitle(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cSystem.Byte*)" data-throw-if-not-resolved="false"></xref>.

    It does not include any additional text which may be appended by the platform or another program.


    This function must only be called from the main thread.


    Added in version 3.4.
  example: []
  syntax:
    content: public static string GetWindowTitle(Window* window)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to query.
    return:
      type: System.String
      description: The window title, or `NULL` if an error occurred.
    content.vb: Public Shared Function GetWindowTitle(window As Window*) As String
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowTitle*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowTitle(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.String)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowTitle(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.String)
  id: SetWindowTitle(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.String)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetWindowTitle(Window*, string)
  nameWithType: GLFW.SetWindowTitle(Window*, string)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowTitle(OpenTK.Windowing.GraphicsLibraryFramework.Window*, string)
  type: Method
  source:
    id: SetWindowTitle
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 5191
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the window title, encoded as UTF-8, of the specified window.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    OS X: The window title will not be updated until the next time you process events.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void SetWindowTitle(Window* window, string title)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose title to change.
    - id: title
      type: System.String
      description: The UTF-8 encoded window title.
    content.vb: Public Shared Sub SetWindowTitle(window As Window*, title As String)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowTitle*
  nameWithType.vb: GLFW.SetWindowTitle(Window*, String)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowTitle(OpenTK.Windowing.GraphicsLibraryFramework.Window*, String)
  name.vb: SetWindowTitle(Window*, String)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowTitleRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Byte*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowTitleRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Byte*)
  id: SetWindowTitleRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Byte*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetWindowTitleRaw(Window*, byte*)
  nameWithType: GLFW.SetWindowTitleRaw(Window*, byte*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowTitleRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*, byte*)
  type: Method
  source:
    id: SetWindowTitleRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 5223
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the window title, encoded as UTF-8, of the specified window.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    OS X: The window title will not be updated until the next time you process events.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void SetWindowTitleRaw(Window* window, byte* title)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window whose title to change.
    - id: title
      type: System.Byte*
      description: The UTF-8 encoded window title.
    content.vb: Public Shared Sub SetWindowTitleRaw(window As Window*, title As Byte*)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowTitleRaw*
  nameWithType.vb: GLFW.SetWindowTitleRaw(Window*, Byte*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowTitleRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Byte*)
  name.vb: SetWindowTitleRaw(Window*, Byte*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ShowWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ShowWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: ShowWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: ShowWindow(Window*)
  nameWithType: GLFW.ShowWindow(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ShowWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: ShowWindow
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 5246
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function makes the specified window visible if it was previously hidden.

    </p>

    <p>

    If the window is already visible or is in full screen mode, this function does nothing.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void ShowWindow(Window* window)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to make visible.
    content.vb: Public Shared Sub ShowWindow(window As Window*)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ShowWindow*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.HideWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.HideWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SwapInterval(System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SwapInterval(System.Int32)
  id: SwapInterval(System.Int32)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SwapInterval(int)
  nameWithType: GLFW.SwapInterval(int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SwapInterval(int)
  type: Method
  source:
    id: SwapInterval
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 5288
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets the swap interval for the current OpenGL or OpenGL ES context,

    i.e. the number of screen updates to wait from the time <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SwapBuffers(OpenTK.Windowing.GraphicsLibraryFramework.Window*)" data-throw-if-not-resolved="false"></xref> was called

    before swapping the buffers and returning.

    This is sometimes called vertical synchronization, vertical retrace synchronization or just vsync.

    </p>

    <p>

    A context that supports either of the <code>WGL_EXT_swap_control_tear</code>

    and <code>GLX_EXT_swap_control_tear</code> extensions also accepts negative swap intervals,

    which allows the driver to swap immediately even if a frame arrives a little bit late.

    You can check for these extensions with <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ExtensionSupported(System.String)" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    A context must be current on the calling thread.

    Calling this function without a current context will cause a <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NoContext" data-throw-if-not-resolved="false"></xref> error.

    </p>
  remarks: >-
    <p>

    This function is not called during context creation,

    leaving the swap interval set to whatever is the default on that platform.

    This is done because some swap interval extensions used by GLFW

    do not allow the swap interval to be reset to zero once it has been set to a non-zero value.

    </p>

    <p>

    Some GPU drivers do not honor the requested swap interval,

    either because of a user setting that overrides the application's request or due to bugs in the driver.

    </p>

    <p>

    This function may be called from any thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NoContext" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void SwapInterval(int interval)
    parameters:
    - id: interval
      type: System.Int32
      description: The minimum number of screen updates to wait for until the buffers are swapped by <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SwapBuffers(OpenTK.Windowing.GraphicsLibraryFramework.Window*)" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Sub SwapInterval(interval As Integer)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SwapInterval*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SwapBuffers(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SwapBuffers(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  nameWithType.vb: GLFW.SwapInterval(Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SwapInterval(Integer)
  name.vb: SwapInterval(Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEvents
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEvents
  id: WaitEvents
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: WaitEvents()
  nameWithType: GLFW.WaitEvents()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEvents()
  type: Method
  source:
    id: WaitEvents
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 5333
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>
     This function puts the calling thread to sleep until at least one event is available in the event queue.
     </p>
    <p>
     Once one or more events are available, it behaves exactly like <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PollEvents" data-throw-if-not-resolved="false"></xref>,
     i.e. the events in the queue are processed and the function then returns immediately.
     </p>
    <p>
     Processing events will cause the window and input callbacks associated with those events to be called.
     </p>
    <p>
     Since not all events are associated with callbacks,
     this function may return without a callback having been called even if you are monitoring all callbacks.
     </p>
    <p>
     On some platforms, a window move, resize or menu operation will cause event processing to block.
     This is due to how event processing is designed on those platforms.
     You can use the window refresh callback (<xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowRefreshCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cOpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowRefreshCallback)" data-throw-if-not-resolved="false"></xref>)
     to redraw the contents of your window when necessary during such operations.
     </p>
    <p>
     On some platforms,
     certain callbacks may be called outside of a call to one of the event processing functions.
     </p>
    <p>
     If no windows exist, this function returns immediately.
     For synchronization of threads in applications that do not create windows,
     use your threading library of choice.
     </p>
    <p>
     Event processing is not required for joystick input to work.
     </p>
  remarks: >-
    This function must only be called from the main thread.


    This function must not be called from a callback.


    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static void WaitEvents()
    content.vb: Public Shared Sub WaitEvents()
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEvents*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PollEvents
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PollEvents
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEventsTimeout(System.Double)
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEventsTimeout(System.Double)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEventsTimeout(System.Double)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEventsTimeout(System.Double)
  id: WaitEventsTimeout(System.Double)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: WaitEventsTimeout(double)
  nameWithType: GLFW.WaitEventsTimeout(double)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEventsTimeout(double)
  type: Method
  source:
    id: WaitEventsTimeout
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 5388
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function puts the calling thread to sleep until at least one event is available in the event queue,

    or until the specified timeout is reached.

    </p>

    <p>

    If one or more events are available, it behaves exactly like <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PollEvents" data-throw-if-not-resolved="false"></xref>,

    i.e. the events in the queue are processed and the function then returns immediately.

    </p>

    <p>

    Processing events will cause the window and input callbacks associated with those events to be called.

    </p>

    <p>

    The timeout value must be a positive finite number.

    </p>

    <p>

    Since not all events are associated with callbacks,

    this function may return without a callback having been called even if you are monitoring all callbacks.

    </p>

    <p>

    On some platforms, a window move, resize or menu operation will cause event processing to block.

    This is due to how event processing is designed on those platforms.

    </p>

    <p>

    You can use the window refresh callback (<xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowRefreshCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*%2cOpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowRefreshCallback)" data-throw-if-not-resolved="false"></xref>)

    to redraw the contents of your window when necessary during such operations.

    </p>

    <p>

    On some platforms,

    certain callbacks may be called outside of a call to one of the event processing functions.

    </p>

    <p>

    If no windows exist, this function returns immediately.

    </p>

    <p>

    For synchronization of threads in applications that do not create windows,

    use your threading library of choice.

    </p>

    <p>

    Event processing is not required for joystick input to work.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    This function must not be called from a callback.

    </p>
  example: []
  syntax:
    content: public static void WaitEventsTimeout(double timeout)
    parameters:
    - id: timeout
      type: System.Double
      description: The maximum amount of time, in seconds, to wait.
    content.vb: Public Shared Sub WaitEventsTimeout(timeout As Double)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEventsTimeout*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PollEvents
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PollEvents
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEvents
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEvents
  nameWithType.vb: GLFW.WaitEventsTimeout(Double)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEventsTimeout(Double)
  name.vb: WaitEventsTimeout(Double)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintInt,System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintInt,System.Int32)
  id: WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintInt,System.Int32)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: WindowHint(WindowHintInt, int)
  nameWithType: GLFW.WindowHint(WindowHintInt, int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintInt, int)
  type: Method
  source:
    id: WindowHint
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 5414
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets hints for the next call to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow(System.Int32%2cSystem.Int32%2cSystem.String%2cOpenTK.Windowing.GraphicsLibraryFramework.Monitor*%2cOpenTK.Windowing.GraphicsLibraryFramework.Window*)" data-throw-if-not-resolved="false"></xref>.

    The hints, once set, retain their values

    until changed by a call to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintInt%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>

    or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints" data-throw-if-not-resolved="false"></xref>, or until the library is terminated.

    </p>

    <p>

    This function does not check whether the specified hint values are valid.

    If you set hints to invalid values this will instead be reported

    by the next call to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow(System.Int32%2cSystem.Int32%2cSystem.String%2cOpenTK.Windowing.GraphicsLibraryFramework.Monitor*%2cOpenTK.Windowing.GraphicsLibraryFramework.Window*)" data-throw-if-not-resolved="false"></xref>.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void WindowHint(WindowHintInt hint, int value)
    parameters:
    - id: hint
      type: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintInt
      description: The <xref href="OpenTK.Windowing.GraphicsLibraryFramework.WindowHintInt" data-throw-if-not-resolved="false"></xref> to set.
    - id: value
      type: System.Int32
      description: The new value of the framebuffer attribute hint.
    content.vb: Public Shared Sub WindowHint(hint As WindowHintInt, value As Integer)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints
  nameWithType.vb: GLFW.WindowHint(WindowHintInt, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintInt, Integer)
  name.vb: WindowHint(WindowHintInt, Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool,System.Boolean)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool,System.Boolean)
  id: WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool,System.Boolean)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: WindowHint(WindowHintBool, bool)
  nameWithType: GLFW.WindowHint(WindowHintBool, bool)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool, bool)
  type: Method
  source:
    id: WindowHint
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 5440
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets hints for the next call to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow(System.Int32%2cSystem.Int32%2cSystem.String%2cOpenTK.Windowing.GraphicsLibraryFramework.Monitor*%2cOpenTK.Windowing.GraphicsLibraryFramework.Window*)" data-throw-if-not-resolved="false"></xref>.

    The hints, once set, retain their values

    until changed by a call to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>

    or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints" data-throw-if-not-resolved="false"></xref>, or until the library is terminated.

    </p>

    <p>

    This function does not check whether the specified hint values are valid.

    If you set hints to invalid values this will instead be reported

    by the next call to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow(System.Int32%2cSystem.Int32%2cSystem.String%2cOpenTK.Windowing.GraphicsLibraryFramework.Monitor*%2cOpenTK.Windowing.GraphicsLibraryFramework.Window*)" data-throw-if-not-resolved="false"></xref>.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void WindowHint(WindowHintBool hint, bool value)
    parameters:
    - id: hint
      type: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool
      description: The <xref href="OpenTK.Windowing.GraphicsLibraryFramework.WindowHintInt" data-throw-if-not-resolved="false"></xref> to set.
    - id: value
      type: System.Boolean
      description: The new value of the framebuffer attribute hint.
    content.vb: Public Shared Sub WindowHint(hint As WindowHintBool, value As Boolean)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints
  nameWithType.vb: GLFW.WindowHint(WindowHintBool, Boolean)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool, Boolean)
  name.vb: WindowHint(WindowHintBool, Boolean)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintClientApi,OpenTK.Windowing.GraphicsLibraryFramework.ClientApi)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintClientApi,OpenTK.Windowing.GraphicsLibraryFramework.ClientApi)
  id: WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintClientApi,OpenTK.Windowing.GraphicsLibraryFramework.ClientApi)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: WindowHint(WindowHintClientApi, ClientApi)
  nameWithType: GLFW.WindowHint(WindowHintClientApi, ClientApi)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintClientApi, OpenTK.Windowing.GraphicsLibraryFramework.ClientApi)
  type: Method
  source:
    id: WindowHint
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 5469
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets hints for the next call to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow(System.Int32%2cSystem.Int32%2cSystem.String%2cOpenTK.Windowing.GraphicsLibraryFramework.Monitor*%2cOpenTK.Windowing.GraphicsLibraryFramework.Window*)" data-throw-if-not-resolved="false"></xref>.

    The hints, once set, retain their values

    until changed by a call to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintClientApi%2cOpenTK.Windowing.GraphicsLibraryFramework.ClientApi)" data-throw-if-not-resolved="false"></xref>

    or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints" data-throw-if-not-resolved="false"></xref>, or until the library is terminated.

    </p>

    <p>

    This function does not check whether the specified hint values are valid.

    If you set hints to invalid values this will instead be reported

    by the next call to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow(System.Int32%2cSystem.Int32%2cSystem.String%2cOpenTK.Windowing.GraphicsLibraryFramework.Monitor*%2cOpenTK.Windowing.GraphicsLibraryFramework.Window*)" data-throw-if-not-resolved="false"></xref>.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void WindowHint(WindowHintClientApi hint, ClientApi value)
    parameters:
    - id: hint
      type: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintClientApi
      description: <xref href="OpenTK.Windowing.GraphicsLibraryFramework.WindowHintClientApi.ClientApi" data-throw-if-not-resolved="false"></xref>.
    - id: value
      type: OpenTK.Windowing.GraphicsLibraryFramework.ClientApi
      description: The new value of the window hint.
    content.vb: Public Shared Sub WindowHint(hint As WindowHintClientApi, value As ClientApi)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintReleaseBehavior,OpenTK.Windowing.GraphicsLibraryFramework.ReleaseBehavior)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintReleaseBehavior,OpenTK.Windowing.GraphicsLibraryFramework.ReleaseBehavior)
  id: WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintReleaseBehavior,OpenTK.Windowing.GraphicsLibraryFramework.ReleaseBehavior)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: WindowHint(WindowHintReleaseBehavior, ReleaseBehavior)
  nameWithType: GLFW.WindowHint(WindowHintReleaseBehavior, ReleaseBehavior)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintReleaseBehavior, OpenTK.Windowing.GraphicsLibraryFramework.ReleaseBehavior)
  type: Method
  source:
    id: WindowHint
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 5495
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets hints for the next call to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow(System.Int32%2cSystem.Int32%2cSystem.String%2cOpenTK.Windowing.GraphicsLibraryFramework.Monitor*%2cOpenTK.Windowing.GraphicsLibraryFramework.Window*)" data-throw-if-not-resolved="false"></xref>.

    The hints, once set, retain their values

    until changed by a call to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintReleaseBehavior%2cOpenTK.Windowing.GraphicsLibraryFramework.ReleaseBehavior)" data-throw-if-not-resolved="false"></xref>

    or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints" data-throw-if-not-resolved="false"></xref>, or until the library is terminated.

    </p>

    <p>

    This function does not check whether the specified hint values are valid.

    If you set hints to invalid values this will instead be reported

    by the next call to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow(System.Int32%2cSystem.Int32%2cSystem.String%2cOpenTK.Windowing.GraphicsLibraryFramework.Monitor*%2cOpenTK.Windowing.GraphicsLibraryFramework.Window*)" data-throw-if-not-resolved="false"></xref>.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void WindowHint(WindowHintReleaseBehavior hint, ReleaseBehavior value)
    parameters:
    - id: hint
      type: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintReleaseBehavior
      description: <xref href="OpenTK.Windowing.GraphicsLibraryFramework.WindowHintReleaseBehavior.ContextReleaseBehavior" data-throw-if-not-resolved="false"></xref>.
    - id: value
      type: OpenTK.Windowing.GraphicsLibraryFramework.ReleaseBehavior
      description: The new value of the window hint.
    content.vb: Public Shared Sub WindowHint(hint As WindowHintReleaseBehavior, value As ReleaseBehavior)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintContextApi,OpenTK.Windowing.GraphicsLibraryFramework.ContextApi)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintContextApi,OpenTK.Windowing.GraphicsLibraryFramework.ContextApi)
  id: WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintContextApi,OpenTK.Windowing.GraphicsLibraryFramework.ContextApi)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: WindowHint(WindowHintContextApi, ContextApi)
  nameWithType: GLFW.WindowHint(WindowHintContextApi, ContextApi)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintContextApi, OpenTK.Windowing.GraphicsLibraryFramework.ContextApi)
  type: Method
  source:
    id: WindowHint
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 5524
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets hints for the next call to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow(System.Int32%2cSystem.Int32%2cSystem.String%2cOpenTK.Windowing.GraphicsLibraryFramework.Monitor*%2cOpenTK.Windowing.GraphicsLibraryFramework.Window*)" data-throw-if-not-resolved="false"></xref>.

    The hints, once set, retain their values

    until changed by a call to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintContextApi%2cOpenTK.Windowing.GraphicsLibraryFramework.ContextApi)" data-throw-if-not-resolved="false"></xref>

    or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints" data-throw-if-not-resolved="false"></xref>, or until the library is terminated.

    </p>

    <p>

    This function does not check whether the specified hint values are valid.

    If you set hints to invalid values this will instead be reported

    by the next call to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow(System.Int32%2cSystem.Int32%2cSystem.String%2cOpenTK.Windowing.GraphicsLibraryFramework.Monitor*%2cOpenTK.Windowing.GraphicsLibraryFramework.Window*)" data-throw-if-not-resolved="false"></xref>.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void WindowHint(WindowHintContextApi hint, ContextApi value)
    parameters:
    - id: hint
      type: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintContextApi
      description: <xref href="OpenTK.Windowing.GraphicsLibraryFramework.WindowHintContextApi.ContextCreationApi" data-throw-if-not-resolved="false"></xref>.
    - id: value
      type: OpenTK.Windowing.GraphicsLibraryFramework.ContextApi
      description: The new value of the window hint.
    content.vb: Public Shared Sub WindowHint(hint As WindowHintContextApi, value As ContextApi)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintRobustness,OpenTK.Windowing.GraphicsLibraryFramework.Robustness)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintRobustness,OpenTK.Windowing.GraphicsLibraryFramework.Robustness)
  id: WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintRobustness,OpenTK.Windowing.GraphicsLibraryFramework.Robustness)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: WindowHint(WindowHintRobustness, Robustness)
  nameWithType: GLFW.WindowHint(WindowHintRobustness, Robustness)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintRobustness, OpenTK.Windowing.GraphicsLibraryFramework.Robustness)
  type: Method
  source:
    id: WindowHint
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 5553
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets hints for the next call to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow(System.Int32%2cSystem.Int32%2cSystem.String%2cOpenTK.Windowing.GraphicsLibraryFramework.Monitor*%2cOpenTK.Windowing.GraphicsLibraryFramework.Window*)" data-throw-if-not-resolved="false"></xref>.

    The hints, once set, retain their values

    until changed by a call to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintRobustness%2cOpenTK.Windowing.GraphicsLibraryFramework.Robustness)" data-throw-if-not-resolved="false"></xref>

    or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints" data-throw-if-not-resolved="false"></xref>, or until the library is terminated.

    </p>

    <p>

    This function does not check whether the specified hint values are valid.

    If you set hints to invalid values this will instead be reported

    by the next call to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow(System.Int32%2cSystem.Int32%2cSystem.String%2cOpenTK.Windowing.GraphicsLibraryFramework.Monitor*%2cOpenTK.Windowing.GraphicsLibraryFramework.Window*)" data-throw-if-not-resolved="false"></xref>.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void WindowHint(WindowHintRobustness hint, Robustness value)
    parameters:
    - id: hint
      type: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintRobustness
      description: <xref href="OpenTK.Windowing.GraphicsLibraryFramework.WindowHintRobustness.ContextRobustness" data-throw-if-not-resolved="false"></xref>.
    - id: value
      type: OpenTK.Windowing.GraphicsLibraryFramework.Robustness
      description: The new value of the window hint.
    content.vb: Public Shared Sub WindowHint(hint As WindowHintRobustness, value As Robustness)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintOpenGlProfile,OpenTK.Windowing.GraphicsLibraryFramework.OpenGlProfile)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintOpenGlProfile,OpenTK.Windowing.GraphicsLibraryFramework.OpenGlProfile)
  id: WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintOpenGlProfile,OpenTK.Windowing.GraphicsLibraryFramework.OpenGlProfile)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: WindowHint(WindowHintOpenGlProfile, OpenGlProfile)
  nameWithType: GLFW.WindowHint(WindowHintOpenGlProfile, OpenGlProfile)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintOpenGlProfile, OpenTK.Windowing.GraphicsLibraryFramework.OpenGlProfile)
  type: Method
  source:
    id: WindowHint
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 5582
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function sets hints for the next call to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow(System.Int32%2cSystem.Int32%2cSystem.String%2cOpenTK.Windowing.GraphicsLibraryFramework.Monitor*%2cOpenTK.Windowing.GraphicsLibraryFramework.Window*)" data-throw-if-not-resolved="false"></xref>.

    The hints, once set, retain their values

    until changed by a call to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintOpenGlProfile%2cOpenTK.Windowing.GraphicsLibraryFramework.OpenGlProfile)" data-throw-if-not-resolved="false"></xref>

    or <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints" data-throw-if-not-resolved="false"></xref>, or until the library is terminated.

    </p>

    <p>

    This function does not check whether the specified hint values are valid.

    If you set hints to invalid values this will instead be reported

    by the next call to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow(System.Int32%2cSystem.Int32%2cSystem.String%2cOpenTK.Windowing.GraphicsLibraryFramework.Monitor*%2cOpenTK.Windowing.GraphicsLibraryFramework.Window*)" data-throw-if-not-resolved="false"></xref>.

    </p>
  remarks: >-
    <p>

    This function must only be called from the main thread.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static void WindowHint(WindowHintOpenGlProfile hint, OpenGlProfile value)
    parameters:
    - id: hint
      type: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintOpenGlProfile
      description: <xref href="OpenTK.Windowing.GraphicsLibraryFramework.WindowHintOpenGlProfile.OpenGlProfile" data-throw-if-not-resolved="false"></xref>.
    - id: value
      type: OpenTK.Windowing.GraphicsLibraryFramework.OpenGlProfile
      description: The new value of the window hint.
    content.vb: Public Shared Sub WindowHint(hint As WindowHintOpenGlProfile, value As OpenGlProfile)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint*
  seealso:
  - linkId: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints
    commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowShouldClose(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowShouldClose(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: WindowShouldClose(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: WindowShouldClose(Window*)
  nameWithType: GLFW.WindowShouldClose(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowShouldClose(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: WindowShouldClose
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 5602
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: >-
    <p>

    This function returns the value of the close flag of the specified window.

    </p>
  remarks: >-
    <p>

    This function may be called from any thread. Access is not synchronized.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public static bool WindowShouldClose(Window* window)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to query.
    return:
      type: System.Boolean
      description: The value of the close flag.
    content.vb: Public Shared Function WindowShouldClose(window As Window*) As Boolean
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowShouldClose*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.VulkanSupported
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.VulkanSupported
  id: VulkanSupported
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: VulkanSupported()
  nameWithType: GLFW.VulkanSupported()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.VulkanSupported()
  type: Method
  source:
    id: VulkanSupported
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 5629
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Returns whether the Vulkan loader and an ICD have been found.
  remarks: >-
    <p>

    This function returns whether the Vulkan loader and any minimally functional ICD have been found.

    </p>

    <p>

    The availability of a Vulkan loader and even an ICD does not by itself

    guarantee that surface creation or even instance creation is possible.

    For example, on Fermi systems Nvidia will install an ICD that provides no actual Vulkan support.

    Call <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensions" data-throw-if-not-resolved="false"></xref> to check whether the extensions necessary

    for Vulkan surface creation are available and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPhysicalDevicePresentationSupport(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle%2cOpenTK.Windowing.GraphicsLibraryFramework.VkHandle%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>

    to check whether a queue family of a physical device supports image presentation.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    This function may be called from any thread.

    </p>
  example: []
  syntax:
    content: public static bool VulkanSupported()
    return:
      type: System.Boolean
      description: <code>true</code> if Vulkan is minimally available, or <code>false</code> otherwise.
    content.vb: Public Shared Function VulkanSupported() As Boolean
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.VulkanSupported*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensionsRaw(System.UInt32@)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensionsRaw(System.UInt32@)
  id: GetRequiredInstanceExtensionsRaw(System.UInt32@)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetRequiredInstanceExtensionsRaw(out uint)
  nameWithType: GLFW.GetRequiredInstanceExtensionsRaw(out uint)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensionsRaw(out uint)
  type: Method
  source:
    id: GetRequiredInstanceExtensionsRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 5676
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Returns the Vulkan instance extensions required by GLFW.
  remarks: >-
    <p>

    This function returns an array of names of Vulkan instance extensions required by GLFW for

    creating Vulkan surfaces for GLFW windows. If successful, the list will always contains

    <code>VK_KHR_surface</code>, so if you don't require any additional extensions you can

    pass this list directly to the <code>VkInstanceCreateInfo</code> struct.

    </p>

    <p>

    If Vulkan is not available on the machine, this function returns <code>null</code> and generates

    a <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> error. Call <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.VulkanSupported" data-throw-if-not-resolved="false"></xref> to check

    whether Vulkan is at least minimally available.

    </p>

    <p>

    If Vulkan is available but no set of extensions allowing window surface creation was found,

    this function returns <code>null</code>. You may still use Vulkan for off-screen rendering and compute work.

    </p>

    <p>

    Additional extensions may be required by future versions of GLFW.

    You should check if any extensions you wish to enable are already in the returned array,

    as it is an error to specify an extension more than once in the <code>VkInstanceCreateInfo</code> struct.

    </p>

    <p>

    macOS: This function currently only supports the <code>VK_MVK_macos_surface</code> extension from MoltenVK.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.ApiUnavailable" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    The returned array is allocated and freed by GLFW. You should not free it yourself.

    It is guaranteed to be valid only until the library is terminated.

    </p>

    <p>

    This function may be called from any thread.

    </p>
  example: []
  syntax:
    content: public static byte** GetRequiredInstanceExtensionsRaw(out uint count)
    parameters:
    - id: count
      type: System.UInt32
      description: >-
        Where to store the number of extensions in the returned array.

        This is set to zero if an error occurred.
    return:
      type: System.Byte**
      description: An array of ASCII encoded extension names, or <code>null</code> if an error occurred.
    content.vb: Public Shared Function GetRequiredInstanceExtensionsRaw(count As UInteger) As Byte**
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensionsRaw*
  nameWithType.vb: GLFW.GetRequiredInstanceExtensionsRaw(UInteger)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensionsRaw(UInteger)
  name.vb: GetRequiredInstanceExtensionsRaw(UInteger)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensionsRaw(System.UInt32*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensionsRaw(System.UInt32*)
  id: GetRequiredInstanceExtensionsRaw(System.UInt32*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetRequiredInstanceExtensionsRaw(uint*)
  nameWithType: GLFW.GetRequiredInstanceExtensionsRaw(uint*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensionsRaw(uint*)
  type: Method
  source:
    id: GetRequiredInstanceExtensionsRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 5729
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Returns the Vulkan instance extensions required by GLFW.
  remarks: >-
    <p>

    This function returns an array of names of Vulkan instance extensions required by GLFW for

    creating Vulkan surfaces for GLFW windows. If successful, the list will always contains

    <code>VK_KHR_surface</code>, so if you don't require any additional extensions you can

    pass this list directly to the <code>VkInstanceCreateInfo</code> struct.

    </p>

    <p>

    If Vulkan is not available on the machine, this function returns <code>null</code> and generates

    a <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> error. Call <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.VulkanSupported" data-throw-if-not-resolved="false"></xref> to check

    whether Vulkan is at least minimally available.

    </p>

    <p>

    If Vulkan is available but no set of extensions allowing window surface creation was found,

    this function returns <code>null</code>. You may still use Vulkan for off-screen rendering and compute work.

    </p>

    <p>

    Additional extensions may be required by future versions of GLFW.

    You should check if any extensions you wish to enable are already in the returned array,

    as it is an error to specify an extension more than once in the <code>VkInstanceCreateInfo</code> struct.

    </p>

    <p>

    macOS: This function currently only supports the <code>VK_MVK_macos_surface</code> extension from MoltenVK.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.ApiUnavailable" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    The returned array is allocated and freed by GLFW. You should not free it yourself.

    It is guaranteed to be valid only until the library is terminated.

    </p>

    <p>

    This function may be called from any thread.

    </p>
  example: []
  syntax:
    content: public static byte** GetRequiredInstanceExtensionsRaw(uint* count)
    parameters:
    - id: count
      type: System.UInt32*
      description: >-
        Where to store the number of extensions in the returned array.

        This is set to zero if an error occurred.
    return:
      type: System.Byte**
      description: An array of ASCII encoded extension names, or <code>null</code> if an error occurred.
    content.vb: Public Shared Function GetRequiredInstanceExtensionsRaw(count As UInteger*) As Byte**
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensionsRaw*
  nameWithType.vb: GLFW.GetRequiredInstanceExtensionsRaw(UInteger*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensionsRaw(UInteger*)
  name.vb: GetRequiredInstanceExtensionsRaw(UInteger*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensions
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensions
  id: GetRequiredInstanceExtensions
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetRequiredInstanceExtensions()
  nameWithType: GLFW.GetRequiredInstanceExtensions()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensions()
  type: Method
  source:
    id: GetRequiredInstanceExtensions
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 5775
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Returns the Vulkan instance extensions required by GLFW.
  remarks: >-
    <p>

    This function returns an array of names of Vulkan instance extensions required by GLFW for

    creating Vulkan surfaces for GLFW windows. If successful, the list will always contains

    <code>VK_KHR_surface</code>, so if you don't require any additional extensions you can

    pass this list directly to the <code>VkInstanceCreateInfo</code> struct.

    </p>

    <p>

    If Vulkan is not available on the machine, this function returns <code>null</code> and generates

    a <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> error. Call <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.VulkanSupported" data-throw-if-not-resolved="false"></xref> to check

    whether Vulkan is at least minimally available.

    </p>

    <p>

    If Vulkan is available but no set of extensions allowing window surface creation was found,

    this function returns <code>null</code>. You may still use Vulkan for off-screen rendering and compute work.

    </p>

    <p>

    Additional extensions may be required by future versions of GLFW.

    You should check if any extensions you wish to enable are already in the returned array,

    as it is an error to specify an extension more than once in the <code>VkInstanceCreateInfo</code> struct.

    </p>

    <p>

    macOS: This function currently only supports the <code>VK_MVK_macos_surface</code> extension from MoltenVK.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.ApiUnavailable" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    The returned array is allocated and freed by GLFW. You should not free it yourself.

    It is guaranteed to be valid only until the library is terminated.

    </p>

    <p>

    This function may be called from any thread.

    </p>
  example: []
  syntax:
    content: public static string[] GetRequiredInstanceExtensions()
    return:
      type: System.String[]
      description: An array of ASCII encoded extension names, or <code>null</code> if an error occurred.
    content.vb: Public Shared Function GetRequiredInstanceExtensions() As String()
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensions*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInstanceProcAddress(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,System.String)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInstanceProcAddress(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,System.String)
  id: GetInstanceProcAddress(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,System.String)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetInstanceProcAddress(VkHandle, string)
  nameWithType: GLFW.GetInstanceProcAddress(VkHandle, string)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInstanceProcAddress(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle, string)
  type: Method
  source:
    id: GetInstanceProcAddress
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 5826
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Returns the address of the specified Vulkan instance function.
  remarks: >-
    <p>

    This function returns the address of the specified Vulkan core or extension function for

    the specified instance. If instance is set to <code>null</code> it can return any function exported

    from the Vulkan loader, including at least the following functions:

    </p>

    <ul><li>
          <code>vkEnumerateInstanceExtensionProperties</code>

          <code>vkEnumerateInstanceLayerProperties</code>

          <code>vkCreateInstance</code>

          <code>vkGetInstanceProcAddr</code>
        </li></ul>
    <p>

    If Vulkan is not available on the machine, this function returns <code>null</code> and generates

    a <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> error. Call <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.VulkanSupported" data-throw-if-not-resolved="false"></xref> to check

    whether Vulkan is at least minimally available.

    </p>

    <p>

    This function is equivalent to calling <code>vkGetInstanceProcAddr</code> with a platform-specific

    query of the Vulkan loader as a fallback.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.ApiUnavailable" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    The returned function pointer is valid until the library is terminated.

    </p>
  example: []
  syntax:
    content: public static nint GetInstanceProcAddress(VkHandle instance, string procName)
    parameters:
    - id: instance
      type: OpenTK.Windowing.GraphicsLibraryFramework.VkHandle
      description: The Vulkan instance to query, or <code>null</code> to retrieve functions related to instance creation.
    - id: procName
      type: System.String
      description: The ASCII encoded name of the function.
    return:
      type: System.IntPtr
      description: The address of the function, or <code>null</code> if an error occurred.
    content.vb: Public Shared Function GetInstanceProcAddress(instance As VkHandle, procName As String) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInstanceProcAddress*
  nameWithType.vb: GLFW.GetInstanceProcAddress(VkHandle, String)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInstanceProcAddress(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle, String)
  name.vb: GetInstanceProcAddress(VkHandle, String)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInstanceProcAddressRaw(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,System.Byte*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInstanceProcAddressRaw(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,System.Byte*)
  id: GetInstanceProcAddressRaw(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,System.Byte*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetInstanceProcAddressRaw(VkHandle, byte*)
  nameWithType: GLFW.GetInstanceProcAddressRaw(VkHandle, byte*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInstanceProcAddressRaw(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle, byte*)
  type: Method
  source:
    id: GetInstanceProcAddressRaw
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 5878
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Returns the address of the specified Vulkan instance function.
  remarks: >-
    <p>

    This function returns the address of the specified Vulkan core or extension function for

    the specified instance. If instance is set to <code>null</code> it can return any function exported

    from the Vulkan loader, including at least the following functions:

    </p>

    <ul><li>
          <code>vkEnumerateInstanceExtensionProperties</code>

          <code>vkEnumerateInstanceLayerProperties</code>

          <code>vkCreateInstance</code>

          <code>vkGetInstanceProcAddr</code>
        </li></ul>
    <p>

    If Vulkan is not available on the machine, this function returns <code>null</code> and generates

    a <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> error. Call <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.VulkanSupported" data-throw-if-not-resolved="false"></xref> to check

    whether Vulkan is at least minimally available.

    </p>

    <p>

    This function is equivalent to calling <code>vkGetInstanceProcAddr</code> with a platform-specific

    query of the Vulkan loader as a fallback.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.ApiUnavailable" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    The returned function pointer is valid until the library is terminated.

    </p>
  example: []
  syntax:
    content: public static nint GetInstanceProcAddressRaw(VkHandle instance, byte* procName)
    parameters:
    - id: instance
      type: OpenTK.Windowing.GraphicsLibraryFramework.VkHandle
      description: The Vulkan instance to query, or <code>null</code> to retrieve functions related to instance creation.
    - id: procName
      type: System.Byte*
      description: The ASCII encoded name of the function.
    return:
      type: System.IntPtr
      description: The address of the function, or <code>null</code> if an error occurred.
    content.vb: Public Shared Function GetInstanceProcAddressRaw(instance As VkHandle, procName As Byte*) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInstanceProcAddressRaw*
  nameWithType.vb: GLFW.GetInstanceProcAddressRaw(VkHandle, Byte*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInstanceProcAddressRaw(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle, Byte*)
  name.vb: GetInstanceProcAddressRaw(VkHandle, Byte*)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPhysicalDevicePresentationSupport(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPhysicalDevicePresentationSupport(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,System.Int32)
  id: GetPhysicalDevicePresentationSupport(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,System.Int32)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetPhysicalDevicePresentationSupport(VkHandle, VkHandle, int)
  nameWithType: GLFW.GetPhysicalDevicePresentationSupport(VkHandle, VkHandle, int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPhysicalDevicePresentationSupport(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle, OpenTK.Windowing.GraphicsLibraryFramework.VkHandle, int)
  type: Method
  source:
    id: GetPhysicalDevicePresentationSupport
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 5914
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Returns whether the specified queue family can present images.
  remarks: >-
    <p>

    This function returns whether the specified queue family of the specified physical device

    supports presentation to the platform GLFW was built for.

    </p>

    <p>

    If Vulkan or the required window surface creation instance extensions are not available

    on the machine, or if the specified instance was not created with the required extensions,

    this function returns <code>false</code> and generates a <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.ApiUnavailable" data-throw-if-not-resolved="false"></xref> error.

    Call <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.VulkanSupported" data-throw-if-not-resolved="false"></xref> to check whether Vulkan is at least minimally available and

    <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensions" data-throw-if-not-resolved="false"></xref> to check what instance extensions are required.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.ApiUnavailable" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    macOS: This function currently always returns <code>true</code>, as the <code>VK_MVK_macos_surface</code>

    extension does not provide a <code>vkGetPhysicalDevice*PresentationSupport</code> type function.

    </p>

    <p>

    This function may be called from any thread.

    For synchronization details of Vulkan objects, see the Vulkan specification.

    </p>
  example: []
  syntax:
    content: public static bool GetPhysicalDevicePresentationSupport(VkHandle instance, VkHandle device, int queueFamily)
    parameters:
    - id: instance
      type: OpenTK.Windowing.GraphicsLibraryFramework.VkHandle
      description: The instance that the physical device belongs to.
    - id: device
      type: OpenTK.Windowing.GraphicsLibraryFramework.VkHandle
      description: The physical device that the queue family belongs to.
    - id: queueFamily
      type: System.Int32
      description: The index of the queue family to query.
    return:
      type: System.Boolean
      description: <code>true</code> if the queue family supports presentation, or <code>false</code> otherwise.
    content.vb: Public Shared Function GetPhysicalDevicePresentationSupport(instance As VkHandle, device As VkHandle, queueFamily As Integer) As Boolean
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPhysicalDevicePresentationSupport*
  nameWithType.vb: GLFW.GetPhysicalDevicePresentationSupport(VkHandle, VkHandle, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPhysicalDevicePresentationSupport(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle, OpenTK.Windowing.GraphicsLibraryFramework.VkHandle, Integer)
  name.vb: GetPhysicalDevicePresentationSupport(VkHandle, VkHandle, Integer)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindowSurface(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Void*,OpenTK.Windowing.GraphicsLibraryFramework.VkHandle@)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindowSurface(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Void*,OpenTK.Windowing.GraphicsLibraryFramework.VkHandle@)
  id: CreateWindowSurface(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Void*,OpenTK.Windowing.GraphicsLibraryFramework.VkHandle@)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: CreateWindowSurface(VkHandle, Window*, void*, out VkHandle)
  nameWithType: GLFW.CreateWindowSurface(VkHandle, Window*, void*, out VkHandle)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindowSurface(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle, OpenTK.Windowing.GraphicsLibraryFramework.Window*, void*, out OpenTK.Windowing.GraphicsLibraryFramework.VkHandle)
  type: Method
  source:
    id: CreateWindowSurface
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 5980
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Creates a Vulkan surface for the specified window.
  remarks: >-
    <p>

    This function creates a Vulkan surface for the specified window.

    </p>

    <p>

    If the Vulkan loader or at least one minimally functional ICD were not found,

    this function returns <code>VK_ERROR_INITIALIZATION_FAILED</code> and generates a

    <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.ApiUnavailable" data-throw-if-not-resolved="false"></xref> error.

    Call <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.VulkanSupported" data-throw-if-not-resolved="false"></xref> to check whether Vulkan is at least minimally available.

    </p>

    <p>

    If the required window surface creation instance extensions are not available or

    if the specified instance was not created with these extensions enabled,

    this function returns <code>VK_ERROR_EXTENSION_NOT_PRESENT</code> and generates a

    <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.ApiUnavailable" data-throw-if-not-resolved="false"></xref> error.

    Call <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensions" data-throw-if-not-resolved="false"></xref> to check what instance extensions are required.

    </p>

    <p>

    The window surface cannot be shared with another API so the window must have been created with

    the client api hint set to <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ClientApi.NoApi" data-throw-if-not-resolved="false"></xref> otherwise it generates a

    <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidValue" data-throw-if-not-resolved="false"></xref> error and returns <code>VK_ERROR_NATIVE_WINDOW_IN_USE_KHR</code>.

    </p>

    <p>

    The window surface must be destroyed before the specified Vulkan instance.

    It is the responsibility of the caller to destroy the window surface.

    GLFW does not destroy it for you. Call <code>vkDestroySurfaceKHR</code> to destroy the surface.

    </p>

    <p>

    Possible errors include <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized" data-throw-if-not-resolved="false"></xref>, <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.ApiUnavailable" data-throw-if-not-resolved="false"></xref>,

    <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError" data-throw-if-not-resolved="false"></xref> and <xref href="OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidValue" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    If an error occurs before the creation call is made, GLFW returns the Vulkan error code most

    appropriate for the error. Appropriate use of <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.VulkanSupported" data-throw-if-not-resolved="false"></xref> and

    <xref href="OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensions" data-throw-if-not-resolved="false"></xref> should eliminate almost all occurrences of these errors.

    </p>

    <p>

    macOS: This function currently only supports the <code>VK_MVK_macos_surface</code> extension from MoltenVK.

    </p>

    <p>

    macOS: This function creates and sets a <code>CAMetalLayer</code> instance for the window content view,

    which is required for MoltenVK to function.

    </p>

    <p>

    This function may be called from any thread.

    For synchronization details of Vulkan objects, see the Vulkan specification.

    </p>
  example: []
  syntax:
    content: public static int CreateWindowSurface(VkHandle instance, Window* window, void* allocator, out VkHandle surface)
    parameters:
    - id: instance
      type: OpenTK.Windowing.GraphicsLibraryFramework.VkHandle
      description: The Vulkan instance to create the surface in.
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to create the surface for.
    - id: allocator
      type: System.Void*
      description: The allocator to use, or <code>null</code> to use the default allocator.
    - id: surface
      type: OpenTK.Windowing.GraphicsLibraryFramework.VkHandle
      description: >-
        Where to store the handle of the surface.

        This is set to <code>VK_NULL_HANDLE</code> if an error occurred.
    return:
      type: System.Int32
      description: <code>VK_SUCCESS</code> if successful, or a Vulkan error code if an error occurred.
    content.vb: Public Shared Function CreateWindowSurface(instance As VkHandle, window As Window*, allocator As Void*, surface As VkHandle) As Integer
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindowSurface*
  nameWithType.vb: GLFW.CreateWindowSurface(VkHandle, Window*, Void*, VkHandle)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindowSurface(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle, OpenTK.Windowing.GraphicsLibraryFramework.Window*, Void*, OpenTK.Windowing.GraphicsLibraryFramework.VkHandle)
  name.vb: CreateWindowSurface(VkHandle, Window*, Void*, VkHandle)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWin32Adapter(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWin32Adapter(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  id: GetWin32Adapter(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetWin32Adapter(Monitor*)
  nameWithType: GLFW.GetWin32Adapter(Monitor*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWin32Adapter(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  type: Method
  source:
    id: GetWin32Adapter
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 5997
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Returns the adapter device name of the specified monitor.
  example: []
  syntax:
    content: public static string GetWin32Adapter(Monitor* monitor)
    parameters:
    - id: monitor
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*
      description: The monitor to query.
    return:
      type: System.String
      description: The adapter device name (for example \\.\DISPLAY1) of the specified monitor, or <code>NULL</code> if an error occurred.
    content.vb: Public Shared Function GetWin32Adapter(monitor As Monitor*) As String
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWin32Adapter*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWin32Monitor(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWin32Monitor(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  id: GetWin32Monitor(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetWin32Monitor(Monitor*)
  nameWithType: GLFW.GetWin32Monitor(Monitor*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWin32Monitor(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  type: Method
  source:
    id: GetWin32Monitor
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 6009
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Returns the display device name of the specified monitor.
  example: []
  syntax:
    content: public static string GetWin32Monitor(Monitor* monitor)
    parameters:
    - id: monitor
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*
      description: The monitor to query.
    return:
      type: System.String
      description: The display device name (for example \\.\DISPLAY1\Monitor0) of the specified monitor, or NULL if an error occurred.
    content.vb: Public Shared Function GetWin32Monitor(monitor As Monitor*) As String
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWin32Monitor*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWin32Window(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWin32Window(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: GetWin32Window(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetWin32Window(Window*)
  nameWithType: GLFW.GetWin32Window(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWin32Window(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: GetWin32Window
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 6021
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Returns the <code>HWND</code> of the specified window..
  example: []
  syntax:
    content: public static nint GetWin32Window(Window* window)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to query.
    return:
      type: System.IntPtr
      description: The <code>HWND</code> of the specified window, or <code>NULL</code> if an error occurred.
    content.vb: Public Shared Function GetWin32Window(window As Window*) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWin32Window*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWGLContext(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWGLContext(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: GetWGLContext(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetWGLContext(Window*)
  nameWithType: GLFW.GetWGLContext(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWGLContext(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: GetWGLContext
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 6028
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Returns the <code>HGLRC</code> of the specified window.
  example: []
  syntax:
    content: public static nint GetWGLContext(Window* window)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to query.
    return:
      type: System.IntPtr
      description: The <code>HGLRC</code> of the specified window, or <code>NULL</code> if an error occurred.
    content.vb: Public Shared Function GetWGLContext(window As Window*) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWGLContext*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCocoaMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCocoaMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  id: GetCocoaMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetCocoaMonitor(Monitor*)
  nameWithType: GLFW.GetCocoaMonitor(Monitor*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCocoaMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  type: Method
  source:
    id: GetCocoaMonitor
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 6035
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Returns the <code>CGDirectDisplayID</code> of the specified monitor.
  example: []
  syntax:
    content: public static uint GetCocoaMonitor(Monitor* monitor)
    parameters:
    - id: monitor
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*
      description: The monitor to query.
    return:
      type: System.UInt32
      description: The <code>CGDirectDisplayID</code> of the specified monitor, or <code>kCGNullDirectDisplay</code> if an error occurred.
    content.vb: Public Shared Function GetCocoaMonitor(monitor As Monitor*) As UInteger
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCocoaMonitor*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCocoaWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCocoaWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: GetCocoaWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetCocoaWindow(Window*)
  nameWithType: GLFW.GetCocoaWindow(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCocoaWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: GetCocoaWindow
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 6042
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Returns the <code>NSWindow</code> of the specified window.
  example: []
  syntax:
    content: public static nint GetCocoaWindow(Window* window)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to query.
    return:
      type: System.IntPtr
      description: The <code>NSWindow</code> of the specified window, or <code>nil</code> if an error occurred.
    content.vb: Public Shared Function GetCocoaWindow(window As Window*) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCocoaWindow*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCocoaView(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCocoaView(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: GetCocoaView(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetCocoaView(Window*)
  nameWithType: GLFW.GetCocoaView(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCocoaView(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: GetCocoaView
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 6049
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Returns the <code>NSView</code> of the specified window.
  example: []
  syntax:
    content: public static nint GetCocoaView(Window* window)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to query.
    return:
      type: System.IntPtr
      description: The <code>NSView</code> of the specified window, or <code>nil</code> if an error occurred.
    content.vb: Public Shared Function GetCocoaView(window As Window*) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCocoaView*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetNSGLContext(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetNSGLContext(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: GetNSGLContext(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetNSGLContext(Window*)
  nameWithType: GLFW.GetNSGLContext(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetNSGLContext(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: GetNSGLContext
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 6056
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Returns the <code>NSOpenGLContext</code> of the specified window.
  example: []
  syntax:
    content: public static nint GetNSGLContext(Window* window)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to query.
    return:
      type: System.IntPtr
      description: The <code>NSOpenGLContext</code> of the specified window, or <code>nil</code> if an error occurred.
    content.vb: Public Shared Function GetNSGLContext(window As Window*) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetNSGLContext*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Display
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Display
  id: GetX11Display
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetX11Display()
  nameWithType: GLFW.GetX11Display()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Display()
  type: Method
  source:
    id: GetX11Display
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 6062
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Returns the <code>Display</code> used by GLFW.
  example: []
  syntax:
    content: public static nint GetX11Display()
    return:
      type: System.IntPtr
      description: The <code>Display</code> used by GLFW, or <code>NULL</code> if an error occurred.
    content.vb: Public Shared Function GetX11Display() As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Display*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Adapter(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Adapter(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  id: GetX11Adapter(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetX11Adapter(Monitor*)
  nameWithType: GLFW.GetX11Adapter(Monitor*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Adapter(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  type: Method
  source:
    id: GetX11Adapter
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 6069
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Returns the <code>RRCrtc</code> of the specified monitor.
  example: []
  syntax:
    content: public static nuint GetX11Adapter(Monitor* monitor)
    parameters:
    - id: monitor
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*
      description: The monitor to query.
    return:
      type: System.UIntPtr
      description: The <code>RRCrtc</code> of the specified monitor, or <code>None</code> if an error occurred.
    content.vb: Public Shared Function GetX11Adapter(monitor As Monitor*) As UIntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Adapter*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Monitor(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Monitor(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  id: GetX11Monitor(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetX11Monitor(Monitor*)
  nameWithType: GLFW.GetX11Monitor(Monitor*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Monitor(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  type: Method
  source:
    id: GetX11Monitor
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 6076
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Returns the <code>RROutput</code> of the specified monitor.
  example: []
  syntax:
    content: public static nuint GetX11Monitor(Monitor* monitor)
    parameters:
    - id: monitor
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*
      description: The monitor to query.
    return:
      type: System.UIntPtr
      description: The <code>RROutput</code> of the specified monitor, or <code>None</code> if an error occurred.
    content.vb: Public Shared Function GetX11Monitor(monitor As Monitor*) As UIntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Monitor*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Window(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Window(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: GetX11Window(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetX11Window(Window*)
  nameWithType: GLFW.GetX11Window(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Window(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: GetX11Window
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 6083
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Returns the <code>Window</code> of the specified window.
  example: []
  syntax:
    content: public static nuint GetX11Window(Window* window)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to query.
    return:
      type: System.UIntPtr
      description: The <code>Window</code> of the specified window, or <code>None</code> if an error occurred.
    content.vb: Public Shared Function GetX11Window(window As Window*) As UIntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Window*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetX11SelectionString(System.String)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetX11SelectionString(System.String)
  id: SetX11SelectionString(System.String)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: SetX11SelectionString(string)
  nameWithType: GLFW.SetX11SelectionString(string)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetX11SelectionString(string)
  type: Method
  source:
    id: SetX11SelectionString
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 6089
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Sets the current primary selection to the specified string.
  example: []
  syntax:
    content: public static void SetX11SelectionString(string @string)
    parameters:
    - id: string
      type: System.String
      description: The string.
    content.vb: Public Shared Sub SetX11SelectionString([string] As String)
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetX11SelectionString*
  nameWithType.vb: GLFW.SetX11SelectionString(String)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetX11SelectionString(String)
  name.vb: SetX11SelectionString(String)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11SelectionString
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11SelectionString
  id: GetX11SelectionString
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetX11SelectionString()
  nameWithType: GLFW.GetX11SelectionString()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11SelectionString()
  type: Method
  source:
    id: GetX11SelectionString
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 6100
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Returns the contents of the current primary selection as a string.
  example: []
  syntax:
    content: public static string GetX11SelectionString()
    return:
      type: System.String
      description: The contents of the selection as a string, or <code>NULL</code> if an error occurred.
    content.vb: Public Shared Function GetX11SelectionString() As String
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11SelectionString*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGLXContext(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGLXContext(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: GetGLXContext(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetGLXContext(Window*)
  nameWithType: GLFW.GetGLXContext(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGLXContext(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: GetGLXContext
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 6111
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Returns the <code>GLXContext</code> of the specified window.
  example: []
  syntax:
    content: public static uint GetGLXContext(Window* window)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to get the context from.
    return:
      type: System.UInt32
      description: The <code>GLXContext</code> of the specified window, or <code>NULL</code> if an error occurred.
    content.vb: Public Shared Function GetGLXContext(window As Window*) As UInteger
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGLXContext*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGLXWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGLXWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: GetGLXWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetGLXWindow(Window*)
  nameWithType: GLFW.GetGLXWindow(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGLXWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: GetGLXWindow
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 6118
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Returns the <code>GLXWindow</code> of the specified window.
  example: []
  syntax:
    content: public static uint GetGLXWindow(Window* window)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to query.
    return:
      type: System.UInt32
      description: The <code>GLXWindow</code> of the specified window, or <code>None</code> if an error occurred.
    content.vb: Public Shared Function GetGLXWindow(window As Window*) As UInteger
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGLXWindow*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWaylandDisplay
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWaylandDisplay
  id: GetWaylandDisplay
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetWaylandDisplay()
  nameWithType: GLFW.GetWaylandDisplay()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWaylandDisplay()
  type: Method
  source:
    id: GetWaylandDisplay
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 6124
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Returns the <code>struct wl_display*</code> used by GLFW.
  example: []
  syntax:
    content: public static nint GetWaylandDisplay()
    return:
      type: System.IntPtr
      description: The <code>struct wl_display*</code> used by GLFW, or <code>NULL</code> if an error occurred.
    content.vb: Public Shared Function GetWaylandDisplay() As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWaylandDisplay*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWaylandMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWaylandMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  id: GetWaylandMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetWaylandMonitor(Monitor*)
  nameWithType: GLFW.GetWaylandMonitor(Monitor*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWaylandMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  type: Method
  source:
    id: GetWaylandMonitor
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 6131
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Returns the <code>struct wl_output*</code> of the specified monitor.
  example: []
  syntax:
    content: public static nint GetWaylandMonitor(Monitor* monitor)
    parameters:
    - id: monitor
      type: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*
      description: The monitor to query.
    return:
      type: System.IntPtr
      description: The <code>struct wl_output*</code> of the specified monitor, or <code>NULL</code> if an error occurred.
    content.vb: Public Shared Function GetWaylandMonitor(monitor As Monitor*) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWaylandMonitor*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWaylandWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWaylandWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: GetWaylandWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetWaylandWindow(Window*)
  nameWithType: GLFW.GetWaylandWindow(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWaylandWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: GetWaylandWindow
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 6138
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Returns the main <code>struct wl_surface*</code> of the specified window.
  example: []
  syntax:
    content: public static nint GetWaylandWindow(Window* window)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to query.
    return:
      type: System.IntPtr
      description: The main <code>xstruct wl_surface*</code> of the specified window, or <code>NULL</code> if an error occurred.
    content.vb: Public Shared Function GetWaylandWindow(window As Window*) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWaylandWindow*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetEGLDisplay
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetEGLDisplay
  id: GetEGLDisplay
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetEGLDisplay()
  nameWithType: GLFW.GetEGLDisplay()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetEGLDisplay()
  type: Method
  source:
    id: GetEGLDisplay
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 6144
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Returns the <code>EGLDisplay</code> used by GLFW.
  example: []
  syntax:
    content: public static nint GetEGLDisplay()
    return:
      type: System.IntPtr
      description: The <code>EGLDisplay</code> used by GLFW, or <code>EGL_NO_DISPLAY</code> if an error occurred.
    content.vb: Public Shared Function GetEGLDisplay() As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetEGLDisplay*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetEGLContext(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetEGLContext(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: GetEGLContext(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetEGLContext(Window*)
  nameWithType: GLFW.GetEGLContext(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetEGLContext(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: GetEGLContext
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 6151
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Returns the <code>EGLContext</code> of the specified window.
  example: []
  syntax:
    content: public static nint GetEGLContext(Window* window)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to get the context from.
    return:
      type: System.IntPtr
      description: The <code>EGLContext</code> of the specified window, or <code>EGL_NO_CONTEXT</code> if an error occurred.
    content.vb: Public Shared Function GetEGLContext(window As Window*) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetEGLContext*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetEGLSurface(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetEGLSurface(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: GetEGLSurface(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetEGLSurface(Window*)
  nameWithType: GLFW.GetEGLSurface(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetEGLSurface(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: GetEGLSurface
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 6158
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Returns the <code>EGLSurface</code> of the specified window.
  example: []
  syntax:
    content: public static nint GetEGLSurface(Window* window)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to query.
    return:
      type: System.IntPtr
      description: The <code>EGLSurface</code> of the specified window, or <code>EGL_NO_SURFACE</code> if an error occurred.
    content.vb: Public Shared Function GetEGLSurface(window As Window*) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetEGLSurface*
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetOSMesaColorBuffer(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@,System.Int32@,System.IntPtr@)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetOSMesaColorBuffer(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@,System.Int32@,System.IntPtr@)
  id: GetOSMesaColorBuffer(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@,System.Int32@,System.IntPtr@)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetOSMesaColorBuffer(Window*, out int, out int, out int, out nint)
  nameWithType: GLFW.GetOSMesaColorBuffer(Window*, out int, out int, out int, out nint)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetOSMesaColorBuffer(OpenTK.Windowing.GraphicsLibraryFramework.Window*, out int, out int, out int, out nint)
  type: Method
  source:
    id: GetOSMesaColorBuffer
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 6169
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Retrieves the color buffer associated with the specified window.
  example: []
  syntax:
    content: public static bool GetOSMesaColorBuffer(Window* window, out int width, out int height, out int format, out nint buffer)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to query.
    - id: width
      type: System.Int32
      description: The width of the color buffer.
    - id: height
      type: System.Int32
      description: The height of the color buffer.
    - id: format
      type: System.Int32
      description: The OSMesa pixel format of the color buffer.
    - id: buffer
      type: System.IntPtr
      description: The addess of the color buffer.
    return:
      type: System.Boolean
      description: <code>true</code> if successful, or <code>false</code> if an error occurred.
    content.vb: Public Shared Function GetOSMesaColorBuffer(window As Window*, width As Integer, height As Integer, format As Integer, buffer As IntPtr) As Boolean
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetOSMesaColorBuffer*
  nameWithType.vb: GLFW.GetOSMesaColorBuffer(Window*, Integer, Integer, Integer, IntPtr)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetOSMesaColorBuffer(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Integer, Integer, Integer, System.IntPtr)
  name.vb: GetOSMesaColorBuffer(Window*, Integer, Integer, Integer, IntPtr)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetOSMesaDepthBuffer(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@,System.Int32@,System.IntPtr@)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetOSMesaDepthBuffer(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@,System.Int32@,System.IntPtr@)
  id: GetOSMesaDepthBuffer(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@,System.Int32@,System.IntPtr@)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetOSMesaDepthBuffer(Window*, out int, out int, out int, out nint)
  nameWithType: GLFW.GetOSMesaDepthBuffer(Window*, out int, out int, out int, out nint)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetOSMesaDepthBuffer(OpenTK.Windowing.GraphicsLibraryFramework.Window*, out int, out int, out int, out nint)
  type: Method
  source:
    id: GetOSMesaDepthBuffer
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 6189
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: Retrieves the depth buffer associated with the specified window.
  example: []
  syntax:
    content: public static bool GetOSMesaDepthBuffer(Window* window, out int width, out int height, out int bytesPerValue, out nint buffer)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to query.
    - id: width
      type: System.Int32
      description: The width of the depth buffer.
    - id: height
      type: System.Int32
      description: The height of the depth buffer.
    - id: bytesPerValue
      type: System.Int32
      description: The number of bytes per depth buffer element.
    - id: buffer
      type: System.IntPtr
      description: The address of the depth buffer.
    return:
      type: System.Boolean
      description: <code>true</code> if successful, or <code>false</code> if an error occurred.
    content.vb: Public Shared Function GetOSMesaDepthBuffer(window As Window*, width As Integer, height As Integer, bytesPerValue As Integer, buffer As IntPtr) As Boolean
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetOSMesaDepthBuffer*
  nameWithType.vb: GLFW.GetOSMesaDepthBuffer(Window*, Integer, Integer, Integer, IntPtr)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetOSMesaDepthBuffer(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Integer, Integer, Integer, System.IntPtr)
  name.vb: GetOSMesaDepthBuffer(Window*, Integer, Integer, Integer, IntPtr)
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetOSMesaContext(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetOSMesaContext(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  id: GetOSMesaContext(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  parent: OpenTK.Windowing.GraphicsLibraryFramework.GLFW
  langs:
  - csharp
  - vb
  name: GetOSMesaContext(Window*)
  nameWithType: GLFW.GetOSMesaContext(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetOSMesaContext(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  type: Method
  source:
    id: GetOSMesaContext
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Windowing.GraphicsLibraryFramework\GLFW.cs
    startLine: 6205
  assemblies:
  - OpenTK.Windowing.GraphicsLibraryFramework
  namespace: OpenTK.Windowing.GraphicsLibraryFramework
  summary: This function returns the mesa context associated with the window.
  example: []
  syntax:
    content: public static nint GetOSMesaContext(Window* window)
    parameters:
    - id: window
      type: OpenTK.Windowing.GraphicsLibraryFramework.Window*
      description: The window to get the context from.
    return:
      type: System.IntPtr
      description: The OSMesaContext of the specified window, or NULL if an error occurred.
    content.vb: Public Shared Function GetOSMesaContext(window As Window*) As IntPtr
  overload: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetOSMesaContext*
references:
- uid: OpenTK.Windowing.GraphicsLibraryFramework
  commentId: N:OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.html
  name: OpenTK.Windowing.GraphicsLibraryFramework
  nameWithType: OpenTK.Windowing.GraphicsLibraryFramework
  fullName: OpenTK.Windowing.GraphicsLibraryFramework
  spec.csharp:
  - uid: OpenTK
    name: OpenTK
    href: OpenTK.html
  - name: .
  - uid: OpenTK.Windowing
    name: Windowing
    href: OpenTK.Windowing.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework
    name: GraphicsLibraryFramework
    href: OpenTK.Windowing.GraphicsLibraryFramework.html
  spec.vb:
  - uid: OpenTK
    name: OpenTK
    href: OpenTK.html
  - name: .
  - uid: OpenTK.Windowing
    name: Windowing
    href: OpenTK.Windowing.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework
    name: GraphicsLibraryFramework
    href: OpenTK.Windowing.GraphicsLibraryFramework.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Terminate
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Terminate
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_Terminate
  name: Terminate()
  nameWithType: GLFW.Terminate()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Terminate()
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Terminate
    name: Terminate
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_Terminate
  - name: (
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Terminate
    name: Terminate
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_Terminate
  - name: (
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError
  href: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.html#OpenTK_Windowing_GraphicsLibraryFramework_ErrorCode_PlatformError
  name: PlatformError
  nameWithType: ErrorCode.PlatformError
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.PlatformError
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Init*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Init
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_Init
  name: Init
  nameWithType: GLFW.Init
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Init
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Init
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Init
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_Init
  name: Init()
  nameWithType: GLFW.Init()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Init()
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Init
    name: Init
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_Init
  - name: (
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Init
    name: Init
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_Init
  - name: (
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Terminate*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Terminate
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_Terminate
  name: Terminate
  nameWithType: GLFW.Terminate
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.Terminate
- uid: OpenTK.Windowing.GraphicsLibraryFramework.InitHintBool
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.InitHintBool
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.InitHintBool.html
  name: InitHintBool
  nameWithType: InitHintBool
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.InitHintBool
- uid: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum
  href: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.html#OpenTK_Windowing_GraphicsLibraryFramework_ErrorCode_InvalidEnum
  name: InvalidEnum
  nameWithType: ErrorCode.InvalidEnum
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidEnum
- uid: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidValue
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidValue
  href: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.html#OpenTK_Windowing_GraphicsLibraryFramework_ErrorCode_InvalidValue
  name: InvalidValue
  nameWithType: ErrorCode.InvalidValue
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.InvalidValue
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitHint*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitHint
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_InitHint_OpenTK_Windowing_GraphicsLibraryFramework_InitHintBool_System_Boolean_
  name: InitHint
  nameWithType: GLFW.InitHint
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitHint
- uid: OpenTK.Windowing.GraphicsLibraryFramework.InitHintInt
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.InitHintInt
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.InitHintInt.html
  name: InitHintInt
  nameWithType: InitHintInt
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.InitHintInt
- uid: OpenTK.Windowing.GraphicsLibraryFramework.InitHintPlatform
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.InitHintPlatform
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.InitHintPlatform.html
  name: InitHintPlatform
  nameWithType: InitHintPlatform
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.InitHintPlatform
- uid: OpenTK.Windowing.GraphicsLibraryFramework.Platform
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.Platform
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.Platform.html
  name: Platform
  nameWithType: Platform
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.Platform
- uid: OpenTK.Windowing.GraphicsLibraryFramework.InitHintANGLEPlatformType
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.InitHintANGLEPlatformType
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.InitHintANGLEPlatformType.html
  name: InitHintANGLEPlatformType
  nameWithType: InitHintANGLEPlatformType
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.InitHintANGLEPlatformType
- uid: OpenTK.Windowing.GraphicsLibraryFramework.ANGLEPlatformType
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.ANGLEPlatformType
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.ANGLEPlatformType.html
  name: ANGLEPlatformType
  nameWithType: ANGLEPlatformType
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.ANGLEPlatformType
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWallocatefun
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.GLFWallocatefun
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWallocatefun.html
  name: GLFWallocatefun
  nameWithType: GLFWallocatefun
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFWallocatefun
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWreallocatefun
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.GLFWreallocatefun
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWreallocatefun.html
  name: GLFWreallocatefun
  nameWithType: GLFWreallocatefun
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFWreallocatefun
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWdeallocatefun
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.GLFWdeallocatefun
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWdeallocatefun.html
  name: GLFWdeallocatefun
  nameWithType: GLFWdeallocatefun
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFWdeallocatefun
- uid: System.Runtime.CompilerServices.Unsafe.NullRef``1
  commentId: M:System.Runtime.CompilerServices.Unsafe.NullRef``1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.runtime.compilerservices.unsafe.nullref
  name: NullRef<T>()
  nameWithType: Unsafe.NullRef<T>()
  fullName: System.Runtime.CompilerServices.Unsafe.NullRef<T>()
  nameWithType.vb: Unsafe.NullRef(Of T)()
  fullName.vb: System.Runtime.CompilerServices.Unsafe.NullRef(Of T)()
  name.vb: NullRef(Of T)()
  spec.csharp:
  - uid: System.Runtime.CompilerServices.Unsafe.NullRef``1
    name: NullRef
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.runtime.compilerservices.unsafe.nullref
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: System.Runtime.CompilerServices.Unsafe.NullRef``1
    name: NullRef
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.runtime.compilerservices.unsafe.nullref
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitAllocator*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitAllocator
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_InitAllocator_OpenTK_Windowing_GraphicsLibraryFramework_GLFWallocator__
  name: InitAllocator
  nameWithType: GLFW.InitAllocator
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitAllocator
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWallocator
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.GLFWallocator
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWallocator.html
  name: GLFWallocator
  nameWithType: GLFWallocator
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFWallocator
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitVulkanLoader*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitVulkanLoader
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_InitVulkanLoader_System_IntPtr_
  name: InitVulkanLoader
  nameWithType: GLFW.InitVulkanLoader
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.InitVulkanLoader
- uid: System.IntPtr
  commentId: T:System.IntPtr
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.intptr
  name: nint
  nameWithType: nint
  fullName: nint
  nameWithType.vb: IntPtr
  fullName.vb: System.IntPtr
  name.vb: IntPtr
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersion*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersion
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetVersion_System_Int32__System_Int32__System_Int32__
  name: GetVersion
  nameWithType: GLFW.GetVersion
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersion
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersion(System.Int32@,System.Int32@,System.Int32@)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersion(System.Int32@,System.Int32@,System.Int32@)
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetVersion_System_Int32__System_Int32__System_Int32__
  name: GetVersion(out int, out int, out int)
  nameWithType: GLFW.GetVersion(out int, out int, out int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersion(out int, out int, out int)
  nameWithType.vb: GLFW.GetVersion(Integer, Integer, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersion(Integer, Integer, Integer)
  name.vb: GetVersion(Integer, Integer, Integer)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersion(System.Int32@,System.Int32@,System.Int32@)
    name: GetVersion
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetVersion_System_Int32__System_Int32__System_Int32__
  - name: (
  - name: out
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersion(System.Int32@,System.Int32@,System.Int32@)
    name: GetVersion
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetVersion_System_Int32__System_Int32__System_Int32__
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersionString*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersionString
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetVersionString
  name: GetVersionString
  nameWithType: GLFW.GetVersionString
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersionString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersionStringRaw*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersionStringRaw
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetVersionStringRaw
  name: GetVersionStringRaw
  nameWithType: GLFW.GetVersionStringRaw
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVersionStringRaw
- uid: System.Byte*
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte*
  nameWithType: byte*
  fullName: byte*
  nameWithType.vb: Byte*
  fullName.vb: Byte*
  name.vb: Byte*
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '*'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '*'
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetErrorCallback(OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ErrorCallback)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetErrorCallback(OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ErrorCallback)
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetErrorCallback_OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_ErrorCallback_
  name: SetErrorCallback(ErrorCallback)
  nameWithType: GLFW.SetErrorCallback(GLFWCallbacks.ErrorCallback)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetErrorCallback(OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ErrorCallback)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetErrorCallback(OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ErrorCallback)
    name: SetErrorCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetErrorCallback_OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_ErrorCallback_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ErrorCallback
    name: ErrorCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ErrorCallback.html
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetErrorCallback(OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ErrorCallback)
    name: SetErrorCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetErrorCallback_OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_ErrorCallback_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ErrorCallback
    name: ErrorCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ErrorCallback.html
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NoError
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NoError
  href: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.html#OpenTK_Windowing_GraphicsLibraryFramework_ErrorCode_NoError
  name: NoError
  nameWithType: ErrorCode.NoError
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NoError
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetError*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetError
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetError_System_String__
  name: GetError
  nameWithType: GLFW.GetError
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetError
- uid: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.html
  name: ErrorCode
  nameWithType: ErrorCode
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetErrorRaw*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetErrorRaw
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetErrorRaw_System_Byte___
  name: GetErrorRaw
  nameWithType: GLFW.GetErrorRaw
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetErrorRaw
- uid: OpenTK.Windowing.GraphicsLibraryFramework.Platform.Win32
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.Platform.Win32
  href: OpenTK.Windowing.GraphicsLibraryFramework.Platform.html#OpenTK_Windowing_GraphicsLibraryFramework_Platform_Win32
  name: Win32
  nameWithType: Platform.Win32
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.Platform.Win32
- uid: OpenTK.Windowing.GraphicsLibraryFramework.Platform.Cocoa
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.Platform.Cocoa
  href: OpenTK.Windowing.GraphicsLibraryFramework.Platform.html#OpenTK_Windowing_GraphicsLibraryFramework_Platform_Cocoa
  name: Cocoa
  nameWithType: Platform.Cocoa
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.Platform.Cocoa
- uid: OpenTK.Windowing.GraphicsLibraryFramework.Platform.Wayland
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.Platform.Wayland
  href: OpenTK.Windowing.GraphicsLibraryFramework.Platform.html#OpenTK_Windowing_GraphicsLibraryFramework_Platform_Wayland
  name: Wayland
  nameWithType: Platform.Wayland
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.Platform.Wayland
- uid: OpenTK.Windowing.GraphicsLibraryFramework.Platform.X11
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.Platform.X11
  href: OpenTK.Windowing.GraphicsLibraryFramework.Platform.html#OpenTK_Windowing_GraphicsLibraryFramework_Platform_X11
  name: X11
  nameWithType: Platform.X11
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.Platform.X11
- uid: OpenTK.Windowing.GraphicsLibraryFramework.Platform.Null
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.Platform.Null
  href: OpenTK.Windowing.GraphicsLibraryFramework.Platform.html#OpenTK_Windowing_GraphicsLibraryFramework_Platform_Null
  name: "Null"
  nameWithType: Platform.Null
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.Platform.Null
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPlatform*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPlatform
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetPlatform
  name: GetPlatform
  nameWithType: GLFW.GetPlatform
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPlatform
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PlatformSupported*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PlatformSupported
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_PlatformSupported_OpenTK_Windowing_GraphicsLibraryFramework_Platform_
  name: PlatformSupported
  nameWithType: GLFW.PlatformSupported
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PlatformSupported
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPrimaryMonitor
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPrimaryMonitor
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetPrimaryMonitor
  name: GetPrimaryMonitor()
  nameWithType: GLFW.GetPrimaryMonitor()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPrimaryMonitor()
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPrimaryMonitor
    name: GetPrimaryMonitor
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetPrimaryMonitor
  - name: (
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPrimaryMonitor
    name: GetPrimaryMonitor
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetPrimaryMonitor
  - name: (
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized
  href: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.html#OpenTK_Windowing_GraphicsLibraryFramework_ErrorCode_NotInitialized
  name: NotInitialized
  nameWithType: ErrorCode.NotInitialized
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NotInitialized
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorsRaw*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorsRaw
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetMonitorsRaw_System_Int32__
  name: GetMonitorsRaw
  nameWithType: GLFW.GetMonitorsRaw
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorsRaw
- uid: OpenTK.Windowing.GraphicsLibraryFramework.Monitor**
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.Monitor.html
  name: Monitor**
  nameWithType: Monitor**
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.Monitor**
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Monitor
    name: Monitor
    href: OpenTK.Windowing.GraphicsLibraryFramework.Monitor.html
  - name: '*'
  - name: '*'
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Monitor
    name: Monitor
    href: OpenTK.Windowing.GraphicsLibraryFramework.Monitor.html
  - name: '*'
  - name: '*'
- uid: System.Int32*
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int*
  nameWithType: int*
  fullName: int*
  nameWithType.vb: Integer*
  fullName.vb: Integer*
  name.vb: Integer*
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '*'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '*'
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitors*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitors
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetMonitors
  name: GetMonitors
  nameWithType: GLFW.GetMonitors
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitors
- uid: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*[]
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.Monitor.html
  name: Monitor*[]
  nameWithType: Monitor*[]
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*[]
  nameWithType.vb: Monitor*()
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*()
  name.vb: Monitor*()
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Monitor
    name: Monitor
    href: OpenTK.Windowing.GraphicsLibraryFramework.Monitor.html
  - name: '*'
  - name: '['
  - name: ']'
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Monitor
    name: Monitor
    href: OpenTK.Windowing.GraphicsLibraryFramework.Monitor.html
  - name: '*'
  - name: (
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorPos*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorPos
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetMonitorPos_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__System_Int32__System_Int32__
  name: GetMonitorPos
  nameWithType: GLFW.GetMonitorPos
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorPos
- uid: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.Monitor.html
  name: Monitor*
  nameWithType: Monitor*
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.Monitor*
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Monitor
    name: Monitor
    href: OpenTK.Windowing.GraphicsLibraryFramework.Monitor.html
  - name: '*'
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Monitor
    name: Monitor
    href: OpenTK.Windowing.GraphicsLibraryFramework.Monitor.html
  - name: '*'
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorWorkarea*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorWorkarea
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetMonitorWorkarea_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__System_Int32__System_Int32__System_Int32__System_Int32__
  name: GetMonitorWorkarea
  nameWithType: GLFW.GetMonitorWorkarea
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorWorkarea
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorPhysicalSize*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorPhysicalSize
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetMonitorPhysicalSize_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__System_Int32__System_Int32__
  name: GetMonitorPhysicalSize
  nameWithType: GLFW.GetMonitorPhysicalSize
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorPhysicalSize
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorContentScale*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorContentScale
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetMonitorContentScale_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__System_Single__System_Single__
  name: GetMonitorContentScale
  nameWithType: GLFW.GetMonitorContentScale
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorContentScale
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorContentScaleRaw*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorContentScaleRaw
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetMonitorContentScaleRaw_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__System_Single__System_Single__
  name: GetMonitorContentScaleRaw
  nameWithType: GLFW.GetMonitorContentScaleRaw
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorContentScaleRaw
- uid: System.Single*
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float*
  nameWithType: float*
  fullName: float*
  nameWithType.vb: Single*
  fullName.vb: Single*
  name.vb: Single*
  spec.csharp:
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '*'
  spec.vb:
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '*'
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorName*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorName
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetMonitorName_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__
  name: GetMonitorName
  nameWithType: GLFW.GetMonitorName
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorName
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorNameRaw*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorNameRaw
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetMonitorNameRaw_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__
  name: GetMonitorNameRaw
  nameWithType: GLFW.GetMonitorNameRaw
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorNameRaw
- uid: System.IntPtr.Zero
  commentId: F:System.IntPtr.Zero
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.intptr.zero
  name: Zero
  nameWithType: nint.Zero
  fullName: nint.Zero
  nameWithType.vb: IntPtr.Zero
  fullName.vb: System.IntPtr.Zero
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetMonitorUserPointer*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetMonitorUserPointer
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetMonitorUserPointer_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__System_Void__
  name: SetMonitorUserPointer
  nameWithType: GLFW.SetMonitorUserPointer
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetMonitorUserPointer
- uid: System.Void*
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.void
  name: void*
  nameWithType: void*
  fullName: void*
  nameWithType.vb: Void*
  fullName.vb: Void*
  name.vb: Void*
  spec.csharp:
  - uid: System.Void
    name: void
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.void
  - name: '*'
  spec.vb:
  - uid: System.Void
    name: Void
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.void
  - name: '*'
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorUserPointer*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorUserPointer
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetMonitorUserPointer_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__
  name: GetMonitorUserPointer
  nameWithType: GLFW.GetMonitorUserPointer
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitorUserPointer
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoMode(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoMode(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetVideoMode_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__
  name: GetVideoMode(Monitor*)
  nameWithType: GLFW.GetVideoMode(Monitor*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoMode(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoMode(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
    name: GetVideoMode
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetVideoMode_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Monitor
    name: Monitor
    href: OpenTK.Windowing.GraphicsLibraryFramework.Monitor.html
  - name: '*'
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoMode(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
    name: GetVideoMode
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetVideoMode_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Monitor
    name: Monitor
    href: OpenTK.Windowing.GraphicsLibraryFramework.Monitor.html
  - name: '*'
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoModesRaw*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoModesRaw
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetVideoModesRaw_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__System_Int32__
  name: GetVideoModesRaw
  nameWithType: GLFW.GetVideoModesRaw
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoModesRaw
- uid: OpenTK.Windowing.GraphicsLibraryFramework.VideoMode*
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.VideoMode.html
  name: VideoMode*
  nameWithType: VideoMode*
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.VideoMode*
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.VideoMode
    name: VideoMode
    href: OpenTK.Windowing.GraphicsLibraryFramework.VideoMode.html
  - name: '*'
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.VideoMode
    name: VideoMode
    href: OpenTK.Windowing.GraphicsLibraryFramework.VideoMode.html
  - name: '*'
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoModes*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoModes
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetVideoModes_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__
  name: GetVideoModes
  nameWithType: GLFW.GetVideoModes
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoModes
- uid: OpenTK.Windowing.GraphicsLibraryFramework.VideoMode[]
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.VideoMode.html
  name: VideoMode[]
  nameWithType: VideoMode[]
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.VideoMode[]
  nameWithType.vb: VideoMode()
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.VideoMode()
  name.vb: VideoMode()
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.VideoMode
    name: VideoMode
    href: OpenTK.Windowing.GraphicsLibraryFramework.VideoMode.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.VideoMode
    name: VideoMode
    href: OpenTK.Windowing.GraphicsLibraryFramework.VideoMode.html
  - name: (
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetGamma(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Single)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetGamma(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Single)
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetGamma_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__System_Single_
  name: SetGamma(Monitor*, float)
  nameWithType: GLFW.SetGamma(Monitor*, float)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetGamma(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, float)
  nameWithType.vb: GLFW.SetGamma(Monitor*, Single)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetGamma(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, Single)
  name.vb: SetGamma(Monitor*, Single)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetGamma(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Single)
    name: SetGamma
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetGamma_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__System_Single_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Monitor
    name: Monitor
    href: OpenTK.Windowing.GraphicsLibraryFramework.Monitor.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetGamma(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Single)
    name: SetGamma
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetGamma_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__System_Single_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Monitor
    name: Monitor
    href: OpenTK.Windowing.GraphicsLibraryFramework.Monitor.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetGamma*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetGamma
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetGamma_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__System_Single_
  name: SetGamma
  nameWithType: GLFW.SetGamma
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetGamma
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGammaRamp*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGammaRamp
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetGammaRamp_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__
  name: GetGammaRamp
  nameWithType: GLFW.GetGammaRamp
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGammaRamp
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GammaRamp*
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GammaRamp.html
  name: GammaRamp*
  nameWithType: GammaRamp*
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GammaRamp*
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GammaRamp
    name: GammaRamp
    href: OpenTK.Windowing.GraphicsLibraryFramework.GammaRamp.html
  - name: '*'
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GammaRamp
    name: GammaRamp
    href: OpenTK.Windowing.GraphicsLibraryFramework.GammaRamp.html
  - name: '*'
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetGammaRamp*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetGammaRamp
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetGammaRamp_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__OpenTK_Windowing_GraphicsLibraryFramework_GammaRamp__
  name: SetGammaRamp
  nameWithType: GLFW.SetGammaRamp
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetGammaRamp
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_DefaultWindowHints
  name: DefaultWindowHints
  nameWithType: GLFW.DefaultWindowHints
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_DefaultWindowHints
  name: DefaultWindowHints()
  nameWithType: GLFW.DefaultWindowHints()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints()
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints
    name: DefaultWindowHints
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_DefaultWindowHints
  - name: (
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DefaultWindowHints
    name: DefaultWindowHints
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_DefaultWindowHints
  - name: (
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow(System.Int32,System.Int32,System.String,OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow(System.Int32,System.Int32,System.String,OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_CreateWindow_System_Int32_System_Int32_System_String_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: CreateWindow(int, int, string, Monitor*, Window*)
  nameWithType: GLFW.CreateWindow(int, int, string, Monitor*, Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow(int, int, string, OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  nameWithType.vb: GLFW.CreateWindow(Integer, Integer, String, Monitor*, Window*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow(Integer, Integer, String, OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  name.vb: CreateWindow(Integer, Integer, String, Monitor*, Window*)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow(System.Int32,System.Int32,System.String,OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,OpenTK.Windowing.GraphicsLibraryFramework.Window*)
    name: CreateWindow
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_CreateWindow_System_Int32_System_Int32_System_String_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__OpenTK_Windowing_GraphicsLibraryFramework_Window__
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Monitor
    name: Monitor
    href: OpenTK.Windowing.GraphicsLibraryFramework.Monitor.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow(System.Int32,System.Int32,System.String,OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,OpenTK.Windowing.GraphicsLibraryFramework.Window*)
    name: CreateWindow
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_CreateWindow_System_Int32_System_Int32_System_String_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__OpenTK_Windowing_GraphicsLibraryFramework_Window__
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Monitor
    name: Monitor
    href: OpenTK.Windowing.GraphicsLibraryFramework.Monitor.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WindowHint_OpenTK_Windowing_GraphicsLibraryFramework_WindowHintString_System_String_
  name: WindowHint
  nameWithType: GLFW.WindowHint
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint
- uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintString
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.WindowHintString
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintString.html
  name: WindowHintString
  nameWithType: WindowHintString
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintString
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHintRaw*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHintRaw
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WindowHintRaw_OpenTK_Windowing_GraphicsLibraryFramework_WindowHintString_System_Byte__
  name: WindowHintRaw
  nameWithType: GLFW.WindowHintRaw
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHintRaw
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DontCare
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DontCare
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_DontCare
  name: DontCare
  nameWithType: GLFW.DontCare
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DontCare
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSizeLimits*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSizeLimits
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowSizeLimits_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Int32_System_Int32_System_Int32_System_Int32_
  name: SetWindowSizeLimits
  nameWithType: GLFW.SetWindowSizeLimits
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSizeLimits
- uid: OpenTK.Windowing.GraphicsLibraryFramework.Window*
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  name: Window*
  nameWithType: Window*
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.Window*
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowAspectRatio*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowAspectRatio
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowAspectRatio_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Int32_System_Int32_
  name: SetWindowAspectRatio
  nameWithType: GLFW.SetWindowAspectRatio
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowAspectRatio
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowFrameSize*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowFrameSize
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWindowFrameSize_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Int32__System_Int32__System_Int32__System_Int32__
  name: GetWindowFrameSize
  nameWithType: GLFW.GetWindowFrameSize
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowFrameSize
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowContentScale*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowContentScale
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWindowContentScale_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Single__System_Single__
  name: GetWindowContentScale
  nameWithType: GLFW.GetWindowContentScale
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowContentScale
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowOpacity(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Single)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowOpacity(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Single)
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowOpacity_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Single_
  name: SetWindowOpacity(Window*, float)
  nameWithType: GLFW.SetWindowOpacity(Window*, float)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowOpacity(OpenTK.Windowing.GraphicsLibraryFramework.Window*, float)
  nameWithType.vb: GLFW.SetWindowOpacity(Window*, Single)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowOpacity(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Single)
  name.vb: SetWindowOpacity(Window*, Single)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowOpacity(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Single)
    name: SetWindowOpacity
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowOpacity_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Single_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowOpacity(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Single)
    name: SetWindowOpacity
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowOpacity_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Single_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowOpacity*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowOpacity
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWindowOpacity_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: GetWindowOpacity
  nameWithType: GLFW.GetWindowOpacity
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowOpacity
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowOpacity(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowOpacity(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWindowOpacity_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: GetWindowOpacity(Window*)
  nameWithType: GLFW.GetWindowOpacity(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowOpacity(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowOpacity(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
    name: GetWindowOpacity
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWindowOpacity_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowOpacity(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
    name: GetWindowOpacity
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWindowOpacity_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowOpacity*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowOpacity
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowOpacity_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Single_
  name: SetWindowOpacity
  nameWithType: GLFW.SetWindowOpacity
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowOpacity
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.RequestWindowAttention*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.RequestWindowAttention
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_RequestWindowAttention_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: RequestWindowAttention
  nameWithType: GLFW.RequestWindowAttention
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.RequestWindowAttention
- uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute.Decorated
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute.Decorated
  href: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute.html#OpenTK_Windowing_GraphicsLibraryFramework_WindowAttribute_Decorated
  name: Decorated
  nameWithType: WindowAttribute.Decorated
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute.Decorated
- uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute.Resizable
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute.Resizable
  href: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute.html#OpenTK_Windowing_GraphicsLibraryFramework_WindowAttribute_Resizable
  name: Resizable
  nameWithType: WindowAttribute.Resizable
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute.Resizable
- uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute.Floating
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute.Floating
  href: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute.html#OpenTK_Windowing_GraphicsLibraryFramework_WindowAttribute_Floating
  name: Floating
  nameWithType: WindowAttribute.Floating
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute.Floating
- uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute.AutoIconify
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute.AutoIconify
  href: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute.html#OpenTK_Windowing_GraphicsLibraryFramework_WindowAttribute_AutoIconify
  name: AutoIconify
  nameWithType: WindowAttribute.AutoIconify
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute.AutoIconify
- uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute.FocusOnShow
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute.FocusOnShow
  href: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute.html#OpenTK_Windowing_GraphicsLibraryFramework_WindowAttribute_FocusOnShow
  name: FocusOnShow
  nameWithType: WindowAttribute.FocusOnShow
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute.FocusOnShow
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetBool)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetBool)
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWindowAttrib_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_WindowAttributeGetBool_
  name: GetWindowAttrib(Window*, WindowAttributeGetBool)
  nameWithType: GLFW.GetWindowAttrib(Window*, WindowAttributeGetBool)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetBool)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetBool)
    name: GetWindowAttrib
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWindowAttrib_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_WindowAttributeGetBool_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetBool
    name: WindowAttributeGetBool
    href: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetBool.html
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetBool)
    name: GetWindowAttrib
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWindowAttrib_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_WindowAttributeGetBool_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetBool
    name: WindowAttributeGetBool
    href: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetBool.html
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowAttrib*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowAttrib
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowAttrib_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_WindowAttribute_System_Boolean_
  name: SetWindowAttrib
  nameWithType: GLFW.SetWindowAttrib
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowAttrib
- uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute.html
  name: WindowAttribute
  nameWithType: WindowAttribute
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttribute
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.RawMouseMotionSupported*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.RawMouseMotionSupported
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_RawMouseMotionSupported
  name: RawMouseMotionSupported
  nameWithType: GLFW.RawMouseMotionSupported
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.RawMouseMotionSupported
- uid: OpenTK.Windowing.GraphicsLibraryFramework.Keys.Unknown
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.Keys.Unknown
  href: OpenTK.Windowing.GraphicsLibraryFramework.Keys.html#OpenTK_Windowing_GraphicsLibraryFramework_Keys_Unknown
  name: Unknown
  nameWithType: Keys.Unknown
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.Keys.Unknown
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyName(OpenTK.Windowing.GraphicsLibraryFramework.Keys,System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyName(OpenTK.Windowing.GraphicsLibraryFramework.Keys,System.Int32)
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetKeyName_OpenTK_Windowing_GraphicsLibraryFramework_Keys_System_Int32_
  name: GetKeyName(Keys, int)
  nameWithType: GLFW.GetKeyName(Keys, int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyName(OpenTK.Windowing.GraphicsLibraryFramework.Keys, int)
  nameWithType.vb: GLFW.GetKeyName(Keys, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyName(OpenTK.Windowing.GraphicsLibraryFramework.Keys, Integer)
  name.vb: GetKeyName(Keys, Integer)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyName(OpenTK.Windowing.GraphicsLibraryFramework.Keys,System.Int32)
    name: GetKeyName
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetKeyName_OpenTK_Windowing_GraphicsLibraryFramework_Keys_System_Int32_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Keys
    name: Keys
    href: OpenTK.Windowing.GraphicsLibraryFramework.Keys.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyName(OpenTK.Windowing.GraphicsLibraryFramework.Keys,System.Int32)
    name: GetKeyName
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetKeyName_OpenTK_Windowing_GraphicsLibraryFramework_Keys_System_Int32_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Keys
    name: Keys
    href: OpenTK.Windowing.GraphicsLibraryFramework.Keys.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyName*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyName
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetKeyName_OpenTK_Windowing_GraphicsLibraryFramework_Keys_System_Int32_
  name: GetKeyName
  nameWithType: GLFW.GetKeyName
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyName
- uid: OpenTK.Windowing.GraphicsLibraryFramework.Keys
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.Keys
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.Keys.html
  name: Keys
  nameWithType: Keys
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.Keys
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyNameRaw*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyNameRaw
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetKeyNameRaw_OpenTK_Windowing_GraphicsLibraryFramework_Keys_System_Int32_
  name: GetKeyNameRaw
  nameWithType: GLFW.GetKeyNameRaw
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyNameRaw
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyScancode*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyScancode
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetKeyScancode_OpenTK_Windowing_GraphicsLibraryFramework_Keys_
  name: GetKeyScancode
  nameWithType: GLFW.GetKeyScancode
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKeyScancode
- uid: OpenTK.Windowing.GraphicsLibraryFramework.InputAction.Press
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.InputAction.Press
  href: OpenTK.Windowing.GraphicsLibraryFramework.InputAction.html#OpenTK_Windowing_GraphicsLibraryFramework_InputAction_Press
  name: Press
  nameWithType: InputAction.Press
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.InputAction.Press
- uid: OpenTK.Windowing.GraphicsLibraryFramework.InputAction.Release
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.InputAction.Release
  href: OpenTK.Windowing.GraphicsLibraryFramework.InputAction.html#OpenTK_Windowing_GraphicsLibraryFramework_InputAction_Release
  name: Release
  nameWithType: InputAction.Release
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.InputAction.Release
- uid: OpenTK.Windowing.GraphicsLibraryFramework.InputAction.Repeat
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.InputAction.Repeat
  href: OpenTK.Windowing.GraphicsLibraryFramework.InputAction.html#OpenTK_Windowing_GraphicsLibraryFramework_InputAction_Repeat
  name: Repeat
  nameWithType: InputAction.Repeat
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.InputAction.Repeat
- uid: OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes.StickyKeys
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes.StickyKeys
  href: OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes.html#OpenTK_Windowing_GraphicsLibraryFramework_StickyAttributes_StickyKeys
  name: StickyKeys
  nameWithType: StickyAttributes.StickyKeys
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes.StickyKeys
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKey*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKey
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetKey_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_Keys_
  name: GetKey
  nameWithType: GLFW.GetKey
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKey
- uid: OpenTK.Windowing.GraphicsLibraryFramework.InputAction
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.InputAction
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.InputAction.html
  name: InputAction
  nameWithType: InputAction
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.InputAction
- uid: OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes.StickyMouseButtons
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes.StickyMouseButtons
  href: OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes.html#OpenTK_Windowing_GraphicsLibraryFramework_StickyAttributes_StickyMouseButtons
  name: StickyMouseButtons
  nameWithType: StickyAttributes.StickyMouseButtons
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes.StickyMouseButtons
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMouseButton*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMouseButton
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetMouseButton_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_MouseButton_
  name: GetMouseButton
  nameWithType: GLFW.GetMouseButton
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMouseButton
- uid: OpenTK.Windowing.GraphicsLibraryFramework.MouseButton
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.MouseButton
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.MouseButton.html
  name: MouseButton
  nameWithType: MouseButton
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.MouseButton
- uid: OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue.CursorDisabled
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue.CursorDisabled
  href: OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue.html#OpenTK_Windowing_GraphicsLibraryFramework_CursorModeValue_CursorDisabled
  name: CursorDisabled
  nameWithType: CursorModeValue.CursorDisabled
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue.CursorDisabled
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCursorPos*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCursorPos
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetCursorPos_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Double__System_Double__
  name: GetCursorPos
  nameWithType: GLFW.GetCursorPos
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCursorPos
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCursorPosRaw*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCursorPosRaw
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetCursorPosRaw_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Double__System_Double__
  name: GetCursorPosRaw
  nameWithType: GLFW.GetCursorPosRaw
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCursorPosRaw
- uid: System.Double*
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double*
  nameWithType: double*
  fullName: double*
  nameWithType.vb: Double*
  fullName.vb: Double*
  name.vb: Double*
  spec.csharp:
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: '*'
  spec.vb:
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: '*'
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute,OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute,OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue)
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetInputMode_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_CursorStateAttribute_OpenTK_Windowing_GraphicsLibraryFramework_CursorModeValue_
  name: SetInputMode(Window*, CursorStateAttribute, CursorModeValue)
  nameWithType: GLFW.SetInputMode(Window*, CursorStateAttribute, CursorModeValue)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute, OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute,OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue)
    name: SetInputMode
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetInputMode_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_CursorStateAttribute_OpenTK_Windowing_GraphicsLibraryFramework_CursorModeValue_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute
    name: CursorStateAttribute
    href: OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute.html
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue
    name: CursorModeValue
    href: OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue.html
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute,OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue)
    name: SetInputMode
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetInputMode_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_CursorStateAttribute_OpenTK_Windowing_GraphicsLibraryFramework_CursorModeValue_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute
    name: CursorStateAttribute
    href: OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute.html
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue
    name: CursorModeValue
    href: OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue.html
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursorPos*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursorPos
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetCursorPos_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Double_System_Double_
  name: SetCursorPos
  nameWithType: GLFW.SetCursorPos
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursorPos
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursor(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.Cursor*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursor(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.Cursor*)
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetCursor_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_Cursor__
  name: SetCursor(Window*, Cursor*)
  nameWithType: GLFW.SetCursor(Window*, Cursor*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursor(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.Cursor*)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursor(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.Cursor*)
    name: SetCursor
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetCursor_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_Cursor__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Cursor
    name: Cursor
    href: OpenTK.Windowing.GraphicsLibraryFramework.Cursor.html
  - name: '*'
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursor(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.Cursor*)
    name: SetCursor
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetCursor_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_Cursor__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Cursor
    name: Cursor
    href: OpenTK.Windowing.GraphicsLibraryFramework.Cursor.html
  - name: '*'
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DestroyCursor(OpenTK.Windowing.GraphicsLibraryFramework.Cursor*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DestroyCursor(OpenTK.Windowing.GraphicsLibraryFramework.Cursor*)
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_DestroyCursor_OpenTK_Windowing_GraphicsLibraryFramework_Cursor__
  name: DestroyCursor(Cursor*)
  nameWithType: GLFW.DestroyCursor(Cursor*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DestroyCursor(OpenTK.Windowing.GraphicsLibraryFramework.Cursor*)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DestroyCursor(OpenTK.Windowing.GraphicsLibraryFramework.Cursor*)
    name: DestroyCursor
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_DestroyCursor_OpenTK_Windowing_GraphicsLibraryFramework_Cursor__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Cursor
    name: Cursor
    href: OpenTK.Windowing.GraphicsLibraryFramework.Cursor.html
  - name: '*'
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DestroyCursor(OpenTK.Windowing.GraphicsLibraryFramework.Cursor*)
    name: DestroyCursor
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_DestroyCursor_OpenTK_Windowing_GraphicsLibraryFramework_Cursor__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Cursor
    name: Cursor
    href: OpenTK.Windowing.GraphicsLibraryFramework.Cursor.html
  - name: '*'
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateCursor*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateCursor
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_CreateCursor_OpenTK_Windowing_GraphicsLibraryFramework_Image__System_Int32_System_Int32_
  name: CreateCursor
  nameWithType: GLFW.CreateCursor
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateCursor
- uid: OpenTK.Windowing.GraphicsLibraryFramework.Image
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.Image
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.Image.html
  name: Image
  nameWithType: Image
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.Image
- uid: OpenTK.Windowing.GraphicsLibraryFramework.Cursor*
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.Cursor.html
  name: Cursor*
  nameWithType: Cursor*
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.Cursor*
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Cursor
    name: Cursor
    href: OpenTK.Windowing.GraphicsLibraryFramework.Cursor.html
  - name: '*'
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Cursor
    name: Cursor
    href: OpenTK.Windowing.GraphicsLibraryFramework.Cursor.html
  - name: '*'
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateCursorRaw*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateCursorRaw
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_CreateCursorRaw_OpenTK_Windowing_GraphicsLibraryFramework_Image__System_Int32_System_Int32_
  name: CreateCursorRaw
  nameWithType: GLFW.CreateCursorRaw
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateCursorRaw
- uid: OpenTK.Windowing.GraphicsLibraryFramework.Image*
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.Image.html
  name: Image*
  nameWithType: Image*
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.Image*
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Image
    name: Image
    href: OpenTK.Windowing.GraphicsLibraryFramework.Image.html
  - name: '*'
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Image
    name: Image
    href: OpenTK.Windowing.GraphicsLibraryFramework.Image.html
  - name: '*'
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateStandardCursor*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateStandardCursor
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_CreateStandardCursor_OpenTK_Windowing_GraphicsLibraryFramework_CursorShape_
  name: CreateStandardCursor
  nameWithType: GLFW.CreateStandardCursor
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateStandardCursor
- uid: OpenTK.Windowing.GraphicsLibraryFramework.CursorShape
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.CursorShape
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.CursorShape.html
  name: CursorShape
  nameWithType: CursorShape
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.CursorShape
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateCursor(OpenTK.Windowing.GraphicsLibraryFramework.Image@,System.Int32,System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateCursor(OpenTK.Windowing.GraphicsLibraryFramework.Image@,System.Int32,System.Int32)
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_CreateCursor_OpenTK_Windowing_GraphicsLibraryFramework_Image__System_Int32_System_Int32_
  name: CreateCursor(in Image, int, int)
  nameWithType: GLFW.CreateCursor(in Image, int, int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateCursor(in OpenTK.Windowing.GraphicsLibraryFramework.Image, int, int)
  nameWithType.vb: GLFW.CreateCursor(Image, Integer, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateCursor(OpenTK.Windowing.GraphicsLibraryFramework.Image, Integer, Integer)
  name.vb: CreateCursor(Image, Integer, Integer)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateCursor(OpenTK.Windowing.GraphicsLibraryFramework.Image@,System.Int32,System.Int32)
    name: CreateCursor
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_CreateCursor_OpenTK_Windowing_GraphicsLibraryFramework_Image__System_Int32_System_Int32_
  - name: (
  - name: in
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Image
    name: Image
    href: OpenTK.Windowing.GraphicsLibraryFramework.Image.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateCursor(OpenTK.Windowing.GraphicsLibraryFramework.Image@,System.Int32,System.Int32)
    name: CreateCursor
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_CreateCursor_OpenTK_Windowing_GraphicsLibraryFramework_Image__System_Int32_System_Int32_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Image
    name: Image
    href: OpenTK.Windowing.GraphicsLibraryFramework.Image.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DestroyCursor*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DestroyCursor
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_DestroyCursor_OpenTK_Windowing_GraphicsLibraryFramework_Cursor__
  name: DestroyCursor
  nameWithType: GLFW.DestroyCursor
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DestroyCursor
- uid: OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue.CursorNormal
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue.CursorNormal
  href: OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue.html#OpenTK_Windowing_GraphicsLibraryFramework_CursorModeValue_CursorNormal
  name: CursorNormal
  nameWithType: CursorModeValue.CursorNormal
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue.CursorNormal
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursor*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursor
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetCursor_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_Cursor__
  name: SetCursor
  nameWithType: GLFW.SetCursor
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursor
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_JoystickPresent_System_Int32_
  name: JoystickPresent
  nameWithType: GLFW.JoystickPresent
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent(System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent(System.Int32)
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_JoystickPresent_System_Int32_
  name: JoystickPresent(int)
  nameWithType: GLFW.JoystickPresent(int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent(int)
  nameWithType.vb: GLFW.JoystickPresent(Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent(Integer)
  name.vb: JoystickPresent(Integer)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent(System.Int32)
    name: JoystickPresent
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_JoystickPresent_System_Int32_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickPresent(System.Int32)
    name: JoystickPresent
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_JoystickPresent_System_Int32_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickAxes*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickAxes
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetJoystickAxes_System_Int32_
  name: GetJoystickAxes
  nameWithType: GLFW.GetJoystickAxes
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickAxes
- uid: System.ReadOnlySpan{System.Single}
  commentId: T:System.ReadOnlySpan{System.Single}
  parent: System
  definition: System.ReadOnlySpan`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<float>
  nameWithType: ReadOnlySpan<float>
  fullName: System.ReadOnlySpan<float>
  nameWithType.vb: ReadOnlySpan(Of Single)
  fullName.vb: System.ReadOnlySpan(Of Single)
  name.vb: ReadOnlySpan(Of Single)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: System.ReadOnlySpan`1
  commentId: T:System.ReadOnlySpan`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickAxesRaw*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickAxesRaw
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetJoystickAxesRaw_System_Int32_System_Int32__
  name: GetJoystickAxesRaw
  nameWithType: GLFW.GetJoystickAxesRaw
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickAxesRaw
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHats(System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHats(System.Int32)
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetJoystickHats_System_Int32_
  name: GetJoystickHats(int)
  nameWithType: GLFW.GetJoystickHats(int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHats(int)
  nameWithType.vb: GLFW.GetJoystickHats(Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHats(Integer)
  name.vb: GetJoystickHats(Integer)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHats(System.Int32)
    name: GetJoystickHats
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetJoystickHats_System_Int32_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHats(System.Int32)
    name: GetJoystickHats
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetJoystickHats_System_Int32_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.InitHintBool.JoystickHatButtons
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.InitHintBool.JoystickHatButtons
  href: OpenTK.Windowing.GraphicsLibraryFramework.InitHintBool.html#OpenTK_Windowing_GraphicsLibraryFramework_InitHintBool_JoystickHatButtons
  name: JoystickHatButtons
  nameWithType: InitHintBool.JoystickHatButtons
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.InitHintBool.JoystickHatButtons
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickButtons*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickButtons
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetJoystickButtons_System_Int32_
  name: GetJoystickButtons
  nameWithType: GLFW.GetJoystickButtons
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickButtons
- uid: System.ReadOnlySpan{OpenTK.Windowing.GraphicsLibraryFramework.JoystickInputAction}
  commentId: T:System.ReadOnlySpan{OpenTK.Windowing.GraphicsLibraryFramework.JoystickInputAction}
  parent: System
  definition: System.ReadOnlySpan`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<JoystickInputAction>
  nameWithType: ReadOnlySpan<JoystickInputAction>
  fullName: System.ReadOnlySpan<OpenTK.Windowing.GraphicsLibraryFramework.JoystickInputAction>
  nameWithType.vb: ReadOnlySpan(Of JoystickInputAction)
  fullName.vb: System.ReadOnlySpan(Of OpenTK.Windowing.GraphicsLibraryFramework.JoystickInputAction)
  name.vb: ReadOnlySpan(Of JoystickInputAction)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.JoystickInputAction
    name: JoystickInputAction
    href: OpenTK.Windowing.GraphicsLibraryFramework.JoystickInputAction.html
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.JoystickInputAction
    name: JoystickInputAction
    href: OpenTK.Windowing.GraphicsLibraryFramework.JoystickInputAction.html
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickButtonsRaw*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickButtonsRaw
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetJoystickButtonsRaw_System_Int32_System_Int32__
  name: GetJoystickButtonsRaw
  nameWithType: GLFW.GetJoystickButtonsRaw
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickButtonsRaw
- uid: OpenTK.Windowing.GraphicsLibraryFramework.JoystickInputAction*
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.JoystickInputAction.html
  name: JoystickInputAction*
  nameWithType: JoystickInputAction*
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.JoystickInputAction*
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.JoystickInputAction
    name: JoystickInputAction
    href: OpenTK.Windowing.GraphicsLibraryFramework.JoystickInputAction.html
  - name: '*'
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.JoystickInputAction
    name: JoystickInputAction
    href: OpenTK.Windowing.GraphicsLibraryFramework.JoystickInputAction.html
  - name: '*'
- uid: OpenTK.Windowing.GraphicsLibraryFramework.JoystickHats
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.JoystickHats
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.JoystickHats.html
  name: JoystickHats
  nameWithType: JoystickHats
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.JoystickHats
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHats*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHats
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetJoystickHats_System_Int32_
  name: GetJoystickHats
  nameWithType: GLFW.GetJoystickHats
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHats
- uid: System.ReadOnlySpan{OpenTK.Windowing.GraphicsLibraryFramework.JoystickHats}
  commentId: T:System.ReadOnlySpan{OpenTK.Windowing.GraphicsLibraryFramework.JoystickHats}
  parent: System
  definition: System.ReadOnlySpan`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<JoystickHats>
  nameWithType: ReadOnlySpan<JoystickHats>
  fullName: System.ReadOnlySpan<OpenTK.Windowing.GraphicsLibraryFramework.JoystickHats>
  nameWithType.vb: ReadOnlySpan(Of JoystickHats)
  fullName.vb: System.ReadOnlySpan(Of OpenTK.Windowing.GraphicsLibraryFramework.JoystickHats)
  name.vb: ReadOnlySpan(Of JoystickHats)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.JoystickHats
    name: JoystickHats
    href: OpenTK.Windowing.GraphicsLibraryFramework.JoystickHats.html
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.JoystickHats
    name: JoystickHats
    href: OpenTK.Windowing.GraphicsLibraryFramework.JoystickHats.html
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHatsRaw*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHatsRaw
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetJoystickHatsRaw_System_Int32_System_Int32__
  name: GetJoystickHatsRaw
  nameWithType: GLFW.GetJoystickHatsRaw
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickHatsRaw
- uid: OpenTK.Windowing.GraphicsLibraryFramework.JoystickHats*
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.JoystickHats.html
  name: JoystickHats*
  nameWithType: JoystickHats*
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.JoystickHats*
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.JoystickHats
    name: JoystickHats
    href: OpenTK.Windowing.GraphicsLibraryFramework.JoystickHats.html
  - name: '*'
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.JoystickHats
    name: JoystickHats
    href: OpenTK.Windowing.GraphicsLibraryFramework.JoystickHats.html
  - name: '*'
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickName*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickName
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetJoystickName_System_Int32_
  name: GetJoystickName
  nameWithType: GLFW.GetJoystickName
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickName
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickNameRaw*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickNameRaw
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetJoystickNameRaw_System_Int32_
  name: GetJoystickNameRaw
  nameWithType: GLFW.GetJoystickNameRaw
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickNameRaw
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickGUID*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickGUID
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetJoystickGUID_System_Int32_
  name: GetJoystickGUID
  nameWithType: GLFW.GetJoystickGUID
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickGUID
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickGUIDRaw*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickGUIDRaw
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetJoystickGUIDRaw_System_Int32_
  name: GetJoystickGUIDRaw
  nameWithType: GLFW.GetJoystickGUIDRaw
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickGUIDRaw
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetJoystickUserPointer*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetJoystickUserPointer
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetJoystickUserPointer_System_Int32_System_Void__
  name: SetJoystickUserPointer
  nameWithType: GLFW.SetJoystickUserPointer
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetJoystickUserPointer
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickUserPointer*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickUserPointer
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetJoystickUserPointer_System_Int32_
  name: GetJoystickUserPointer
  nameWithType: GLFW.GetJoystickUserPointer
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetJoystickUserPointer
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadState(System.Int32,OpenTK.Windowing.GraphicsLibraryFramework.GamepadState@)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadState(System.Int32,OpenTK.Windowing.GraphicsLibraryFramework.GamepadState@)
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetGamepadState_System_Int32_OpenTK_Windowing_GraphicsLibraryFramework_GamepadState__
  name: GetGamepadState(int, out GamepadState)
  nameWithType: GLFW.GetGamepadState(int, out GamepadState)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadState(int, out OpenTK.Windowing.GraphicsLibraryFramework.GamepadState)
  nameWithType.vb: GLFW.GetGamepadState(Integer, GamepadState)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadState(Integer, OpenTK.Windowing.GraphicsLibraryFramework.GamepadState)
  name.vb: GetGamepadState(Integer, GamepadState)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadState(System.Int32,OpenTK.Windowing.GraphicsLibraryFramework.GamepadState@)
    name: GetGamepadState
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetGamepadState_System_Int32_OpenTK_Windowing_GraphicsLibraryFramework_GamepadState__
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GamepadState
    name: GamepadState
    href: OpenTK.Windowing.GraphicsLibraryFramework.GamepadState.html
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadState(System.Int32,OpenTK.Windowing.GraphicsLibraryFramework.GamepadState@)
    name: GetGamepadState
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetGamepadState_System_Int32_OpenTK_Windowing_GraphicsLibraryFramework_GamepadState__
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GamepadState
    name: GamepadState
    href: OpenTK.Windowing.GraphicsLibraryFramework.GamepadState.html
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickIsGamepad*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickIsGamepad
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_JoystickIsGamepad_System_Int32_
  name: JoystickIsGamepad
  nameWithType: GLFW.JoystickIsGamepad
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.JoystickIsGamepad
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.UpdateGamepadMappings*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.UpdateGamepadMappings
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_UpdateGamepadMappings_System_String_
  name: UpdateGamepadMappings
  nameWithType: GLFW.UpdateGamepadMappings
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.UpdateGamepadMappings
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.UpdateGamepadMappingsRaw*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.UpdateGamepadMappingsRaw
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_UpdateGamepadMappingsRaw_System_Byte__
  name: UpdateGamepadMappingsRaw
  nameWithType: GLFW.UpdateGamepadMappingsRaw
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.UpdateGamepadMappingsRaw
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadName*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadName
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetGamepadName_System_Int32_
  name: GetGamepadName
  nameWithType: GLFW.GetGamepadName
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadName
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadNameRaw*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadNameRaw
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetGamepadNameRaw_System_Int32_
  name: GetGamepadNameRaw
  nameWithType: GLFW.GetGamepadNameRaw
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadNameRaw
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GamepadState
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.GamepadState
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.GamepadState.html
  name: GamepadState
  nameWithType: GamepadState
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GamepadState
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadState*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadState
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetGamepadState_System_Int32_OpenTK_Windowing_GraphicsLibraryFramework_GamepadState__
  name: GetGamepadState
  nameWithType: GLFW.GetGamepadState
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadState
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadStateRaw*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadStateRaw
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetGamepadStateRaw_System_Int32_OpenTK_Windowing_GraphicsLibraryFramework_GamepadState__
  name: GetGamepadStateRaw
  nameWithType: GLFW.GetGamepadStateRaw
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGamepadStateRaw
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GamepadState*
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GamepadState.html
  name: GamepadState*
  nameWithType: GamepadState*
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GamepadState*
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GamepadState
    name: GamepadState
    href: OpenTK.Windowing.GraphicsLibraryFramework.GamepadState.html
  - name: '*'
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GamepadState
    name: GamepadState
    href: OpenTK.Windowing.GraphicsLibraryFramework.GamepadState.html
  - name: '*'
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetTime(System.Double)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetTime(System.Double)
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetTime_System_Double_
  name: SetTime(double)
  nameWithType: GLFW.SetTime(double)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetTime(double)
  nameWithType.vb: GLFW.SetTime(Double)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetTime(Double)
  name.vb: SetTime(Double)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetTime(System.Double)
    name: SetTime
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetTime_System_Double_
  - name: (
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetTime(System.Double)
    name: SetTime
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetTime_System_Double_
  - name: (
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTime*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTime
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetTime
  name: GetTime
  nameWithType: GLFW.GetTime
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTime
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTime
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTime
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetTime
  name: GetTime()
  nameWithType: GLFW.GetTime()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTime()
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTime
    name: GetTime
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetTime
  - name: (
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTime
    name: GetTime
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetTime
  - name: (
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetTime*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetTime
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetTime_System_Double_
  name: SetTime
  nameWithType: GLFW.SetTime
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetTime
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTimerFrequency
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTimerFrequency
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetTimerFrequency
  name: GetTimerFrequency()
  nameWithType: GLFW.GetTimerFrequency()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTimerFrequency()
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTimerFrequency
    name: GetTimerFrequency
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetTimerFrequency
  - name: (
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTimerFrequency
    name: GetTimerFrequency
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetTimerFrequency
  - name: (
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTimerValue*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTimerValue
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetTimerValue
  name: GetTimerValue
  nameWithType: GLFW.GetTimerValue
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTimerValue
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTimerFrequency*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTimerFrequency
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetTimerFrequency
  name: GetTimerFrequency
  nameWithType: GLFW.GetTimerFrequency
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetTimerFrequency
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCurrentContext*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCurrentContext
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetCurrentContext
  name: GetCurrentContext
  nameWithType: GLFW.GetCurrentContext
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCurrentContext
- uid: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NoWindowContext
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NoWindowContext
  href: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.html#OpenTK_Windowing_GraphicsLibraryFramework_ErrorCode_NoWindowContext
  name: NoWindowContext
  nameWithType: ErrorCode.NoWindowContext
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NoWindowContext
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SwapBuffers*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SwapBuffers
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SwapBuffers_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: SwapBuffers
  nameWithType: GLFW.SwapBuffers
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SwapBuffers
- uid: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NoContext
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NoContext
  href: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.html#OpenTK_Windowing_GraphicsLibraryFramework_ErrorCode_NoContext
  name: NoContext
  nameWithType: ErrorCode.NoContext
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.NoContext
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ExtensionSupported*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ExtensionSupported
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_ExtensionSupported_System_String_
  name: ExtensionSupported
  nameWithType: GLFW.ExtensionSupported
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ExtensionSupported
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ExtensionSupported(System.String)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ExtensionSupported(System.String)
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_ExtensionSupported_System_String_
  name: ExtensionSupported(string)
  nameWithType: GLFW.ExtensionSupported(string)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ExtensionSupported(string)
  nameWithType.vb: GLFW.ExtensionSupported(String)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ExtensionSupported(String)
  name.vb: ExtensionSupported(String)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ExtensionSupported(System.String)
    name: ExtensionSupported
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_ExtensionSupported_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ExtensionSupported(System.String)
    name: ExtensionSupported
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_ExtensionSupported_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInstanceProcAddress(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,System.String)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInstanceProcAddress(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,System.String)
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetInstanceProcAddress_OpenTK_Windowing_GraphicsLibraryFramework_VkHandle_System_String_
  name: GetInstanceProcAddress(VkHandle, string)
  nameWithType: GLFW.GetInstanceProcAddress(VkHandle, string)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInstanceProcAddress(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle, string)
  nameWithType.vb: GLFW.GetInstanceProcAddress(VkHandle, String)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInstanceProcAddress(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle, String)
  name.vb: GetInstanceProcAddress(VkHandle, String)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInstanceProcAddress(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,System.String)
    name: GetInstanceProcAddress
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetInstanceProcAddress_OpenTK_Windowing_GraphicsLibraryFramework_VkHandle_System_String_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.VkHandle
    name: VkHandle
    href: OpenTK.Windowing.GraphicsLibraryFramework.VkHandle.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInstanceProcAddress(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,System.String)
    name: GetInstanceProcAddress
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetInstanceProcAddress_OpenTK_Windowing_GraphicsLibraryFramework_VkHandle_System_String_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.VkHandle
    name: VkHandle
    href: OpenTK.Windowing.GraphicsLibraryFramework.VkHandle.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetProcAddress*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetProcAddress
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetProcAddress_System_String_
  name: GetProcAddress
  nameWithType: GLFW.GetProcAddress
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetProcAddress
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetProcAddressRaw*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetProcAddressRaw
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetProcAddressRaw_System_Byte__
  name: GetProcAddressRaw
  nameWithType: GLFW.GetProcAddressRaw
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetProcAddressRaw
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ExtensionSupportedRaw*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ExtensionSupportedRaw
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_ExtensionSupportedRaw_System_Byte__
  name: ExtensionSupportedRaw
  nameWithType: GLFW.ExtensionSupportedRaw
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ExtensionSupportedRaw
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@)
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWindowSize_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Int32__System_Int32__
  name: GetWindowSize(Window*, out int, out int)
  nameWithType: GLFW.GetWindowSize(Window*, out int, out int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*, out int, out int)
  nameWithType.vb: GLFW.GetWindowSize(Window*, Integer, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Integer, Integer)
  name.vb: GetWindowSize(Window*, Integer, Integer)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@)
    name: GetWindowSize
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWindowSize_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Int32__System_Int32__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@)
    name: GetWindowSize
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWindowSize_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Int32__System_Int32__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetFramebufferSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetFramebufferSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@)
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetFramebufferSize_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Int32__System_Int32__
  name: GetFramebufferSize(Window*, out int, out int)
  nameWithType: GLFW.GetFramebufferSize(Window*, out int, out int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetFramebufferSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*, out int, out int)
  nameWithType.vb: GLFW.GetFramebufferSize(Window*, Integer, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetFramebufferSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Integer, Integer)
  name.vb: GetFramebufferSize(Window*, Integer, Integer)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetFramebufferSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@)
    name: GetFramebufferSize
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetFramebufferSize_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Int32__System_Int32__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetFramebufferSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@)
    name: GetFramebufferSize
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetFramebufferSize_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Int32__System_Int32__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowMonitor_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_Monitor__System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_
  name: SetWindowMonitor(Window*, Monitor*, int, int, int, int, int)
  nameWithType: GLFW.SetWindowMonitor(Window*, Monitor*, int, int, int, int, int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, int, int, int, int, int)
  nameWithType.vb: GLFW.SetWindowMonitor(Window*, Monitor*, Integer, Integer, Integer, Integer, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, Integer, Integer, Integer, Integer, Integer)
  name.vb: SetWindowMonitor(Window*, Monitor*, Integer, Integer, Integer, Integer, Integer)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
    name: SetWindowMonitor
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowMonitor_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_Monitor__System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Monitor
    name: Monitor
    href: OpenTK.Windowing.GraphicsLibraryFramework.Monitor.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
    name: SetWindowMonitor
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowMonitor_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_Monitor__System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Monitor
    name: Monitor
    href: OpenTK.Windowing.GraphicsLibraryFramework.Monitor.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool.Visible
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool.Visible
  href: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool.html#OpenTK_Windowing_GraphicsLibraryFramework_WindowHintBool_Visible
  name: Visible
  nameWithType: WindowHintBool.Visible
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool.Visible
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32)
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowPos_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Int32_System_Int32_
  name: SetWindowPos(Window*, int, int)
  nameWithType: GLFW.SetWindowPos(Window*, int, int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*, int, int)
  nameWithType.vb: GLFW.SetWindowPos(Window*, Integer, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Integer, Integer)
  name.vb: SetWindowPos(Window*, Integer, Integer)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32)
    name: SetWindowPos
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowPos_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Int32_System_Int32_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32)
    name: SetWindowPos
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowPos_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Int32_System_Int32_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ShowWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ShowWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_ShowWindow_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: ShowWindow(Window*)
  nameWithType: GLFW.ShowWindow(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ShowWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ShowWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
    name: ShowWindow
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_ShowWindow_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ShowWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
    name: ShowWindow
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_ShowWindow_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSizeCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowSizeCallback)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSizeCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowSizeCallback)
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowSizeCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_WindowSizeCallback_
  name: SetWindowSizeCallback(Window*, WindowSizeCallback)
  nameWithType: GLFW.SetWindowSizeCallback(Window*, GLFWCallbacks.WindowSizeCallback)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSizeCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowSizeCallback)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSizeCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowSizeCallback)
    name: SetWindowSizeCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowSizeCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_WindowSizeCallback_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowSizeCallback
    name: WindowSizeCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowSizeCallback.html
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSizeCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowSizeCallback)
    name: SetWindowSizeCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowSizeCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_WindowSizeCallback_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowSizeCallback
    name: WindowSizeCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowSizeCallback.html
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIcon(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.ReadOnlySpan{OpenTK.Windowing.GraphicsLibraryFramework.Image})
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIcon(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.ReadOnlySpan{OpenTK.Windowing.GraphicsLibraryFramework.Image})
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowIcon_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_ReadOnlySpan_OpenTK_Windowing_GraphicsLibraryFramework_Image__
  name: SetWindowIcon(Window*, ReadOnlySpan<Image>)
  nameWithType: GLFW.SetWindowIcon(Window*, ReadOnlySpan<Image>)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIcon(OpenTK.Windowing.GraphicsLibraryFramework.Window*, System.ReadOnlySpan<OpenTK.Windowing.GraphicsLibraryFramework.Image>)
  nameWithType.vb: GLFW.SetWindowIcon(Window*, ReadOnlySpan(Of Image))
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIcon(OpenTK.Windowing.GraphicsLibraryFramework.Window*, System.ReadOnlySpan(Of OpenTK.Windowing.GraphicsLibraryFramework.Image))
  name.vb: SetWindowIcon(Window*, ReadOnlySpan(Of Image))
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIcon(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.ReadOnlySpan{OpenTK.Windowing.GraphicsLibraryFramework.Image})
    name: SetWindowIcon
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowIcon_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_ReadOnlySpan_OpenTK_Windowing_GraphicsLibraryFramework_Image__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Image
    name: Image
    href: OpenTK.Windowing.GraphicsLibraryFramework.Image.html
  - name: '>'
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIcon(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.ReadOnlySpan{OpenTK.Windowing.GraphicsLibraryFramework.Image})
    name: SetWindowIcon
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowIcon_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_ReadOnlySpan_OpenTK_Windowing_GraphicsLibraryFramework_Image__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Image
    name: Image
    href: OpenTK.Windowing.GraphicsLibraryFramework.Image.html
  - name: )
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.ApiUnavailable
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.ApiUnavailable
  href: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.html#OpenTK_Windowing_GraphicsLibraryFramework_ErrorCode_ApiUnavailable
  name: ApiUnavailable
  nameWithType: ErrorCode.ApiUnavailable
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.ApiUnavailable
- uid: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.VersionUnavailable
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.VersionUnavailable
  href: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.html#OpenTK_Windowing_GraphicsLibraryFramework_ErrorCode_VersionUnavailable
  name: VersionUnavailable
  nameWithType: ErrorCode.VersionUnavailable
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.VersionUnavailable
- uid: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.FormatUnavailable
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.FormatUnavailable
  href: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.html#OpenTK_Windowing_GraphicsLibraryFramework_ErrorCode_FormatUnavailable
  name: FormatUnavailable
  nameWithType: ErrorCode.FormatUnavailable
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.ErrorCode.FormatUnavailable
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_CreateWindow_System_Int32_System_Int32_System_String_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: CreateWindow
  nameWithType: GLFW.CreateWindow
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindow
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindowRaw*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindowRaw
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_CreateWindowRaw_System_Int32_System_Int32_System_Byte__OpenTK_Windowing_GraphicsLibraryFramework_Monitor__OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: CreateWindowRaw
  nameWithType: GLFW.CreateWindowRaw
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindowRaw
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DestroyWindow*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DestroyWindow
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_DestroyWindow_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: DestroyWindow
  nameWithType: GLFW.DestroyWindow
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DestroyWindow
- uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool.Focused
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool.Focused
  href: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool.html#OpenTK_Windowing_GraphicsLibraryFramework_WindowHintBool_Focused
  name: Focused
  nameWithType: WindowHintBool.Focused
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool.Focused
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.FocusWindow*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.FocusWindow
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_FocusWindow_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: FocusWindow
  nameWithType: GLFW.FocusWindow
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.FocusWindow
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.String)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.String)
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetClipboardString_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_String_
  name: SetClipboardString(Window*, string)
  nameWithType: GLFW.SetClipboardString(Window*, string)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*, string)
  nameWithType.vb: GLFW.SetClipboardString(Window*, String)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*, String)
  name.vb: SetClipboardString(Window*, String)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.String)
    name: SetClipboardString
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetClipboardString_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_String_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.String)
    name: SetClipboardString
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetClipboardString_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_String_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetClipboardString_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: GetClipboardString(Window*)
  nameWithType: GLFW.GetClipboardString(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
    name: GetClipboardString
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetClipboardString_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetClipboardString(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
    name: GetClipboardString
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetClipboardString_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetClipboardString*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetClipboardString
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetClipboardString_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: GetClipboardString
  nameWithType: GLFW.GetClipboardString
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetClipboardString
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetClipboardStringRaw*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetClipboardStringRaw
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetClipboardStringRaw_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: GetClipboardStringRaw
  nameWithType: GLFW.GetClipboardStringRaw
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetClipboardStringRaw
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetFramebufferSize*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetFramebufferSize
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetFramebufferSize_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Int32__System_Int32__
  name: GetFramebufferSize
  nameWithType: GLFW.GetFramebufferSize
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetFramebufferSize
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetFramebufferSizeRaw*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetFramebufferSizeRaw
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetFramebufferSizeRaw_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Int32__System_Int32__
  name: GetFramebufferSizeRaw
  nameWithType: GLFW.GetFramebufferSizeRaw
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetFramebufferSizeRaw
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes,System.Boolean)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes,System.Boolean)
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetInputMode_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_StickyAttributes_System_Boolean_
  name: SetInputMode(Window*, StickyAttributes, bool)
  nameWithType: GLFW.SetInputMode(Window*, StickyAttributes, bool)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes, bool)
  nameWithType.vb: GLFW.SetInputMode(Window*, StickyAttributes, Boolean)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes, Boolean)
  name.vb: SetInputMode(Window*, StickyAttributes, Boolean)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes,System.Boolean)
    name: SetInputMode
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetInputMode_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_StickyAttributes_System_Boolean_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes
    name: StickyAttributes
    href: OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes,System.Boolean)
    name: SetInputMode
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetInputMode_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_StickyAttributes_System_Boolean_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes
    name: StickyAttributes
    href: OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInputMode*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInputMode
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetInputMode_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_StickyAttributes_
  name: GetInputMode
  nameWithType: GLFW.GetInputMode
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInputMode
- uid: OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes.html
  name: StickyAttributes
  nameWithType: StickyAttributes
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.StickyAttributes
- uid: OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute.Cursor
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute.Cursor
  href: OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute.html#OpenTK_Windowing_GraphicsLibraryFramework_CursorStateAttribute_Cursor
  name: Cursor
  nameWithType: CursorStateAttribute.Cursor
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute.Cursor
- uid: OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute.html
  name: CursorStateAttribute
  nameWithType: CursorStateAttribute
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.CursorStateAttribute
- uid: OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue.html
  name: CursorModeValue
  nameWithType: CursorModeValue
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute,System.Boolean)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute,System.Boolean)
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetInputMode_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_LockKeyModAttribute_System_Boolean_
  name: SetInputMode(Window*, LockKeyModAttribute, bool)
  nameWithType: GLFW.SetInputMode(Window*, LockKeyModAttribute, bool)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute, bool)
  nameWithType.vb: GLFW.SetInputMode(Window*, LockKeyModAttribute, Boolean)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute, Boolean)
  name.vb: SetInputMode(Window*, LockKeyModAttribute, Boolean)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute,System.Boolean)
    name: SetInputMode
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetInputMode_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_LockKeyModAttribute_System_Boolean_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute
    name: LockKeyModAttribute
    href: OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute,System.Boolean)
    name: SetInputMode
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetInputMode_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_LockKeyModAttribute_System_Boolean_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute
    name: LockKeyModAttribute
    href: OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute.LockKeyMods
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute.LockKeyMods
  href: OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute.html#OpenTK_Windowing_GraphicsLibraryFramework_LockKeyModAttribute_LockKeyMods
  name: LockKeyMods
  nameWithType: LockKeyModAttribute.LockKeyMods
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute.LockKeyMods
- uid: OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute.html
  name: LockKeyModAttribute
  nameWithType: LockKeyModAttribute
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.LockKeyModAttribute
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute,System.Boolean)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute,System.Boolean)
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetInputMode_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_RawMouseMotionAttribute_System_Boolean_
  name: SetInputMode(Window*, RawMouseMotionAttribute, bool)
  nameWithType: GLFW.SetInputMode(Window*, RawMouseMotionAttribute, bool)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute, bool)
  nameWithType.vb: GLFW.SetInputMode(Window*, RawMouseMotionAttribute, Boolean)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute, Boolean)
  name.vb: SetInputMode(Window*, RawMouseMotionAttribute, Boolean)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute,System.Boolean)
    name: SetInputMode
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetInputMode_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_RawMouseMotionAttribute_System_Boolean_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute
    name: RawMouseMotionAttribute
    href: OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute,System.Boolean)
    name: SetInputMode
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetInputMode_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_RawMouseMotionAttribute_System_Boolean_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute
    name: RawMouseMotionAttribute
    href: OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute.RawMouseMotion
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute.RawMouseMotion
  href: OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute.html#OpenTK_Windowing_GraphicsLibraryFramework_RawMouseMotionAttribute_RawMouseMotion
  name: RawMouseMotion
  nameWithType: RawMouseMotionAttribute.RawMouseMotion
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute.RawMouseMotion
- uid: OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute.html
  name: RawMouseMotionAttribute
  nameWithType: RawMouseMotionAttribute
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.RawMouseMotionAttribute
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitors
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitors
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetMonitors
  name: GetMonitors()
  nameWithType: GLFW.GetMonitors()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitors()
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitors
    name: GetMonitors
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetMonitors
  - name: (
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMonitors
    name: GetMonitors
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetMonitors
  - name: (
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPrimaryMonitor*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPrimaryMonitor
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetPrimaryMonitor
  name: GetPrimaryMonitor
  nameWithType: GLFW.GetPrimaryMonitor
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPrimaryMonitor
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoModes(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoModes(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetVideoModes_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__
  name: GetVideoModes(Monitor*)
  nameWithType: GLFW.GetVideoModes(Monitor*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoModes(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoModes(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
    name: GetVideoModes
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetVideoModes_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Monitor
    name: Monitor
    href: OpenTK.Windowing.GraphicsLibraryFramework.Monitor.html
  - name: '*'
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoModes(OpenTK.Windowing.GraphicsLibraryFramework.Monitor*)
    name: GetVideoModes
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetVideoModes_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Monitor
    name: Monitor
    href: OpenTK.Windowing.GraphicsLibraryFramework.Monitor.html
  - name: '*'
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoMode*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoMode
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetVideoMode_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__
  name: GetVideoMode
  nameWithType: GLFW.GetVideoMode
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetVideoMode
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWindowAttrib_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_WindowAttributeGetBool_
  name: GetWindowAttrib
  nameWithType: GLFW.GetWindowAttrib
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowAttrib
- uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetBool
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetBool
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetBool.html
  name: WindowAttributeGetBool
  nameWithType: WindowAttributeGetBool
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetBool
- uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetInt
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetInt
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetInt.html
  name: WindowAttributeGetInt
  nameWithType: WindowAttributeGetInt
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetInt
- uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetClientApi
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetClientApi
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetClientApi.html
  name: WindowAttributeGetClientApi
  nameWithType: WindowAttributeGetClientApi
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetClientApi
- uid: OpenTK.Windowing.GraphicsLibraryFramework.ClientApi
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.ClientApi
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.ClientApi.html
  name: ClientApi
  nameWithType: ClientApi
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.ClientApi
- uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetContextApi
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetContextApi
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetContextApi.html
  name: WindowAttributeGetContextApi
  nameWithType: WindowAttributeGetContextApi
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetContextApi
- uid: OpenTK.Windowing.GraphicsLibraryFramework.ContextApi
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.ContextApi
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.ContextApi.html
  name: ContextApi
  nameWithType: ContextApi
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.ContextApi
- uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetOpenGlProfile
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetOpenGlProfile
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetOpenGlProfile.html
  name: WindowAttributeGetOpenGlProfile
  nameWithType: WindowAttributeGetOpenGlProfile
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetOpenGlProfile
- uid: OpenTK.Windowing.GraphicsLibraryFramework.OpenGlProfile
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.OpenGlProfile
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.OpenGlProfile.html
  name: OpenGlProfile
  nameWithType: OpenGlProfile
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.OpenGlProfile
- uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetReleaseBehavior
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetReleaseBehavior
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetReleaseBehavior.html
  name: WindowAttributeGetReleaseBehavior
  nameWithType: WindowAttributeGetReleaseBehavior
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetReleaseBehavior
- uid: OpenTK.Windowing.GraphicsLibraryFramework.ReleaseBehavior
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.ReleaseBehavior
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.ReleaseBehavior.html
  name: ReleaseBehavior
  nameWithType: ReleaseBehavior
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.ReleaseBehavior
- uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetRobustness
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetRobustness
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetRobustness.html
  name: WindowAttributeGetRobustness
  nameWithType: WindowAttributeGetRobustness
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.WindowAttributeGetRobustness
- uid: OpenTK.Windowing.GraphicsLibraryFramework.Robustness
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.Robustness
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.Robustness.html
  name: Robustness
  nameWithType: Robustness
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.Robustness
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowUserPointer*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowUserPointer
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowUserPointer_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Void__
  name: SetWindowUserPointer
  nameWithType: GLFW.SetWindowUserPointer
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowUserPointer
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowUserPointer*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowUserPointer
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWindowUserPointer_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: GetWindowUserPointer
  nameWithType: GLFW.GetWindowUserPointer
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowUserPointer
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32)
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowSize_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Int32_System_Int32_
  name: SetWindowSize(Window*, int, int)
  nameWithType: GLFW.SetWindowSize(Window*, int, int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*, int, int)
  nameWithType.vb: GLFW.SetWindowSize(Window*, Integer, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Integer, Integer)
  name.vb: SetWindowSize(Window*, Integer, Integer)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32)
    name: SetWindowSize
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowSize_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Int32_System_Int32_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSize(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32,System.Int32)
    name: SetWindowSize
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowSize_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Int32_System_Int32_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSize*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSize
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWindowSize_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Int32__System_Int32__
  name: GetWindowSize
  nameWithType: GLFW.GetWindowSize
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSize
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSizeRaw*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSizeRaw
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWindowSizeRaw_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Int32__System_Int32__
  name: GetWindowSizeRaw
  nameWithType: GLFW.GetWindowSizeRaw
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowSizeRaw
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowPos*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowPos
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWindowPos_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Int32__System_Int32__
  name: GetWindowPos
  nameWithType: GLFW.GetWindowPos
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowPos
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowPosRaw*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowPosRaw
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWindowPosRaw_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Int32__System_Int32__
  name: GetWindowPosRaw
  nameWithType: GLFW.GetWindowPosRaw
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowPosRaw
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowMonitor*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowMonitor
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWindowMonitor_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: GetWindowMonitor
  nameWithType: GLFW.GetWindowMonitor
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowMonitor
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.HideWindow*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.HideWindow
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_HideWindow_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: HideWindow
  nameWithType: GLFW.HideWindow
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.HideWindow
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.IconifyWindow*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.IconifyWindow
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_IconifyWindow_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: IconifyWindow
  nameWithType: GLFW.IconifyWindow
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.IconifyWindow
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCurrentContext
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCurrentContext
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetCurrentContext
  name: GetCurrentContext()
  nameWithType: GLFW.GetCurrentContext()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCurrentContext()
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCurrentContext
    name: GetCurrentContext
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetCurrentContext
  - name: (
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCurrentContext
    name: GetCurrentContext
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetCurrentContext
  - name: (
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintReleaseBehavior.ContextReleaseBehavior
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.WindowHintReleaseBehavior.ContextReleaseBehavior
  href: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintReleaseBehavior.html#OpenTK_Windowing_GraphicsLibraryFramework_WindowHintReleaseBehavior_ContextReleaseBehavior
  name: ContextReleaseBehavior
  nameWithType: WindowHintReleaseBehavior.ContextReleaseBehavior
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintReleaseBehavior.ContextReleaseBehavior
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.MakeContextCurrent*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.MakeContextCurrent
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_MakeContextCurrent_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: MakeContextCurrent
  nameWithType: GLFW.MakeContextCurrent
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.MakeContextCurrent
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.MaximizeWindow*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.MaximizeWindow
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_MaximizeWindow_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: MaximizeWindow
  nameWithType: GLFW.MaximizeWindow
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.MaximizeWindow
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.MaximizeWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.MaximizeWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_MaximizeWindow_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: MaximizeWindow(Window*)
  nameWithType: GLFW.MaximizeWindow(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.MaximizeWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.MaximizeWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
    name: MaximizeWindow
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_MaximizeWindow_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.MaximizeWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
    name: MaximizeWindow
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_MaximizeWindow_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowMaximizeCallback*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowMaximizeCallback
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowMaximizeCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_WindowMaximizeCallback_
  name: SetWindowMaximizeCallback
  nameWithType: GLFW.SetWindowMaximizeCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowMaximizeCallback
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowMaximizeCallback
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowMaximizeCallback
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  name: GLFWCallbacks.WindowMaximizeCallback
  nameWithType: GLFWCallbacks.WindowMaximizeCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowMaximizeCallback
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowMaximizeCallback
    name: WindowMaximizeCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowMaximizeCallback.html
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowMaximizeCallback
    name: WindowMaximizeCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowMaximizeCallback.html
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetFramebufferSizeCallback*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetFramebufferSizeCallback
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetFramebufferSizeCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_FramebufferSizeCallback_
  name: SetFramebufferSizeCallback
  nameWithType: GLFW.SetFramebufferSizeCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetFramebufferSizeCallback
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.FramebufferSizeCallback
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.FramebufferSizeCallback
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  name: GLFWCallbacks.FramebufferSizeCallback
  nameWithType: GLFWCallbacks.FramebufferSizeCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.FramebufferSizeCallback
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.FramebufferSizeCallback
    name: FramebufferSizeCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.FramebufferSizeCallback.html
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.FramebufferSizeCallback
    name: FramebufferSizeCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.FramebufferSizeCallback.html
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowContentScale(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Single@,System.Single@)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowContentScale(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Single@,System.Single@)
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWindowContentScale_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Single__System_Single__
  name: GetWindowContentScale(Window*, out float, out float)
  nameWithType: GLFW.GetWindowContentScale(Window*, out float, out float)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowContentScale(OpenTK.Windowing.GraphicsLibraryFramework.Window*, out float, out float)
  nameWithType.vb: GLFW.GetWindowContentScale(Window*, Single, Single)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowContentScale(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Single, Single)
  name.vb: GetWindowContentScale(Window*, Single, Single)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowContentScale(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Single@,System.Single@)
    name: GetWindowContentScale
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWindowContentScale_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Single__System_Single__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowContentScale(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Single@,System.Single@)
    name: GetWindowContentScale
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWindowContentScale_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Single__System_Single__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowContentScaleCallback*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowContentScaleCallback
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowContentScaleCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_WindowContentScaleCallback_
  name: SetWindowContentScaleCallback
  nameWithType: GLFW.SetWindowContentScaleCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowContentScaleCallback
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowContentScaleCallback
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowContentScaleCallback
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  name: GLFWCallbacks.WindowContentScaleCallback
  nameWithType: GLFWCallbacks.WindowContentScaleCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowContentScaleCallback
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowContentScaleCallback
    name: WindowContentScaleCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowContentScaleCallback.html
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowContentScaleCallback
    name: WindowContentScaleCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowContentScaleCallback.html
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PollEvents*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PollEvents
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_PollEvents
  name: PollEvents
  nameWithType: GLFW.PollEvents
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PollEvents
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEvents
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEvents
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WaitEvents
  name: WaitEvents()
  nameWithType: GLFW.WaitEvents()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEvents()
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEvents
    name: WaitEvents
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WaitEvents
  - name: (
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEvents
    name: WaitEvents
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WaitEvents
  - name: (
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEventsTimeout(System.Double)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEventsTimeout(System.Double)
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WaitEventsTimeout_System_Double_
  name: WaitEventsTimeout(double)
  nameWithType: GLFW.WaitEventsTimeout(double)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEventsTimeout(double)
  nameWithType.vb: GLFW.WaitEventsTimeout(Double)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEventsTimeout(Double)
  name.vb: WaitEventsTimeout(Double)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEventsTimeout(System.Double)
    name: WaitEventsTimeout
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WaitEventsTimeout_System_Double_
  - name: (
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEventsTimeout(System.Double)
    name: WaitEventsTimeout
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WaitEventsTimeout_System_Double_
  - name: (
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PostEmptyEvent*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PostEmptyEvent
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_PostEmptyEvent
  name: PostEmptyEvent
  nameWithType: GLFW.PostEmptyEvent
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PostEmptyEvent
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.RestoreWindow*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.RestoreWindow
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_RestoreWindow_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: RestoreWindow
  nameWithType: GLFW.RestoreWindow
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.RestoreWindow
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCharModsCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharModsCallback)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCharModsCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharModsCallback)
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetCharModsCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_CharModsCallback_
  name: SetCharModsCallback(Window*, CharModsCallback)
  nameWithType: GLFW.SetCharModsCallback(Window*, GLFWCallbacks.CharModsCallback)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCharModsCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharModsCallback)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCharModsCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharModsCallback)
    name: SetCharModsCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetCharModsCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_CharModsCallback_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharModsCallback
    name: CharModsCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharModsCallback.html
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCharModsCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharModsCallback)
    name: SetCharModsCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetCharModsCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_CharModsCallback_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharModsCallback
    name: CharModsCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharModsCallback.html
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCharCallback*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCharCallback
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetCharCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_CharCallback_
  name: SetCharCallback
  nameWithType: GLFW.SetCharCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCharCallback
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharCallback
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharCallback
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  name: GLFWCallbacks.CharCallback
  nameWithType: GLFWCallbacks.CharCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharCallback
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharCallback
    name: CharCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharCallback.html
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharCallback
    name: CharCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharCallback.html
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCharCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharCallback)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCharCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharCallback)
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetCharCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_CharCallback_
  name: SetCharCallback(Window*, CharCallback)
  nameWithType: GLFW.SetCharCallback(Window*, GLFWCallbacks.CharCallback)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCharCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharCallback)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCharCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharCallback)
    name: SetCharCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetCharCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_CharCallback_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharCallback
    name: CharCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharCallback.html
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCharCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharCallback)
    name: SetCharCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetCharCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_CharCallback_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharCallback
    name: CharCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharCallback.html
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetKeyCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.KeyCallback)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetKeyCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.KeyCallback)
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetKeyCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_KeyCallback_
  name: SetKeyCallback(Window*, KeyCallback)
  nameWithType: GLFW.SetKeyCallback(Window*, GLFWCallbacks.KeyCallback)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetKeyCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.KeyCallback)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetKeyCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.KeyCallback)
    name: SetKeyCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetKeyCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_KeyCallback_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.KeyCallback
    name: KeyCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.KeyCallback.html
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetKeyCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.KeyCallback)
    name: SetKeyCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetKeyCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_KeyCallback_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.KeyCallback
    name: KeyCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.KeyCallback.html
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCharModsCallback*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCharModsCallback
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetCharModsCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_CharModsCallback_
  name: SetCharModsCallback
  nameWithType: GLFW.SetCharModsCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCharModsCallback
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharModsCallback
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharModsCallback
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  name: GLFWCallbacks.CharModsCallback
  nameWithType: GLFWCallbacks.CharModsCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharModsCallback
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharModsCallback
    name: CharModsCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharModsCallback.html
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharModsCallback
    name: CharModsCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CharModsCallback.html
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetClipboardString*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetClipboardString
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetClipboardString_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_String_
  name: SetClipboardString
  nameWithType: GLFW.SetClipboardString
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetClipboardString
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetClipboardStringRaw*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetClipboardStringRaw
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetClipboardStringRaw_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Byte__
  name: SetClipboardStringRaw
  nameWithType: GLFW.SetClipboardStringRaw
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetClipboardStringRaw
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursorEnterCallback*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursorEnterCallback
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetCursorEnterCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_CursorEnterCallback_
  name: SetCursorEnterCallback
  nameWithType: GLFW.SetCursorEnterCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursorEnterCallback
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CursorEnterCallback
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CursorEnterCallback
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  name: GLFWCallbacks.CursorEnterCallback
  nameWithType: GLFWCallbacks.CursorEnterCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CursorEnterCallback
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CursorEnterCallback
    name: CursorEnterCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CursorEnterCallback.html
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CursorEnterCallback
    name: CursorEnterCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CursorEnterCallback.html
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursorPosCallback*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursorPosCallback
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetCursorPosCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_CursorPosCallback_
  name: SetCursorPosCallback
  nameWithType: GLFW.SetCursorPosCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetCursorPosCallback
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CursorPosCallback
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CursorPosCallback
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  name: GLFWCallbacks.CursorPosCallback
  nameWithType: GLFWCallbacks.CursorPosCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CursorPosCallback
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CursorPosCallback
    name: CursorPosCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CursorPosCallback.html
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CursorPosCallback
    name: CursorPosCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.CursorPosCallback.html
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetDropCallback*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetDropCallback
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetDropCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_DropCallback_
  name: SetDropCallback
  nameWithType: GLFW.SetDropCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetDropCallback
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.DropCallback
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.DropCallback
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  name: GLFWCallbacks.DropCallback
  nameWithType: GLFWCallbacks.DropCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.DropCallback
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.DropCallback
    name: DropCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.DropCallback.html
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.DropCallback
    name: DropCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.DropCallback.html
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetErrorCallback*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetErrorCallback
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetErrorCallback_OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_ErrorCallback_
  name: SetErrorCallback
  nameWithType: GLFW.SetErrorCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetErrorCallback
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ErrorCallback
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ErrorCallback
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  name: GLFWCallbacks.ErrorCallback
  nameWithType: GLFWCallbacks.ErrorCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ErrorCallback
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ErrorCallback
    name: ErrorCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ErrorCallback.html
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ErrorCallback
    name: ErrorCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ErrorCallback.html
- uid: OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue.CursorHidden
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue.CursorHidden
  href: OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue.html#OpenTK_Windowing_GraphicsLibraryFramework_CursorModeValue_CursorHidden
  name: CursorHidden
  nameWithType: CursorModeValue.CursorHidden
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.CursorModeValue.CursorHidden
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetInputMode_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_CursorStateAttribute_OpenTK_Windowing_GraphicsLibraryFramework_CursorModeValue_
  name: SetInputMode
  nameWithType: GLFW.SetInputMode
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetInputMode
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKey(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.Keys)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKey(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.Keys)
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetKey_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_Keys_
  name: GetKey(Window*, Keys)
  nameWithType: GLFW.GetKey(Window*, Keys)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKey(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.Keys)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKey(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.Keys)
    name: GetKey
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetKey_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_Keys_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Keys
    name: Keys
    href: OpenTK.Windowing.GraphicsLibraryFramework.Keys.html
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetKey(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.Keys)
    name: GetKey
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetKey_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_Keys_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Keys
    name: Keys
    href: OpenTK.Windowing.GraphicsLibraryFramework.Keys.html
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMouseButton(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.MouseButton)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMouseButton(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.MouseButton)
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetMouseButton_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_MouseButton_
  name: GetMouseButton(Window*, MouseButton)
  nameWithType: GLFW.GetMouseButton(Window*, MouseButton)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMouseButton(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.MouseButton)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMouseButton(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.MouseButton)
    name: GetMouseButton
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetMouseButton_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_MouseButton_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.MouseButton
    name: MouseButton
    href: OpenTK.Windowing.GraphicsLibraryFramework.MouseButton.html
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetMouseButton(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.MouseButton)
    name: GetMouseButton
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetMouseButton_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_MouseButton_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.MouseButton
    name: MouseButton
    href: OpenTK.Windowing.GraphicsLibraryFramework.MouseButton.html
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetJoystickCallback*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetJoystickCallback
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetJoystickCallback_OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_JoystickCallback_
  name: SetJoystickCallback
  nameWithType: GLFW.SetJoystickCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetJoystickCallback
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.JoystickCallback
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.JoystickCallback
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  name: GLFWCallbacks.JoystickCallback
  nameWithType: GLFWCallbacks.JoystickCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.JoystickCallback
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.JoystickCallback
    name: JoystickCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.JoystickCallback.html
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.JoystickCallback
    name: JoystickCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.JoystickCallback.html
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowFocusCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowFocusCallback)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowFocusCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowFocusCallback)
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowFocusCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_WindowFocusCallback_
  name: SetWindowFocusCallback(Window*, WindowFocusCallback)
  nameWithType: GLFW.SetWindowFocusCallback(Window*, GLFWCallbacks.WindowFocusCallback)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowFocusCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowFocusCallback)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowFocusCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowFocusCallback)
    name: SetWindowFocusCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowFocusCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_WindowFocusCallback_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowFocusCallback
    name: WindowFocusCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowFocusCallback.html
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowFocusCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowFocusCallback)
    name: SetWindowFocusCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowFocusCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_WindowFocusCallback_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowFocusCallback
    name: WindowFocusCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowFocusCallback.html
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetKeyCallback*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetKeyCallback
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetKeyCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_KeyCallback_
  name: SetKeyCallback
  nameWithType: GLFW.SetKeyCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetKeyCallback
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.KeyCallback
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.KeyCallback
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  name: GLFWCallbacks.KeyCallback
  nameWithType: GLFWCallbacks.KeyCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.KeyCallback
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.KeyCallback
    name: KeyCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.KeyCallback.html
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.KeyCallback
    name: KeyCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.KeyCallback.html
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetScrollCallback*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetScrollCallback
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetScrollCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_ScrollCallback_
  name: SetScrollCallback
  nameWithType: GLFW.SetScrollCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetScrollCallback
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ScrollCallback
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ScrollCallback
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  name: GLFWCallbacks.ScrollCallback
  nameWithType: GLFWCallbacks.ScrollCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ScrollCallback
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ScrollCallback
    name: ScrollCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ScrollCallback.html
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ScrollCallback
    name: ScrollCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.ScrollCallback.html
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetMonitorCallback*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetMonitorCallback
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetMonitorCallback_OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_MonitorCallback_
  name: SetMonitorCallback
  nameWithType: GLFW.SetMonitorCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetMonitorCallback
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MonitorCallback
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MonitorCallback
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  name: GLFWCallbacks.MonitorCallback
  nameWithType: GLFWCallbacks.MonitorCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MonitorCallback
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MonitorCallback
    name: MonitorCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MonitorCallback.html
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MonitorCallback
    name: MonitorCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MonitorCallback.html
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetMouseButtonCallback*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetMouseButtonCallback
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetMouseButtonCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_MouseButtonCallback_
  name: SetMouseButtonCallback
  nameWithType: GLFW.SetMouseButtonCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetMouseButtonCallback
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MouseButtonCallback
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MouseButtonCallback
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  name: GLFWCallbacks.MouseButtonCallback
  nameWithType: GLFWCallbacks.MouseButtonCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MouseButtonCallback
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MouseButtonCallback
    name: MouseButtonCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MouseButtonCallback.html
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MouseButtonCallback
    name: MouseButtonCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MouseButtonCallback.html
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowShouldClose(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Boolean)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowShouldClose(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Boolean)
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowShouldClose_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Boolean_
  name: SetWindowShouldClose(Window*, bool)
  nameWithType: GLFW.SetWindowShouldClose(Window*, bool)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowShouldClose(OpenTK.Windowing.GraphicsLibraryFramework.Window*, bool)
  nameWithType.vb: GLFW.SetWindowShouldClose(Window*, Boolean)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowShouldClose(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Boolean)
  name.vb: SetWindowShouldClose(Window*, Boolean)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowShouldClose(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Boolean)
    name: SetWindowShouldClose
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowShouldClose_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Boolean_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowShouldClose(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Boolean)
    name: SetWindowShouldClose
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowShouldClose_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Boolean_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DestroyWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DestroyWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_DestroyWindow_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: DestroyWindow(Window*)
  nameWithType: GLFW.DestroyWindow(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DestroyWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DestroyWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
    name: DestroyWindow
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_DestroyWindow_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.DestroyWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
    name: DestroyWindow
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_DestroyWindow_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowCloseCallback*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowCloseCallback
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowCloseCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_WindowCloseCallback_
  name: SetWindowCloseCallback
  nameWithType: GLFW.SetWindowCloseCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowCloseCallback
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowCloseCallback
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowCloseCallback
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  name: GLFWCallbacks.WindowCloseCallback
  nameWithType: GLFWCallbacks.WindowCloseCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowCloseCallback
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowCloseCallback
    name: WindowCloseCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowCloseCallback.html
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowCloseCallback
    name: WindowCloseCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowCloseCallback.html
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetMouseButtonCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MouseButtonCallback)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetMouseButtonCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MouseButtonCallback)
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetMouseButtonCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_MouseButtonCallback_
  name: SetMouseButtonCallback(Window*, MouseButtonCallback)
  nameWithType: GLFW.SetMouseButtonCallback(Window*, GLFWCallbacks.MouseButtonCallback)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetMouseButtonCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MouseButtonCallback)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetMouseButtonCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MouseButtonCallback)
    name: SetMouseButtonCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetMouseButtonCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_MouseButtonCallback_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MouseButtonCallback
    name: MouseButtonCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MouseButtonCallback.html
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetMouseButtonCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MouseButtonCallback)
    name: SetMouseButtonCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetMouseButtonCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_MouseButtonCallback_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MouseButtonCallback
    name: MouseButtonCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.MouseButtonCallback.html
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowFocusCallback*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowFocusCallback
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowFocusCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_WindowFocusCallback_
  name: SetWindowFocusCallback
  nameWithType: GLFW.SetWindowFocusCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowFocusCallback
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowFocusCallback
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowFocusCallback
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  name: GLFWCallbacks.WindowFocusCallback
  nameWithType: GLFWCallbacks.WindowFocusCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowFocusCallback
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowFocusCallback
    name: WindowFocusCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowFocusCallback.html
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowFocusCallback
    name: WindowFocusCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowFocusCallback.html
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIcon*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIcon
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowIcon_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_ReadOnlySpan_OpenTK_Windowing_GraphicsLibraryFramework_Image__
  name: SetWindowIcon
  nameWithType: GLFW.SetWindowIcon
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIcon
- uid: System.ReadOnlySpan{OpenTK.Windowing.GraphicsLibraryFramework.Image}
  commentId: T:System.ReadOnlySpan{OpenTK.Windowing.GraphicsLibraryFramework.Image}
  parent: System
  definition: System.ReadOnlySpan`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<Image>
  nameWithType: ReadOnlySpan<Image>
  fullName: System.ReadOnlySpan<OpenTK.Windowing.GraphicsLibraryFramework.Image>
  nameWithType.vb: ReadOnlySpan(Of Image)
  fullName.vb: System.ReadOnlySpan(Of OpenTK.Windowing.GraphicsLibraryFramework.Image)
  name.vb: ReadOnlySpan(Of Image)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Image
    name: Image
    href: OpenTK.Windowing.GraphicsLibraryFramework.Image.html
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Image
    name: Image
    href: OpenTK.Windowing.GraphicsLibraryFramework.Image.html
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIconRaw*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIconRaw
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowIconRaw_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Int32_OpenTK_Windowing_GraphicsLibraryFramework_Image__
  name: SetWindowIconRaw
  nameWithType: GLFW.SetWindowIconRaw
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIconRaw
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIconifyCallback*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIconifyCallback
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowIconifyCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_WindowIconifyCallback_
  name: SetWindowIconifyCallback
  nameWithType: GLFW.SetWindowIconifyCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowIconifyCallback
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowIconifyCallback
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowIconifyCallback
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  name: GLFWCallbacks.WindowIconifyCallback
  nameWithType: GLFWCallbacks.WindowIconifyCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowIconifyCallback
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowIconifyCallback
    name: WindowIconifyCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowIconifyCallback.html
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowIconifyCallback
    name: WindowIconifyCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowIconifyCallback.html
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWindowMonitor_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: GetWindowMonitor(Window*)
  nameWithType: GLFW.GetWindowMonitor(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
    name: GetWindowMonitor
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWindowMonitor_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowMonitor(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
    name: GetWindowMonitor
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWindowMonitor_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowMonitor*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowMonitor
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowMonitor_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_Monitor__System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_
  name: SetWindowMonitor
  nameWithType: GLFW.SetWindowMonitor
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowMonitor
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@)
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWindowPos_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Int32__System_Int32__
  name: GetWindowPos(Window*, out int, out int)
  nameWithType: GLFW.GetWindowPos(Window*, out int, out int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*, out int, out int)
  nameWithType.vb: GLFW.GetWindowPos(Window*, Integer, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Integer, Integer)
  name.vb: GetWindowPos(Window*, Integer, Integer)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@)
    name: GetWindowPos
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWindowPos_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Int32__System_Int32__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowPos(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Int32@,System.Int32@)
    name: GetWindowPos
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWindowPos_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Int32__System_Int32__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowPos*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowPos
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowPos_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Int32_System_Int32_
  name: SetWindowPos
  nameWithType: GLFW.SetWindowPos
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowPos
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowPosCallback*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowPosCallback
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowPosCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_WindowPosCallback_
  name: SetWindowPosCallback
  nameWithType: GLFW.SetWindowPosCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowPosCallback
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowPosCallback
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowPosCallback
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  name: GLFWCallbacks.WindowPosCallback
  nameWithType: GLFWCallbacks.WindowPosCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowPosCallback
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowPosCallback
    name: WindowPosCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowPosCallback.html
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowPosCallback
    name: WindowPosCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowPosCallback.html
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowRefreshCallback*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowRefreshCallback
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowRefreshCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_WindowRefreshCallback_
  name: SetWindowRefreshCallback
  nameWithType: GLFW.SetWindowRefreshCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowRefreshCallback
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowRefreshCallback
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowRefreshCallback
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  name: GLFWCallbacks.WindowRefreshCallback
  nameWithType: GLFWCallbacks.WindowRefreshCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowRefreshCallback
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowRefreshCallback
    name: WindowRefreshCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowRefreshCallback.html
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowRefreshCallback
    name: WindowRefreshCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowRefreshCallback.html
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSize*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSize
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowSize_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Int32_System_Int32_
  name: SetWindowSize
  nameWithType: GLFW.SetWindowSize
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSize
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSizeCallback*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSizeCallback
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowSizeCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_WindowSizeCallback_
  name: SetWindowSizeCallback
  nameWithType: GLFW.SetWindowSizeCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowSizeCallback
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowSizeCallback
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowSizeCallback
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  name: GLFWCallbacks.WindowSizeCallback
  nameWithType: GLFWCallbacks.WindowSizeCallback
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowSizeCallback
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowSizeCallback
    name: WindowSizeCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowSizeCallback.html
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks
    name: GLFWCallbacks
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.html
  - name: .
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowSizeCallback
    name: WindowSizeCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowSizeCallback.html
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowShouldClose*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowShouldClose
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowShouldClose_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Boolean_
  name: SetWindowShouldClose
  nameWithType: GLFW.SetWindowShouldClose
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowShouldClose
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowTitleRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Byte*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowTitleRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Byte*)
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowTitleRaw_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Byte__
  name: SetWindowTitleRaw(Window*, byte*)
  nameWithType: GLFW.SetWindowTitleRaw(Window*, byte*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowTitleRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*, byte*)
  nameWithType.vb: GLFW.SetWindowTitleRaw(Window*, Byte*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowTitleRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Byte*)
  name.vb: SetWindowTitleRaw(Window*, Byte*)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowTitleRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Byte*)
    name: SetWindowTitleRaw
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowTitleRaw_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Byte__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '*'
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowTitleRaw(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Byte*)
    name: SetWindowTitleRaw
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowTitleRaw_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Byte__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '*'
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWNative.glfwCreateWindow(System.Int32,System.Int32,System.Byte*,OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFWNative.glfwCreateWindow(System.Int32,System.Int32,System.Byte*,OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWNative.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFWNative_glfwCreateWindow_System_Int32_System_Int32_System_Byte__OpenTK_Windowing_GraphicsLibraryFramework_Monitor__OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: glfwCreateWindow(int, int, byte*, Monitor*, Window*)
  nameWithType: GLFWNative.glfwCreateWindow(int, int, byte*, Monitor*, Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFWNative.glfwCreateWindow(int, int, byte*, OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  nameWithType.vb: GLFWNative.glfwCreateWindow(Integer, Integer, Byte*, Monitor*, Window*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFWNative.glfwCreateWindow(Integer, Integer, Byte*, OpenTK.Windowing.GraphicsLibraryFramework.Monitor*, OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  name.vb: glfwCreateWindow(Integer, Integer, Byte*, Monitor*, Window*)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWNative.glfwCreateWindow(System.Int32,System.Int32,System.Byte*,OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,OpenTK.Windowing.GraphicsLibraryFramework.Window*)
    name: glfwCreateWindow
    isExternal: true
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWNative.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFWNative_glfwCreateWindow_System_Int32_System_Int32_System_Byte__OpenTK_Windowing_GraphicsLibraryFramework_Monitor__OpenTK_Windowing_GraphicsLibraryFramework_Window__
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Monitor
    name: Monitor
    href: OpenTK.Windowing.GraphicsLibraryFramework.Monitor.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWNative.glfwCreateWindow(System.Int32,System.Int32,System.Byte*,OpenTK.Windowing.GraphicsLibraryFramework.Monitor*,OpenTK.Windowing.GraphicsLibraryFramework.Window*)
    name: glfwCreateWindow
    isExternal: true
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWNative.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFWNative_glfwCreateWindow_System_Int32_System_Int32_System_Byte__OpenTK_Windowing_GraphicsLibraryFramework_Monitor__OpenTK_Windowing_GraphicsLibraryFramework_Window__
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Monitor
    name: Monitor
    href: OpenTK.Windowing.GraphicsLibraryFramework.Monitor.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWNative.glfwSetWindowTitle(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Byte*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFWNative.glfwSetWindowTitle(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Byte*)
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWNative.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFWNative_glfwSetWindowTitle_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Byte__
  name: glfwSetWindowTitle(Window*, byte*)
  nameWithType: GLFWNative.glfwSetWindowTitle(Window*, byte*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFWNative.glfwSetWindowTitle(OpenTK.Windowing.GraphicsLibraryFramework.Window*, byte*)
  nameWithType.vb: GLFWNative.glfwSetWindowTitle(Window*, Byte*)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFWNative.glfwSetWindowTitle(OpenTK.Windowing.GraphicsLibraryFramework.Window*, Byte*)
  name.vb: glfwSetWindowTitle(Window*, Byte*)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWNative.glfwSetWindowTitle(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Byte*)
    name: glfwSetWindowTitle
    isExternal: true
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWNative.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFWNative_glfwSetWindowTitle_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Byte__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '*'
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWNative.glfwSetWindowTitle(OpenTK.Windowing.GraphicsLibraryFramework.Window*,System.Byte*)
    name: glfwSetWindowTitle
    isExternal: true
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWNative.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFWNative_glfwSetWindowTitle_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Byte__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '*'
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowTitleRaw*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowTitleRaw
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWindowTitleRaw_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: GetWindowTitleRaw
  nameWithType: GLFW.GetWindowTitleRaw
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowTitleRaw
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowTitle*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowTitle
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWindowTitle_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: GetWindowTitle
  nameWithType: GLFW.GetWindowTitle
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWindowTitle
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowTitle*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowTitle
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowTitle_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_String_
  name: SetWindowTitle
  nameWithType: GLFW.SetWindowTitle
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowTitle
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowTitleRaw*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowTitleRaw
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowTitleRaw_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Byte__
  name: SetWindowTitleRaw
  nameWithType: GLFW.SetWindowTitleRaw
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowTitleRaw
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.HideWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.HideWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_HideWindow_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: HideWindow(Window*)
  nameWithType: GLFW.HideWindow(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.HideWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.HideWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
    name: HideWindow
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_HideWindow_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.HideWindow(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
    name: HideWindow
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_HideWindow_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ShowWindow*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ShowWindow
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_ShowWindow_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: ShowWindow
  nameWithType: GLFW.ShowWindow
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.ShowWindow
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SwapBuffers(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SwapBuffers(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SwapBuffers_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: SwapBuffers(Window*)
  nameWithType: GLFW.SwapBuffers(Window*)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SwapBuffers(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SwapBuffers(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
    name: SwapBuffers
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SwapBuffers_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SwapBuffers(OpenTK.Windowing.GraphicsLibraryFramework.Window*)
    name: SwapBuffers
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SwapBuffers_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SwapInterval*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SwapInterval
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SwapInterval_System_Int32_
  name: SwapInterval
  nameWithType: GLFW.SwapInterval
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SwapInterval
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PollEvents
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PollEvents
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_PollEvents
  name: PollEvents()
  nameWithType: GLFW.PollEvents()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PollEvents()
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PollEvents
    name: PollEvents
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_PollEvents
  - name: (
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.PollEvents
    name: PollEvents
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_PollEvents
  - name: (
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowRefreshCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowRefreshCallback)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowRefreshCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowRefreshCallback)
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowRefreshCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_WindowRefreshCallback_
  name: SetWindowRefreshCallback(Window*, WindowRefreshCallback)
  nameWithType: GLFW.SetWindowRefreshCallback(Window*, GLFWCallbacks.WindowRefreshCallback)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowRefreshCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*, OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowRefreshCallback)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowRefreshCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowRefreshCallback)
    name: SetWindowRefreshCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowRefreshCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_WindowRefreshCallback_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowRefreshCallback
    name: WindowRefreshCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowRefreshCallback.html
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetWindowRefreshCallback(OpenTK.Windowing.GraphicsLibraryFramework.Window*,OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowRefreshCallback)
    name: SetWindowRefreshCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetWindowRefreshCallback_OpenTK_Windowing_GraphicsLibraryFramework_Window__OpenTK_Windowing_GraphicsLibraryFramework_GLFWCallbacks_WindowRefreshCallback_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Window
    name: Window
    href: OpenTK.Windowing.GraphicsLibraryFramework.Window.html
  - name: '*'
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowRefreshCallback
    name: WindowRefreshCallback
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFWCallbacks.WindowRefreshCallback.html
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEvents*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEvents
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WaitEvents
  name: WaitEvents
  nameWithType: GLFW.WaitEvents
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEvents
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEventsTimeout*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEventsTimeout
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WaitEventsTimeout_System_Double_
  name: WaitEventsTimeout
  nameWithType: GLFW.WaitEventsTimeout
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WaitEventsTimeout
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintInt,System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintInt,System.Int32)
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WindowHint_OpenTK_Windowing_GraphicsLibraryFramework_WindowHintInt_System_Int32_
  name: WindowHint(WindowHintInt, int)
  nameWithType: GLFW.WindowHint(WindowHintInt, int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintInt, int)
  nameWithType.vb: GLFW.WindowHint(WindowHintInt, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintInt, Integer)
  name.vb: WindowHint(WindowHintInt, Integer)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintInt,System.Int32)
    name: WindowHint
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WindowHint_OpenTK_Windowing_GraphicsLibraryFramework_WindowHintInt_System_Int32_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintInt
    name: WindowHintInt
    href: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintInt.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintInt,System.Int32)
    name: WindowHint
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WindowHint_OpenTK_Windowing_GraphicsLibraryFramework_WindowHintInt_System_Int32_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintInt
    name: WindowHintInt
    href: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintInt.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintInt
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.WindowHintInt
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintInt.html
  name: WindowHintInt
  nameWithType: WindowHintInt
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintInt
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool,System.Boolean)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool,System.Boolean)
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WindowHint_OpenTK_Windowing_GraphicsLibraryFramework_WindowHintBool_System_Boolean_
  name: WindowHint(WindowHintBool, bool)
  nameWithType: GLFW.WindowHint(WindowHintBool, bool)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool, bool)
  nameWithType.vb: GLFW.WindowHint(WindowHintBool, Boolean)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool, Boolean)
  name.vb: WindowHint(WindowHintBool, Boolean)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool,System.Boolean)
    name: WindowHint
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WindowHint_OpenTK_Windowing_GraphicsLibraryFramework_WindowHintBool_System_Boolean_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool
    name: WindowHintBool
    href: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool,System.Boolean)
    name: WindowHint
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WindowHint_OpenTK_Windowing_GraphicsLibraryFramework_WindowHintBool_System_Boolean_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool
    name: WindowHintBool
    href: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool.html
  name: WindowHintBool
  nameWithType: WindowHintBool
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintBool
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintClientApi,OpenTK.Windowing.GraphicsLibraryFramework.ClientApi)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintClientApi,OpenTK.Windowing.GraphicsLibraryFramework.ClientApi)
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WindowHint_OpenTK_Windowing_GraphicsLibraryFramework_WindowHintClientApi_OpenTK_Windowing_GraphicsLibraryFramework_ClientApi_
  name: WindowHint(WindowHintClientApi, ClientApi)
  nameWithType: GLFW.WindowHint(WindowHintClientApi, ClientApi)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintClientApi, OpenTK.Windowing.GraphicsLibraryFramework.ClientApi)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintClientApi,OpenTK.Windowing.GraphicsLibraryFramework.ClientApi)
    name: WindowHint
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WindowHint_OpenTK_Windowing_GraphicsLibraryFramework_WindowHintClientApi_OpenTK_Windowing_GraphicsLibraryFramework_ClientApi_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintClientApi
    name: WindowHintClientApi
    href: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintClientApi.html
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.ClientApi
    name: ClientApi
    href: OpenTK.Windowing.GraphicsLibraryFramework.ClientApi.html
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintClientApi,OpenTK.Windowing.GraphicsLibraryFramework.ClientApi)
    name: WindowHint
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WindowHint_OpenTK_Windowing_GraphicsLibraryFramework_WindowHintClientApi_OpenTK_Windowing_GraphicsLibraryFramework_ClientApi_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintClientApi
    name: WindowHintClientApi
    href: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintClientApi.html
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.ClientApi
    name: ClientApi
    href: OpenTK.Windowing.GraphicsLibraryFramework.ClientApi.html
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintClientApi.ClientApi
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.WindowHintClientApi.ClientApi
  href: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintClientApi.html#OpenTK_Windowing_GraphicsLibraryFramework_WindowHintClientApi_ClientApi
  name: ClientApi
  nameWithType: WindowHintClientApi.ClientApi
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintClientApi.ClientApi
- uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintClientApi
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.WindowHintClientApi
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintClientApi.html
  name: WindowHintClientApi
  nameWithType: WindowHintClientApi
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintClientApi
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintReleaseBehavior,OpenTK.Windowing.GraphicsLibraryFramework.ReleaseBehavior)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintReleaseBehavior,OpenTK.Windowing.GraphicsLibraryFramework.ReleaseBehavior)
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WindowHint_OpenTK_Windowing_GraphicsLibraryFramework_WindowHintReleaseBehavior_OpenTK_Windowing_GraphicsLibraryFramework_ReleaseBehavior_
  name: WindowHint(WindowHintReleaseBehavior, ReleaseBehavior)
  nameWithType: GLFW.WindowHint(WindowHintReleaseBehavior, ReleaseBehavior)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintReleaseBehavior, OpenTK.Windowing.GraphicsLibraryFramework.ReleaseBehavior)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintReleaseBehavior,OpenTK.Windowing.GraphicsLibraryFramework.ReleaseBehavior)
    name: WindowHint
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WindowHint_OpenTK_Windowing_GraphicsLibraryFramework_WindowHintReleaseBehavior_OpenTK_Windowing_GraphicsLibraryFramework_ReleaseBehavior_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintReleaseBehavior
    name: WindowHintReleaseBehavior
    href: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintReleaseBehavior.html
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.ReleaseBehavior
    name: ReleaseBehavior
    href: OpenTK.Windowing.GraphicsLibraryFramework.ReleaseBehavior.html
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintReleaseBehavior,OpenTK.Windowing.GraphicsLibraryFramework.ReleaseBehavior)
    name: WindowHint
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WindowHint_OpenTK_Windowing_GraphicsLibraryFramework_WindowHintReleaseBehavior_OpenTK_Windowing_GraphicsLibraryFramework_ReleaseBehavior_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintReleaseBehavior
    name: WindowHintReleaseBehavior
    href: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintReleaseBehavior.html
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.ReleaseBehavior
    name: ReleaseBehavior
    href: OpenTK.Windowing.GraphicsLibraryFramework.ReleaseBehavior.html
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintReleaseBehavior
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.WindowHintReleaseBehavior
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintReleaseBehavior.html
  name: WindowHintReleaseBehavior
  nameWithType: WindowHintReleaseBehavior
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintReleaseBehavior
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintContextApi,OpenTK.Windowing.GraphicsLibraryFramework.ContextApi)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintContextApi,OpenTK.Windowing.GraphicsLibraryFramework.ContextApi)
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WindowHint_OpenTK_Windowing_GraphicsLibraryFramework_WindowHintContextApi_OpenTK_Windowing_GraphicsLibraryFramework_ContextApi_
  name: WindowHint(WindowHintContextApi, ContextApi)
  nameWithType: GLFW.WindowHint(WindowHintContextApi, ContextApi)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintContextApi, OpenTK.Windowing.GraphicsLibraryFramework.ContextApi)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintContextApi,OpenTK.Windowing.GraphicsLibraryFramework.ContextApi)
    name: WindowHint
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WindowHint_OpenTK_Windowing_GraphicsLibraryFramework_WindowHintContextApi_OpenTK_Windowing_GraphicsLibraryFramework_ContextApi_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintContextApi
    name: WindowHintContextApi
    href: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintContextApi.html
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.ContextApi
    name: ContextApi
    href: OpenTK.Windowing.GraphicsLibraryFramework.ContextApi.html
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintContextApi,OpenTK.Windowing.GraphicsLibraryFramework.ContextApi)
    name: WindowHint
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WindowHint_OpenTK_Windowing_GraphicsLibraryFramework_WindowHintContextApi_OpenTK_Windowing_GraphicsLibraryFramework_ContextApi_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintContextApi
    name: WindowHintContextApi
    href: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintContextApi.html
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.ContextApi
    name: ContextApi
    href: OpenTK.Windowing.GraphicsLibraryFramework.ContextApi.html
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintContextApi.ContextCreationApi
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.WindowHintContextApi.ContextCreationApi
  href: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintContextApi.html#OpenTK_Windowing_GraphicsLibraryFramework_WindowHintContextApi_ContextCreationApi
  name: ContextCreationApi
  nameWithType: WindowHintContextApi.ContextCreationApi
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintContextApi.ContextCreationApi
- uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintContextApi
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.WindowHintContextApi
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintContextApi.html
  name: WindowHintContextApi
  nameWithType: WindowHintContextApi
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintContextApi
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintRobustness,OpenTK.Windowing.GraphicsLibraryFramework.Robustness)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintRobustness,OpenTK.Windowing.GraphicsLibraryFramework.Robustness)
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WindowHint_OpenTK_Windowing_GraphicsLibraryFramework_WindowHintRobustness_OpenTK_Windowing_GraphicsLibraryFramework_Robustness_
  name: WindowHint(WindowHintRobustness, Robustness)
  nameWithType: GLFW.WindowHint(WindowHintRobustness, Robustness)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintRobustness, OpenTK.Windowing.GraphicsLibraryFramework.Robustness)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintRobustness,OpenTK.Windowing.GraphicsLibraryFramework.Robustness)
    name: WindowHint
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WindowHint_OpenTK_Windowing_GraphicsLibraryFramework_WindowHintRobustness_OpenTK_Windowing_GraphicsLibraryFramework_Robustness_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintRobustness
    name: WindowHintRobustness
    href: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintRobustness.html
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Robustness
    name: Robustness
    href: OpenTK.Windowing.GraphicsLibraryFramework.Robustness.html
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintRobustness,OpenTK.Windowing.GraphicsLibraryFramework.Robustness)
    name: WindowHint
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WindowHint_OpenTK_Windowing_GraphicsLibraryFramework_WindowHintRobustness_OpenTK_Windowing_GraphicsLibraryFramework_Robustness_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintRobustness
    name: WindowHintRobustness
    href: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintRobustness.html
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.Robustness
    name: Robustness
    href: OpenTK.Windowing.GraphicsLibraryFramework.Robustness.html
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintRobustness.ContextRobustness
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.WindowHintRobustness.ContextRobustness
  href: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintRobustness.html#OpenTK_Windowing_GraphicsLibraryFramework_WindowHintRobustness_ContextRobustness
  name: ContextRobustness
  nameWithType: WindowHintRobustness.ContextRobustness
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintRobustness.ContextRobustness
- uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintRobustness
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.WindowHintRobustness
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintRobustness.html
  name: WindowHintRobustness
  nameWithType: WindowHintRobustness
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintRobustness
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintOpenGlProfile,OpenTK.Windowing.GraphicsLibraryFramework.OpenGlProfile)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintOpenGlProfile,OpenTK.Windowing.GraphicsLibraryFramework.OpenGlProfile)
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WindowHint_OpenTK_Windowing_GraphicsLibraryFramework_WindowHintOpenGlProfile_OpenTK_Windowing_GraphicsLibraryFramework_OpenGlProfile_
  name: WindowHint(WindowHintOpenGlProfile, OpenGlProfile)
  nameWithType: GLFW.WindowHint(WindowHintOpenGlProfile, OpenGlProfile)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintOpenGlProfile, OpenTK.Windowing.GraphicsLibraryFramework.OpenGlProfile)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintOpenGlProfile,OpenTK.Windowing.GraphicsLibraryFramework.OpenGlProfile)
    name: WindowHint
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WindowHint_OpenTK_Windowing_GraphicsLibraryFramework_WindowHintOpenGlProfile_OpenTK_Windowing_GraphicsLibraryFramework_OpenGlProfile_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintOpenGlProfile
    name: WindowHintOpenGlProfile
    href: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintOpenGlProfile.html
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.OpenGlProfile
    name: OpenGlProfile
    href: OpenTK.Windowing.GraphicsLibraryFramework.OpenGlProfile.html
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowHint(OpenTK.Windowing.GraphicsLibraryFramework.WindowHintOpenGlProfile,OpenTK.Windowing.GraphicsLibraryFramework.OpenGlProfile)
    name: WindowHint
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WindowHint_OpenTK_Windowing_GraphicsLibraryFramework_WindowHintOpenGlProfile_OpenTK_Windowing_GraphicsLibraryFramework_OpenGlProfile_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintOpenGlProfile
    name: WindowHintOpenGlProfile
    href: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintOpenGlProfile.html
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.OpenGlProfile
    name: OpenGlProfile
    href: OpenTK.Windowing.GraphicsLibraryFramework.OpenGlProfile.html
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintOpenGlProfile.OpenGlProfile
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.WindowHintOpenGlProfile.OpenGlProfile
  href: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintOpenGlProfile.html#OpenTK_Windowing_GraphicsLibraryFramework_WindowHintOpenGlProfile_OpenGlProfile
  name: OpenGlProfile
  nameWithType: WindowHintOpenGlProfile.OpenGlProfile
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintOpenGlProfile.OpenGlProfile
- uid: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintOpenGlProfile
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.WindowHintOpenGlProfile
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintOpenGlProfile.html
  name: WindowHintOpenGlProfile
  nameWithType: WindowHintOpenGlProfile
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.WindowHintOpenGlProfile
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowShouldClose*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowShouldClose
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_WindowShouldClose_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: WindowShouldClose
  nameWithType: GLFW.WindowShouldClose
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.WindowShouldClose
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensions
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensions
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetRequiredInstanceExtensions
  name: GetRequiredInstanceExtensions()
  nameWithType: GLFW.GetRequiredInstanceExtensions()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensions()
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensions
    name: GetRequiredInstanceExtensions
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetRequiredInstanceExtensions
  - name: (
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensions
    name: GetRequiredInstanceExtensions
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetRequiredInstanceExtensions
  - name: (
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPhysicalDevicePresentationSupport(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,System.Int32)
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPhysicalDevicePresentationSupport(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,System.Int32)
  isExternal: true
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetPhysicalDevicePresentationSupport_OpenTK_Windowing_GraphicsLibraryFramework_VkHandle_OpenTK_Windowing_GraphicsLibraryFramework_VkHandle_System_Int32_
  name: GetPhysicalDevicePresentationSupport(VkHandle, VkHandle, int)
  nameWithType: GLFW.GetPhysicalDevicePresentationSupport(VkHandle, VkHandle, int)
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPhysicalDevicePresentationSupport(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle, OpenTK.Windowing.GraphicsLibraryFramework.VkHandle, int)
  nameWithType.vb: GLFW.GetPhysicalDevicePresentationSupport(VkHandle, VkHandle, Integer)
  fullName.vb: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPhysicalDevicePresentationSupport(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle, OpenTK.Windowing.GraphicsLibraryFramework.VkHandle, Integer)
  name.vb: GetPhysicalDevicePresentationSupport(VkHandle, VkHandle, Integer)
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPhysicalDevicePresentationSupport(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,System.Int32)
    name: GetPhysicalDevicePresentationSupport
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetPhysicalDevicePresentationSupport_OpenTK_Windowing_GraphicsLibraryFramework_VkHandle_OpenTK_Windowing_GraphicsLibraryFramework_VkHandle_System_Int32_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.VkHandle
    name: VkHandle
    href: OpenTK.Windowing.GraphicsLibraryFramework.VkHandle.html
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.VkHandle
    name: VkHandle
    href: OpenTK.Windowing.GraphicsLibraryFramework.VkHandle.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPhysicalDevicePresentationSupport(OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,OpenTK.Windowing.GraphicsLibraryFramework.VkHandle,System.Int32)
    name: GetPhysicalDevicePresentationSupport
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetPhysicalDevicePresentationSupport_OpenTK_Windowing_GraphicsLibraryFramework_VkHandle_OpenTK_Windowing_GraphicsLibraryFramework_VkHandle_System_Int32_
  - name: (
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.VkHandle
    name: VkHandle
    href: OpenTK.Windowing.GraphicsLibraryFramework.VkHandle.html
  - name: ','
  - name: " "
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.VkHandle
    name: VkHandle
    href: OpenTK.Windowing.GraphicsLibraryFramework.VkHandle.html
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.VulkanSupported*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.VulkanSupported
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_VulkanSupported
  name: VulkanSupported
  nameWithType: GLFW.VulkanSupported
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.VulkanSupported
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.VulkanSupported
  commentId: M:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.VulkanSupported
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_VulkanSupported
  name: VulkanSupported()
  nameWithType: GLFW.VulkanSupported()
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.VulkanSupported()
  spec.csharp:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.VulkanSupported
    name: VulkanSupported
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_VulkanSupported
  - name: (
  - name: )
  spec.vb:
  - uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.VulkanSupported
    name: VulkanSupported
    href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_VulkanSupported
  - name: (
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensionsRaw*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensionsRaw
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetRequiredInstanceExtensionsRaw_System_UInt32__
  name: GetRequiredInstanceExtensionsRaw
  nameWithType: GLFW.GetRequiredInstanceExtensionsRaw
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensionsRaw
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint32
  name: uint
  nameWithType: uint
  fullName: uint
  nameWithType.vb: UInteger
  fullName.vb: UInteger
  name.vb: UInteger
- uid: System.Byte**
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte**
  nameWithType: byte**
  fullName: byte**
  nameWithType.vb: Byte**
  fullName.vb: Byte**
  name.vb: Byte**
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '*'
  - name: '*'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '*'
  - name: '*'
- uid: System.UInt32*
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint32
  name: uint*
  nameWithType: uint*
  fullName: uint*
  nameWithType.vb: UInteger*
  fullName.vb: UInteger*
  name.vb: UInteger*
  spec.csharp:
  - uid: System.UInt32
    name: uint
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: '*'
  spec.vb:
  - uid: System.UInt32
    name: UInteger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: '*'
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensions*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensions
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetRequiredInstanceExtensions
  name: GetRequiredInstanceExtensions
  nameWithType: GLFW.GetRequiredInstanceExtensions
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetRequiredInstanceExtensions
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInstanceProcAddress*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInstanceProcAddress
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetInstanceProcAddress_OpenTK_Windowing_GraphicsLibraryFramework_VkHandle_System_String_
  name: GetInstanceProcAddress
  nameWithType: GLFW.GetInstanceProcAddress
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInstanceProcAddress
- uid: OpenTK.Windowing.GraphicsLibraryFramework.VkHandle
  commentId: T:OpenTK.Windowing.GraphicsLibraryFramework.VkHandle
  parent: OpenTK.Windowing.GraphicsLibraryFramework
  href: OpenTK.Windowing.GraphicsLibraryFramework.VkHandle.html
  name: VkHandle
  nameWithType: VkHandle
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.VkHandle
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInstanceProcAddressRaw*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInstanceProcAddressRaw
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetInstanceProcAddressRaw_OpenTK_Windowing_GraphicsLibraryFramework_VkHandle_System_Byte__
  name: GetInstanceProcAddressRaw
  nameWithType: GLFW.GetInstanceProcAddressRaw
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetInstanceProcAddressRaw
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPhysicalDevicePresentationSupport*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPhysicalDevicePresentationSupport
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetPhysicalDevicePresentationSupport_OpenTK_Windowing_GraphicsLibraryFramework_VkHandle_OpenTK_Windowing_GraphicsLibraryFramework_VkHandle_System_Int32_
  name: GetPhysicalDevicePresentationSupport
  nameWithType: GLFW.GetPhysicalDevicePresentationSupport
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetPhysicalDevicePresentationSupport
- uid: OpenTK.Windowing.GraphicsLibraryFramework.ClientApi.NoApi
  commentId: F:OpenTK.Windowing.GraphicsLibraryFramework.ClientApi.NoApi
  href: OpenTK.Windowing.GraphicsLibraryFramework.ClientApi.html#OpenTK_Windowing_GraphicsLibraryFramework_ClientApi_NoApi
  name: NoApi
  nameWithType: ClientApi.NoApi
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.ClientApi.NoApi
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindowSurface*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindowSurface
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_CreateWindowSurface_OpenTK_Windowing_GraphicsLibraryFramework_VkHandle_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Void__OpenTK_Windowing_GraphicsLibraryFramework_VkHandle__
  name: CreateWindowSurface
  nameWithType: GLFW.CreateWindowSurface
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.CreateWindowSurface
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWin32Adapter*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWin32Adapter
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWin32Adapter_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__
  name: GetWin32Adapter
  nameWithType: GLFW.GetWin32Adapter
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWin32Adapter
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWin32Monitor*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWin32Monitor
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWin32Monitor_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__
  name: GetWin32Monitor
  nameWithType: GLFW.GetWin32Monitor
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWin32Monitor
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWin32Window*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWin32Window
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWin32Window_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: GetWin32Window
  nameWithType: GLFW.GetWin32Window
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWin32Window
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWGLContext*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWGLContext
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWGLContext_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: GetWGLContext
  nameWithType: GLFW.GetWGLContext
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWGLContext
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCocoaMonitor*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCocoaMonitor
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetCocoaMonitor_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__
  name: GetCocoaMonitor
  nameWithType: GLFW.GetCocoaMonitor
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCocoaMonitor
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCocoaWindow*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCocoaWindow
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetCocoaWindow_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: GetCocoaWindow
  nameWithType: GLFW.GetCocoaWindow
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCocoaWindow
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCocoaView*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCocoaView
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetCocoaView_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: GetCocoaView
  nameWithType: GLFW.GetCocoaView
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetCocoaView
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetNSGLContext*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetNSGLContext
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetNSGLContext_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: GetNSGLContext
  nameWithType: GLFW.GetNSGLContext
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetNSGLContext
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Display*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Display
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetX11Display
  name: GetX11Display
  nameWithType: GLFW.GetX11Display
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Display
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Adapter*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Adapter
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetX11Adapter_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__
  name: GetX11Adapter
  nameWithType: GLFW.GetX11Adapter
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Adapter
- uid: System.UIntPtr
  commentId: T:System.UIntPtr
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uintptr
  name: nuint
  nameWithType: nuint
  fullName: nuint
  nameWithType.vb: UIntPtr
  fullName.vb: System.UIntPtr
  name.vb: UIntPtr
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Monitor*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Monitor
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetX11Monitor_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__
  name: GetX11Monitor
  nameWithType: GLFW.GetX11Monitor
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Monitor
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Window*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Window
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetX11Window_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: GetX11Window
  nameWithType: GLFW.GetX11Window
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11Window
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetX11SelectionString*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetX11SelectionString
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_SetX11SelectionString_System_String_
  name: SetX11SelectionString
  nameWithType: GLFW.SetX11SelectionString
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.SetX11SelectionString
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11SelectionString*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11SelectionString
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetX11SelectionString
  name: GetX11SelectionString
  nameWithType: GLFW.GetX11SelectionString
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetX11SelectionString
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGLXContext*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGLXContext
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetGLXContext_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: GetGLXContext
  nameWithType: GLFW.GetGLXContext
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGLXContext
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGLXWindow*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGLXWindow
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetGLXWindow_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: GetGLXWindow
  nameWithType: GLFW.GetGLXWindow
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetGLXWindow
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWaylandDisplay*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWaylandDisplay
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWaylandDisplay
  name: GetWaylandDisplay
  nameWithType: GLFW.GetWaylandDisplay
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWaylandDisplay
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWaylandMonitor*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWaylandMonitor
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWaylandMonitor_OpenTK_Windowing_GraphicsLibraryFramework_Monitor__
  name: GetWaylandMonitor
  nameWithType: GLFW.GetWaylandMonitor
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWaylandMonitor
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWaylandWindow*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWaylandWindow
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetWaylandWindow_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: GetWaylandWindow
  nameWithType: GLFW.GetWaylandWindow
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetWaylandWindow
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetEGLDisplay*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetEGLDisplay
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetEGLDisplay
  name: GetEGLDisplay
  nameWithType: GLFW.GetEGLDisplay
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetEGLDisplay
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetEGLContext*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetEGLContext
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetEGLContext_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: GetEGLContext
  nameWithType: GLFW.GetEGLContext
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetEGLContext
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetEGLSurface*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetEGLSurface
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetEGLSurface_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: GetEGLSurface
  nameWithType: GLFW.GetEGLSurface
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetEGLSurface
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetOSMesaColorBuffer*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetOSMesaColorBuffer
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetOSMesaColorBuffer_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Int32__System_Int32__System_Int32__System_IntPtr__
  name: GetOSMesaColorBuffer
  nameWithType: GLFW.GetOSMesaColorBuffer
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetOSMesaColorBuffer
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetOSMesaDepthBuffer*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetOSMesaDepthBuffer
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetOSMesaDepthBuffer_OpenTK_Windowing_GraphicsLibraryFramework_Window__System_Int32__System_Int32__System_Int32__System_IntPtr__
  name: GetOSMesaDepthBuffer
  nameWithType: GLFW.GetOSMesaDepthBuffer
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetOSMesaDepthBuffer
- uid: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetOSMesaContext*
  commentId: Overload:OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetOSMesaContext
  href: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.html#OpenTK_Windowing_GraphicsLibraryFramework_GLFW_GetOSMesaContext_OpenTK_Windowing_GraphicsLibraryFramework_Window__
  name: GetOSMesaContext
  nameWithType: GLFW.GetOSMesaContext
  fullName: OpenTK.Windowing.GraphicsLibraryFramework.GLFW.GetOSMesaContext

### YamlMime:ManagedReference
items:
- uid: OpenTK.Compute.OpenCL.CL
  commentId: T:OpenTK.Compute.OpenCL.CL
  id: CL
  parent: OpenTK.Compute.OpenCL
  children:
  - OpenTK.Compute.OpenCL.CL.BuildProgram(OpenTK.Compute.OpenCL.CLProgram,OpenTK.Compute.OpenCL.CLDevice[],System.String,OpenTK.Compute.OpenCL.CL.ClEventCallback)
  - OpenTK.Compute.OpenCL.CL.BuildProgram(OpenTK.Compute.OpenCL.CLProgram,System.UInt32,OpenTK.Compute.OpenCL.CLDevice[],System.String,System.IntPtr,System.IntPtr)
  - OpenTK.Compute.OpenCL.CL.CloneKernel(OpenTK.Compute.OpenCL.CLKernel,OpenTK.Compute.OpenCL.CLResultCode@)
  - OpenTK.Compute.OpenCL.CL.CompileProgram(OpenTK.Compute.OpenCL.CLProgram,System.UInt32,OpenTK.Compute.OpenCL.CLDevice[],System.String,System.UInt32,System.IntPtr[],System.IntPtr@,System.IntPtr,System.IntPtr)
  - OpenTK.Compute.OpenCL.CL.CreateBuffer(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,System.UIntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  - OpenTK.Compute.OpenCL.CL.CreateBuffer``1(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,System.Span{``0},OpenTK.Compute.OpenCL.CLResultCode@)
  - OpenTK.Compute.OpenCL.CL.CreateBuffer``1(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,``0[],OpenTK.Compute.OpenCL.CLResultCode@)
  - OpenTK.Compute.OpenCL.CL.CreateCommandQueue(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.CommandQueueProperty,OpenTK.Compute.OpenCL.CLResultCode@)
  - OpenTK.Compute.OpenCL.CL.CreateCommandQueueWithProperties(OpenTK.Compute.OpenCL.CLContext,System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  - OpenTK.Compute.OpenCL.CL.CreateContext(System.IntPtr,OpenTK.Compute.OpenCL.CLDevice[],System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  - OpenTK.Compute.OpenCL.CL.CreateContext(System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLDevice[],System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  - OpenTK.Compute.OpenCL.CL.CreateContext(System.IntPtr[],OpenTK.Compute.OpenCL.CLDevice[],System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  - OpenTK.Compute.OpenCL.CL.CreateContext(System.IntPtr[],System.UInt32,OpenTK.Compute.OpenCL.CLDevice[],System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  - OpenTK.Compute.OpenCL.CL.CreateContextFromType(System.IntPtr,OpenTK.Compute.OpenCL.DeviceType,System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  - OpenTK.Compute.OpenCL.CL.CreateContextFromType(System.IntPtr[],OpenTK.Compute.OpenCL.DeviceType,System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  - OpenTK.Compute.OpenCL.CL.CreateImage(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,OpenTK.Compute.OpenCL.ImageFormat@,OpenTK.Compute.OpenCL.ImageDescription@,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  - OpenTK.Compute.OpenCL.CL.CreateImage2D(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,OpenTK.Compute.OpenCL.ImageFormat@,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  - OpenTK.Compute.OpenCL.CL.CreateImage3D(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,OpenTK.Compute.OpenCL.ImageFormat@,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  - OpenTK.Compute.OpenCL.CL.CreateKernel(OpenTK.Compute.OpenCL.CLProgram,System.String,OpenTK.Compute.OpenCL.CLResultCode@)
  - OpenTK.Compute.OpenCL.CL.CreateKernelsInProgram(OpenTK.Compute.OpenCL.CLProgram,OpenTK.Compute.OpenCL.CLKernel[]@)
  - OpenTK.Compute.OpenCL.CL.CreateKernelsInProgram(OpenTK.Compute.OpenCL.CLProgram,System.UInt32,OpenTK.Compute.OpenCL.CLKernel[],System.UInt32@)
  - OpenTK.Compute.OpenCL.CL.CreatePipe(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,System.UInt32,System.UInt32,System.IntPtr[],OpenTK.Compute.OpenCL.CLResultCode@)
  - OpenTK.Compute.OpenCL.CL.CreateProgramWithBinary(OpenTK.Compute.OpenCL.CLContext,System.UInt32,System.IntPtr[],System.UIntPtr[],System.IntPtr[],OpenTK.Compute.OpenCL.CLResultCode[]@,OpenTK.Compute.OpenCL.CLResultCode@)
  - OpenTK.Compute.OpenCL.CL.CreateProgramWithBuiltInKernels(OpenTK.Compute.OpenCL.CLContext,System.UInt32,System.IntPtr[],System.String,OpenTK.Compute.OpenCL.CLResultCode@)
  - OpenTK.Compute.OpenCL.CL.CreateProgramWithIL(OpenTK.Compute.OpenCL.CLContext,System.IntPtr,System.UIntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  - OpenTK.Compute.OpenCL.CL.CreateProgramWithSource(OpenTK.Compute.OpenCL.CLContext,System.String,OpenTK.Compute.OpenCL.CLResultCode@)
  - OpenTK.Compute.OpenCL.CL.CreateProgramWithSource(OpenTK.Compute.OpenCL.CLContext,System.UInt32,System.IntPtr[],System.UInt32[],OpenTK.Compute.OpenCL.CLResultCode@)
  - OpenTK.Compute.OpenCL.CL.CreateSampler(OpenTK.Compute.OpenCL.CLContext,System.UInt32,OpenTK.Compute.OpenCL.AddressingMode,OpenTK.Compute.OpenCL.FilterMode,OpenTK.Compute.OpenCL.CLResultCode@)
  - OpenTK.Compute.OpenCL.CL.CreateSamplerWithProperties(OpenTK.Compute.OpenCL.CLContext,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  - OpenTK.Compute.OpenCL.CL.CreateSubBuffer(OpenTK.Compute.OpenCL.CLBuffer,OpenTK.Compute.OpenCL.MemoryFlags,OpenTK.Compute.OpenCL.BufferCreateType,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  - OpenTK.Compute.OpenCL.CL.CreateSubDevices(OpenTK.Compute.OpenCL.CLDevice,System.IntPtr[],System.UInt32,OpenTK.Compute.OpenCL.CLDevice[],System.UInt32@)
  - OpenTK.Compute.OpenCL.CL.CreateUserEvent(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.CLResultCode@)
  - OpenTK.Compute.OpenCL.CL.EnqueueBarrier(OpenTK.Compute.OpenCL.CLCommandQueue)
  - OpenTK.Compute.OpenCL.CL.EnqueueBarrierWithWaitList(OpenTK.Compute.OpenCL.CLCommandQueue,System.UInt32,System.IntPtr[],System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueCopyBuffer(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,OpenTK.Compute.OpenCL.CLBuffer,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueCopyBufferRect(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,OpenTK.Compute.OpenCL.CLBuffer,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueCopyBufferToImage(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,OpenTK.Compute.OpenCL.CLImage,System.UIntPtr,System.UIntPtr[],System.UIntPtr[],System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueCopyImage(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLImage,OpenTK.Compute.OpenCL.CLImage,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueCopyImageToBuffer(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLImage,OpenTK.Compute.OpenCL.CLBuffer,System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueFillBuffer(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.IntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueFillBuffer``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,``0[],System.UIntPtr,System.UIntPtr,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueFillImage(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLImage,System.IntPtr,System.UIntPtr[],System.UIntPtr[],System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueMapBuffer(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,OpenTK.Compute.OpenCL.MapFlags,System.UIntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@,OpenTK.Compute.OpenCL.CLResultCode@)
  - OpenTK.Compute.OpenCL.CL.EnqueueMapImage(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLImage,System.Boolean,OpenTK.Compute.OpenCL.MapFlags,System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@,OpenTK.Compute.OpenCL.CLResultCode@)
  - OpenTK.Compute.OpenCL.CL.EnqueueMarker(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLEvent)
  - OpenTK.Compute.OpenCL.CL.EnqueueMarkerWithWaitList(OpenTK.Compute.OpenCL.CLCommandQueue,System.UInt32,System.IntPtr[],System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueMigrateMemoryObjects(OpenTK.Compute.OpenCL.CLCommandQueue,System.UInt32,System.IntPtr[],OpenTK.Compute.OpenCL.MemoryMigrationFlags,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueNDRangeKernel(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLKernel,System.UInt32,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueNativeKernel(OpenTK.Compute.OpenCL.CLCommandQueue,System.IntPtr,System.IntPtr[],System.UIntPtr,System.UInt32,System.IntPtr[],System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueReadBuffer(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr,System.UIntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueReadBufferRect(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueReadBufferRect``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.Span{``0},OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueReadBufferRect``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,``0[],OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueReadBuffer``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr,System.Span{``0},OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueReadBuffer``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr,``0[],OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueReadImage(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLImage,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueSVMFree(OpenTK.Compute.OpenCL.CLCommandQueue,System.UInt32,System.IntPtr[],System.IntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueSVMUnmap(OpenTK.Compute.OpenCL.CLCommandQueue,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueSvmMap(OpenTK.Compute.OpenCL.CLCommandQueue,System.Boolean,OpenTK.Compute.OpenCL.MapFlags,System.IntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueSvmMemoryCopy(OpenTK.Compute.OpenCL.CLCommandQueue,System.Boolean,System.IntPtr,System.IntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueSvmMemoryFill(OpenTK.Compute.OpenCL.CLCommandQueue,System.IntPtr,System.IntPtr,System.UIntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueSvmMigrateMemory(OpenTK.Compute.OpenCL.CLCommandQueue,System.UInt32,System.IntPtr[],System.UIntPtr[],OpenTK.Compute.OpenCL.MemoryMigrationFlags,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueTask(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLKernel,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueUnmapMemoryObject(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueUnmapMemoryObject(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLImage,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueUnmapMemoryObject(OpenTK.Compute.OpenCL.CLCommandQueue,System.IntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueWaitForEvents(OpenTK.Compute.OpenCL.CLCommandQueue,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[])
  - OpenTK.Compute.OpenCL.CL.EnqueueWriteBuffer(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr,System.UIntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueWriteBufferRect(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueWriteBufferRect``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.Span{``0},OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueWriteBufferRect``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,``0[],OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueWriteBuffer``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr,System.Span{``0},OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueWriteBuffer``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr,``0[],OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.EnqueueWriteImage(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLImage,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  - OpenTK.Compute.OpenCL.CL.Finish(OpenTK.Compute.OpenCL.CLCommandQueue)
  - OpenTK.Compute.OpenCL.CL.Flush(OpenTK.Compute.OpenCL.CLCommandQueue)
  - OpenTK.Compute.OpenCL.CL.GetCommandQueueInfo(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CommandQueueInfo,System.Byte[]@)
  - OpenTK.Compute.OpenCL.CL.GetCommandQueueInfo(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CommandQueueInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  - OpenTK.Compute.OpenCL.CL.GetContextInfo(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.ContextInfo,System.Byte[]@)
  - OpenTK.Compute.OpenCL.CL.GetContextInfo(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.ContextInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  - OpenTK.Compute.OpenCL.CL.GetDeviceAndHostTimer(OpenTK.Compute.OpenCL.CLDevice,System.IntPtr,System.IntPtr)
  - OpenTK.Compute.OpenCL.CL.GetDeviceIds(OpenTK.Compute.OpenCL.CLPlatform,OpenTK.Compute.OpenCL.DeviceType,OpenTK.Compute.OpenCL.CLDevice[]@)
  - OpenTK.Compute.OpenCL.CL.GetDeviceIds(OpenTK.Compute.OpenCL.CLPlatform,OpenTK.Compute.OpenCL.DeviceType,System.UInt32,OpenTK.Compute.OpenCL.CLDevice[],System.UInt32@)
  - OpenTK.Compute.OpenCL.CL.GetDeviceInfo(OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.DeviceInfo,System.Byte[]@)
  - OpenTK.Compute.OpenCL.CL.GetDeviceInfo(OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.DeviceInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  - OpenTK.Compute.OpenCL.CL.GetEventInfo(OpenTK.Compute.OpenCL.CLEvent,OpenTK.Compute.OpenCL.EventInfo,System.Byte[]@)
  - OpenTK.Compute.OpenCL.CL.GetEventInfo(OpenTK.Compute.OpenCL.CLEvent,OpenTK.Compute.OpenCL.EventInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  - OpenTK.Compute.OpenCL.CL.GetEventProfilingInfo(OpenTK.Compute.OpenCL.CLEvent,OpenTK.Compute.OpenCL.ProfilingInfo,System.Byte[]@)
  - OpenTK.Compute.OpenCL.CL.GetEventProfilingInfo(OpenTK.Compute.OpenCL.CLEvent,OpenTK.Compute.OpenCL.ProfilingInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  - OpenTK.Compute.OpenCL.CL.GetExtensionFunctionAddress(System.String)
  - OpenTK.Compute.OpenCL.CL.GetExtensionFunctionAddressForPlatform(OpenTK.Compute.OpenCL.CLPlatform,System.String)
  - OpenTK.Compute.OpenCL.CL.GetHostTimer(OpenTK.Compute.OpenCL.CLDevice,System.IntPtr)
  - OpenTK.Compute.OpenCL.CL.GetImageInfo(OpenTK.Compute.OpenCL.CLImage,OpenTK.Compute.OpenCL.ImageInfo,System.Byte[]@)
  - OpenTK.Compute.OpenCL.CL.GetImageInfo(OpenTK.Compute.OpenCL.CLImage,OpenTK.Compute.OpenCL.ImageInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  - OpenTK.Compute.OpenCL.CL.GetKernelArgInfo(OpenTK.Compute.OpenCL.CLKernel,System.UInt32,OpenTK.Compute.OpenCL.KernelArgInfo,System.Byte[]@)
  - OpenTK.Compute.OpenCL.CL.GetKernelArgInfo(OpenTK.Compute.OpenCL.CLKernel,System.UInt32,OpenTK.Compute.OpenCL.KernelArgInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  - OpenTK.Compute.OpenCL.CL.GetKernelInfo(OpenTK.Compute.OpenCL.CLKernel,OpenTK.Compute.OpenCL.KernelInfo,System.Byte[]@)
  - OpenTK.Compute.OpenCL.CL.GetKernelInfo(OpenTK.Compute.OpenCL.CLKernel,OpenTK.Compute.OpenCL.KernelInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  - OpenTK.Compute.OpenCL.CL.GetKernelSubGroupInfo(OpenTK.Compute.OpenCL.CLKernel,OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.KernelSubGroupInfo,System.UIntPtr,System.IntPtr,System.UIntPtr,System.Byte[],System.UIntPtr@)
  - OpenTK.Compute.OpenCL.CL.GetKernelWorkGroupInfo(OpenTK.Compute.OpenCL.CLKernel,OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.KernelWorkGroupInfo,System.Byte[]@)
  - OpenTK.Compute.OpenCL.CL.GetKernelWorkGroupInfo(OpenTK.Compute.OpenCL.CLKernel,OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.KernelWorkGroupInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  - OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(OpenTK.Compute.OpenCL.CLBuffer,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.Byte[]@)
  - OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(OpenTK.Compute.OpenCL.CLBuffer,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  - OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(OpenTK.Compute.OpenCL.CLImage,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.Byte[]@)
  - OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(OpenTK.Compute.OpenCL.CLImage,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  - OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(OpenTK.Compute.OpenCL.CLPipe,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.Byte[]@)
  - OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(OpenTK.Compute.OpenCL.CLPipe,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  - OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(System.IntPtr,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.Byte[]@)
  - OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(System.IntPtr,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  - OpenTK.Compute.OpenCL.CL.GetPipeInfo(OpenTK.Compute.OpenCL.CLPipe,OpenTK.Compute.OpenCL.PipeInfo,System.Byte[]@)
  - OpenTK.Compute.OpenCL.CL.GetPipeInfo(OpenTK.Compute.OpenCL.CLPipe,OpenTK.Compute.OpenCL.PipeInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  - OpenTK.Compute.OpenCL.CL.GetPlatformIds(OpenTK.Compute.OpenCL.CLPlatform[]@)
  - OpenTK.Compute.OpenCL.CL.GetPlatformIds(System.UInt32,OpenTK.Compute.OpenCL.CLPlatform[],System.UInt32@)
  - OpenTK.Compute.OpenCL.CL.GetPlatformInfo(OpenTK.Compute.OpenCL.CLPlatform,OpenTK.Compute.OpenCL.PlatformInfo,System.Byte[]@)
  - OpenTK.Compute.OpenCL.CL.GetPlatformInfo(OpenTK.Compute.OpenCL.CLPlatform,OpenTK.Compute.OpenCL.PlatformInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  - OpenTK.Compute.OpenCL.CL.GetProgramBuildInfo(OpenTK.Compute.OpenCL.CLProgram,OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.ProgramBuildInfo,System.Byte[]@)
  - OpenTK.Compute.OpenCL.CL.GetProgramBuildInfo(OpenTK.Compute.OpenCL.CLProgram,OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.ProgramBuildInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  - OpenTK.Compute.OpenCL.CL.GetProgramInfo(OpenTK.Compute.OpenCL.CLProgram,OpenTK.Compute.OpenCL.ProgramInfo,System.Byte[]@)
  - OpenTK.Compute.OpenCL.CL.GetProgramInfo(OpenTK.Compute.OpenCL.CLProgram,OpenTK.Compute.OpenCL.ProgramInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  - OpenTK.Compute.OpenCL.CL.GetSamplerInfo(OpenTK.Compute.OpenCL.CLSampler,OpenTK.Compute.OpenCL.SamplerInfo,System.Byte[]@)
  - OpenTK.Compute.OpenCL.CL.GetSamplerInfo(OpenTK.Compute.OpenCL.CLSampler,OpenTK.Compute.OpenCL.SamplerInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  - OpenTK.Compute.OpenCL.CL.GetSupportedImageFormats(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,OpenTK.Compute.OpenCL.MemoryObjectType,OpenTK.Compute.OpenCL.ImageFormat[]@)
  - OpenTK.Compute.OpenCL.CL.GetSupportedImageFormats(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,OpenTK.Compute.OpenCL.MemoryObjectType,System.UInt32,OpenTK.Compute.OpenCL.ImageFormat[],System.UInt32@)
  - OpenTK.Compute.OpenCL.CL.LinkProgram(OpenTK.Compute.OpenCL.CLContext,System.UInt32,OpenTK.Compute.OpenCL.CLDevice[],System.String,System.UInt32,OpenTK.Compute.OpenCL.CLProgram[],System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  - OpenTK.Compute.OpenCL.CL.ReleaseCommandQueue(OpenTK.Compute.OpenCL.CLCommandQueue)
  - OpenTK.Compute.OpenCL.CL.ReleaseContext(OpenTK.Compute.OpenCL.CLContext)
  - OpenTK.Compute.OpenCL.CL.ReleaseDevice(OpenTK.Compute.OpenCL.CLDevice)
  - OpenTK.Compute.OpenCL.CL.ReleaseEvent(OpenTK.Compute.OpenCL.CLEvent)
  - OpenTK.Compute.OpenCL.CL.ReleaseKernel(OpenTK.Compute.OpenCL.CLKernel)
  - OpenTK.Compute.OpenCL.CL.ReleaseMemoryObject(OpenTK.Compute.OpenCL.CLBuffer)
  - OpenTK.Compute.OpenCL.CL.ReleaseMemoryObject(OpenTK.Compute.OpenCL.CLImage)
  - OpenTK.Compute.OpenCL.CL.ReleaseMemoryObject(OpenTK.Compute.OpenCL.CLPipe)
  - OpenTK.Compute.OpenCL.CL.ReleaseMemoryObject(System.IntPtr)
  - OpenTK.Compute.OpenCL.CL.ReleaseProgram(OpenTK.Compute.OpenCL.CLProgram)
  - OpenTK.Compute.OpenCL.CL.ReleaseSampler(OpenTK.Compute.OpenCL.CLSampler)
  - OpenTK.Compute.OpenCL.CL.RetainCommandQueue(OpenTK.Compute.OpenCL.CLCommandQueue)
  - OpenTK.Compute.OpenCL.CL.RetainContext(OpenTK.Compute.OpenCL.CLContext)
  - OpenTK.Compute.OpenCL.CL.RetainDevice(OpenTK.Compute.OpenCL.CLDevice)
  - OpenTK.Compute.OpenCL.CL.RetainEvent(OpenTK.Compute.OpenCL.CLEvent)
  - OpenTK.Compute.OpenCL.CL.RetainKernel(OpenTK.Compute.OpenCL.CLKernel)
  - OpenTK.Compute.OpenCL.CL.RetainMemoryObject(OpenTK.Compute.OpenCL.CLBuffer)
  - OpenTK.Compute.OpenCL.CL.RetainMemoryObject(OpenTK.Compute.OpenCL.CLImage)
  - OpenTK.Compute.OpenCL.CL.RetainMemoryObject(OpenTK.Compute.OpenCL.CLPipe)
  - OpenTK.Compute.OpenCL.CL.RetainMemoryObject(System.IntPtr)
  - OpenTK.Compute.OpenCL.CL.RetainProgram(OpenTK.Compute.OpenCL.CLProgram)
  - OpenTK.Compute.OpenCL.CL.RetainSampler(OpenTK.Compute.OpenCL.CLSampler)
  - OpenTK.Compute.OpenCL.CL.SVMAlloc(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.SvmMemoryFlags,System.UIntPtr,System.UInt32)
  - OpenTK.Compute.OpenCL.CL.SVMFree(OpenTK.Compute.OpenCL.CLContext,System.IntPtr)
  - OpenTK.Compute.OpenCL.CL.SetDefaultDeviceCommandQueue(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.CLCommandQueue)
  - OpenTK.Compute.OpenCL.CL.SetEventCallback(OpenTK.Compute.OpenCL.CLEvent,System.Int32,OpenTK.Compute.OpenCL.CL.ClEventCallback)
  - OpenTK.Compute.OpenCL.CL.SetEventCallback(OpenTK.Compute.OpenCL.CLEvent,System.Int32,System.IntPtr,System.IntPtr)
  - OpenTK.Compute.OpenCL.CL.SetKernelArg(OpenTK.Compute.OpenCL.CLKernel,System.UInt32,System.UIntPtr,System.IntPtr)
  - OpenTK.Compute.OpenCL.CL.SetKernelArgSVMPointer(OpenTK.Compute.OpenCL.CLKernel,System.UInt32,System.IntPtr)
  - OpenTK.Compute.OpenCL.CL.SetKernelArg``1(OpenTK.Compute.OpenCL.CLKernel,System.UInt32,``0@)
  - OpenTK.Compute.OpenCL.CL.SetKernelExecInfo(OpenTK.Compute.OpenCL.CLKernel,OpenTK.Compute.OpenCL.KernelExecInfo,System.UIntPtr,System.IntPtr)
  - OpenTK.Compute.OpenCL.CL.SetMemoryObjectDestructorCallback(OpenTK.Compute.OpenCL.CLBuffer,System.IntPtr,System.IntPtr)
  - OpenTK.Compute.OpenCL.CL.SetMemoryObjectDestructorCallback(OpenTK.Compute.OpenCL.CLImage,System.IntPtr,System.IntPtr)
  - OpenTK.Compute.OpenCL.CL.SetMemoryObjectDestructorCallback(OpenTK.Compute.OpenCL.CLPipe,System.IntPtr,System.IntPtr)
  - OpenTK.Compute.OpenCL.CL.SetMemoryObjectDestructorCallback(System.IntPtr,System.IntPtr,System.IntPtr)
  - OpenTK.Compute.OpenCL.CL.SetProgramReleaseCallback(OpenTK.Compute.OpenCL.CLProgram,System.IntPtr,System.IntPtr)
  - OpenTK.Compute.OpenCL.CL.SetProgramSpecializationConstant(OpenTK.Compute.OpenCL.CLProgram,System.UInt32,System.UIntPtr,System.IntPtr)
  - OpenTK.Compute.OpenCL.CL.SetUserEventStatus(OpenTK.Compute.OpenCL.CLEvent,System.Int32)
  - OpenTK.Compute.OpenCL.CL.UnloadCompiler
  - OpenTK.Compute.OpenCL.CL.UnloadPlatformCompiler(OpenTK.Compute.OpenCL.CLPlatform)
  - OpenTK.Compute.OpenCL.CL.WaitForEvents(System.UInt32,OpenTK.Compute.OpenCL.CLEvent[])
  langs:
  - csharp
  - vb
  name: CL
  nameWithType: CL
  fullName: OpenTK.Compute.OpenCL.CL
  type: Class
  source:
    id: CL
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 6
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  syntax:
    content: 'public class CL : CLBase'
    content.vb: Public Class CL Inherits CLBase
  inheritance:
  - System.Object
  - OpenTK.Compute.Native.CLBase
  inheritedMembers:
  - OpenTK.Compute.Native.CLBase.RegisterOpenCLResolver
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: OpenTK.Compute.OpenCL.CL.GetPlatformIds(System.UInt32,OpenTK.Compute.OpenCL.CLPlatform[],System.UInt32@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetPlatformIds(System.UInt32,OpenTK.Compute.OpenCL.CLPlatform[],System.UInt32@)
  id: GetPlatformIds(System.UInt32,OpenTK.Compute.OpenCL.CLPlatform[],System.UInt32@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetPlatformIds(uint, CLPlatform[], out uint)
  nameWithType: CL.GetPlatformIds(uint, CLPlatform[], out uint)
  fullName: OpenTK.Compute.OpenCL.CL.GetPlatformIds(uint, OpenTK.Compute.OpenCL.CLPlatform[], out uint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: >-
    Introduced in OpenCL 1.0.

    See more: https://www.khronos.org/registry/OpenCL/sdk/2.2/docs/man/html/clGetPlatformIDs.html.
  example: []
  syntax:
    content: public static extern CLResultCode GetPlatformIds(uint numberOfEntries, CLPlatform[] platforms, out uint numberOfPlatforms)
    parameters:
    - id: numberOfEntries
      type: System.UInt32
      description: number of <xref href="OpenTK.Compute.OpenCL.CLPlatform" data-throw-if-not-resolved="false"></xref> entries that can be added to platforms. If platforms is not NULL, numberOfEntries must be greater than zero.
    - id: platforms
      type: OpenTK.Compute.OpenCL.CLPlatform[]
      description: returns a list of OpenCL platforms found. The CLPlatform values returned in platforms can be used to identify a specific OpenCL platform. If platforms is NULL, this argument is ignored. The number of OpenCL platforms returned is the minimum of the value specified by numberOfEntries or the number of OpenCL platforms available.
    - id: numberOfPlatforms
      type: System.UInt32
      description: returns the number of OpenCL platforms available. If numberOfPlatforms is NULL, this argument is ignored.
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
      description: >-
        returns <xref href="OpenTK.Compute.OpenCL.CLResultCode.Success" data-throw-if-not-resolved="false"></xref> if the function is executed successfully. Otherwise, it returns one of the following errors:
            -InvalidValue if numberOfEntries is equal to zero and platforms is not NULL or if both numberOfPlatforms and platforms are NULL.
            -OutOfHostMemory if there is a failure to allocate resources required by the OpenCL implementation on the host.
    content.vb: Public Shared Function GetPlatformIds(numberOfEntries As UInteger, platforms As CLPlatform(), numberOfPlatforms As UInteger) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetPlatformIds*
  nameWithType.vb: CL.GetPlatformIds(UInteger, CLPlatform(), UInteger)
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetPlatformIds(UInteger, OpenTK.Compute.OpenCL.CLPlatform(), UInteger)
  name.vb: GetPlatformIds(UInteger, CLPlatform(), UInteger)
- uid: OpenTK.Compute.OpenCL.CL.GetPlatformIds(OpenTK.Compute.OpenCL.CLPlatform[]@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetPlatformIds(OpenTK.Compute.OpenCL.CLPlatform[]@)
  id: GetPlatformIds(OpenTK.Compute.OpenCL.CLPlatform[]@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetPlatformIds(out CLPlatform[])
  nameWithType: CL.GetPlatformIds(out CLPlatform[])
  fullName: OpenTK.Compute.OpenCL.CL.GetPlatformIds(out OpenTK.Compute.OpenCL.CLPlatform[])
  type: Method
  source:
    id: GetPlatformIds
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 41
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static CLResultCode GetPlatformIds(out CLPlatform[] platformIds)
    parameters:
    - id: platformIds
      type: OpenTK.Compute.OpenCL.CLPlatform[]
      description: returns a list of OpenCL platforms found. The CLPlatform values returned in platforms can be used to identify a specific OpenCL platform.
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
      description: >-
        returns Success if the function is executed successfully. Otherwise, it returns one of the following errors:
            -InvalidValue if numberOfEntries is equal to zero and platforms is not NULL or if both numberOfPlatforms and platforms are NULL.
            -OutOfHostMemory if there is a failure to allocate resources required by the OpenCL implementation on the host.
    content.vb: Public Shared Function GetPlatformIds(platformIds As CLPlatform()) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetPlatformIds*
  nameWithType.vb: CL.GetPlatformIds(CLPlatform())
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetPlatformIds(OpenTK.Compute.OpenCL.CLPlatform())
  name.vb: GetPlatformIds(CLPlatform())
- uid: OpenTK.Compute.OpenCL.CL.GetPlatformInfo(OpenTK.Compute.OpenCL.CLPlatform,OpenTK.Compute.OpenCL.PlatformInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetPlatformInfo(OpenTK.Compute.OpenCL.CLPlatform,OpenTK.Compute.OpenCL.PlatformInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  id: GetPlatformInfo(OpenTK.Compute.OpenCL.CLPlatform,OpenTK.Compute.OpenCL.PlatformInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetPlatformInfo(CLPlatform, PlatformInfo, nuint, byte[], out nuint)
  nameWithType: CL.GetPlatformInfo(CLPlatform, PlatformInfo, nuint, byte[], out nuint)
  fullName: OpenTK.Compute.OpenCL.CL.GetPlatformInfo(OpenTK.Compute.OpenCL.CLPlatform, OpenTK.Compute.OpenCL.PlatformInfo, nuint, byte[], out nuint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode GetPlatformInfo(CLPlatform platform, PlatformInfo paramName, nuint paramValueSize, byte[] paramValue, out nuint paramValueSizeReturned)
    parameters:
    - id: platform
      type: OpenTK.Compute.OpenCL.CLPlatform
    - id: paramName
      type: OpenTK.Compute.OpenCL.PlatformInfo
    - id: paramValueSize
      type: System.UIntPtr
    - id: paramValue
      type: System.Byte[]
    - id: paramValueSizeReturned
      type: System.UIntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetPlatformInfo(platform As CLPlatform, paramName As PlatformInfo, paramValueSize As UIntPtr, paramValue As Byte(), paramValueSizeReturned As UIntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetPlatformInfo*
  nameWithType.vb: CL.GetPlatformInfo(CLPlatform, PlatformInfo, UIntPtr, Byte(), UIntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetPlatformInfo(OpenTK.Compute.OpenCL.CLPlatform, OpenTK.Compute.OpenCL.PlatformInfo, System.UIntPtr, Byte(), System.UIntPtr)
  name.vb: GetPlatformInfo(CLPlatform, PlatformInfo, UIntPtr, Byte(), UIntPtr)
- uid: OpenTK.Compute.OpenCL.CL.GetPlatformInfo(OpenTK.Compute.OpenCL.CLPlatform,OpenTK.Compute.OpenCL.PlatformInfo,System.Byte[]@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetPlatformInfo(OpenTK.Compute.OpenCL.CLPlatform,OpenTK.Compute.OpenCL.PlatformInfo,System.Byte[]@)
  id: GetPlatformInfo(OpenTK.Compute.OpenCL.CLPlatform,OpenTK.Compute.OpenCL.PlatformInfo,System.Byte[]@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetPlatformInfo(CLPlatform, PlatformInfo, out byte[])
  nameWithType: CL.GetPlatformInfo(CLPlatform, PlatformInfo, out byte[])
  fullName: OpenTK.Compute.OpenCL.CL.GetPlatformInfo(OpenTK.Compute.OpenCL.CLPlatform, OpenTK.Compute.OpenCL.PlatformInfo, out byte[])
  type: Method
  source:
    id: GetPlatformInfo
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 58
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static CLResultCode GetPlatformInfo(CLPlatform platform, PlatformInfo paramName, out byte[] paramValue)
    parameters:
    - id: platform
      type: OpenTK.Compute.OpenCL.CLPlatform
    - id: paramName
      type: OpenTK.Compute.OpenCL.PlatformInfo
    - id: paramValue
      type: System.Byte[]
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetPlatformInfo(platform As CLPlatform, paramName As PlatformInfo, paramValue As Byte()) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetPlatformInfo*
  nameWithType.vb: CL.GetPlatformInfo(CLPlatform, PlatformInfo, Byte())
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetPlatformInfo(OpenTK.Compute.OpenCL.CLPlatform, OpenTK.Compute.OpenCL.PlatformInfo, Byte())
  name.vb: GetPlatformInfo(CLPlatform, PlatformInfo, Byte())
- uid: OpenTK.Compute.OpenCL.CL.GetDeviceIds(OpenTK.Compute.OpenCL.CLPlatform,OpenTK.Compute.OpenCL.DeviceType,System.UInt32,OpenTK.Compute.OpenCL.CLDevice[],System.UInt32@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetDeviceIds(OpenTK.Compute.OpenCL.CLPlatform,OpenTK.Compute.OpenCL.DeviceType,System.UInt32,OpenTK.Compute.OpenCL.CLDevice[],System.UInt32@)
  id: GetDeviceIds(OpenTK.Compute.OpenCL.CLPlatform,OpenTK.Compute.OpenCL.DeviceType,System.UInt32,OpenTK.Compute.OpenCL.CLDevice[],System.UInt32@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetDeviceIds(CLPlatform, DeviceType, uint, CLDevice[], out uint)
  nameWithType: CL.GetDeviceIds(CLPlatform, DeviceType, uint, CLDevice[], out uint)
  fullName: OpenTK.Compute.OpenCL.CL.GetDeviceIds(OpenTK.Compute.OpenCL.CLPlatform, OpenTK.Compute.OpenCL.DeviceType, uint, OpenTK.Compute.OpenCL.CLDevice[], out uint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode GetDeviceIds(CLPlatform platform, DeviceType deviceType, uint numberOfEntries, CLDevice[] devices, out uint numberOfDevicesReturned)
    parameters:
    - id: platform
      type: OpenTK.Compute.OpenCL.CLPlatform
    - id: deviceType
      type: OpenTK.Compute.OpenCL.DeviceType
    - id: numberOfEntries
      type: System.UInt32
    - id: devices
      type: OpenTK.Compute.OpenCL.CLDevice[]
    - id: numberOfDevicesReturned
      type: System.UInt32
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetDeviceIds(platform As CLPlatform, deviceType As DeviceType, numberOfEntries As UInteger, devices As CLDevice(), numberOfDevicesReturned As UInteger) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetDeviceIds*
  nameWithType.vb: CL.GetDeviceIds(CLPlatform, DeviceType, UInteger, CLDevice(), UInteger)
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetDeviceIds(OpenTK.Compute.OpenCL.CLPlatform, OpenTK.Compute.OpenCL.DeviceType, UInteger, OpenTK.Compute.OpenCL.CLDevice(), UInteger)
  name.vb: GetDeviceIds(CLPlatform, DeviceType, UInteger, CLDevice(), UInteger)
- uid: OpenTK.Compute.OpenCL.CL.GetDeviceIds(OpenTK.Compute.OpenCL.CLPlatform,OpenTK.Compute.OpenCL.DeviceType,OpenTK.Compute.OpenCL.CLDevice[]@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetDeviceIds(OpenTK.Compute.OpenCL.CLPlatform,OpenTK.Compute.OpenCL.DeviceType,OpenTK.Compute.OpenCL.CLDevice[]@)
  id: GetDeviceIds(OpenTK.Compute.OpenCL.CLPlatform,OpenTK.Compute.OpenCL.DeviceType,OpenTK.Compute.OpenCL.CLDevice[]@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetDeviceIds(CLPlatform, DeviceType, out CLDevice[])
  nameWithType: CL.GetDeviceIds(CLPlatform, DeviceType, out CLDevice[])
  fullName: OpenTK.Compute.OpenCL.CL.GetDeviceIds(OpenTK.Compute.OpenCL.CLPlatform, OpenTK.Compute.OpenCL.DeviceType, out OpenTK.Compute.OpenCL.CLDevice[])
  type: Method
  source:
    id: GetDeviceIds
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 80
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static CLResultCode GetDeviceIds(CLPlatform platform, DeviceType deviceType, out CLDevice[] deviceIds)
    parameters:
    - id: platform
      type: OpenTK.Compute.OpenCL.CLPlatform
    - id: deviceType
      type: OpenTK.Compute.OpenCL.DeviceType
    - id: deviceIds
      type: OpenTK.Compute.OpenCL.CLDevice[]
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetDeviceIds(platform As CLPlatform, deviceType As DeviceType, deviceIds As CLDevice()) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetDeviceIds*
  nameWithType.vb: CL.GetDeviceIds(CLPlatform, DeviceType, CLDevice())
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetDeviceIds(OpenTK.Compute.OpenCL.CLPlatform, OpenTK.Compute.OpenCL.DeviceType, OpenTK.Compute.OpenCL.CLDevice())
  name.vb: GetDeviceIds(CLPlatform, DeviceType, CLDevice())
- uid: OpenTK.Compute.OpenCL.CL.GetDeviceInfo(OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.DeviceInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetDeviceInfo(OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.DeviceInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  id: GetDeviceInfo(OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.DeviceInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetDeviceInfo(CLDevice, DeviceInfo, nuint, byte[], out nuint)
  nameWithType: CL.GetDeviceInfo(CLDevice, DeviceInfo, nuint, byte[], out nuint)
  fullName: OpenTK.Compute.OpenCL.CL.GetDeviceInfo(OpenTK.Compute.OpenCL.CLDevice, OpenTK.Compute.OpenCL.DeviceInfo, nuint, byte[], out nuint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode GetDeviceInfo(CLDevice device, DeviceInfo paramName, nuint paramValueSize, byte[] paramValue, out nuint paramValueSizeReturned)
    parameters:
    - id: device
      type: OpenTK.Compute.OpenCL.CLDevice
    - id: paramName
      type: OpenTK.Compute.OpenCL.DeviceInfo
    - id: paramValueSize
      type: System.UIntPtr
    - id: paramValue
      type: System.Byte[]
    - id: paramValueSizeReturned
      type: System.UIntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetDeviceInfo(device As CLDevice, paramName As DeviceInfo, paramValueSize As UIntPtr, paramValue As Byte(), paramValueSizeReturned As UIntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetDeviceInfo*
  nameWithType.vb: CL.GetDeviceInfo(CLDevice, DeviceInfo, UIntPtr, Byte(), UIntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetDeviceInfo(OpenTK.Compute.OpenCL.CLDevice, OpenTK.Compute.OpenCL.DeviceInfo, System.UIntPtr, Byte(), System.UIntPtr)
  name.vb: GetDeviceInfo(CLDevice, DeviceInfo, UIntPtr, Byte(), UIntPtr)
- uid: OpenTK.Compute.OpenCL.CL.GetDeviceInfo(OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.DeviceInfo,System.Byte[]@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetDeviceInfo(OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.DeviceInfo,System.Byte[]@)
  id: GetDeviceInfo(OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.DeviceInfo,System.Byte[]@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetDeviceInfo(CLDevice, DeviceInfo, out byte[])
  nameWithType: CL.GetDeviceInfo(CLDevice, DeviceInfo, out byte[])
  fullName: OpenTK.Compute.OpenCL.CL.GetDeviceInfo(OpenTK.Compute.OpenCL.CLDevice, OpenTK.Compute.OpenCL.DeviceInfo, out byte[])
  type: Method
  source:
    id: GetDeviceInfo
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 98
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static CLResultCode GetDeviceInfo(CLDevice device, DeviceInfo paramName, out byte[] paramValue)
    parameters:
    - id: device
      type: OpenTK.Compute.OpenCL.CLDevice
    - id: paramName
      type: OpenTK.Compute.OpenCL.DeviceInfo
    - id: paramValue
      type: System.Byte[]
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetDeviceInfo(device As CLDevice, paramName As DeviceInfo, paramValue As Byte()) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetDeviceInfo*
  nameWithType.vb: CL.GetDeviceInfo(CLDevice, DeviceInfo, Byte())
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetDeviceInfo(OpenTK.Compute.OpenCL.CLDevice, OpenTK.Compute.OpenCL.DeviceInfo, Byte())
  name.vb: GetDeviceInfo(CLDevice, DeviceInfo, Byte())
- uid: OpenTK.Compute.OpenCL.CL.CreateSubDevices(OpenTK.Compute.OpenCL.CLDevice,System.IntPtr[],System.UInt32,OpenTK.Compute.OpenCL.CLDevice[],System.UInt32@)
  commentId: M:OpenTK.Compute.OpenCL.CL.CreateSubDevices(OpenTK.Compute.OpenCL.CLDevice,System.IntPtr[],System.UInt32,OpenTK.Compute.OpenCL.CLDevice[],System.UInt32@)
  id: CreateSubDevices(OpenTK.Compute.OpenCL.CLDevice,System.IntPtr[],System.UInt32,OpenTK.Compute.OpenCL.CLDevice[],System.UInt32@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: CreateSubDevices(CLDevice, nint[], uint, CLDevice[], out uint)
  nameWithType: CL.CreateSubDevices(CLDevice, nint[], uint, CLDevice[], out uint)
  fullName: OpenTK.Compute.OpenCL.CL.CreateSubDevices(OpenTK.Compute.OpenCL.CLDevice, nint[], uint, OpenTK.Compute.OpenCL.CLDevice[], out uint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.2.
  example: []
  syntax:
    content: public static extern CLResultCode CreateSubDevices(CLDevice inDevice, nint[] properties, uint numberOfDevices, CLDevice[] outDevices, out uint devicesReturned)
    parameters:
    - id: inDevice
      type: OpenTK.Compute.OpenCL.CLDevice
    - id: properties
      type: System.IntPtr[]
    - id: numberOfDevices
      type: System.UInt32
    - id: outDevices
      type: OpenTK.Compute.OpenCL.CLDevice[]
    - id: devicesReturned
      type: System.UInt32
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function CreateSubDevices(inDevice As CLDevice, properties As IntPtr(), numberOfDevices As UInteger, outDevices As CLDevice(), devicesReturned As UInteger) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.CreateSubDevices*
  nameWithType.vb: CL.CreateSubDevices(CLDevice, IntPtr(), UInteger, CLDevice(), UInteger)
  fullName.vb: OpenTK.Compute.OpenCL.CL.CreateSubDevices(OpenTK.Compute.OpenCL.CLDevice, System.IntPtr(), UInteger, OpenTK.Compute.OpenCL.CLDevice(), UInteger)
  name.vb: CreateSubDevices(CLDevice, IntPtr(), UInteger, CLDevice(), UInteger)
- uid: OpenTK.Compute.OpenCL.CL.RetainDevice(OpenTK.Compute.OpenCL.CLDevice)
  commentId: M:OpenTK.Compute.OpenCL.CL.RetainDevice(OpenTK.Compute.OpenCL.CLDevice)
  id: RetainDevice(OpenTK.Compute.OpenCL.CLDevice)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: RetainDevice(CLDevice)
  nameWithType: CL.RetainDevice(CLDevice)
  fullName: OpenTK.Compute.OpenCL.CL.RetainDevice(OpenTK.Compute.OpenCL.CLDevice)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.2.
  example: []
  syntax:
    content: public static extern CLResultCode RetainDevice(CLDevice device)
    parameters:
    - id: device
      type: OpenTK.Compute.OpenCL.CLDevice
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function RetainDevice(device As CLDevice) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.RetainDevice*
- uid: OpenTK.Compute.OpenCL.CL.ReleaseDevice(OpenTK.Compute.OpenCL.CLDevice)
  commentId: M:OpenTK.Compute.OpenCL.CL.ReleaseDevice(OpenTK.Compute.OpenCL.CLDevice)
  id: ReleaseDevice(OpenTK.Compute.OpenCL.CLDevice)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: ReleaseDevice(CLDevice)
  nameWithType: CL.ReleaseDevice(CLDevice)
  fullName: OpenTK.Compute.OpenCL.CL.ReleaseDevice(OpenTK.Compute.OpenCL.CLDevice)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.2.
  example: []
  syntax:
    content: public static extern CLResultCode ReleaseDevice(CLDevice device)
    parameters:
    - id: device
      type: OpenTK.Compute.OpenCL.CLDevice
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function ReleaseDevice(device As CLDevice) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.ReleaseDevice*
- uid: OpenTK.Compute.OpenCL.CL.SetDefaultDeviceCommandQueue(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.CLCommandQueue)
  commentId: M:OpenTK.Compute.OpenCL.CL.SetDefaultDeviceCommandQueue(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.CLCommandQueue)
  id: SetDefaultDeviceCommandQueue(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.CLCommandQueue)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: SetDefaultDeviceCommandQueue(CLContext, CLDevice, CLCommandQueue)
  nameWithType: CL.SetDefaultDeviceCommandQueue(CLContext, CLDevice, CLCommandQueue)
  fullName: OpenTK.Compute.OpenCL.CL.SetDefaultDeviceCommandQueue(OpenTK.Compute.OpenCL.CLContext, OpenTK.Compute.OpenCL.CLDevice, OpenTK.Compute.OpenCL.CLCommandQueue)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 2.1.
  example: []
  syntax:
    content: public static extern CLResultCode SetDefaultDeviceCommandQueue(CLContext context, CLDevice device, CLCommandQueue commandQueue)
    parameters:
    - id: context
      type: OpenTK.Compute.OpenCL.CLContext
    - id: device
      type: OpenTK.Compute.OpenCL.CLDevice
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function SetDefaultDeviceCommandQueue(context As CLContext, device As CLDevice, commandQueue As CLCommandQueue) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.SetDefaultDeviceCommandQueue*
- uid: OpenTK.Compute.OpenCL.CL.GetDeviceAndHostTimer(OpenTK.Compute.OpenCL.CLDevice,System.IntPtr,System.IntPtr)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetDeviceAndHostTimer(OpenTK.Compute.OpenCL.CLDevice,System.IntPtr,System.IntPtr)
  id: GetDeviceAndHostTimer(OpenTK.Compute.OpenCL.CLDevice,System.IntPtr,System.IntPtr)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetDeviceAndHostTimer(CLDevice, nint, nint)
  nameWithType: CL.GetDeviceAndHostTimer(CLDevice, nint, nint)
  fullName: OpenTK.Compute.OpenCL.CL.GetDeviceAndHostTimer(OpenTK.Compute.OpenCL.CLDevice, nint, nint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 2.1.
  example: []
  syntax:
    content: public static extern CLResultCode GetDeviceAndHostTimer(CLDevice device, nint deviceTimestamp, nint hostTimestamp)
    parameters:
    - id: device
      type: OpenTK.Compute.OpenCL.CLDevice
    - id: deviceTimestamp
      type: System.IntPtr
    - id: hostTimestamp
      type: System.IntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetDeviceAndHostTimer(device As CLDevice, deviceTimestamp As IntPtr, hostTimestamp As IntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetDeviceAndHostTimer*
  nameWithType.vb: CL.GetDeviceAndHostTimer(CLDevice, IntPtr, IntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetDeviceAndHostTimer(OpenTK.Compute.OpenCL.CLDevice, System.IntPtr, System.IntPtr)
  name.vb: GetDeviceAndHostTimer(CLDevice, IntPtr, IntPtr)
- uid: OpenTK.Compute.OpenCL.CL.GetHostTimer(OpenTK.Compute.OpenCL.CLDevice,System.IntPtr)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetHostTimer(OpenTK.Compute.OpenCL.CLDevice,System.IntPtr)
  id: GetHostTimer(OpenTK.Compute.OpenCL.CLDevice,System.IntPtr)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetHostTimer(CLDevice, nint)
  nameWithType: CL.GetHostTimer(CLDevice, nint)
  fullName: OpenTK.Compute.OpenCL.CL.GetHostTimer(OpenTK.Compute.OpenCL.CLDevice, nint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 2.1.
  example: []
  syntax:
    content: public static extern CLResultCode GetHostTimer(CLDevice device, nint hostTimestamp)
    parameters:
    - id: device
      type: OpenTK.Compute.OpenCL.CLDevice
    - id: hostTimestamp
      type: System.IntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetHostTimer(device As CLDevice, hostTimestamp As IntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetHostTimer*
  nameWithType.vb: CL.GetHostTimer(CLDevice, IntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetHostTimer(OpenTK.Compute.OpenCL.CLDevice, System.IntPtr)
  name.vb: GetHostTimer(CLDevice, IntPtr)
- uid: OpenTK.Compute.OpenCL.CL.CreateContext(System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLDevice[],System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  commentId: M:OpenTK.Compute.OpenCL.CL.CreateContext(System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLDevice[],System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  id: CreateContext(System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLDevice[],System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: CreateContext(nint, uint, CLDevice[], nint, nint, out CLResultCode)
  nameWithType: CL.CreateContext(nint, uint, CLDevice[], nint, nint, out CLResultCode)
  fullName: OpenTK.Compute.OpenCL.CL.CreateContext(nint, uint, OpenTK.Compute.OpenCL.CLDevice[], nint, nint, out OpenTK.Compute.OpenCL.CLResultCode)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLContext CreateContext(nint properties, uint numberOfDevices, CLDevice[] devices, nint notificationCallback, nint userData, out CLResultCode resultCode)
    parameters:
    - id: properties
      type: System.IntPtr
    - id: numberOfDevices
      type: System.UInt32
    - id: devices
      type: OpenTK.Compute.OpenCL.CLDevice[]
    - id: notificationCallback
      type: System.IntPtr
    - id: userData
      type: System.IntPtr
    - id: resultCode
      type: OpenTK.Compute.OpenCL.CLResultCode
    return:
      type: OpenTK.Compute.OpenCL.CLContext
    content.vb: Public Shared Function CreateContext(properties As IntPtr, numberOfDevices As UInteger, devices As CLDevice(), notificationCallback As IntPtr, userData As IntPtr, resultCode As CLResultCode) As CLContext
  overload: OpenTK.Compute.OpenCL.CL.CreateContext*
  nameWithType.vb: CL.CreateContext(IntPtr, UInteger, CLDevice(), IntPtr, IntPtr, CLResultCode)
  fullName.vb: OpenTK.Compute.OpenCL.CL.CreateContext(System.IntPtr, UInteger, OpenTK.Compute.OpenCL.CLDevice(), System.IntPtr, System.IntPtr, OpenTK.Compute.OpenCL.CLResultCode)
  name.vb: CreateContext(IntPtr, UInteger, CLDevice(), IntPtr, IntPtr, CLResultCode)
- uid: OpenTK.Compute.OpenCL.CL.CreateContext(System.IntPtr,OpenTK.Compute.OpenCL.CLDevice[],System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  commentId: M:OpenTK.Compute.OpenCL.CL.CreateContext(System.IntPtr,OpenTK.Compute.OpenCL.CLDevice[],System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  id: CreateContext(System.IntPtr,OpenTK.Compute.OpenCL.CLDevice[],System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: CreateContext(nint, CLDevice[], nint, nint, out CLResultCode)
  nameWithType: CL.CreateContext(nint, CLDevice[], nint, nint, out CLResultCode)
  fullName: OpenTK.Compute.OpenCL.CL.CreateContext(nint, OpenTK.Compute.OpenCL.CLDevice[], nint, nint, out OpenTK.Compute.OpenCL.CLResultCode)
  type: Method
  source:
    id: CreateContext
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 160
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static CLContext CreateContext(nint properties, CLDevice[] devices, nint notificationCallback, nint userData, out CLResultCode resultCode)
    parameters:
    - id: properties
      type: System.IntPtr
    - id: devices
      type: OpenTK.Compute.OpenCL.CLDevice[]
    - id: notificationCallback
      type: System.IntPtr
    - id: userData
      type: System.IntPtr
    - id: resultCode
      type: OpenTK.Compute.OpenCL.CLResultCode
    return:
      type: OpenTK.Compute.OpenCL.CLContext
    content.vb: Public Shared Function CreateContext(properties As IntPtr, devices As CLDevice(), notificationCallback As IntPtr, userData As IntPtr, resultCode As CLResultCode) As CLContext
  overload: OpenTK.Compute.OpenCL.CL.CreateContext*
  nameWithType.vb: CL.CreateContext(IntPtr, CLDevice(), IntPtr, IntPtr, CLResultCode)
  fullName.vb: OpenTK.Compute.OpenCL.CL.CreateContext(System.IntPtr, OpenTK.Compute.OpenCL.CLDevice(), System.IntPtr, System.IntPtr, OpenTK.Compute.OpenCL.CLResultCode)
  name.vb: CreateContext(IntPtr, CLDevice(), IntPtr, IntPtr, CLResultCode)
- uid: OpenTK.Compute.OpenCL.CL.CreateContext(System.IntPtr[],System.UInt32,OpenTK.Compute.OpenCL.CLDevice[],System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  commentId: M:OpenTK.Compute.OpenCL.CL.CreateContext(System.IntPtr[],System.UInt32,OpenTK.Compute.OpenCL.CLDevice[],System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  id: CreateContext(System.IntPtr[],System.UInt32,OpenTK.Compute.OpenCL.CLDevice[],System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: CreateContext(nint[], uint, CLDevice[], nint, nint, out CLResultCode)
  nameWithType: CL.CreateContext(nint[], uint, CLDevice[], nint, nint, out CLResultCode)
  fullName: OpenTK.Compute.OpenCL.CL.CreateContext(nint[], uint, OpenTK.Compute.OpenCL.CLDevice[], nint, nint, out OpenTK.Compute.OpenCL.CLResultCode)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLContext CreateContext(nint[] properties, uint numberOfDevices, CLDevice[] devices, nint notificationCallback, nint userData, out CLResultCode resultCode)
    parameters:
    - id: properties
      type: System.IntPtr[]
    - id: numberOfDevices
      type: System.UInt32
    - id: devices
      type: OpenTK.Compute.OpenCL.CLDevice[]
    - id: notificationCallback
      type: System.IntPtr
    - id: userData
      type: System.IntPtr
    - id: resultCode
      type: OpenTK.Compute.OpenCL.CLResultCode
    return:
      type: OpenTK.Compute.OpenCL.CLContext
    content.vb: Public Shared Function CreateContext(properties As IntPtr(), numberOfDevices As UInteger, devices As CLDevice(), notificationCallback As IntPtr, userData As IntPtr, resultCode As CLResultCode) As CLContext
  overload: OpenTK.Compute.OpenCL.CL.CreateContext*
  nameWithType.vb: CL.CreateContext(IntPtr(), UInteger, CLDevice(), IntPtr, IntPtr, CLResultCode)
  fullName.vb: OpenTK.Compute.OpenCL.CL.CreateContext(System.IntPtr(), UInteger, OpenTK.Compute.OpenCL.CLDevice(), System.IntPtr, System.IntPtr, OpenTK.Compute.OpenCL.CLResultCode)
  name.vb: CreateContext(IntPtr(), UInteger, CLDevice(), IntPtr, IntPtr, CLResultCode)
- uid: OpenTK.Compute.OpenCL.CL.CreateContext(System.IntPtr[],OpenTK.Compute.OpenCL.CLDevice[],System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  commentId: M:OpenTK.Compute.OpenCL.CL.CreateContext(System.IntPtr[],OpenTK.Compute.OpenCL.CLDevice[],System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  id: CreateContext(System.IntPtr[],OpenTK.Compute.OpenCL.CLDevice[],System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: CreateContext(nint[], CLDevice[], nint, nint, out CLResultCode)
  nameWithType: CL.CreateContext(nint[], CLDevice[], nint, nint, out CLResultCode)
  fullName: OpenTK.Compute.OpenCL.CL.CreateContext(nint[], OpenTK.Compute.OpenCL.CLDevice[], nint, nint, out OpenTK.Compute.OpenCL.CLResultCode)
  type: Method
  source:
    id: CreateContext
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 179
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static CLContext CreateContext(nint[] properties, CLDevice[] devices, nint notificationCallback, nint userData, out CLResultCode resultCode)
    parameters:
    - id: properties
      type: System.IntPtr[]
    - id: devices
      type: OpenTK.Compute.OpenCL.CLDevice[]
    - id: notificationCallback
      type: System.IntPtr
    - id: userData
      type: System.IntPtr
    - id: resultCode
      type: OpenTK.Compute.OpenCL.CLResultCode
    return:
      type: OpenTK.Compute.OpenCL.CLContext
    content.vb: Public Shared Function CreateContext(properties As IntPtr(), devices As CLDevice(), notificationCallback As IntPtr, userData As IntPtr, resultCode As CLResultCode) As CLContext
  overload: OpenTK.Compute.OpenCL.CL.CreateContext*
  nameWithType.vb: CL.CreateContext(IntPtr(), CLDevice(), IntPtr, IntPtr, CLResultCode)
  fullName.vb: OpenTK.Compute.OpenCL.CL.CreateContext(System.IntPtr(), OpenTK.Compute.OpenCL.CLDevice(), System.IntPtr, System.IntPtr, OpenTK.Compute.OpenCL.CLResultCode)
  name.vb: CreateContext(IntPtr(), CLDevice(), IntPtr, IntPtr, CLResultCode)
- uid: OpenTK.Compute.OpenCL.CL.CreateContextFromType(System.IntPtr,OpenTK.Compute.OpenCL.DeviceType,System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  commentId: M:OpenTK.Compute.OpenCL.CL.CreateContextFromType(System.IntPtr,OpenTK.Compute.OpenCL.DeviceType,System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  id: CreateContextFromType(System.IntPtr,OpenTK.Compute.OpenCL.DeviceType,System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: CreateContextFromType(nint, DeviceType, nint, nint, out CLResultCode)
  nameWithType: CL.CreateContextFromType(nint, DeviceType, nint, nint, out CLResultCode)
  fullName: OpenTK.Compute.OpenCL.CL.CreateContextFromType(nint, OpenTK.Compute.OpenCL.DeviceType, nint, nint, out OpenTK.Compute.OpenCL.CLResultCode)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLContext CreateContextFromType(nint properties, DeviceType deviceType, nint notificationCallback, nint userData, out CLResultCode resultCode)
    parameters:
    - id: properties
      type: System.IntPtr
    - id: deviceType
      type: OpenTK.Compute.OpenCL.DeviceType
    - id: notificationCallback
      type: System.IntPtr
    - id: userData
      type: System.IntPtr
    - id: resultCode
      type: OpenTK.Compute.OpenCL.CLResultCode
    return:
      type: OpenTK.Compute.OpenCL.CLContext
    content.vb: Public Shared Function CreateContextFromType(properties As IntPtr, deviceType As DeviceType, notificationCallback As IntPtr, userData As IntPtr, resultCode As CLResultCode) As CLContext
  overload: OpenTK.Compute.OpenCL.CL.CreateContextFromType*
  nameWithType.vb: CL.CreateContextFromType(IntPtr, DeviceType, IntPtr, IntPtr, CLResultCode)
  fullName.vb: OpenTK.Compute.OpenCL.CL.CreateContextFromType(System.IntPtr, OpenTK.Compute.OpenCL.DeviceType, System.IntPtr, System.IntPtr, OpenTK.Compute.OpenCL.CLResultCode)
  name.vb: CreateContextFromType(IntPtr, DeviceType, IntPtr, IntPtr, CLResultCode)
- uid: OpenTK.Compute.OpenCL.CL.CreateContextFromType(System.IntPtr[],OpenTK.Compute.OpenCL.DeviceType,System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  commentId: M:OpenTK.Compute.OpenCL.CL.CreateContextFromType(System.IntPtr[],OpenTK.Compute.OpenCL.DeviceType,System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  id: CreateContextFromType(System.IntPtr[],OpenTK.Compute.OpenCL.DeviceType,System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: CreateContextFromType(nint[], DeviceType, nint, nint, out CLResultCode)
  nameWithType: CL.CreateContextFromType(nint[], DeviceType, nint, nint, out CLResultCode)
  fullName: OpenTK.Compute.OpenCL.CL.CreateContextFromType(nint[], OpenTK.Compute.OpenCL.DeviceType, nint, nint, out OpenTK.Compute.OpenCL.CLResultCode)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLContext CreateContextFromType(nint[] properties, DeviceType deviceType, nint notificationCallback, nint userData, out CLResultCode resultCode)
    parameters:
    - id: properties
      type: System.IntPtr[]
    - id: deviceType
      type: OpenTK.Compute.OpenCL.DeviceType
    - id: notificationCallback
      type: System.IntPtr
    - id: userData
      type: System.IntPtr
    - id: resultCode
      type: OpenTK.Compute.OpenCL.CLResultCode
    return:
      type: OpenTK.Compute.OpenCL.CLContext
    content.vb: Public Shared Function CreateContextFromType(properties As IntPtr(), deviceType As DeviceType, notificationCallback As IntPtr, userData As IntPtr, resultCode As CLResultCode) As CLContext
  overload: OpenTK.Compute.OpenCL.CL.CreateContextFromType*
  nameWithType.vb: CL.CreateContextFromType(IntPtr(), DeviceType, IntPtr, IntPtr, CLResultCode)
  fullName.vb: OpenTK.Compute.OpenCL.CL.CreateContextFromType(System.IntPtr(), OpenTK.Compute.OpenCL.DeviceType, System.IntPtr, System.IntPtr, OpenTK.Compute.OpenCL.CLResultCode)
  name.vb: CreateContextFromType(IntPtr(), DeviceType, IntPtr, IntPtr, CLResultCode)
- uid: OpenTK.Compute.OpenCL.CL.RetainContext(OpenTK.Compute.OpenCL.CLContext)
  commentId: M:OpenTK.Compute.OpenCL.CL.RetainContext(OpenTK.Compute.OpenCL.CLContext)
  id: RetainContext(OpenTK.Compute.OpenCL.CLContext)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: RetainContext(CLContext)
  nameWithType: CL.RetainContext(CLContext)
  fullName: OpenTK.Compute.OpenCL.CL.RetainContext(OpenTK.Compute.OpenCL.CLContext)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode RetainContext(CLContext context)
    parameters:
    - id: context
      type: OpenTK.Compute.OpenCL.CLContext
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function RetainContext(context As CLContext) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.RetainContext*
- uid: OpenTK.Compute.OpenCL.CL.ReleaseContext(OpenTK.Compute.OpenCL.CLContext)
  commentId: M:OpenTK.Compute.OpenCL.CL.ReleaseContext(OpenTK.Compute.OpenCL.CLContext)
  id: ReleaseContext(OpenTK.Compute.OpenCL.CLContext)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: ReleaseContext(CLContext)
  nameWithType: CL.ReleaseContext(CLContext)
  fullName: OpenTK.Compute.OpenCL.CL.ReleaseContext(OpenTK.Compute.OpenCL.CLContext)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode ReleaseContext(CLContext context)
    parameters:
    - id: context
      type: OpenTK.Compute.OpenCL.CLContext
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function ReleaseContext(context As CLContext) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.ReleaseContext*
- uid: OpenTK.Compute.OpenCL.CL.GetContextInfo(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.ContextInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetContextInfo(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.ContextInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  id: GetContextInfo(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.ContextInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetContextInfo(CLContext, ContextInfo, nuint, byte[], out nuint)
  nameWithType: CL.GetContextInfo(CLContext, ContextInfo, nuint, byte[], out nuint)
  fullName: OpenTK.Compute.OpenCL.CL.GetContextInfo(OpenTK.Compute.OpenCL.CLContext, OpenTK.Compute.OpenCL.ContextInfo, nuint, byte[], out nuint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode GetContextInfo(CLContext context, ContextInfo paramName, nuint paramValueSize, byte[] paramValue, out nuint paramValueSizeReturned)
    parameters:
    - id: context
      type: OpenTK.Compute.OpenCL.CLContext
    - id: paramName
      type: OpenTK.Compute.OpenCL.ContextInfo
    - id: paramValueSize
      type: System.UIntPtr
    - id: paramValue
      type: System.Byte[]
    - id: paramValueSizeReturned
      type: System.UIntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetContextInfo(context As CLContext, paramName As ContextInfo, paramValueSize As UIntPtr, paramValue As Byte(), paramValueSizeReturned As UIntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetContextInfo*
  nameWithType.vb: CL.GetContextInfo(CLContext, ContextInfo, UIntPtr, Byte(), UIntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetContextInfo(OpenTK.Compute.OpenCL.CLContext, OpenTK.Compute.OpenCL.ContextInfo, System.UIntPtr, Byte(), System.UIntPtr)
  name.vb: GetContextInfo(CLContext, ContextInfo, UIntPtr, Byte(), UIntPtr)
- uid: OpenTK.Compute.OpenCL.CL.GetContextInfo(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.ContextInfo,System.Byte[]@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetContextInfo(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.ContextInfo,System.Byte[]@)
  id: GetContextInfo(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.ContextInfo,System.Byte[]@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetContextInfo(CLContext, ContextInfo, out byte[])
  nameWithType: CL.GetContextInfo(CLContext, ContextInfo, out byte[])
  fullName: OpenTK.Compute.OpenCL.CL.GetContextInfo(OpenTK.Compute.OpenCL.CLContext, OpenTK.Compute.OpenCL.ContextInfo, out byte[])
  type: Method
  source:
    id: GetContextInfo
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 224
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static CLResultCode GetContextInfo(CLContext context, ContextInfo paramName, out byte[] paramValue)
    parameters:
    - id: context
      type: OpenTK.Compute.OpenCL.CLContext
    - id: paramName
      type: OpenTK.Compute.OpenCL.ContextInfo
    - id: paramValue
      type: System.Byte[]
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetContextInfo(context As CLContext, paramName As ContextInfo, paramValue As Byte()) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetContextInfo*
  nameWithType.vb: CL.GetContextInfo(CLContext, ContextInfo, Byte())
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetContextInfo(OpenTK.Compute.OpenCL.CLContext, OpenTK.Compute.OpenCL.ContextInfo, Byte())
  name.vb: GetContextInfo(CLContext, ContextInfo, Byte())
- uid: OpenTK.Compute.OpenCL.CL.CreateCommandQueueWithProperties(OpenTK.Compute.OpenCL.CLContext,System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  commentId: M:OpenTK.Compute.OpenCL.CL.CreateCommandQueueWithProperties(OpenTK.Compute.OpenCL.CLContext,System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  id: CreateCommandQueueWithProperties(OpenTK.Compute.OpenCL.CLContext,System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: CreateCommandQueueWithProperties(CLContext, nint, nint, out CLResultCode)
  nameWithType: CL.CreateCommandQueueWithProperties(CLContext, nint, nint, out CLResultCode)
  fullName: OpenTK.Compute.OpenCL.CL.CreateCommandQueueWithProperties(OpenTK.Compute.OpenCL.CLContext, nint, nint, out OpenTK.Compute.OpenCL.CLResultCode)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 2.0.
  example: []
  syntax:
    content: public static extern CLCommandQueue CreateCommandQueueWithProperties(CLContext context, nint device, nint properties, out CLResultCode resultCode)
    parameters:
    - id: context
      type: OpenTK.Compute.OpenCL.CLContext
    - id: device
      type: System.IntPtr
    - id: properties
      type: System.IntPtr
    - id: resultCode
      type: OpenTK.Compute.OpenCL.CLResultCode
    return:
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    content.vb: Public Shared Function CreateCommandQueueWithProperties(context As CLContext, device As IntPtr, properties As IntPtr, resultCode As CLResultCode) As CLCommandQueue
  overload: OpenTK.Compute.OpenCL.CL.CreateCommandQueueWithProperties*
  nameWithType.vb: CL.CreateCommandQueueWithProperties(CLContext, IntPtr, IntPtr, CLResultCode)
  fullName.vb: OpenTK.Compute.OpenCL.CL.CreateCommandQueueWithProperties(OpenTK.Compute.OpenCL.CLContext, System.IntPtr, System.IntPtr, OpenTK.Compute.OpenCL.CLResultCode)
  name.vb: CreateCommandQueueWithProperties(CLContext, IntPtr, IntPtr, CLResultCode)
- uid: OpenTK.Compute.OpenCL.CL.RetainCommandQueue(OpenTK.Compute.OpenCL.CLCommandQueue)
  commentId: M:OpenTK.Compute.OpenCL.CL.RetainCommandQueue(OpenTK.Compute.OpenCL.CLCommandQueue)
  id: RetainCommandQueue(OpenTK.Compute.OpenCL.CLCommandQueue)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: RetainCommandQueue(CLCommandQueue)
  nameWithType: CL.RetainCommandQueue(CLCommandQueue)
  fullName: OpenTK.Compute.OpenCL.CL.RetainCommandQueue(OpenTK.Compute.OpenCL.CLCommandQueue)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode RetainCommandQueue(CLCommandQueue commandQueue)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function RetainCommandQueue(commandQueue As CLCommandQueue) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.RetainCommandQueue*
- uid: OpenTK.Compute.OpenCL.CL.ReleaseCommandQueue(OpenTK.Compute.OpenCL.CLCommandQueue)
  commentId: M:OpenTK.Compute.OpenCL.CL.ReleaseCommandQueue(OpenTK.Compute.OpenCL.CLCommandQueue)
  id: ReleaseCommandQueue(OpenTK.Compute.OpenCL.CLCommandQueue)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: ReleaseCommandQueue(CLCommandQueue)
  nameWithType: CL.ReleaseCommandQueue(CLCommandQueue)
  fullName: OpenTK.Compute.OpenCL.CL.ReleaseCommandQueue(OpenTK.Compute.OpenCL.CLCommandQueue)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode ReleaseCommandQueue(CLCommandQueue commandQueue)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function ReleaseCommandQueue(commandQueue As CLCommandQueue) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.ReleaseCommandQueue*
- uid: OpenTK.Compute.OpenCL.CL.GetCommandQueueInfo(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CommandQueueInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetCommandQueueInfo(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CommandQueueInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  id: GetCommandQueueInfo(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CommandQueueInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetCommandQueueInfo(CLCommandQueue, CommandQueueInfo, nuint, byte[], out nuint)
  nameWithType: CL.GetCommandQueueInfo(CLCommandQueue, CommandQueueInfo, nuint, byte[], out nuint)
  fullName: OpenTK.Compute.OpenCL.CL.GetCommandQueueInfo(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CommandQueueInfo, nuint, byte[], out nuint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode GetCommandQueueInfo(CLCommandQueue commandQueue, CommandQueueInfo paramName, nuint paramSize, byte[] paramValue, out nuint paramValueSizeReturned)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: paramName
      type: OpenTK.Compute.OpenCL.CommandQueueInfo
    - id: paramSize
      type: System.UIntPtr
    - id: paramValue
      type: System.Byte[]
    - id: paramValueSizeReturned
      type: System.UIntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetCommandQueueInfo(commandQueue As CLCommandQueue, paramName As CommandQueueInfo, paramSize As UIntPtr, paramValue As Byte(), paramValueSizeReturned As UIntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetCommandQueueInfo*
  nameWithType.vb: CL.GetCommandQueueInfo(CLCommandQueue, CommandQueueInfo, UIntPtr, Byte(), UIntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetCommandQueueInfo(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CommandQueueInfo, System.UIntPtr, Byte(), System.UIntPtr)
  name.vb: GetCommandQueueInfo(CLCommandQueue, CommandQueueInfo, UIntPtr, Byte(), UIntPtr)
- uid: OpenTK.Compute.OpenCL.CL.GetCommandQueueInfo(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CommandQueueInfo,System.Byte[]@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetCommandQueueInfo(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CommandQueueInfo,System.Byte[]@)
  id: GetCommandQueueInfo(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CommandQueueInfo,System.Byte[]@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetCommandQueueInfo(CLCommandQueue, CommandQueueInfo, out byte[])
  nameWithType: CL.GetCommandQueueInfo(CLCommandQueue, CommandQueueInfo, out byte[])
  fullName: OpenTK.Compute.OpenCL.CL.GetCommandQueueInfo(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CommandQueueInfo, out byte[])
  type: Method
  source:
    id: GetCommandQueueInfo
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 265
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static CLResultCode GetCommandQueueInfo(CLCommandQueue queue, CommandQueueInfo paramName, out byte[] paramValue)
    parameters:
    - id: queue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: paramName
      type: OpenTK.Compute.OpenCL.CommandQueueInfo
    - id: paramValue
      type: System.Byte[]
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetCommandQueueInfo(queue As CLCommandQueue, paramName As CommandQueueInfo, paramValue As Byte()) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetCommandQueueInfo*
  nameWithType.vb: CL.GetCommandQueueInfo(CLCommandQueue, CommandQueueInfo, Byte())
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetCommandQueueInfo(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CommandQueueInfo, Byte())
  name.vb: GetCommandQueueInfo(CLCommandQueue, CommandQueueInfo, Byte())
- uid: OpenTK.Compute.OpenCL.CL.CreateBuffer(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,System.UIntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  commentId: M:OpenTK.Compute.OpenCL.CL.CreateBuffer(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,System.UIntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  id: CreateBuffer(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,System.UIntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: CreateBuffer(CLContext, MemoryFlags, nuint, nint, out CLResultCode)
  nameWithType: CL.CreateBuffer(CLContext, MemoryFlags, nuint, nint, out CLResultCode)
  fullName: OpenTK.Compute.OpenCL.CL.CreateBuffer(OpenTK.Compute.OpenCL.CLContext, OpenTK.Compute.OpenCL.MemoryFlags, nuint, nint, out OpenTK.Compute.OpenCL.CLResultCode)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLBuffer CreateBuffer(CLContext context, MemoryFlags flags, nuint size, nint hostPtr, out CLResultCode resultCode)
    parameters:
    - id: context
      type: OpenTK.Compute.OpenCL.CLContext
    - id: flags
      type: OpenTK.Compute.OpenCL.MemoryFlags
    - id: size
      type: System.UIntPtr
    - id: hostPtr
      type: System.IntPtr
    - id: resultCode
      type: OpenTK.Compute.OpenCL.CLResultCode
    return:
      type: OpenTK.Compute.OpenCL.CLBuffer
    content.vb: Public Shared Function CreateBuffer(context As CLContext, flags As MemoryFlags, size As UIntPtr, hostPtr As IntPtr, resultCode As CLResultCode) As CLBuffer
  overload: OpenTK.Compute.OpenCL.CL.CreateBuffer*
  nameWithType.vb: CL.CreateBuffer(CLContext, MemoryFlags, UIntPtr, IntPtr, CLResultCode)
  fullName.vb: OpenTK.Compute.OpenCL.CL.CreateBuffer(OpenTK.Compute.OpenCL.CLContext, OpenTK.Compute.OpenCL.MemoryFlags, System.UIntPtr, System.IntPtr, OpenTK.Compute.OpenCL.CLResultCode)
  name.vb: CreateBuffer(CLContext, MemoryFlags, UIntPtr, IntPtr, CLResultCode)
- uid: OpenTK.Compute.OpenCL.CL.CreateBuffer``1(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,``0[],OpenTK.Compute.OpenCL.CLResultCode@)
  commentId: M:OpenTK.Compute.OpenCL.CL.CreateBuffer``1(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,``0[],OpenTK.Compute.OpenCL.CLResultCode@)
  id: CreateBuffer``1(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,``0[],OpenTK.Compute.OpenCL.CLResultCode@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: CreateBuffer<T>(CLContext, MemoryFlags, T[], out CLResultCode)
  nameWithType: CL.CreateBuffer<T>(CLContext, MemoryFlags, T[], out CLResultCode)
  fullName: OpenTK.Compute.OpenCL.CL.CreateBuffer<T>(OpenTK.Compute.OpenCL.CLContext, OpenTK.Compute.OpenCL.MemoryFlags, T[], out OpenTK.Compute.OpenCL.CLResultCode)
  type: Method
  source:
    id: CreateBuffer
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 288
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: 'public static CLBuffer CreateBuffer<T>(CLContext context, MemoryFlags flags, T[] array, out CLResultCode resultCode) where T : unmanaged'
    parameters:
    - id: context
      type: OpenTK.Compute.OpenCL.CLContext
    - id: flags
      type: OpenTK.Compute.OpenCL.MemoryFlags
    - id: array
      type: '{T}[]'
    - id: resultCode
      type: OpenTK.Compute.OpenCL.CLResultCode
    typeParameters:
    - id: T
    return:
      type: OpenTK.Compute.OpenCL.CLBuffer
    content.vb: Public Shared Function CreateBuffer(Of T As Structure)(context As CLContext, flags As MemoryFlags, array As T(), resultCode As CLResultCode) As CLBuffer
  overload: OpenTK.Compute.OpenCL.CL.CreateBuffer*
  nameWithType.vb: CL.CreateBuffer(Of T)(CLContext, MemoryFlags, T(), CLResultCode)
  fullName.vb: OpenTK.Compute.OpenCL.CL.CreateBuffer(Of T)(OpenTK.Compute.OpenCL.CLContext, OpenTK.Compute.OpenCL.MemoryFlags, T(), OpenTK.Compute.OpenCL.CLResultCode)
  name.vb: CreateBuffer(Of T)(CLContext, MemoryFlags, T(), CLResultCode)
- uid: OpenTK.Compute.OpenCL.CL.CreateBuffer``1(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,System.Span{``0},OpenTK.Compute.OpenCL.CLResultCode@)
  commentId: M:OpenTK.Compute.OpenCL.CL.CreateBuffer``1(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,System.Span{``0},OpenTK.Compute.OpenCL.CLResultCode@)
  id: CreateBuffer``1(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,System.Span{``0},OpenTK.Compute.OpenCL.CLResultCode@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: CreateBuffer<T>(CLContext, MemoryFlags, Span<T>, out CLResultCode)
  nameWithType: CL.CreateBuffer<T>(CLContext, MemoryFlags, Span<T>, out CLResultCode)
  fullName: OpenTK.Compute.OpenCL.CL.CreateBuffer<T>(OpenTK.Compute.OpenCL.CLContext, OpenTK.Compute.OpenCL.MemoryFlags, System.Span<T>, out OpenTK.Compute.OpenCL.CLResultCode)
  type: Method
  source:
    id: CreateBuffer
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 302
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: 'public static CLBuffer CreateBuffer<T>(CLContext context, MemoryFlags flags, Span<T> span, out CLResultCode resultCode) where T : unmanaged'
    parameters:
    - id: context
      type: OpenTK.Compute.OpenCL.CLContext
    - id: flags
      type: OpenTK.Compute.OpenCL.MemoryFlags
    - id: span
      type: System.Span{{T}}
    - id: resultCode
      type: OpenTK.Compute.OpenCL.CLResultCode
    typeParameters:
    - id: T
    return:
      type: OpenTK.Compute.OpenCL.CLBuffer
    content.vb: Public Shared Function CreateBuffer(Of T As Structure)(context As CLContext, flags As MemoryFlags, span As Span(Of T), resultCode As CLResultCode) As CLBuffer
  overload: OpenTK.Compute.OpenCL.CL.CreateBuffer*
  nameWithType.vb: CL.CreateBuffer(Of T)(CLContext, MemoryFlags, Span(Of T), CLResultCode)
  fullName.vb: OpenTK.Compute.OpenCL.CL.CreateBuffer(Of T)(OpenTK.Compute.OpenCL.CLContext, OpenTK.Compute.OpenCL.MemoryFlags, System.Span(Of T), OpenTK.Compute.OpenCL.CLResultCode)
  name.vb: CreateBuffer(Of T)(CLContext, MemoryFlags, Span(Of T), CLResultCode)
- uid: OpenTK.Compute.OpenCL.CL.CreateSubBuffer(OpenTK.Compute.OpenCL.CLBuffer,OpenTK.Compute.OpenCL.MemoryFlags,OpenTK.Compute.OpenCL.BufferCreateType,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  commentId: M:OpenTK.Compute.OpenCL.CL.CreateSubBuffer(OpenTK.Compute.OpenCL.CLBuffer,OpenTK.Compute.OpenCL.MemoryFlags,OpenTK.Compute.OpenCL.BufferCreateType,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  id: CreateSubBuffer(OpenTK.Compute.OpenCL.CLBuffer,OpenTK.Compute.OpenCL.MemoryFlags,OpenTK.Compute.OpenCL.BufferCreateType,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: CreateSubBuffer(CLBuffer, MemoryFlags, BufferCreateType, nint, out CLResultCode)
  nameWithType: CL.CreateSubBuffer(CLBuffer, MemoryFlags, BufferCreateType, nint, out CLResultCode)
  fullName: OpenTK.Compute.OpenCL.CL.CreateSubBuffer(OpenTK.Compute.OpenCL.CLBuffer, OpenTK.Compute.OpenCL.MemoryFlags, OpenTK.Compute.OpenCL.BufferCreateType, nint, out OpenTK.Compute.OpenCL.CLResultCode)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.1.
  example: []
  syntax:
    content: public static extern CLBuffer CreateSubBuffer(CLBuffer buffer, MemoryFlags flags, BufferCreateType bufferCreateType, nint bufferCreateInfo, out CLResultCode resultCode)
    parameters:
    - id: buffer
      type: OpenTK.Compute.OpenCL.CLBuffer
    - id: flags
      type: OpenTK.Compute.OpenCL.MemoryFlags
    - id: bufferCreateType
      type: OpenTK.Compute.OpenCL.BufferCreateType
    - id: bufferCreateInfo
      type: System.IntPtr
    - id: resultCode
      type: OpenTK.Compute.OpenCL.CLResultCode
    return:
      type: OpenTK.Compute.OpenCL.CLBuffer
    content.vb: Public Shared Function CreateSubBuffer(buffer As CLBuffer, flags As MemoryFlags, bufferCreateType As BufferCreateType, bufferCreateInfo As IntPtr, resultCode As CLResultCode) As CLBuffer
  overload: OpenTK.Compute.OpenCL.CL.CreateSubBuffer*
  nameWithType.vb: CL.CreateSubBuffer(CLBuffer, MemoryFlags, BufferCreateType, IntPtr, CLResultCode)
  fullName.vb: OpenTK.Compute.OpenCL.CL.CreateSubBuffer(OpenTK.Compute.OpenCL.CLBuffer, OpenTK.Compute.OpenCL.MemoryFlags, OpenTK.Compute.OpenCL.BufferCreateType, System.IntPtr, OpenTK.Compute.OpenCL.CLResultCode)
  name.vb: CreateSubBuffer(CLBuffer, MemoryFlags, BufferCreateType, IntPtr, CLResultCode)
- uid: OpenTK.Compute.OpenCL.CL.CreateImage(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,OpenTK.Compute.OpenCL.ImageFormat@,OpenTK.Compute.OpenCL.ImageDescription@,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  commentId: M:OpenTK.Compute.OpenCL.CL.CreateImage(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,OpenTK.Compute.OpenCL.ImageFormat@,OpenTK.Compute.OpenCL.ImageDescription@,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  id: CreateImage(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,OpenTK.Compute.OpenCL.ImageFormat@,OpenTK.Compute.OpenCL.ImageDescription@,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: CreateImage(CLContext, MemoryFlags, ref ImageFormat, ref ImageDescription, nint, out CLResultCode)
  nameWithType: CL.CreateImage(CLContext, MemoryFlags, ref ImageFormat, ref ImageDescription, nint, out CLResultCode)
  fullName: OpenTK.Compute.OpenCL.CL.CreateImage(OpenTK.Compute.OpenCL.CLContext, OpenTK.Compute.OpenCL.MemoryFlags, ref OpenTK.Compute.OpenCL.ImageFormat, ref OpenTK.Compute.OpenCL.ImageDescription, nint, out OpenTK.Compute.OpenCL.CLResultCode)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.2.
  example: []
  syntax:
    content: public static extern CLImage CreateImage(CLContext context, MemoryFlags flags, ref ImageFormat imageFormat, ref ImageDescription imageDesc, nint hostPointer, out CLResultCode resultCode)
    parameters:
    - id: context
      type: OpenTK.Compute.OpenCL.CLContext
    - id: flags
      type: OpenTK.Compute.OpenCL.MemoryFlags
    - id: imageFormat
      type: OpenTK.Compute.OpenCL.ImageFormat
    - id: imageDesc
      type: OpenTK.Compute.OpenCL.ImageDescription
    - id: hostPointer
      type: System.IntPtr
    - id: resultCode
      type: OpenTK.Compute.OpenCL.CLResultCode
    return:
      type: OpenTK.Compute.OpenCL.CLImage
    content.vb: Public Shared Function CreateImage(context As CLContext, flags As MemoryFlags, imageFormat As ImageFormat, imageDesc As ImageDescription, hostPointer As IntPtr, resultCode As CLResultCode) As CLImage
  overload: OpenTK.Compute.OpenCL.CL.CreateImage*
  nameWithType.vb: CL.CreateImage(CLContext, MemoryFlags, ImageFormat, ImageDescription, IntPtr, CLResultCode)
  fullName.vb: OpenTK.Compute.OpenCL.CL.CreateImage(OpenTK.Compute.OpenCL.CLContext, OpenTK.Compute.OpenCL.MemoryFlags, OpenTK.Compute.OpenCL.ImageFormat, OpenTK.Compute.OpenCL.ImageDescription, System.IntPtr, OpenTK.Compute.OpenCL.CLResultCode)
  name.vb: CreateImage(CLContext, MemoryFlags, ImageFormat, ImageDescription, IntPtr, CLResultCode)
- uid: OpenTK.Compute.OpenCL.CL.CreatePipe(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,System.UInt32,System.UInt32,System.IntPtr[],OpenTK.Compute.OpenCL.CLResultCode@)
  commentId: M:OpenTK.Compute.OpenCL.CL.CreatePipe(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,System.UInt32,System.UInt32,System.IntPtr[],OpenTK.Compute.OpenCL.CLResultCode@)
  id: CreatePipe(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,System.UInt32,System.UInt32,System.IntPtr[],OpenTK.Compute.OpenCL.CLResultCode@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: CreatePipe(CLContext, MemoryFlags, uint, uint, nint[], out CLResultCode)
  nameWithType: CL.CreatePipe(CLContext, MemoryFlags, uint, uint, nint[], out CLResultCode)
  fullName: OpenTK.Compute.OpenCL.CL.CreatePipe(OpenTK.Compute.OpenCL.CLContext, OpenTK.Compute.OpenCL.MemoryFlags, uint, uint, nint[], out OpenTK.Compute.OpenCL.CLResultCode)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 2.0.
  example: []
  syntax:
    content: public static extern CLPipe CreatePipe(CLContext context, MemoryFlags flags, uint pipePacketSize, uint pipeMaxPackets, nint[] properties, out CLResultCode resultCode)
    parameters:
    - id: context
      type: OpenTK.Compute.OpenCL.CLContext
    - id: flags
      type: OpenTK.Compute.OpenCL.MemoryFlags
    - id: pipePacketSize
      type: System.UInt32
    - id: pipeMaxPackets
      type: System.UInt32
    - id: properties
      type: System.IntPtr[]
    - id: resultCode
      type: OpenTK.Compute.OpenCL.CLResultCode
    return:
      type: OpenTK.Compute.OpenCL.CLPipe
    content.vb: Public Shared Function CreatePipe(context As CLContext, flags As MemoryFlags, pipePacketSize As UInteger, pipeMaxPackets As UInteger, properties As IntPtr(), resultCode As CLResultCode) As CLPipe
  overload: OpenTK.Compute.OpenCL.CL.CreatePipe*
  nameWithType.vb: CL.CreatePipe(CLContext, MemoryFlags, UInteger, UInteger, IntPtr(), CLResultCode)
  fullName.vb: OpenTK.Compute.OpenCL.CL.CreatePipe(OpenTK.Compute.OpenCL.CLContext, OpenTK.Compute.OpenCL.MemoryFlags, UInteger, UInteger, System.IntPtr(), OpenTK.Compute.OpenCL.CLResultCode)
  name.vb: CreatePipe(CLContext, MemoryFlags, UInteger, UInteger, IntPtr(), CLResultCode)
- uid: OpenTK.Compute.OpenCL.CL.RetainMemoryObject(System.IntPtr)
  commentId: M:OpenTK.Compute.OpenCL.CL.RetainMemoryObject(System.IntPtr)
  id: RetainMemoryObject(System.IntPtr)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: RetainMemoryObject(nint)
  nameWithType: CL.RetainMemoryObject(nint)
  fullName: OpenTK.Compute.OpenCL.CL.RetainMemoryObject(nint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode RetainMemoryObject(nint memoryObject)
    parameters:
    - id: memoryObject
      type: System.IntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function RetainMemoryObject(memoryObject As IntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.RetainMemoryObject*
  nameWithType.vb: CL.RetainMemoryObject(IntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.RetainMemoryObject(System.IntPtr)
  name.vb: RetainMemoryObject(IntPtr)
- uid: OpenTK.Compute.OpenCL.CL.RetainMemoryObject(OpenTK.Compute.OpenCL.CLBuffer)
  commentId: M:OpenTK.Compute.OpenCL.CL.RetainMemoryObject(OpenTK.Compute.OpenCL.CLBuffer)
  id: RetainMemoryObject(OpenTK.Compute.OpenCL.CLBuffer)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: RetainMemoryObject(CLBuffer)
  nameWithType: CL.RetainMemoryObject(CLBuffer)
  fullName: OpenTK.Compute.OpenCL.CL.RetainMemoryObject(OpenTK.Compute.OpenCL.CLBuffer)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode RetainMemoryObject(CLBuffer memoryObject)
    parameters:
    - id: memoryObject
      type: OpenTK.Compute.OpenCL.CLBuffer
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function RetainMemoryObject(memoryObject As CLBuffer) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.RetainMemoryObject*
- uid: OpenTK.Compute.OpenCL.CL.RetainMemoryObject(OpenTK.Compute.OpenCL.CLImage)
  commentId: M:OpenTK.Compute.OpenCL.CL.RetainMemoryObject(OpenTK.Compute.OpenCL.CLImage)
  id: RetainMemoryObject(OpenTK.Compute.OpenCL.CLImage)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: RetainMemoryObject(CLImage)
  nameWithType: CL.RetainMemoryObject(CLImage)
  fullName: OpenTK.Compute.OpenCL.CL.RetainMemoryObject(OpenTK.Compute.OpenCL.CLImage)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode RetainMemoryObject(CLImage memoryObject)
    parameters:
    - id: memoryObject
      type: OpenTK.Compute.OpenCL.CLImage
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function RetainMemoryObject(memoryObject As CLImage) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.RetainMemoryObject*
- uid: OpenTK.Compute.OpenCL.CL.RetainMemoryObject(OpenTK.Compute.OpenCL.CLPipe)
  commentId: M:OpenTK.Compute.OpenCL.CL.RetainMemoryObject(OpenTK.Compute.OpenCL.CLPipe)
  id: RetainMemoryObject(OpenTK.Compute.OpenCL.CLPipe)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: RetainMemoryObject(CLPipe)
  nameWithType: CL.RetainMemoryObject(CLPipe)
  fullName: OpenTK.Compute.OpenCL.CL.RetainMemoryObject(OpenTK.Compute.OpenCL.CLPipe)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode RetainMemoryObject(CLPipe memoryObject)
    parameters:
    - id: memoryObject
      type: OpenTK.Compute.OpenCL.CLPipe
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function RetainMemoryObject(memoryObject As CLPipe) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.RetainMemoryObject*
- uid: OpenTK.Compute.OpenCL.CL.ReleaseMemoryObject(System.IntPtr)
  commentId: M:OpenTK.Compute.OpenCL.CL.ReleaseMemoryObject(System.IntPtr)
  id: ReleaseMemoryObject(System.IntPtr)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: ReleaseMemoryObject(nint)
  nameWithType: CL.ReleaseMemoryObject(nint)
  fullName: OpenTK.Compute.OpenCL.CL.ReleaseMemoryObject(nint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode ReleaseMemoryObject(nint memoryObject)
    parameters:
    - id: memoryObject
      type: System.IntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function ReleaseMemoryObject(memoryObject As IntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.ReleaseMemoryObject*
  nameWithType.vb: CL.ReleaseMemoryObject(IntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.ReleaseMemoryObject(System.IntPtr)
  name.vb: ReleaseMemoryObject(IntPtr)
- uid: OpenTK.Compute.OpenCL.CL.ReleaseMemoryObject(OpenTK.Compute.OpenCL.CLBuffer)
  commentId: M:OpenTK.Compute.OpenCL.CL.ReleaseMemoryObject(OpenTK.Compute.OpenCL.CLBuffer)
  id: ReleaseMemoryObject(OpenTK.Compute.OpenCL.CLBuffer)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: ReleaseMemoryObject(CLBuffer)
  nameWithType: CL.ReleaseMemoryObject(CLBuffer)
  fullName: OpenTK.Compute.OpenCL.CL.ReleaseMemoryObject(OpenTK.Compute.OpenCL.CLBuffer)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode ReleaseMemoryObject(CLBuffer memoryObject)
    parameters:
    - id: memoryObject
      type: OpenTK.Compute.OpenCL.CLBuffer
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function ReleaseMemoryObject(memoryObject As CLBuffer) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.ReleaseMemoryObject*
- uid: OpenTK.Compute.OpenCL.CL.ReleaseMemoryObject(OpenTK.Compute.OpenCL.CLImage)
  commentId: M:OpenTK.Compute.OpenCL.CL.ReleaseMemoryObject(OpenTK.Compute.OpenCL.CLImage)
  id: ReleaseMemoryObject(OpenTK.Compute.OpenCL.CLImage)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: ReleaseMemoryObject(CLImage)
  nameWithType: CL.ReleaseMemoryObject(CLImage)
  fullName: OpenTK.Compute.OpenCL.CL.ReleaseMemoryObject(OpenTK.Compute.OpenCL.CLImage)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode ReleaseMemoryObject(CLImage memoryObject)
    parameters:
    - id: memoryObject
      type: OpenTK.Compute.OpenCL.CLImage
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function ReleaseMemoryObject(memoryObject As CLImage) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.ReleaseMemoryObject*
- uid: OpenTK.Compute.OpenCL.CL.ReleaseMemoryObject(OpenTK.Compute.OpenCL.CLPipe)
  commentId: M:OpenTK.Compute.OpenCL.CL.ReleaseMemoryObject(OpenTK.Compute.OpenCL.CLPipe)
  id: ReleaseMemoryObject(OpenTK.Compute.OpenCL.CLPipe)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: ReleaseMemoryObject(CLPipe)
  nameWithType: CL.ReleaseMemoryObject(CLPipe)
  fullName: OpenTK.Compute.OpenCL.CL.ReleaseMemoryObject(OpenTK.Compute.OpenCL.CLPipe)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode ReleaseMemoryObject(CLPipe memoryObject)
    parameters:
    - id: memoryObject
      type: OpenTK.Compute.OpenCL.CLPipe
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function ReleaseMemoryObject(memoryObject As CLPipe) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.ReleaseMemoryObject*
- uid: OpenTK.Compute.OpenCL.CL.GetSupportedImageFormats(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,OpenTK.Compute.OpenCL.MemoryObjectType,System.UInt32,OpenTK.Compute.OpenCL.ImageFormat[],System.UInt32@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetSupportedImageFormats(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,OpenTK.Compute.OpenCL.MemoryObjectType,System.UInt32,OpenTK.Compute.OpenCL.ImageFormat[],System.UInt32@)
  id: GetSupportedImageFormats(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,OpenTK.Compute.OpenCL.MemoryObjectType,System.UInt32,OpenTK.Compute.OpenCL.ImageFormat[],System.UInt32@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetSupportedImageFormats(CLContext, MemoryFlags, MemoryObjectType, uint, ImageFormat[], out uint)
  nameWithType: CL.GetSupportedImageFormats(CLContext, MemoryFlags, MemoryObjectType, uint, ImageFormat[], out uint)
  fullName: OpenTK.Compute.OpenCL.CL.GetSupportedImageFormats(OpenTK.Compute.OpenCL.CLContext, OpenTK.Compute.OpenCL.MemoryFlags, OpenTK.Compute.OpenCL.MemoryObjectType, uint, OpenTK.Compute.OpenCL.ImageFormat[], out uint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode GetSupportedImageFormats(CLContext context, MemoryFlags flags, MemoryObjectType imageType, uint numberOfEntries, ImageFormat[] imageFormats, out uint numberOfImageFormats)
    parameters:
    - id: context
      type: OpenTK.Compute.OpenCL.CLContext
    - id: flags
      type: OpenTK.Compute.OpenCL.MemoryFlags
    - id: imageType
      type: OpenTK.Compute.OpenCL.MemoryObjectType
    - id: numberOfEntries
      type: System.UInt32
    - id: imageFormats
      type: OpenTK.Compute.OpenCL.ImageFormat[]
    - id: numberOfImageFormats
      type: System.UInt32
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetSupportedImageFormats(context As CLContext, flags As MemoryFlags, imageType As MemoryObjectType, numberOfEntries As UInteger, imageFormats As ImageFormat(), numberOfImageFormats As UInteger) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetSupportedImageFormats*
  nameWithType.vb: CL.GetSupportedImageFormats(CLContext, MemoryFlags, MemoryObjectType, UInteger, ImageFormat(), UInteger)
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetSupportedImageFormats(OpenTK.Compute.OpenCL.CLContext, OpenTK.Compute.OpenCL.MemoryFlags, OpenTK.Compute.OpenCL.MemoryObjectType, UInteger, OpenTK.Compute.OpenCL.ImageFormat(), UInteger)
  name.vb: GetSupportedImageFormats(CLContext, MemoryFlags, MemoryObjectType, UInteger, ImageFormat(), UInteger)
- uid: OpenTK.Compute.OpenCL.CL.GetSupportedImageFormats(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,OpenTK.Compute.OpenCL.MemoryObjectType,OpenTK.Compute.OpenCL.ImageFormat[]@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetSupportedImageFormats(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,OpenTK.Compute.OpenCL.MemoryObjectType,OpenTK.Compute.OpenCL.ImageFormat[]@)
  id: GetSupportedImageFormats(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,OpenTK.Compute.OpenCL.MemoryObjectType,OpenTK.Compute.OpenCL.ImageFormat[]@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetSupportedImageFormats(CLContext, MemoryFlags, MemoryObjectType, out ImageFormat[])
  nameWithType: CL.GetSupportedImageFormats(CLContext, MemoryFlags, MemoryObjectType, out ImageFormat[])
  fullName: OpenTK.Compute.OpenCL.CL.GetSupportedImageFormats(OpenTK.Compute.OpenCL.CLContext, OpenTK.Compute.OpenCL.MemoryFlags, OpenTK.Compute.OpenCL.MemoryObjectType, out OpenTK.Compute.OpenCL.ImageFormat[])
  type: Method
  source:
    id: GetSupportedImageFormats
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 409
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static CLResultCode GetSupportedImageFormats(CLContext context, MemoryFlags flags, MemoryObjectType imageType, out ImageFormat[] imageFormats)
    parameters:
    - id: context
      type: OpenTK.Compute.OpenCL.CLContext
    - id: flags
      type: OpenTK.Compute.OpenCL.MemoryFlags
    - id: imageType
      type: OpenTK.Compute.OpenCL.MemoryObjectType
    - id: imageFormats
      type: OpenTK.Compute.OpenCL.ImageFormat[]
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetSupportedImageFormats(context As CLContext, flags As MemoryFlags, imageType As MemoryObjectType, imageFormats As ImageFormat()) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetSupportedImageFormats*
  nameWithType.vb: CL.GetSupportedImageFormats(CLContext, MemoryFlags, MemoryObjectType, ImageFormat())
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetSupportedImageFormats(OpenTK.Compute.OpenCL.CLContext, OpenTK.Compute.OpenCL.MemoryFlags, OpenTK.Compute.OpenCL.MemoryObjectType, OpenTK.Compute.OpenCL.ImageFormat())
  name.vb: GetSupportedImageFormats(CLContext, MemoryFlags, MemoryObjectType, ImageFormat())
- uid: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(System.IntPtr,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(System.IntPtr,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  id: GetMemObjectInfo(System.IntPtr,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetMemObjectInfo(nint, MemoryObjectInfo, nuint, byte[], out nuint)
  nameWithType: CL.GetMemObjectInfo(nint, MemoryObjectInfo, nuint, byte[], out nuint)
  fullName: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(nint, OpenTK.Compute.OpenCL.MemoryObjectInfo, nuint, byte[], out nuint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode GetMemObjectInfo(nint memoryObject, MemoryObjectInfo paramName, nuint paramValueSize, byte[] paramValue, out nuint paramValueSizeReturned)
    parameters:
    - id: memoryObject
      type: System.IntPtr
    - id: paramName
      type: OpenTK.Compute.OpenCL.MemoryObjectInfo
    - id: paramValueSize
      type: System.UIntPtr
    - id: paramValue
      type: System.Byte[]
    - id: paramValueSizeReturned
      type: System.UIntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetMemObjectInfo(memoryObject As IntPtr, paramName As MemoryObjectInfo, paramValueSize As UIntPtr, paramValue As Byte(), paramValueSizeReturned As UIntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo*
  nameWithType.vb: CL.GetMemObjectInfo(IntPtr, MemoryObjectInfo, UIntPtr, Byte(), UIntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(System.IntPtr, OpenTK.Compute.OpenCL.MemoryObjectInfo, System.UIntPtr, Byte(), System.UIntPtr)
  name.vb: GetMemObjectInfo(IntPtr, MemoryObjectInfo, UIntPtr, Byte(), UIntPtr)
- uid: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(OpenTK.Compute.OpenCL.CLBuffer,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(OpenTK.Compute.OpenCL.CLBuffer,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  id: GetMemObjectInfo(OpenTK.Compute.OpenCL.CLBuffer,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetMemObjectInfo(CLBuffer, MemoryObjectInfo, nuint, byte[], out nuint)
  nameWithType: CL.GetMemObjectInfo(CLBuffer, MemoryObjectInfo, nuint, byte[], out nuint)
  fullName: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(OpenTK.Compute.OpenCL.CLBuffer, OpenTK.Compute.OpenCL.MemoryObjectInfo, nuint, byte[], out nuint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode GetMemObjectInfo(CLBuffer memoryObject, MemoryObjectInfo paramName, nuint paramValueSize, byte[] paramValue, out nuint paramValueSizeReturned)
    parameters:
    - id: memoryObject
      type: OpenTK.Compute.OpenCL.CLBuffer
    - id: paramName
      type: OpenTK.Compute.OpenCL.MemoryObjectInfo
    - id: paramValueSize
      type: System.UIntPtr
    - id: paramValue
      type: System.Byte[]
    - id: paramValueSizeReturned
      type: System.UIntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetMemObjectInfo(memoryObject As CLBuffer, paramName As MemoryObjectInfo, paramValueSize As UIntPtr, paramValue As Byte(), paramValueSizeReturned As UIntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo*
  nameWithType.vb: CL.GetMemObjectInfo(CLBuffer, MemoryObjectInfo, UIntPtr, Byte(), UIntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(OpenTK.Compute.OpenCL.CLBuffer, OpenTK.Compute.OpenCL.MemoryObjectInfo, System.UIntPtr, Byte(), System.UIntPtr)
  name.vb: GetMemObjectInfo(CLBuffer, MemoryObjectInfo, UIntPtr, Byte(), UIntPtr)
- uid: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(OpenTK.Compute.OpenCL.CLImage,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(OpenTK.Compute.OpenCL.CLImage,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  id: GetMemObjectInfo(OpenTK.Compute.OpenCL.CLImage,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetMemObjectInfo(CLImage, MemoryObjectInfo, nuint, byte[], out nuint)
  nameWithType: CL.GetMemObjectInfo(CLImage, MemoryObjectInfo, nuint, byte[], out nuint)
  fullName: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(OpenTK.Compute.OpenCL.CLImage, OpenTK.Compute.OpenCL.MemoryObjectInfo, nuint, byte[], out nuint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode GetMemObjectInfo(CLImage memoryObject, MemoryObjectInfo paramName, nuint paramValueSize, byte[] paramValue, out nuint paramValueSizeReturned)
    parameters:
    - id: memoryObject
      type: OpenTK.Compute.OpenCL.CLImage
    - id: paramName
      type: OpenTK.Compute.OpenCL.MemoryObjectInfo
    - id: paramValueSize
      type: System.UIntPtr
    - id: paramValue
      type: System.Byte[]
    - id: paramValueSizeReturned
      type: System.UIntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetMemObjectInfo(memoryObject As CLImage, paramName As MemoryObjectInfo, paramValueSize As UIntPtr, paramValue As Byte(), paramValueSizeReturned As UIntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo*
  nameWithType.vb: CL.GetMemObjectInfo(CLImage, MemoryObjectInfo, UIntPtr, Byte(), UIntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(OpenTK.Compute.OpenCL.CLImage, OpenTK.Compute.OpenCL.MemoryObjectInfo, System.UIntPtr, Byte(), System.UIntPtr)
  name.vb: GetMemObjectInfo(CLImage, MemoryObjectInfo, UIntPtr, Byte(), UIntPtr)
- uid: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(OpenTK.Compute.OpenCL.CLPipe,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(OpenTK.Compute.OpenCL.CLPipe,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  id: GetMemObjectInfo(OpenTK.Compute.OpenCL.CLPipe,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetMemObjectInfo(CLPipe, MemoryObjectInfo, nuint, byte[], out nuint)
  nameWithType: CL.GetMemObjectInfo(CLPipe, MemoryObjectInfo, nuint, byte[], out nuint)
  fullName: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(OpenTK.Compute.OpenCL.CLPipe, OpenTK.Compute.OpenCL.MemoryObjectInfo, nuint, byte[], out nuint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode GetMemObjectInfo(CLPipe memoryObject, MemoryObjectInfo paramName, nuint paramValueSize, byte[] paramValue, out nuint paramValueSizeReturned)
    parameters:
    - id: memoryObject
      type: OpenTK.Compute.OpenCL.CLPipe
    - id: paramName
      type: OpenTK.Compute.OpenCL.MemoryObjectInfo
    - id: paramValueSize
      type: System.UIntPtr
    - id: paramValue
      type: System.Byte[]
    - id: paramValueSizeReturned
      type: System.UIntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetMemObjectInfo(memoryObject As CLPipe, paramName As MemoryObjectInfo, paramValueSize As UIntPtr, paramValue As Byte(), paramValueSizeReturned As UIntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo*
  nameWithType.vb: CL.GetMemObjectInfo(CLPipe, MemoryObjectInfo, UIntPtr, Byte(), UIntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(OpenTK.Compute.OpenCL.CLPipe, OpenTK.Compute.OpenCL.MemoryObjectInfo, System.UIntPtr, Byte(), System.UIntPtr)
  name.vb: GetMemObjectInfo(CLPipe, MemoryObjectInfo, UIntPtr, Byte(), UIntPtr)
- uid: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(System.IntPtr,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.Byte[]@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(System.IntPtr,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.Byte[]@)
  id: GetMemObjectInfo(System.IntPtr,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.Byte[]@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetMemObjectInfo(nint, MemoryObjectInfo, out byte[])
  nameWithType: CL.GetMemObjectInfo(nint, MemoryObjectInfo, out byte[])
  fullName: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(nint, OpenTK.Compute.OpenCL.MemoryObjectInfo, out byte[])
  type: Method
  source:
    id: GetMemObjectInfo
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 448
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static CLResultCode GetMemObjectInfo(nint memoryObject, MemoryObjectInfo paramName, out byte[] paramValue)
    parameters:
    - id: memoryObject
      type: System.IntPtr
    - id: paramName
      type: OpenTK.Compute.OpenCL.MemoryObjectInfo
    - id: paramValue
      type: System.Byte[]
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetMemObjectInfo(memoryObject As IntPtr, paramName As MemoryObjectInfo, paramValue As Byte()) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo*
  nameWithType.vb: CL.GetMemObjectInfo(IntPtr, MemoryObjectInfo, Byte())
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(System.IntPtr, OpenTK.Compute.OpenCL.MemoryObjectInfo, Byte())
  name.vb: GetMemObjectInfo(IntPtr, MemoryObjectInfo, Byte())
- uid: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(OpenTK.Compute.OpenCL.CLBuffer,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.Byte[]@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(OpenTK.Compute.OpenCL.CLBuffer,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.Byte[]@)
  id: GetMemObjectInfo(OpenTK.Compute.OpenCL.CLBuffer,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.Byte[]@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetMemObjectInfo(CLBuffer, MemoryObjectInfo, out byte[])
  nameWithType: CL.GetMemObjectInfo(CLBuffer, MemoryObjectInfo, out byte[])
  fullName: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(OpenTK.Compute.OpenCL.CLBuffer, OpenTK.Compute.OpenCL.MemoryObjectInfo, out byte[])
  type: Method
  source:
    id: GetMemObjectInfo
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 459
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static CLResultCode GetMemObjectInfo(CLBuffer memoryObject, MemoryObjectInfo paramName, out byte[] paramValue)
    parameters:
    - id: memoryObject
      type: OpenTK.Compute.OpenCL.CLBuffer
    - id: paramName
      type: OpenTK.Compute.OpenCL.MemoryObjectInfo
    - id: paramValue
      type: System.Byte[]
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetMemObjectInfo(memoryObject As CLBuffer, paramName As MemoryObjectInfo, paramValue As Byte()) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo*
  nameWithType.vb: CL.GetMemObjectInfo(CLBuffer, MemoryObjectInfo, Byte())
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(OpenTK.Compute.OpenCL.CLBuffer, OpenTK.Compute.OpenCL.MemoryObjectInfo, Byte())
  name.vb: GetMemObjectInfo(CLBuffer, MemoryObjectInfo, Byte())
- uid: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(OpenTK.Compute.OpenCL.CLImage,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.Byte[]@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(OpenTK.Compute.OpenCL.CLImage,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.Byte[]@)
  id: GetMemObjectInfo(OpenTK.Compute.OpenCL.CLImage,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.Byte[]@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetMemObjectInfo(CLImage, MemoryObjectInfo, out byte[])
  nameWithType: CL.GetMemObjectInfo(CLImage, MemoryObjectInfo, out byte[])
  fullName: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(OpenTK.Compute.OpenCL.CLImage, OpenTK.Compute.OpenCL.MemoryObjectInfo, out byte[])
  type: Method
  source:
    id: GetMemObjectInfo
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 468
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static CLResultCode GetMemObjectInfo(CLImage memoryObject, MemoryObjectInfo paramName, out byte[] paramValue)
    parameters:
    - id: memoryObject
      type: OpenTK.Compute.OpenCL.CLImage
    - id: paramName
      type: OpenTK.Compute.OpenCL.MemoryObjectInfo
    - id: paramValue
      type: System.Byte[]
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetMemObjectInfo(memoryObject As CLImage, paramName As MemoryObjectInfo, paramValue As Byte()) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo*
  nameWithType.vb: CL.GetMemObjectInfo(CLImage, MemoryObjectInfo, Byte())
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(OpenTK.Compute.OpenCL.CLImage, OpenTK.Compute.OpenCL.MemoryObjectInfo, Byte())
  name.vb: GetMemObjectInfo(CLImage, MemoryObjectInfo, Byte())
- uid: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(OpenTK.Compute.OpenCL.CLPipe,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.Byte[]@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(OpenTK.Compute.OpenCL.CLPipe,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.Byte[]@)
  id: GetMemObjectInfo(OpenTK.Compute.OpenCL.CLPipe,OpenTK.Compute.OpenCL.MemoryObjectInfo,System.Byte[]@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetMemObjectInfo(CLPipe, MemoryObjectInfo, out byte[])
  nameWithType: CL.GetMemObjectInfo(CLPipe, MemoryObjectInfo, out byte[])
  fullName: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(OpenTK.Compute.OpenCL.CLPipe, OpenTK.Compute.OpenCL.MemoryObjectInfo, out byte[])
  type: Method
  source:
    id: GetMemObjectInfo
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 477
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static CLResultCode GetMemObjectInfo(CLPipe memoryObject, MemoryObjectInfo paramName, out byte[] paramValue)
    parameters:
    - id: memoryObject
      type: OpenTK.Compute.OpenCL.CLPipe
    - id: paramName
      type: OpenTK.Compute.OpenCL.MemoryObjectInfo
    - id: paramValue
      type: System.Byte[]
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetMemObjectInfo(memoryObject As CLPipe, paramName As MemoryObjectInfo, paramValue As Byte()) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo*
  nameWithType.vb: CL.GetMemObjectInfo(CLPipe, MemoryObjectInfo, Byte())
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo(OpenTK.Compute.OpenCL.CLPipe, OpenTK.Compute.OpenCL.MemoryObjectInfo, Byte())
  name.vb: GetMemObjectInfo(CLPipe, MemoryObjectInfo, Byte())
- uid: OpenTK.Compute.OpenCL.CL.GetImageInfo(OpenTK.Compute.OpenCL.CLImage,OpenTK.Compute.OpenCL.ImageInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetImageInfo(OpenTK.Compute.OpenCL.CLImage,OpenTK.Compute.OpenCL.ImageInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  id: GetImageInfo(OpenTK.Compute.OpenCL.CLImage,OpenTK.Compute.OpenCL.ImageInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetImageInfo(CLImage, ImageInfo, nuint, byte[], out nuint)
  nameWithType: CL.GetImageInfo(CLImage, ImageInfo, nuint, byte[], out nuint)
  fullName: OpenTK.Compute.OpenCL.CL.GetImageInfo(OpenTK.Compute.OpenCL.CLImage, OpenTK.Compute.OpenCL.ImageInfo, nuint, byte[], out nuint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode GetImageInfo(CLImage image, ImageInfo paramName, nuint paramValueSize, byte[] paramValue, out nuint paramValueSizeReturned)
    parameters:
    - id: image
      type: OpenTK.Compute.OpenCL.CLImage
    - id: paramName
      type: OpenTK.Compute.OpenCL.ImageInfo
    - id: paramValueSize
      type: System.UIntPtr
    - id: paramValue
      type: System.Byte[]
    - id: paramValueSizeReturned
      type: System.UIntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetImageInfo(image As CLImage, paramName As ImageInfo, paramValueSize As UIntPtr, paramValue As Byte(), paramValueSizeReturned As UIntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetImageInfo*
  nameWithType.vb: CL.GetImageInfo(CLImage, ImageInfo, UIntPtr, Byte(), UIntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetImageInfo(OpenTK.Compute.OpenCL.CLImage, OpenTK.Compute.OpenCL.ImageInfo, System.UIntPtr, Byte(), System.UIntPtr)
  name.vb: GetImageInfo(CLImage, ImageInfo, UIntPtr, Byte(), UIntPtr)
- uid: OpenTK.Compute.OpenCL.CL.GetImageInfo(OpenTK.Compute.OpenCL.CLImage,OpenTK.Compute.OpenCL.ImageInfo,System.Byte[]@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetImageInfo(OpenTK.Compute.OpenCL.CLImage,OpenTK.Compute.OpenCL.ImageInfo,System.Byte[]@)
  id: GetImageInfo(OpenTK.Compute.OpenCL.CLImage,OpenTK.Compute.OpenCL.ImageInfo,System.Byte[]@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetImageInfo(CLImage, ImageInfo, out byte[])
  nameWithType: CL.GetImageInfo(CLImage, ImageInfo, out byte[])
  fullName: OpenTK.Compute.OpenCL.CL.GetImageInfo(OpenTK.Compute.OpenCL.CLImage, OpenTK.Compute.OpenCL.ImageInfo, out byte[])
  type: Method
  source:
    id: GetImageInfo
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 494
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static CLResultCode GetImageInfo(CLImage image, ImageInfo paramName, out byte[] paramValue)
    parameters:
    - id: image
      type: OpenTK.Compute.OpenCL.CLImage
    - id: paramName
      type: OpenTK.Compute.OpenCL.ImageInfo
    - id: paramValue
      type: System.Byte[]
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetImageInfo(image As CLImage, paramName As ImageInfo, paramValue As Byte()) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetImageInfo*
  nameWithType.vb: CL.GetImageInfo(CLImage, ImageInfo, Byte())
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetImageInfo(OpenTK.Compute.OpenCL.CLImage, OpenTK.Compute.OpenCL.ImageInfo, Byte())
  name.vb: GetImageInfo(CLImage, ImageInfo, Byte())
- uid: OpenTK.Compute.OpenCL.CL.GetPipeInfo(OpenTK.Compute.OpenCL.CLPipe,OpenTK.Compute.OpenCL.PipeInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetPipeInfo(OpenTK.Compute.OpenCL.CLPipe,OpenTK.Compute.OpenCL.PipeInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  id: GetPipeInfo(OpenTK.Compute.OpenCL.CLPipe,OpenTK.Compute.OpenCL.PipeInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetPipeInfo(CLPipe, PipeInfo, nuint, byte[], out nuint)
  nameWithType: CL.GetPipeInfo(CLPipe, PipeInfo, nuint, byte[], out nuint)
  fullName: OpenTK.Compute.OpenCL.CL.GetPipeInfo(OpenTK.Compute.OpenCL.CLPipe, OpenTK.Compute.OpenCL.PipeInfo, nuint, byte[], out nuint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 2.0.
  example: []
  syntax:
    content: public static extern CLResultCode GetPipeInfo(CLPipe pipe, PipeInfo paramName, nuint paramValueSize, byte[] paramValue, out nuint paramValueSizeReturned)
    parameters:
    - id: pipe
      type: OpenTK.Compute.OpenCL.CLPipe
    - id: paramName
      type: OpenTK.Compute.OpenCL.PipeInfo
    - id: paramValueSize
      type: System.UIntPtr
    - id: paramValue
      type: System.Byte[]
    - id: paramValueSizeReturned
      type: System.UIntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetPipeInfo(pipe As CLPipe, paramName As PipeInfo, paramValueSize As UIntPtr, paramValue As Byte(), paramValueSizeReturned As UIntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetPipeInfo*
  nameWithType.vb: CL.GetPipeInfo(CLPipe, PipeInfo, UIntPtr, Byte(), UIntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetPipeInfo(OpenTK.Compute.OpenCL.CLPipe, OpenTK.Compute.OpenCL.PipeInfo, System.UIntPtr, Byte(), System.UIntPtr)
  name.vb: GetPipeInfo(CLPipe, PipeInfo, UIntPtr, Byte(), UIntPtr)
- uid: OpenTK.Compute.OpenCL.CL.GetPipeInfo(OpenTK.Compute.OpenCL.CLPipe,OpenTK.Compute.OpenCL.PipeInfo,System.Byte[]@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetPipeInfo(OpenTK.Compute.OpenCL.CLPipe,OpenTK.Compute.OpenCL.PipeInfo,System.Byte[]@)
  id: GetPipeInfo(OpenTK.Compute.OpenCL.CLPipe,OpenTK.Compute.OpenCL.PipeInfo,System.Byte[]@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetPipeInfo(CLPipe, PipeInfo, out byte[])
  nameWithType: CL.GetPipeInfo(CLPipe, PipeInfo, out byte[])
  fullName: OpenTK.Compute.OpenCL.CL.GetPipeInfo(OpenTK.Compute.OpenCL.CLPipe, OpenTK.Compute.OpenCL.PipeInfo, out byte[])
  type: Method
  source:
    id: GetPipeInfo
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 512
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 2.0.
  example: []
  syntax:
    content: public static CLResultCode GetPipeInfo(CLPipe pipe, PipeInfo paramName, out byte[] paramValue)
    parameters:
    - id: pipe
      type: OpenTK.Compute.OpenCL.CLPipe
    - id: paramName
      type: OpenTK.Compute.OpenCL.PipeInfo
    - id: paramValue
      type: System.Byte[]
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetPipeInfo(pipe As CLPipe, paramName As PipeInfo, paramValue As Byte()) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetPipeInfo*
  nameWithType.vb: CL.GetPipeInfo(CLPipe, PipeInfo, Byte())
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetPipeInfo(OpenTK.Compute.OpenCL.CLPipe, OpenTK.Compute.OpenCL.PipeInfo, Byte())
  name.vb: GetPipeInfo(CLPipe, PipeInfo, Byte())
- uid: OpenTK.Compute.OpenCL.CL.SetMemoryObjectDestructorCallback(System.IntPtr,System.IntPtr,System.IntPtr)
  commentId: M:OpenTK.Compute.OpenCL.CL.SetMemoryObjectDestructorCallback(System.IntPtr,System.IntPtr,System.IntPtr)
  id: SetMemoryObjectDestructorCallback(System.IntPtr,System.IntPtr,System.IntPtr)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: SetMemoryObjectDestructorCallback(nint, nint, nint)
  nameWithType: CL.SetMemoryObjectDestructorCallback(nint, nint, nint)
  fullName: OpenTK.Compute.OpenCL.CL.SetMemoryObjectDestructorCallback(nint, nint, nint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.1.
  example: []
  syntax:
    content: public static extern CLResultCode SetMemoryObjectDestructorCallback(nint memoryObject, nint notificationCallback, nint userData)
    parameters:
    - id: memoryObject
      type: System.IntPtr
    - id: notificationCallback
      type: System.IntPtr
    - id: userData
      type: System.IntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function SetMemoryObjectDestructorCallback(memoryObject As IntPtr, notificationCallback As IntPtr, userData As IntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.SetMemoryObjectDestructorCallback*
  nameWithType.vb: CL.SetMemoryObjectDestructorCallback(IntPtr, IntPtr, IntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.SetMemoryObjectDestructorCallback(System.IntPtr, System.IntPtr, System.IntPtr)
  name.vb: SetMemoryObjectDestructorCallback(IntPtr, IntPtr, IntPtr)
- uid: OpenTK.Compute.OpenCL.CL.SetMemoryObjectDestructorCallback(OpenTK.Compute.OpenCL.CLBuffer,System.IntPtr,System.IntPtr)
  commentId: M:OpenTK.Compute.OpenCL.CL.SetMemoryObjectDestructorCallback(OpenTK.Compute.OpenCL.CLBuffer,System.IntPtr,System.IntPtr)
  id: SetMemoryObjectDestructorCallback(OpenTK.Compute.OpenCL.CLBuffer,System.IntPtr,System.IntPtr)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: SetMemoryObjectDestructorCallback(CLBuffer, nint, nint)
  nameWithType: CL.SetMemoryObjectDestructorCallback(CLBuffer, nint, nint)
  fullName: OpenTK.Compute.OpenCL.CL.SetMemoryObjectDestructorCallback(OpenTK.Compute.OpenCL.CLBuffer, nint, nint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode SetMemoryObjectDestructorCallback(CLBuffer memoryObject, nint notificationCallback, nint userData)
    parameters:
    - id: memoryObject
      type: OpenTK.Compute.OpenCL.CLBuffer
    - id: notificationCallback
      type: System.IntPtr
    - id: userData
      type: System.IntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function SetMemoryObjectDestructorCallback(memoryObject As CLBuffer, notificationCallback As IntPtr, userData As IntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.SetMemoryObjectDestructorCallback*
  nameWithType.vb: CL.SetMemoryObjectDestructorCallback(CLBuffer, IntPtr, IntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.SetMemoryObjectDestructorCallback(OpenTK.Compute.OpenCL.CLBuffer, System.IntPtr, System.IntPtr)
  name.vb: SetMemoryObjectDestructorCallback(CLBuffer, IntPtr, IntPtr)
- uid: OpenTK.Compute.OpenCL.CL.SetMemoryObjectDestructorCallback(OpenTK.Compute.OpenCL.CLImage,System.IntPtr,System.IntPtr)
  commentId: M:OpenTK.Compute.OpenCL.CL.SetMemoryObjectDestructorCallback(OpenTK.Compute.OpenCL.CLImage,System.IntPtr,System.IntPtr)
  id: SetMemoryObjectDestructorCallback(OpenTK.Compute.OpenCL.CLImage,System.IntPtr,System.IntPtr)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: SetMemoryObjectDestructorCallback(CLImage, nint, nint)
  nameWithType: CL.SetMemoryObjectDestructorCallback(CLImage, nint, nint)
  fullName: OpenTK.Compute.OpenCL.CL.SetMemoryObjectDestructorCallback(OpenTK.Compute.OpenCL.CLImage, nint, nint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode SetMemoryObjectDestructorCallback(CLImage memoryObject, nint notificationCallback, nint userData)
    parameters:
    - id: memoryObject
      type: OpenTK.Compute.OpenCL.CLImage
    - id: notificationCallback
      type: System.IntPtr
    - id: userData
      type: System.IntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function SetMemoryObjectDestructorCallback(memoryObject As CLImage, notificationCallback As IntPtr, userData As IntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.SetMemoryObjectDestructorCallback*
  nameWithType.vb: CL.SetMemoryObjectDestructorCallback(CLImage, IntPtr, IntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.SetMemoryObjectDestructorCallback(OpenTK.Compute.OpenCL.CLImage, System.IntPtr, System.IntPtr)
  name.vb: SetMemoryObjectDestructorCallback(CLImage, IntPtr, IntPtr)
- uid: OpenTK.Compute.OpenCL.CL.SetMemoryObjectDestructorCallback(OpenTK.Compute.OpenCL.CLPipe,System.IntPtr,System.IntPtr)
  commentId: M:OpenTK.Compute.OpenCL.CL.SetMemoryObjectDestructorCallback(OpenTK.Compute.OpenCL.CLPipe,System.IntPtr,System.IntPtr)
  id: SetMemoryObjectDestructorCallback(OpenTK.Compute.OpenCL.CLPipe,System.IntPtr,System.IntPtr)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: SetMemoryObjectDestructorCallback(CLPipe, nint, nint)
  nameWithType: CL.SetMemoryObjectDestructorCallback(CLPipe, nint, nint)
  fullName: OpenTK.Compute.OpenCL.CL.SetMemoryObjectDestructorCallback(OpenTK.Compute.OpenCL.CLPipe, nint, nint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode SetMemoryObjectDestructorCallback(CLPipe memoryObject, nint notificationCallback, nint userData)
    parameters:
    - id: memoryObject
      type: OpenTK.Compute.OpenCL.CLPipe
    - id: notificationCallback
      type: System.IntPtr
    - id: userData
      type: System.IntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function SetMemoryObjectDestructorCallback(memoryObject As CLPipe, notificationCallback As IntPtr, userData As IntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.SetMemoryObjectDestructorCallback*
  nameWithType.vb: CL.SetMemoryObjectDestructorCallback(CLPipe, IntPtr, IntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.SetMemoryObjectDestructorCallback(OpenTK.Compute.OpenCL.CLPipe, System.IntPtr, System.IntPtr)
  name.vb: SetMemoryObjectDestructorCallback(CLPipe, IntPtr, IntPtr)
- uid: OpenTK.Compute.OpenCL.CL.SVMAlloc(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.SvmMemoryFlags,System.UIntPtr,System.UInt32)
  commentId: M:OpenTK.Compute.OpenCL.CL.SVMAlloc(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.SvmMemoryFlags,System.UIntPtr,System.UInt32)
  id: SVMAlloc(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.SvmMemoryFlags,System.UIntPtr,System.UInt32)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: SVMAlloc(CLContext, SvmMemoryFlags, nuint, uint)
  nameWithType: CL.SVMAlloc(CLContext, SvmMemoryFlags, nuint, uint)
  fullName: OpenTK.Compute.OpenCL.CL.SVMAlloc(OpenTK.Compute.OpenCL.CLContext, OpenTK.Compute.OpenCL.SvmMemoryFlags, nuint, uint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 2.0.
  example: []
  syntax:
    content: public static extern nint SVMAlloc(CLContext context, SvmMemoryFlags flags, nuint size, uint alignment)
    parameters:
    - id: context
      type: OpenTK.Compute.OpenCL.CLContext
    - id: flags
      type: OpenTK.Compute.OpenCL.SvmMemoryFlags
    - id: size
      type: System.UIntPtr
    - id: alignment
      type: System.UInt32
    return:
      type: System.IntPtr
    content.vb: Public Shared Function SVMAlloc(context As CLContext, flags As SvmMemoryFlags, size As UIntPtr, alignment As UInteger) As IntPtr
  overload: OpenTK.Compute.OpenCL.CL.SVMAlloc*
  nameWithType.vb: CL.SVMAlloc(CLContext, SvmMemoryFlags, UIntPtr, UInteger)
  fullName.vb: OpenTK.Compute.OpenCL.CL.SVMAlloc(OpenTK.Compute.OpenCL.CLContext, OpenTK.Compute.OpenCL.SvmMemoryFlags, System.UIntPtr, UInteger)
  name.vb: SVMAlloc(CLContext, SvmMemoryFlags, UIntPtr, UInteger)
- uid: OpenTK.Compute.OpenCL.CL.SVMFree(OpenTK.Compute.OpenCL.CLContext,System.IntPtr)
  commentId: M:OpenTK.Compute.OpenCL.CL.SVMFree(OpenTK.Compute.OpenCL.CLContext,System.IntPtr)
  id: SVMFree(OpenTK.Compute.OpenCL.CLContext,System.IntPtr)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: SVMFree(CLContext, nint)
  nameWithType: CL.SVMFree(CLContext, nint)
  fullName: OpenTK.Compute.OpenCL.CL.SVMFree(OpenTK.Compute.OpenCL.CLContext, nint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 2.0.
  example: []
  syntax:
    content: public static extern nint SVMFree(CLContext context, nint svmPointer)
    parameters:
    - id: context
      type: OpenTK.Compute.OpenCL.CLContext
    - id: svmPointer
      type: System.IntPtr
    return:
      type: System.IntPtr
    content.vb: Public Shared Function SVMFree(context As CLContext, svmPointer As IntPtr) As IntPtr
  overload: OpenTK.Compute.OpenCL.CL.SVMFree*
  nameWithType.vb: CL.SVMFree(CLContext, IntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.SVMFree(OpenTK.Compute.OpenCL.CLContext, System.IntPtr)
  name.vb: SVMFree(CLContext, IntPtr)
- uid: OpenTK.Compute.OpenCL.CL.CreateSamplerWithProperties(OpenTK.Compute.OpenCL.CLContext,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  commentId: M:OpenTK.Compute.OpenCL.CL.CreateSamplerWithProperties(OpenTK.Compute.OpenCL.CLContext,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  id: CreateSamplerWithProperties(OpenTK.Compute.OpenCL.CLContext,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: CreateSamplerWithProperties(CLContext, nint, out CLResultCode)
  nameWithType: CL.CreateSamplerWithProperties(CLContext, nint, out CLResultCode)
  fullName: OpenTK.Compute.OpenCL.CL.CreateSamplerWithProperties(OpenTK.Compute.OpenCL.CLContext, nint, out OpenTK.Compute.OpenCL.CLResultCode)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 2.0.
  example: []
  syntax:
    content: public static extern CLSampler CreateSamplerWithProperties(CLContext context, nint samplerProperties, out CLResultCode resultCode)
    parameters:
    - id: context
      type: OpenTK.Compute.OpenCL.CLContext
    - id: samplerProperties
      type: System.IntPtr
    - id: resultCode
      type: OpenTK.Compute.OpenCL.CLResultCode
    return:
      type: OpenTK.Compute.OpenCL.CLSampler
    content.vb: Public Shared Function CreateSamplerWithProperties(context As CLContext, samplerProperties As IntPtr, resultCode As CLResultCode) As CLSampler
  overload: OpenTK.Compute.OpenCL.CL.CreateSamplerWithProperties*
  nameWithType.vb: CL.CreateSamplerWithProperties(CLContext, IntPtr, CLResultCode)
  fullName.vb: OpenTK.Compute.OpenCL.CL.CreateSamplerWithProperties(OpenTK.Compute.OpenCL.CLContext, System.IntPtr, OpenTK.Compute.OpenCL.CLResultCode)
  name.vb: CreateSamplerWithProperties(CLContext, IntPtr, CLResultCode)
- uid: OpenTK.Compute.OpenCL.CL.RetainSampler(OpenTK.Compute.OpenCL.CLSampler)
  commentId: M:OpenTK.Compute.OpenCL.CL.RetainSampler(OpenTK.Compute.OpenCL.CLSampler)
  id: RetainSampler(OpenTK.Compute.OpenCL.CLSampler)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: RetainSampler(CLSampler)
  nameWithType: CL.RetainSampler(CLSampler)
  fullName: OpenTK.Compute.OpenCL.CL.RetainSampler(OpenTK.Compute.OpenCL.CLSampler)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode RetainSampler(CLSampler sampler)
    parameters:
    - id: sampler
      type: OpenTK.Compute.OpenCL.CLSampler
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function RetainSampler(sampler As CLSampler) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.RetainSampler*
- uid: OpenTK.Compute.OpenCL.CL.ReleaseSampler(OpenTK.Compute.OpenCL.CLSampler)
  commentId: M:OpenTK.Compute.OpenCL.CL.ReleaseSampler(OpenTK.Compute.OpenCL.CLSampler)
  id: ReleaseSampler(OpenTK.Compute.OpenCL.CLSampler)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: ReleaseSampler(CLSampler)
  nameWithType: CL.ReleaseSampler(CLSampler)
  fullName: OpenTK.Compute.OpenCL.CL.ReleaseSampler(OpenTK.Compute.OpenCL.CLSampler)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode ReleaseSampler(CLSampler sampler)
    parameters:
    - id: sampler
      type: OpenTK.Compute.OpenCL.CLSampler
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function ReleaseSampler(sampler As CLSampler) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.ReleaseSampler*
- uid: OpenTK.Compute.OpenCL.CL.GetSamplerInfo(OpenTK.Compute.OpenCL.CLSampler,OpenTK.Compute.OpenCL.SamplerInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetSamplerInfo(OpenTK.Compute.OpenCL.CLSampler,OpenTK.Compute.OpenCL.SamplerInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  id: GetSamplerInfo(OpenTK.Compute.OpenCL.CLSampler,OpenTK.Compute.OpenCL.SamplerInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetSamplerInfo(CLSampler, SamplerInfo, nuint, byte[], out nuint)
  nameWithType: CL.GetSamplerInfo(CLSampler, SamplerInfo, nuint, byte[], out nuint)
  fullName: OpenTK.Compute.OpenCL.CL.GetSamplerInfo(OpenTK.Compute.OpenCL.CLSampler, OpenTK.Compute.OpenCL.SamplerInfo, nuint, byte[], out nuint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode GetSamplerInfo(CLSampler sampler, SamplerInfo paramName, nuint paramValueSize, byte[] paramValue, out nuint paramValueSizeReturned)
    parameters:
    - id: sampler
      type: OpenTK.Compute.OpenCL.CLSampler
    - id: paramName
      type: OpenTK.Compute.OpenCL.SamplerInfo
    - id: paramValueSize
      type: System.UIntPtr
    - id: paramValue
      type: System.Byte[]
    - id: paramValueSizeReturned
      type: System.UIntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetSamplerInfo(sampler As CLSampler, paramName As SamplerInfo, paramValueSize As UIntPtr, paramValue As Byte(), paramValueSizeReturned As UIntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetSamplerInfo*
  nameWithType.vb: CL.GetSamplerInfo(CLSampler, SamplerInfo, UIntPtr, Byte(), UIntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetSamplerInfo(OpenTK.Compute.OpenCL.CLSampler, OpenTK.Compute.OpenCL.SamplerInfo, System.UIntPtr, Byte(), System.UIntPtr)
  name.vb: GetSamplerInfo(CLSampler, SamplerInfo, UIntPtr, Byte(), UIntPtr)
- uid: OpenTK.Compute.OpenCL.CL.GetSamplerInfo(OpenTK.Compute.OpenCL.CLSampler,OpenTK.Compute.OpenCL.SamplerInfo,System.Byte[]@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetSamplerInfo(OpenTK.Compute.OpenCL.CLSampler,OpenTK.Compute.OpenCL.SamplerInfo,System.Byte[]@)
  id: GetSamplerInfo(OpenTK.Compute.OpenCL.CLSampler,OpenTK.Compute.OpenCL.SamplerInfo,System.Byte[]@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetSamplerInfo(CLSampler, SamplerInfo, out byte[])
  nameWithType: CL.GetSamplerInfo(CLSampler, SamplerInfo, out byte[])
  fullName: OpenTK.Compute.OpenCL.CL.GetSamplerInfo(OpenTK.Compute.OpenCL.CLSampler, OpenTK.Compute.OpenCL.SamplerInfo, out byte[])
  type: Method
  source:
    id: GetSamplerInfo
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 593
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static CLResultCode GetSamplerInfo(CLSampler sampler, SamplerInfo paramName, out byte[] paramValue)
    parameters:
    - id: sampler
      type: OpenTK.Compute.OpenCL.CLSampler
    - id: paramName
      type: OpenTK.Compute.OpenCL.SamplerInfo
    - id: paramValue
      type: System.Byte[]
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetSamplerInfo(sampler As CLSampler, paramName As SamplerInfo, paramValue As Byte()) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetSamplerInfo*
  nameWithType.vb: CL.GetSamplerInfo(CLSampler, SamplerInfo, Byte())
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetSamplerInfo(OpenTK.Compute.OpenCL.CLSampler, OpenTK.Compute.OpenCL.SamplerInfo, Byte())
  name.vb: GetSamplerInfo(CLSampler, SamplerInfo, Byte())
- uid: OpenTK.Compute.OpenCL.CL.CreateProgramWithSource(OpenTK.Compute.OpenCL.CLContext,System.UInt32,System.IntPtr[],System.UInt32[],OpenTK.Compute.OpenCL.CLResultCode@)
  commentId: M:OpenTK.Compute.OpenCL.CL.CreateProgramWithSource(OpenTK.Compute.OpenCL.CLContext,System.UInt32,System.IntPtr[],System.UInt32[],OpenTK.Compute.OpenCL.CLResultCode@)
  id: CreateProgramWithSource(OpenTK.Compute.OpenCL.CLContext,System.UInt32,System.IntPtr[],System.UInt32[],OpenTK.Compute.OpenCL.CLResultCode@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: CreateProgramWithSource(CLContext, uint, nint[], uint[], out CLResultCode)
  nameWithType: CL.CreateProgramWithSource(CLContext, uint, nint[], uint[], out CLResultCode)
  fullName: OpenTK.Compute.OpenCL.CL.CreateProgramWithSource(OpenTK.Compute.OpenCL.CLContext, uint, nint[], uint[], out OpenTK.Compute.OpenCL.CLResultCode)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLProgram CreateProgramWithSource(CLContext context, uint count, nint[] strings, uint[] lengths, out CLResultCode resultCode)
    parameters:
    - id: context
      type: OpenTK.Compute.OpenCL.CLContext
    - id: count
      type: System.UInt32
    - id: strings
      type: System.IntPtr[]
    - id: lengths
      type: System.UInt32[]
    - id: resultCode
      type: OpenTK.Compute.OpenCL.CLResultCode
    return:
      type: OpenTK.Compute.OpenCL.CLProgram
    content.vb: Public Shared Function CreateProgramWithSource(context As CLContext, count As UInteger, strings As IntPtr(), lengths As UInteger(), resultCode As CLResultCode) As CLProgram
  overload: OpenTK.Compute.OpenCL.CL.CreateProgramWithSource*
  nameWithType.vb: CL.CreateProgramWithSource(CLContext, UInteger, IntPtr(), UInteger(), CLResultCode)
  fullName.vb: OpenTK.Compute.OpenCL.CL.CreateProgramWithSource(OpenTK.Compute.OpenCL.CLContext, UInteger, System.IntPtr(), UInteger(), OpenTK.Compute.OpenCL.CLResultCode)
  name.vb: CreateProgramWithSource(CLContext, UInteger, IntPtr(), UInteger(), CLResultCode)
- uid: OpenTK.Compute.OpenCL.CL.CreateProgramWithSource(OpenTK.Compute.OpenCL.CLContext,System.String,OpenTK.Compute.OpenCL.CLResultCode@)
  commentId: M:OpenTK.Compute.OpenCL.CL.CreateProgramWithSource(OpenTK.Compute.OpenCL.CLContext,System.String,OpenTK.Compute.OpenCL.CLResultCode@)
  id: CreateProgramWithSource(OpenTK.Compute.OpenCL.CLContext,System.String,OpenTK.Compute.OpenCL.CLResultCode@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: CreateProgramWithSource(CLContext, string, out CLResultCode)
  nameWithType: CL.CreateProgramWithSource(CLContext, string, out CLResultCode)
  fullName: OpenTK.Compute.OpenCL.CL.CreateProgramWithSource(OpenTK.Compute.OpenCL.CLContext, string, out OpenTK.Compute.OpenCL.CLResultCode)
  type: Method
  source:
    id: CreateProgramWithSource
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 615
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static CLProgram CreateProgramWithSource(CLContext context, string source, out CLResultCode resultCode)
    parameters:
    - id: context
      type: OpenTK.Compute.OpenCL.CLContext
    - id: source
      type: System.String
    - id: resultCode
      type: OpenTK.Compute.OpenCL.CLResultCode
    return:
      type: OpenTK.Compute.OpenCL.CLProgram
    content.vb: Public Shared Function CreateProgramWithSource(context As CLContext, source As String, resultCode As CLResultCode) As CLProgram
  overload: OpenTK.Compute.OpenCL.CL.CreateProgramWithSource*
  nameWithType.vb: CL.CreateProgramWithSource(CLContext, String, CLResultCode)
  fullName.vb: OpenTK.Compute.OpenCL.CL.CreateProgramWithSource(OpenTK.Compute.OpenCL.CLContext, String, OpenTK.Compute.OpenCL.CLResultCode)
  name.vb: CreateProgramWithSource(CLContext, String, CLResultCode)
- uid: OpenTK.Compute.OpenCL.CL.CreateProgramWithBinary(OpenTK.Compute.OpenCL.CLContext,System.UInt32,System.IntPtr[],System.UIntPtr[],System.IntPtr[],OpenTK.Compute.OpenCL.CLResultCode[]@,OpenTK.Compute.OpenCL.CLResultCode@)
  commentId: M:OpenTK.Compute.OpenCL.CL.CreateProgramWithBinary(OpenTK.Compute.OpenCL.CLContext,System.UInt32,System.IntPtr[],System.UIntPtr[],System.IntPtr[],OpenTK.Compute.OpenCL.CLResultCode[]@,OpenTK.Compute.OpenCL.CLResultCode@)
  id: CreateProgramWithBinary(OpenTK.Compute.OpenCL.CLContext,System.UInt32,System.IntPtr[],System.UIntPtr[],System.IntPtr[],OpenTK.Compute.OpenCL.CLResultCode[]@,OpenTK.Compute.OpenCL.CLResultCode@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: CreateProgramWithBinary(CLContext, uint, nint[], nuint[], nint[], out CLResultCode[], out CLResultCode)
  nameWithType: CL.CreateProgramWithBinary(CLContext, uint, nint[], nuint[], nint[], out CLResultCode[], out CLResultCode)
  fullName: OpenTK.Compute.OpenCL.CL.CreateProgramWithBinary(OpenTK.Compute.OpenCL.CLContext, uint, nint[], nuint[], nint[], out OpenTK.Compute.OpenCL.CLResultCode[], out OpenTK.Compute.OpenCL.CLResultCode)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLProgram CreateProgramWithBinary(CLContext context, uint numberOfDevices, nint[] deviceList, nuint[] lengths, nint[] binaries, out CLResultCode[] binaryStatus, out CLResultCode resultCode)
    parameters:
    - id: context
      type: OpenTK.Compute.OpenCL.CLContext
    - id: numberOfDevices
      type: System.UInt32
    - id: deviceList
      type: System.IntPtr[]
    - id: lengths
      type: System.UIntPtr[]
    - id: binaries
      type: System.IntPtr[]
    - id: binaryStatus
      type: OpenTK.Compute.OpenCL.CLResultCode[]
    - id: resultCode
      type: OpenTK.Compute.OpenCL.CLResultCode
    return:
      type: OpenTK.Compute.OpenCL.CLProgram
    content.vb: Public Shared Function CreateProgramWithBinary(context As CLContext, numberOfDevices As UInteger, deviceList As IntPtr(), lengths As UIntPtr(), binaries As IntPtr(), binaryStatus As CLResultCode(), resultCode As CLResultCode) As CLProgram
  overload: OpenTK.Compute.OpenCL.CL.CreateProgramWithBinary*
  nameWithType.vb: CL.CreateProgramWithBinary(CLContext, UInteger, IntPtr(), UIntPtr(), IntPtr(), CLResultCode(), CLResultCode)
  fullName.vb: OpenTK.Compute.OpenCL.CL.CreateProgramWithBinary(OpenTK.Compute.OpenCL.CLContext, UInteger, System.IntPtr(), System.UIntPtr(), System.IntPtr(), OpenTK.Compute.OpenCL.CLResultCode(), OpenTK.Compute.OpenCL.CLResultCode)
  name.vb: CreateProgramWithBinary(CLContext, UInteger, IntPtr(), UIntPtr(), IntPtr(), CLResultCode(), CLResultCode)
- uid: OpenTK.Compute.OpenCL.CL.CreateProgramWithBuiltInKernels(OpenTK.Compute.OpenCL.CLContext,System.UInt32,System.IntPtr[],System.String,OpenTK.Compute.OpenCL.CLResultCode@)
  commentId: M:OpenTK.Compute.OpenCL.CL.CreateProgramWithBuiltInKernels(OpenTK.Compute.OpenCL.CLContext,System.UInt32,System.IntPtr[],System.String,OpenTK.Compute.OpenCL.CLResultCode@)
  id: CreateProgramWithBuiltInKernels(OpenTK.Compute.OpenCL.CLContext,System.UInt32,System.IntPtr[],System.String,OpenTK.Compute.OpenCL.CLResultCode@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: CreateProgramWithBuiltInKernels(CLContext, uint, nint[], string, out CLResultCode)
  nameWithType: CL.CreateProgramWithBuiltInKernels(CLContext, uint, nint[], string, out CLResultCode)
  fullName: OpenTK.Compute.OpenCL.CL.CreateProgramWithBuiltInKernels(OpenTK.Compute.OpenCL.CLContext, uint, nint[], string, out OpenTK.Compute.OpenCL.CLResultCode)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.2.
  example: []
  syntax:
    content: public static extern CLProgram CreateProgramWithBuiltInKernels(CLContext context, uint numberOfDevices, nint[] deviceList, string kernelNames, out CLResultCode resultCode)
    parameters:
    - id: context
      type: OpenTK.Compute.OpenCL.CLContext
    - id: numberOfDevices
      type: System.UInt32
    - id: deviceList
      type: System.IntPtr[]
    - id: kernelNames
      type: System.String
    - id: resultCode
      type: OpenTK.Compute.OpenCL.CLResultCode
    return:
      type: OpenTK.Compute.OpenCL.CLProgram
    content.vb: Public Shared Function CreateProgramWithBuiltInKernels(context As CLContext, numberOfDevices As UInteger, deviceList As IntPtr(), kernelNames As String, resultCode As CLResultCode) As CLProgram
  overload: OpenTK.Compute.OpenCL.CL.CreateProgramWithBuiltInKernels*
  nameWithType.vb: CL.CreateProgramWithBuiltInKernels(CLContext, UInteger, IntPtr(), String, CLResultCode)
  fullName.vb: OpenTK.Compute.OpenCL.CL.CreateProgramWithBuiltInKernels(OpenTK.Compute.OpenCL.CLContext, UInteger, System.IntPtr(), String, OpenTK.Compute.OpenCL.CLResultCode)
  name.vb: CreateProgramWithBuiltInKernels(CLContext, UInteger, IntPtr(), String, CLResultCode)
- uid: OpenTK.Compute.OpenCL.CL.CreateProgramWithIL(OpenTK.Compute.OpenCL.CLContext,System.IntPtr,System.UIntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  commentId: M:OpenTK.Compute.OpenCL.CL.CreateProgramWithIL(OpenTK.Compute.OpenCL.CLContext,System.IntPtr,System.UIntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  id: CreateProgramWithIL(OpenTK.Compute.OpenCL.CLContext,System.IntPtr,System.UIntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: CreateProgramWithIL(CLContext, nint, nuint, out CLResultCode)
  nameWithType: CL.CreateProgramWithIL(CLContext, nint, nuint, out CLResultCode)
  fullName: OpenTK.Compute.OpenCL.CL.CreateProgramWithIL(OpenTK.Compute.OpenCL.CLContext, nint, nuint, out OpenTK.Compute.OpenCL.CLResultCode)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 2.1.
  example: []
  syntax:
    content: public static extern CLProgram CreateProgramWithIL(CLContext context, nint il, nuint length, out CLResultCode resultCode)
    parameters:
    - id: context
      type: OpenTK.Compute.OpenCL.CLContext
    - id: il
      type: System.IntPtr
    - id: length
      type: System.UIntPtr
    - id: resultCode
      type: OpenTK.Compute.OpenCL.CLResultCode
    return:
      type: OpenTK.Compute.OpenCL.CLProgram
    content.vb: Public Shared Function CreateProgramWithIL(context As CLContext, il As IntPtr, length As UIntPtr, resultCode As CLResultCode) As CLProgram
  overload: OpenTK.Compute.OpenCL.CL.CreateProgramWithIL*
  nameWithType.vb: CL.CreateProgramWithIL(CLContext, IntPtr, UIntPtr, CLResultCode)
  fullName.vb: OpenTK.Compute.OpenCL.CL.CreateProgramWithIL(OpenTK.Compute.OpenCL.CLContext, System.IntPtr, System.UIntPtr, OpenTK.Compute.OpenCL.CLResultCode)
  name.vb: CreateProgramWithIL(CLContext, IntPtr, UIntPtr, CLResultCode)
- uid: OpenTK.Compute.OpenCL.CL.RetainProgram(OpenTK.Compute.OpenCL.CLProgram)
  commentId: M:OpenTK.Compute.OpenCL.CL.RetainProgram(OpenTK.Compute.OpenCL.CLProgram)
  id: RetainProgram(OpenTK.Compute.OpenCL.CLProgram)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: RetainProgram(CLProgram)
  nameWithType: CL.RetainProgram(CLProgram)
  fullName: OpenTK.Compute.OpenCL.CL.RetainProgram(OpenTK.Compute.OpenCL.CLProgram)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode RetainProgram(CLProgram program)
    parameters:
    - id: program
      type: OpenTK.Compute.OpenCL.CLProgram
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function RetainProgram(program As CLProgram) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.RetainProgram*
- uid: OpenTK.Compute.OpenCL.CL.ReleaseProgram(OpenTK.Compute.OpenCL.CLProgram)
  commentId: M:OpenTK.Compute.OpenCL.CL.ReleaseProgram(OpenTK.Compute.OpenCL.CLProgram)
  id: ReleaseProgram(OpenTK.Compute.OpenCL.CLProgram)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: ReleaseProgram(CLProgram)
  nameWithType: CL.ReleaseProgram(CLProgram)
  fullName: OpenTK.Compute.OpenCL.CL.ReleaseProgram(OpenTK.Compute.OpenCL.CLProgram)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode ReleaseProgram(CLProgram program)
    parameters:
    - id: program
      type: OpenTK.Compute.OpenCL.CLProgram
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function ReleaseProgram(program As CLProgram) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.ReleaseProgram*
- uid: OpenTK.Compute.OpenCL.CL.BuildProgram(OpenTK.Compute.OpenCL.CLProgram,System.UInt32,OpenTK.Compute.OpenCL.CLDevice[],System.String,System.IntPtr,System.IntPtr)
  commentId: M:OpenTK.Compute.OpenCL.CL.BuildProgram(OpenTK.Compute.OpenCL.CLProgram,System.UInt32,OpenTK.Compute.OpenCL.CLDevice[],System.String,System.IntPtr,System.IntPtr)
  id: BuildProgram(OpenTK.Compute.OpenCL.CLProgram,System.UInt32,OpenTK.Compute.OpenCL.CLDevice[],System.String,System.IntPtr,System.IntPtr)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: BuildProgram(CLProgram, uint, CLDevice[], string, nint, nint)
  nameWithType: CL.BuildProgram(CLProgram, uint, CLDevice[], string, nint, nint)
  fullName: OpenTK.Compute.OpenCL.CL.BuildProgram(OpenTK.Compute.OpenCL.CLProgram, uint, OpenTK.Compute.OpenCL.CLDevice[], string, nint, nint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode BuildProgram(CLProgram program, uint numberOfDevices, CLDevice[] deviceList, string options, nint notificationCallback, nint userData)
    parameters:
    - id: program
      type: OpenTK.Compute.OpenCL.CLProgram
    - id: numberOfDevices
      type: System.UInt32
    - id: deviceList
      type: OpenTK.Compute.OpenCL.CLDevice[]
    - id: options
      type: System.String
    - id: notificationCallback
      type: System.IntPtr
    - id: userData
      type: System.IntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function BuildProgram(program As CLProgram, numberOfDevices As UInteger, deviceList As CLDevice(), options As String, notificationCallback As IntPtr, userData As IntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.BuildProgram*
  nameWithType.vb: CL.BuildProgram(CLProgram, UInteger, CLDevice(), String, IntPtr, IntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.BuildProgram(OpenTK.Compute.OpenCL.CLProgram, UInteger, OpenTK.Compute.OpenCL.CLDevice(), String, System.IntPtr, System.IntPtr)
  name.vb: BuildProgram(CLProgram, UInteger, CLDevice(), String, IntPtr, IntPtr)
- uid: OpenTK.Compute.OpenCL.CL.BuildProgram(OpenTK.Compute.OpenCL.CLProgram,OpenTK.Compute.OpenCL.CLDevice[],System.String,OpenTK.Compute.OpenCL.CL.ClEventCallback)
  commentId: M:OpenTK.Compute.OpenCL.CL.BuildProgram(OpenTK.Compute.OpenCL.CLProgram,OpenTK.Compute.OpenCL.CLDevice[],System.String,OpenTK.Compute.OpenCL.CL.ClEventCallback)
  id: BuildProgram(OpenTK.Compute.OpenCL.CLProgram,OpenTK.Compute.OpenCL.CLDevice[],System.String,OpenTK.Compute.OpenCL.CL.ClEventCallback)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: BuildProgram(CLProgram, CLDevice[], string, ClEventCallback)
  nameWithType: CL.BuildProgram(CLProgram, CLDevice[], string, CL.ClEventCallback)
  fullName: OpenTK.Compute.OpenCL.CL.BuildProgram(OpenTK.Compute.OpenCL.CLProgram, OpenTK.Compute.OpenCL.CLDevice[], string, OpenTK.Compute.OpenCL.CL.ClEventCallback)
  type: Method
  source:
    id: BuildProgram
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 668
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static CLResultCode BuildProgram(CLProgram program, CLDevice[] deviceList, string options, CL.ClEventCallback callback)
    parameters:
    - id: program
      type: OpenTK.Compute.OpenCL.CLProgram
    - id: deviceList
      type: OpenTK.Compute.OpenCL.CLDevice[]
    - id: options
      type: System.String
    - id: callback
      type: OpenTK.Compute.OpenCL.CL.ClEventCallback
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function BuildProgram(program As CLProgram, deviceList As CLDevice(), options As String, callback As CL.ClEventCallback) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.BuildProgram*
  nameWithType.vb: CL.BuildProgram(CLProgram, CLDevice(), String, CL.ClEventCallback)
  fullName.vb: OpenTK.Compute.OpenCL.CL.BuildProgram(OpenTK.Compute.OpenCL.CLProgram, OpenTK.Compute.OpenCL.CLDevice(), String, OpenTK.Compute.OpenCL.CL.ClEventCallback)
  name.vb: BuildProgram(CLProgram, CLDevice(), String, ClEventCallback)
- uid: OpenTK.Compute.OpenCL.CL.CompileProgram(OpenTK.Compute.OpenCL.CLProgram,System.UInt32,OpenTK.Compute.OpenCL.CLDevice[],System.String,System.UInt32,System.IntPtr[],System.IntPtr@,System.IntPtr,System.IntPtr)
  commentId: M:OpenTK.Compute.OpenCL.CL.CompileProgram(OpenTK.Compute.OpenCL.CLProgram,System.UInt32,OpenTK.Compute.OpenCL.CLDevice[],System.String,System.UInt32,System.IntPtr[],System.IntPtr@,System.IntPtr,System.IntPtr)
  id: CompileProgram(OpenTK.Compute.OpenCL.CLProgram,System.UInt32,OpenTK.Compute.OpenCL.CLDevice[],System.String,System.UInt32,System.IntPtr[],System.IntPtr@,System.IntPtr,System.IntPtr)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: CompileProgram(CLProgram, uint, CLDevice[], string, uint, nint[], out nint, nint, nint)
  nameWithType: CL.CompileProgram(CLProgram, uint, CLDevice[], string, uint, nint[], out nint, nint, nint)
  fullName: OpenTK.Compute.OpenCL.CL.CompileProgram(OpenTK.Compute.OpenCL.CLProgram, uint, OpenTK.Compute.OpenCL.CLDevice[], string, uint, nint[], out nint, nint, nint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.2.
  example: []
  syntax:
    content: public static extern CLResultCode CompileProgram(CLProgram program, uint numberOfDevices, CLDevice[] deviceList, string options, uint numberOfInputDevices, nint[] inputHeaders, out nint headerIncludeNames, nint notificationCallback, nint userData)
    parameters:
    - id: program
      type: OpenTK.Compute.OpenCL.CLProgram
    - id: numberOfDevices
      type: System.UInt32
    - id: deviceList
      type: OpenTK.Compute.OpenCL.CLDevice[]
    - id: options
      type: System.String
    - id: numberOfInputDevices
      type: System.UInt32
    - id: inputHeaders
      type: System.IntPtr[]
    - id: headerIncludeNames
      type: System.IntPtr
    - id: notificationCallback
      type: System.IntPtr
    - id: userData
      type: System.IntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function CompileProgram(program As CLProgram, numberOfDevices As UInteger, deviceList As CLDevice(), options As String, numberOfInputDevices As UInteger, inputHeaders As IntPtr(), headerIncludeNames As IntPtr, notificationCallback As IntPtr, userData As IntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.CompileProgram*
  nameWithType.vb: CL.CompileProgram(CLProgram, UInteger, CLDevice(), String, UInteger, IntPtr(), IntPtr, IntPtr, IntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.CompileProgram(OpenTK.Compute.OpenCL.CLProgram, UInteger, OpenTK.Compute.OpenCL.CLDevice(), String, UInteger, System.IntPtr(), System.IntPtr, System.IntPtr, System.IntPtr)
  name.vb: CompileProgram(CLProgram, UInteger, CLDevice(), String, UInteger, IntPtr(), IntPtr, IntPtr, IntPtr)
- uid: OpenTK.Compute.OpenCL.CL.LinkProgram(OpenTK.Compute.OpenCL.CLContext,System.UInt32,OpenTK.Compute.OpenCL.CLDevice[],System.String,System.UInt32,OpenTK.Compute.OpenCL.CLProgram[],System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  commentId: M:OpenTK.Compute.OpenCL.CL.LinkProgram(OpenTK.Compute.OpenCL.CLContext,System.UInt32,OpenTK.Compute.OpenCL.CLDevice[],System.String,System.UInt32,OpenTK.Compute.OpenCL.CLProgram[],System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  id: LinkProgram(OpenTK.Compute.OpenCL.CLContext,System.UInt32,OpenTK.Compute.OpenCL.CLDevice[],System.String,System.UInt32,OpenTK.Compute.OpenCL.CLProgram[],System.IntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: LinkProgram(CLContext, uint, CLDevice[], string, uint, CLProgram[], nint, nint, out CLResultCode)
  nameWithType: CL.LinkProgram(CLContext, uint, CLDevice[], string, uint, CLProgram[], nint, nint, out CLResultCode)
  fullName: OpenTK.Compute.OpenCL.CL.LinkProgram(OpenTK.Compute.OpenCL.CLContext, uint, OpenTK.Compute.OpenCL.CLDevice[], string, uint, OpenTK.Compute.OpenCL.CLProgram[], nint, nint, out OpenTK.Compute.OpenCL.CLResultCode)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.2.
  example: []
  syntax:
    content: public static extern CLProgram LinkProgram(CLContext context, uint numberOfDevices, CLDevice[] deviceList, string options, uint numberOfPrograms, CLProgram[] inputPrograms, nint notificationCallback, nint userData, out CLResultCode resultCode)
    parameters:
    - id: context
      type: OpenTK.Compute.OpenCL.CLContext
    - id: numberOfDevices
      type: System.UInt32
    - id: deviceList
      type: OpenTK.Compute.OpenCL.CLDevice[]
    - id: options
      type: System.String
    - id: numberOfPrograms
      type: System.UInt32
    - id: inputPrograms
      type: OpenTK.Compute.OpenCL.CLProgram[]
    - id: notificationCallback
      type: System.IntPtr
    - id: userData
      type: System.IntPtr
    - id: resultCode
      type: OpenTK.Compute.OpenCL.CLResultCode
    return:
      type: OpenTK.Compute.OpenCL.CLProgram
    content.vb: Public Shared Function LinkProgram(context As CLContext, numberOfDevices As UInteger, deviceList As CLDevice(), options As String, numberOfPrograms As UInteger, inputPrograms As CLProgram(), notificationCallback As IntPtr, userData As IntPtr, resultCode As CLResultCode) As CLProgram
  overload: OpenTK.Compute.OpenCL.CL.LinkProgram*
  nameWithType.vb: CL.LinkProgram(CLContext, UInteger, CLDevice(), String, UInteger, CLProgram(), IntPtr, IntPtr, CLResultCode)
  fullName.vb: OpenTK.Compute.OpenCL.CL.LinkProgram(OpenTK.Compute.OpenCL.CLContext, UInteger, OpenTK.Compute.OpenCL.CLDevice(), String, UInteger, OpenTK.Compute.OpenCL.CLProgram(), System.IntPtr, System.IntPtr, OpenTK.Compute.OpenCL.CLResultCode)
  name.vb: LinkProgram(CLContext, UInteger, CLDevice(), String, UInteger, CLProgram(), IntPtr, IntPtr, CLResultCode)
- uid: OpenTK.Compute.OpenCL.CL.SetProgramReleaseCallback(OpenTK.Compute.OpenCL.CLProgram,System.IntPtr,System.IntPtr)
  commentId: M:OpenTK.Compute.OpenCL.CL.SetProgramReleaseCallback(OpenTK.Compute.OpenCL.CLProgram,System.IntPtr,System.IntPtr)
  id: SetProgramReleaseCallback(OpenTK.Compute.OpenCL.CLProgram,System.IntPtr,System.IntPtr)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: SetProgramReleaseCallback(CLProgram, nint, nint)
  nameWithType: CL.SetProgramReleaseCallback(CLProgram, nint, nint)
  fullName: OpenTK.Compute.OpenCL.CL.SetProgramReleaseCallback(OpenTK.Compute.OpenCL.CLProgram, nint, nint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 2.2.
  example: []
  syntax:
    content: public static extern CLResultCode SetProgramReleaseCallback(CLProgram program, nint notificationCallback, nint userData)
    parameters:
    - id: program
      type: OpenTK.Compute.OpenCL.CLProgram
    - id: notificationCallback
      type: System.IntPtr
    - id: userData
      type: System.IntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function SetProgramReleaseCallback(program As CLProgram, notificationCallback As IntPtr, userData As IntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.SetProgramReleaseCallback*
  nameWithType.vb: CL.SetProgramReleaseCallback(CLProgram, IntPtr, IntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.SetProgramReleaseCallback(OpenTK.Compute.OpenCL.CLProgram, System.IntPtr, System.IntPtr)
  name.vb: SetProgramReleaseCallback(CLProgram, IntPtr, IntPtr)
- uid: OpenTK.Compute.OpenCL.CL.SetProgramSpecializationConstant(OpenTK.Compute.OpenCL.CLProgram,System.UInt32,System.UIntPtr,System.IntPtr)
  commentId: M:OpenTK.Compute.OpenCL.CL.SetProgramSpecializationConstant(OpenTK.Compute.OpenCL.CLProgram,System.UInt32,System.UIntPtr,System.IntPtr)
  id: SetProgramSpecializationConstant(OpenTK.Compute.OpenCL.CLProgram,System.UInt32,System.UIntPtr,System.IntPtr)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: SetProgramSpecializationConstant(CLProgram, uint, nuint, nint)
  nameWithType: CL.SetProgramSpecializationConstant(CLProgram, uint, nuint, nint)
  fullName: OpenTK.Compute.OpenCL.CL.SetProgramSpecializationConstant(OpenTK.Compute.OpenCL.CLProgram, uint, nuint, nint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 2.2.
  example: []
  syntax:
    content: public static extern CLResultCode SetProgramSpecializationConstant(CLProgram program, uint specId, nuint specSize, nint specValue)
    parameters:
    - id: program
      type: OpenTK.Compute.OpenCL.CLProgram
    - id: specId
      type: System.UInt32
    - id: specSize
      type: System.UIntPtr
    - id: specValue
      type: System.IntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function SetProgramSpecializationConstant(program As CLProgram, specId As UInteger, specSize As UIntPtr, specValue As IntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.SetProgramSpecializationConstant*
  nameWithType.vb: CL.SetProgramSpecializationConstant(CLProgram, UInteger, UIntPtr, IntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.SetProgramSpecializationConstant(OpenTK.Compute.OpenCL.CLProgram, UInteger, System.UIntPtr, System.IntPtr)
  name.vb: SetProgramSpecializationConstant(CLProgram, UInteger, UIntPtr, IntPtr)
- uid: OpenTK.Compute.OpenCL.CL.UnloadPlatformCompiler(OpenTK.Compute.OpenCL.CLPlatform)
  commentId: M:OpenTK.Compute.OpenCL.CL.UnloadPlatformCompiler(OpenTK.Compute.OpenCL.CLPlatform)
  id: UnloadPlatformCompiler(OpenTK.Compute.OpenCL.CLPlatform)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: UnloadPlatformCompiler(CLPlatform)
  nameWithType: CL.UnloadPlatformCompiler(CLPlatform)
  fullName: OpenTK.Compute.OpenCL.CL.UnloadPlatformCompiler(OpenTK.Compute.OpenCL.CLPlatform)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.2.
  example: []
  syntax:
    content: public static extern CLResultCode UnloadPlatformCompiler(CLPlatform platform)
    parameters:
    - id: platform
      type: OpenTK.Compute.OpenCL.CLPlatform
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function UnloadPlatformCompiler(platform As CLPlatform) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.UnloadPlatformCompiler*
- uid: OpenTK.Compute.OpenCL.CL.GetProgramInfo(OpenTK.Compute.OpenCL.CLProgram,OpenTK.Compute.OpenCL.ProgramInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetProgramInfo(OpenTK.Compute.OpenCL.CLProgram,OpenTK.Compute.OpenCL.ProgramInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  id: GetProgramInfo(OpenTK.Compute.OpenCL.CLProgram,OpenTK.Compute.OpenCL.ProgramInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetProgramInfo(CLProgram, ProgramInfo, nuint, byte[], out nuint)
  nameWithType: CL.GetProgramInfo(CLProgram, ProgramInfo, nuint, byte[], out nuint)
  fullName: OpenTK.Compute.OpenCL.CL.GetProgramInfo(OpenTK.Compute.OpenCL.CLProgram, OpenTK.Compute.OpenCL.ProgramInfo, nuint, byte[], out nuint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode GetProgramInfo(CLProgram program, ProgramInfo paramName, nuint paramValueSize, byte[] paramValue, out nuint paramValueSizeReturned)
    parameters:
    - id: program
      type: OpenTK.Compute.OpenCL.CLProgram
    - id: paramName
      type: OpenTK.Compute.OpenCL.ProgramInfo
    - id: paramValueSize
      type: System.UIntPtr
    - id: paramValue
      type: System.Byte[]
    - id: paramValueSizeReturned
      type: System.UIntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetProgramInfo(program As CLProgram, paramName As ProgramInfo, paramValueSize As UIntPtr, paramValue As Byte(), paramValueSizeReturned As UIntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetProgramInfo*
  nameWithType.vb: CL.GetProgramInfo(CLProgram, ProgramInfo, UIntPtr, Byte(), UIntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetProgramInfo(OpenTK.Compute.OpenCL.CLProgram, OpenTK.Compute.OpenCL.ProgramInfo, System.UIntPtr, Byte(), System.UIntPtr)
  name.vb: GetProgramInfo(CLProgram, ProgramInfo, UIntPtr, Byte(), UIntPtr)
- uid: OpenTK.Compute.OpenCL.CL.GetProgramInfo(OpenTK.Compute.OpenCL.CLProgram,OpenTK.Compute.OpenCL.ProgramInfo,System.Byte[]@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetProgramInfo(OpenTK.Compute.OpenCL.CLProgram,OpenTK.Compute.OpenCL.ProgramInfo,System.Byte[]@)
  id: GetProgramInfo(OpenTK.Compute.OpenCL.CLProgram,OpenTK.Compute.OpenCL.ProgramInfo,System.Byte[]@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetProgramInfo(CLProgram, ProgramInfo, out byte[])
  nameWithType: CL.GetProgramInfo(CLProgram, ProgramInfo, out byte[])
  fullName: OpenTK.Compute.OpenCL.CL.GetProgramInfo(OpenTK.Compute.OpenCL.CLProgram, OpenTK.Compute.OpenCL.ProgramInfo, out byte[])
  type: Method
  source:
    id: GetProgramInfo
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 725
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static CLResultCode GetProgramInfo(CLProgram program, ProgramInfo paramName, out byte[] paramValue)
    parameters:
    - id: program
      type: OpenTK.Compute.OpenCL.CLProgram
    - id: paramName
      type: OpenTK.Compute.OpenCL.ProgramInfo
    - id: paramValue
      type: System.Byte[]
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetProgramInfo(program As CLProgram, paramName As ProgramInfo, paramValue As Byte()) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetProgramInfo*
  nameWithType.vb: CL.GetProgramInfo(CLProgram, ProgramInfo, Byte())
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetProgramInfo(OpenTK.Compute.OpenCL.CLProgram, OpenTK.Compute.OpenCL.ProgramInfo, Byte())
  name.vb: GetProgramInfo(CLProgram, ProgramInfo, Byte())
- uid: OpenTK.Compute.OpenCL.CL.GetProgramBuildInfo(OpenTK.Compute.OpenCL.CLProgram,OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.ProgramBuildInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetProgramBuildInfo(OpenTK.Compute.OpenCL.CLProgram,OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.ProgramBuildInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  id: GetProgramBuildInfo(OpenTK.Compute.OpenCL.CLProgram,OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.ProgramBuildInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetProgramBuildInfo(CLProgram, CLDevice, ProgramBuildInfo, nuint, byte[], out nuint)
  nameWithType: CL.GetProgramBuildInfo(CLProgram, CLDevice, ProgramBuildInfo, nuint, byte[], out nuint)
  fullName: OpenTK.Compute.OpenCL.CL.GetProgramBuildInfo(OpenTK.Compute.OpenCL.CLProgram, OpenTK.Compute.OpenCL.CLDevice, OpenTK.Compute.OpenCL.ProgramBuildInfo, nuint, byte[], out nuint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode GetProgramBuildInfo(CLProgram program, CLDevice device, ProgramBuildInfo paramName, nuint paramValueSize, byte[] paramValue, out nuint paramValueSizeReturned)
    parameters:
    - id: program
      type: OpenTK.Compute.OpenCL.CLProgram
    - id: device
      type: OpenTK.Compute.OpenCL.CLDevice
    - id: paramName
      type: OpenTK.Compute.OpenCL.ProgramBuildInfo
    - id: paramValueSize
      type: System.UIntPtr
    - id: paramValue
      type: System.Byte[]
    - id: paramValueSizeReturned
      type: System.UIntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetProgramBuildInfo(program As CLProgram, device As CLDevice, paramName As ProgramBuildInfo, paramValueSize As UIntPtr, paramValue As Byte(), paramValueSizeReturned As UIntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetProgramBuildInfo*
  nameWithType.vb: CL.GetProgramBuildInfo(CLProgram, CLDevice, ProgramBuildInfo, UIntPtr, Byte(), UIntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetProgramBuildInfo(OpenTK.Compute.OpenCL.CLProgram, OpenTK.Compute.OpenCL.CLDevice, OpenTK.Compute.OpenCL.ProgramBuildInfo, System.UIntPtr, Byte(), System.UIntPtr)
  name.vb: GetProgramBuildInfo(CLProgram, CLDevice, ProgramBuildInfo, UIntPtr, Byte(), UIntPtr)
- uid: OpenTK.Compute.OpenCL.CL.GetProgramBuildInfo(OpenTK.Compute.OpenCL.CLProgram,OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.ProgramBuildInfo,System.Byte[]@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetProgramBuildInfo(OpenTK.Compute.OpenCL.CLProgram,OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.ProgramBuildInfo,System.Byte[]@)
  id: GetProgramBuildInfo(OpenTK.Compute.OpenCL.CLProgram,OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.ProgramBuildInfo,System.Byte[]@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetProgramBuildInfo(CLProgram, CLDevice, ProgramBuildInfo, out byte[])
  nameWithType: CL.GetProgramBuildInfo(CLProgram, CLDevice, ProgramBuildInfo, out byte[])
  fullName: OpenTK.Compute.OpenCL.CL.GetProgramBuildInfo(OpenTK.Compute.OpenCL.CLProgram, OpenTK.Compute.OpenCL.CLDevice, OpenTK.Compute.OpenCL.ProgramBuildInfo, out byte[])
  type: Method
  source:
    id: GetProgramBuildInfo
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 743
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static CLResultCode GetProgramBuildInfo(CLProgram program, CLDevice device, ProgramBuildInfo paramName, out byte[] paramValue)
    parameters:
    - id: program
      type: OpenTK.Compute.OpenCL.CLProgram
    - id: device
      type: OpenTK.Compute.OpenCL.CLDevice
    - id: paramName
      type: OpenTK.Compute.OpenCL.ProgramBuildInfo
    - id: paramValue
      type: System.Byte[]
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetProgramBuildInfo(program As CLProgram, device As CLDevice, paramName As ProgramBuildInfo, paramValue As Byte()) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetProgramBuildInfo*
  nameWithType.vb: CL.GetProgramBuildInfo(CLProgram, CLDevice, ProgramBuildInfo, Byte())
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetProgramBuildInfo(OpenTK.Compute.OpenCL.CLProgram, OpenTK.Compute.OpenCL.CLDevice, OpenTK.Compute.OpenCL.ProgramBuildInfo, Byte())
  name.vb: GetProgramBuildInfo(CLProgram, CLDevice, ProgramBuildInfo, Byte())
- uid: OpenTK.Compute.OpenCL.CL.CreateKernel(OpenTK.Compute.OpenCL.CLProgram,System.String,OpenTK.Compute.OpenCL.CLResultCode@)
  commentId: M:OpenTK.Compute.OpenCL.CL.CreateKernel(OpenTK.Compute.OpenCL.CLProgram,System.String,OpenTK.Compute.OpenCL.CLResultCode@)
  id: CreateKernel(OpenTK.Compute.OpenCL.CLProgram,System.String,OpenTK.Compute.OpenCL.CLResultCode@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: CreateKernel(CLProgram, string, out CLResultCode)
  nameWithType: CL.CreateKernel(CLProgram, string, out CLResultCode)
  fullName: OpenTK.Compute.OpenCL.CL.CreateKernel(OpenTK.Compute.OpenCL.CLProgram, string, out OpenTK.Compute.OpenCL.CLResultCode)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLKernel CreateKernel(CLProgram program, string name, out CLResultCode resultCode)
    parameters:
    - id: program
      type: OpenTK.Compute.OpenCL.CLProgram
    - id: name
      type: System.String
    - id: resultCode
      type: OpenTK.Compute.OpenCL.CLResultCode
    return:
      type: OpenTK.Compute.OpenCL.CLKernel
    content.vb: Public Shared Function CreateKernel(program As CLProgram, name As String, resultCode As CLResultCode) As CLKernel
  overload: OpenTK.Compute.OpenCL.CL.CreateKernel*
  nameWithType.vb: CL.CreateKernel(CLProgram, String, CLResultCode)
  fullName.vb: OpenTK.Compute.OpenCL.CL.CreateKernel(OpenTK.Compute.OpenCL.CLProgram, String, OpenTK.Compute.OpenCL.CLResultCode)
  name.vb: CreateKernel(CLProgram, String, CLResultCode)
- uid: OpenTK.Compute.OpenCL.CL.CreateKernelsInProgram(OpenTK.Compute.OpenCL.CLProgram,System.UInt32,OpenTK.Compute.OpenCL.CLKernel[],System.UInt32@)
  commentId: M:OpenTK.Compute.OpenCL.CL.CreateKernelsInProgram(OpenTK.Compute.OpenCL.CLProgram,System.UInt32,OpenTK.Compute.OpenCL.CLKernel[],System.UInt32@)
  id: CreateKernelsInProgram(OpenTK.Compute.OpenCL.CLProgram,System.UInt32,OpenTK.Compute.OpenCL.CLKernel[],System.UInt32@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: CreateKernelsInProgram(CLProgram, uint, CLKernel[], out uint)
  nameWithType: CL.CreateKernelsInProgram(CLProgram, uint, CLKernel[], out uint)
  fullName: OpenTK.Compute.OpenCL.CL.CreateKernelsInProgram(OpenTK.Compute.OpenCL.CLProgram, uint, OpenTK.Compute.OpenCL.CLKernel[], out uint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode CreateKernelsInProgram(CLProgram program, uint numberOfKernels, CLKernel[] kernels, out uint numberOfKernelsReturned)
    parameters:
    - id: program
      type: OpenTK.Compute.OpenCL.CLProgram
    - id: numberOfKernels
      type: System.UInt32
    - id: kernels
      type: OpenTK.Compute.OpenCL.CLKernel[]
    - id: numberOfKernelsReturned
      type: System.UInt32
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function CreateKernelsInProgram(program As CLProgram, numberOfKernels As UInteger, kernels As CLKernel(), numberOfKernelsReturned As UInteger) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.CreateKernelsInProgram*
  nameWithType.vb: CL.CreateKernelsInProgram(CLProgram, UInteger, CLKernel(), UInteger)
  fullName.vb: OpenTK.Compute.OpenCL.CL.CreateKernelsInProgram(OpenTK.Compute.OpenCL.CLProgram, UInteger, OpenTK.Compute.OpenCL.CLKernel(), UInteger)
  name.vb: CreateKernelsInProgram(CLProgram, UInteger, CLKernel(), UInteger)
- uid: OpenTK.Compute.OpenCL.CL.CreateKernelsInProgram(OpenTK.Compute.OpenCL.CLProgram,OpenTK.Compute.OpenCL.CLKernel[]@)
  commentId: M:OpenTK.Compute.OpenCL.CL.CreateKernelsInProgram(OpenTK.Compute.OpenCL.CLProgram,OpenTK.Compute.OpenCL.CLKernel[]@)
  id: CreateKernelsInProgram(OpenTK.Compute.OpenCL.CLProgram,OpenTK.Compute.OpenCL.CLKernel[]@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: CreateKernelsInProgram(CLProgram, out CLKernel[])
  nameWithType: CL.CreateKernelsInProgram(CLProgram, out CLKernel[])
  fullName: OpenTK.Compute.OpenCL.CL.CreateKernelsInProgram(OpenTK.Compute.OpenCL.CLProgram, out OpenTK.Compute.OpenCL.CLKernel[])
  type: Method
  source:
    id: CreateKernelsInProgram
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 773
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static CLResultCode CreateKernelsInProgram(CLProgram program, out CLKernel[] kernels)
    parameters:
    - id: program
      type: OpenTK.Compute.OpenCL.CLProgram
    - id: kernels
      type: OpenTK.Compute.OpenCL.CLKernel[]
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function CreateKernelsInProgram(program As CLProgram, kernels As CLKernel()) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.CreateKernelsInProgram*
  nameWithType.vb: CL.CreateKernelsInProgram(CLProgram, CLKernel())
  fullName.vb: OpenTK.Compute.OpenCL.CL.CreateKernelsInProgram(OpenTK.Compute.OpenCL.CLProgram, OpenTK.Compute.OpenCL.CLKernel())
  name.vb: CreateKernelsInProgram(CLProgram, CLKernel())
- uid: OpenTK.Compute.OpenCL.CL.CloneKernel(OpenTK.Compute.OpenCL.CLKernel,OpenTK.Compute.OpenCL.CLResultCode@)
  commentId: M:OpenTK.Compute.OpenCL.CL.CloneKernel(OpenTK.Compute.OpenCL.CLKernel,OpenTK.Compute.OpenCL.CLResultCode@)
  id: CloneKernel(OpenTK.Compute.OpenCL.CLKernel,OpenTK.Compute.OpenCL.CLResultCode@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: CloneKernel(CLKernel, out CLResultCode)
  nameWithType: CL.CloneKernel(CLKernel, out CLResultCode)
  fullName: OpenTK.Compute.OpenCL.CL.CloneKernel(OpenTK.Compute.OpenCL.CLKernel, out OpenTK.Compute.OpenCL.CLResultCode)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 2.1.
  example: []
  syntax:
    content: public static extern CLKernel CloneKernel(CLKernel sourceKernel, out CLResultCode resultCode)
    parameters:
    - id: sourceKernel
      type: OpenTK.Compute.OpenCL.CLKernel
    - id: resultCode
      type: OpenTK.Compute.OpenCL.CLResultCode
    return:
      type: OpenTK.Compute.OpenCL.CLKernel
    content.vb: Public Shared Function CloneKernel(sourceKernel As CLKernel, resultCode As CLResultCode) As CLKernel
  overload: OpenTK.Compute.OpenCL.CL.CloneKernel*
  nameWithType.vb: CL.CloneKernel(CLKernel, CLResultCode)
  fullName.vb: OpenTK.Compute.OpenCL.CL.CloneKernel(OpenTK.Compute.OpenCL.CLKernel, OpenTK.Compute.OpenCL.CLResultCode)
  name.vb: CloneKernel(CLKernel, CLResultCode)
- uid: OpenTK.Compute.OpenCL.CL.RetainKernel(OpenTK.Compute.OpenCL.CLKernel)
  commentId: M:OpenTK.Compute.OpenCL.CL.RetainKernel(OpenTK.Compute.OpenCL.CLKernel)
  id: RetainKernel(OpenTK.Compute.OpenCL.CLKernel)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: RetainKernel(CLKernel)
  nameWithType: CL.RetainKernel(CLKernel)
  fullName: OpenTK.Compute.OpenCL.CL.RetainKernel(OpenTK.Compute.OpenCL.CLKernel)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode RetainKernel(CLKernel kernel)
    parameters:
    - id: kernel
      type: OpenTK.Compute.OpenCL.CLKernel
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function RetainKernel(kernel As CLKernel) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.RetainKernel*
- uid: OpenTK.Compute.OpenCL.CL.ReleaseKernel(OpenTK.Compute.OpenCL.CLKernel)
  commentId: M:OpenTK.Compute.OpenCL.CL.ReleaseKernel(OpenTK.Compute.OpenCL.CLKernel)
  id: ReleaseKernel(OpenTK.Compute.OpenCL.CLKernel)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: ReleaseKernel(CLKernel)
  nameWithType: CL.ReleaseKernel(CLKernel)
  fullName: OpenTK.Compute.OpenCL.CL.ReleaseKernel(OpenTK.Compute.OpenCL.CLKernel)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode ReleaseKernel(CLKernel kernel)
    parameters:
    - id: kernel
      type: OpenTK.Compute.OpenCL.CLKernel
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function ReleaseKernel(kernel As CLKernel) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.ReleaseKernel*
- uid: OpenTK.Compute.OpenCL.CL.SetKernelArg(OpenTK.Compute.OpenCL.CLKernel,System.UInt32,System.UIntPtr,System.IntPtr)
  commentId: M:OpenTK.Compute.OpenCL.CL.SetKernelArg(OpenTK.Compute.OpenCL.CLKernel,System.UInt32,System.UIntPtr,System.IntPtr)
  id: SetKernelArg(OpenTK.Compute.OpenCL.CLKernel,System.UInt32,System.UIntPtr,System.IntPtr)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: SetKernelArg(CLKernel, uint, nuint, nint)
  nameWithType: CL.SetKernelArg(CLKernel, uint, nuint, nint)
  fullName: OpenTK.Compute.OpenCL.CL.SetKernelArg(OpenTK.Compute.OpenCL.CLKernel, uint, nuint, nint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode SetKernelArg(CLKernel kernel, uint argumentIndex, nuint argumentSize, nint argumentValuePointer)
    parameters:
    - id: kernel
      type: OpenTK.Compute.OpenCL.CLKernel
    - id: argumentIndex
      type: System.UInt32
    - id: argumentSize
      type: System.UIntPtr
    - id: argumentValuePointer
      type: System.IntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function SetKernelArg(kernel As CLKernel, argumentIndex As UInteger, argumentSize As UIntPtr, argumentValuePointer As IntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.SetKernelArg*
  nameWithType.vb: CL.SetKernelArg(CLKernel, UInteger, UIntPtr, IntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.SetKernelArg(OpenTK.Compute.OpenCL.CLKernel, UInteger, System.UIntPtr, System.IntPtr)
  name.vb: SetKernelArg(CLKernel, UInteger, UIntPtr, IntPtr)
- uid: OpenTK.Compute.OpenCL.CL.SetKernelArg``1(OpenTK.Compute.OpenCL.CLKernel,System.UInt32,``0@)
  commentId: M:OpenTK.Compute.OpenCL.CL.SetKernelArg``1(OpenTK.Compute.OpenCL.CLKernel,System.UInt32,``0@)
  id: SetKernelArg``1(OpenTK.Compute.OpenCL.CLKernel,System.UInt32,``0@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: SetKernelArg<T>(CLKernel, uint, in T)
  nameWithType: CL.SetKernelArg<T>(CLKernel, uint, in T)
  fullName: OpenTK.Compute.OpenCL.CL.SetKernelArg<T>(OpenTK.Compute.OpenCL.CLKernel, uint, in T)
  type: Method
  source:
    id: SetKernelArg
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 809
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: 'public static CLResultCode SetKernelArg<T>(CLKernel kernel, uint argumentIndex, in T argument) where T : unmanaged'
    parameters:
    - id: kernel
      type: OpenTK.Compute.OpenCL.CLKernel
    - id: argumentIndex
      type: System.UInt32
    - id: argument
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function SetKernelArg(Of T As Structure)(kernel As CLKernel, argumentIndex As UInteger, argument As T) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.SetKernelArg*
  nameWithType.vb: CL.SetKernelArg(Of T)(CLKernel, UInteger, T)
  fullName.vb: OpenTK.Compute.OpenCL.CL.SetKernelArg(Of T)(OpenTK.Compute.OpenCL.CLKernel, UInteger, T)
  name.vb: SetKernelArg(Of T)(CLKernel, UInteger, T)
- uid: OpenTK.Compute.OpenCL.CL.SetKernelArgSVMPointer(OpenTK.Compute.OpenCL.CLKernel,System.UInt32,System.IntPtr)
  commentId: M:OpenTK.Compute.OpenCL.CL.SetKernelArgSVMPointer(OpenTK.Compute.OpenCL.CLKernel,System.UInt32,System.IntPtr)
  id: SetKernelArgSVMPointer(OpenTK.Compute.OpenCL.CLKernel,System.UInt32,System.IntPtr)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: SetKernelArgSVMPointer(CLKernel, uint, nint)
  nameWithType: CL.SetKernelArgSVMPointer(CLKernel, uint, nint)
  fullName: OpenTK.Compute.OpenCL.CL.SetKernelArgSVMPointer(OpenTK.Compute.OpenCL.CLKernel, uint, nint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 2.0.
  example: []
  syntax:
    content: public static extern CLResultCode SetKernelArgSVMPointer(CLKernel kernel, uint argumentIndex, nint argumentValuePointer)
    parameters:
    - id: kernel
      type: OpenTK.Compute.OpenCL.CLKernel
    - id: argumentIndex
      type: System.UInt32
    - id: argumentValuePointer
      type: System.IntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function SetKernelArgSVMPointer(kernel As CLKernel, argumentIndex As UInteger, argumentValuePointer As IntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.SetKernelArgSVMPointer*
  nameWithType.vb: CL.SetKernelArgSVMPointer(CLKernel, UInteger, IntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.SetKernelArgSVMPointer(OpenTK.Compute.OpenCL.CLKernel, UInteger, System.IntPtr)
  name.vb: SetKernelArgSVMPointer(CLKernel, UInteger, IntPtr)
- uid: OpenTK.Compute.OpenCL.CL.SetKernelExecInfo(OpenTK.Compute.OpenCL.CLKernel,OpenTK.Compute.OpenCL.KernelExecInfo,System.UIntPtr,System.IntPtr)
  commentId: M:OpenTK.Compute.OpenCL.CL.SetKernelExecInfo(OpenTK.Compute.OpenCL.CLKernel,OpenTK.Compute.OpenCL.KernelExecInfo,System.UIntPtr,System.IntPtr)
  id: SetKernelExecInfo(OpenTK.Compute.OpenCL.CLKernel,OpenTK.Compute.OpenCL.KernelExecInfo,System.UIntPtr,System.IntPtr)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: SetKernelExecInfo(CLKernel, KernelExecInfo, nuint, nint)
  nameWithType: CL.SetKernelExecInfo(CLKernel, KernelExecInfo, nuint, nint)
  fullName: OpenTK.Compute.OpenCL.CL.SetKernelExecInfo(OpenTK.Compute.OpenCL.CLKernel, OpenTK.Compute.OpenCL.KernelExecInfo, nuint, nint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 2.0.
  example: []
  syntax:
    content: public static extern CLResultCode SetKernelExecInfo(CLKernel kernel, KernelExecInfo paramName, nuint paramValueSize, nint paramValue)
    parameters:
    - id: kernel
      type: OpenTK.Compute.OpenCL.CLKernel
    - id: paramName
      type: OpenTK.Compute.OpenCL.KernelExecInfo
    - id: paramValueSize
      type: System.UIntPtr
    - id: paramValue
      type: System.IntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function SetKernelExecInfo(kernel As CLKernel, paramName As KernelExecInfo, paramValueSize As UIntPtr, paramValue As IntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.SetKernelExecInfo*
  nameWithType.vb: CL.SetKernelExecInfo(CLKernel, KernelExecInfo, UIntPtr, IntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.SetKernelExecInfo(OpenTK.Compute.OpenCL.CLKernel, OpenTK.Compute.OpenCL.KernelExecInfo, System.UIntPtr, System.IntPtr)
  name.vb: SetKernelExecInfo(CLKernel, KernelExecInfo, UIntPtr, IntPtr)
- uid: OpenTK.Compute.OpenCL.CL.GetKernelInfo(OpenTK.Compute.OpenCL.CLKernel,OpenTK.Compute.OpenCL.KernelInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetKernelInfo(OpenTK.Compute.OpenCL.CLKernel,OpenTK.Compute.OpenCL.KernelInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  id: GetKernelInfo(OpenTK.Compute.OpenCL.CLKernel,OpenTK.Compute.OpenCL.KernelInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetKernelInfo(CLKernel, KernelInfo, nuint, byte[], out nuint)
  nameWithType: CL.GetKernelInfo(CLKernel, KernelInfo, nuint, byte[], out nuint)
  fullName: OpenTK.Compute.OpenCL.CL.GetKernelInfo(OpenTK.Compute.OpenCL.CLKernel, OpenTK.Compute.OpenCL.KernelInfo, nuint, byte[], out nuint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode GetKernelInfo(CLKernel kernel, KernelInfo paramName, nuint paramValueSize, byte[] paramValue, out nuint paramSizeReturned)
    parameters:
    - id: kernel
      type: OpenTK.Compute.OpenCL.CLKernel
    - id: paramName
      type: OpenTK.Compute.OpenCL.KernelInfo
    - id: paramValueSize
      type: System.UIntPtr
    - id: paramValue
      type: System.Byte[]
    - id: paramSizeReturned
      type: System.UIntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetKernelInfo(kernel As CLKernel, paramName As KernelInfo, paramValueSize As UIntPtr, paramValue As Byte(), paramSizeReturned As UIntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetKernelInfo*
  nameWithType.vb: CL.GetKernelInfo(CLKernel, KernelInfo, UIntPtr, Byte(), UIntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetKernelInfo(OpenTK.Compute.OpenCL.CLKernel, OpenTK.Compute.OpenCL.KernelInfo, System.UIntPtr, Byte(), System.UIntPtr)
  name.vb: GetKernelInfo(CLKernel, KernelInfo, UIntPtr, Byte(), UIntPtr)
- uid: OpenTK.Compute.OpenCL.CL.GetKernelInfo(OpenTK.Compute.OpenCL.CLKernel,OpenTK.Compute.OpenCL.KernelInfo,System.Byte[]@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetKernelInfo(OpenTK.Compute.OpenCL.CLKernel,OpenTK.Compute.OpenCL.KernelInfo,System.Byte[]@)
  id: GetKernelInfo(OpenTK.Compute.OpenCL.CLKernel,OpenTK.Compute.OpenCL.KernelInfo,System.Byte[]@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetKernelInfo(CLKernel, KernelInfo, out byte[])
  nameWithType: CL.GetKernelInfo(CLKernel, KernelInfo, out byte[])
  fullName: OpenTK.Compute.OpenCL.CL.GetKernelInfo(OpenTK.Compute.OpenCL.CLKernel, OpenTK.Compute.OpenCL.KernelInfo, out byte[])
  type: Method
  source:
    id: GetKernelInfo
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 842
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static CLResultCode GetKernelInfo(CLKernel kernel, KernelInfo paramName, out byte[] paramValue)
    parameters:
    - id: kernel
      type: OpenTK.Compute.OpenCL.CLKernel
    - id: paramName
      type: OpenTK.Compute.OpenCL.KernelInfo
    - id: paramValue
      type: System.Byte[]
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetKernelInfo(kernel As CLKernel, paramName As KernelInfo, paramValue As Byte()) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetKernelInfo*
  nameWithType.vb: CL.GetKernelInfo(CLKernel, KernelInfo, Byte())
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetKernelInfo(OpenTK.Compute.OpenCL.CLKernel, OpenTK.Compute.OpenCL.KernelInfo, Byte())
  name.vb: GetKernelInfo(CLKernel, KernelInfo, Byte())
- uid: OpenTK.Compute.OpenCL.CL.GetKernelArgInfo(OpenTK.Compute.OpenCL.CLKernel,System.UInt32,OpenTK.Compute.OpenCL.KernelArgInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetKernelArgInfo(OpenTK.Compute.OpenCL.CLKernel,System.UInt32,OpenTK.Compute.OpenCL.KernelArgInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  id: GetKernelArgInfo(OpenTK.Compute.OpenCL.CLKernel,System.UInt32,OpenTK.Compute.OpenCL.KernelArgInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetKernelArgInfo(CLKernel, uint, KernelArgInfo, nuint, byte[], out nuint)
  nameWithType: CL.GetKernelArgInfo(CLKernel, uint, KernelArgInfo, nuint, byte[], out nuint)
  fullName: OpenTK.Compute.OpenCL.CL.GetKernelArgInfo(OpenTK.Compute.OpenCL.CLKernel, uint, OpenTK.Compute.OpenCL.KernelArgInfo, nuint, byte[], out nuint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.2.
  example: []
  syntax:
    content: public static extern CLResultCode GetKernelArgInfo(CLKernel kernel, uint argumentIndex, KernelArgInfo paramName, nuint paramValueSize, byte[] paramValue, out nuint paramSizeReturned)
    parameters:
    - id: kernel
      type: OpenTK.Compute.OpenCL.CLKernel
    - id: argumentIndex
      type: System.UInt32
    - id: paramName
      type: OpenTK.Compute.OpenCL.KernelArgInfo
    - id: paramValueSize
      type: System.UIntPtr
    - id: paramValue
      type: System.Byte[]
    - id: paramSizeReturned
      type: System.UIntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetKernelArgInfo(kernel As CLKernel, argumentIndex As UInteger, paramName As KernelArgInfo, paramValueSize As UIntPtr, paramValue As Byte(), paramSizeReturned As UIntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetKernelArgInfo*
  nameWithType.vb: CL.GetKernelArgInfo(CLKernel, UInteger, KernelArgInfo, UIntPtr, Byte(), UIntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetKernelArgInfo(OpenTK.Compute.OpenCL.CLKernel, UInteger, OpenTK.Compute.OpenCL.KernelArgInfo, System.UIntPtr, Byte(), System.UIntPtr)
  name.vb: GetKernelArgInfo(CLKernel, UInteger, KernelArgInfo, UIntPtr, Byte(), UIntPtr)
- uid: OpenTK.Compute.OpenCL.CL.GetKernelArgInfo(OpenTK.Compute.OpenCL.CLKernel,System.UInt32,OpenTK.Compute.OpenCL.KernelArgInfo,System.Byte[]@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetKernelArgInfo(OpenTK.Compute.OpenCL.CLKernel,System.UInt32,OpenTK.Compute.OpenCL.KernelArgInfo,System.Byte[]@)
  id: GetKernelArgInfo(OpenTK.Compute.OpenCL.CLKernel,System.UInt32,OpenTK.Compute.OpenCL.KernelArgInfo,System.Byte[]@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetKernelArgInfo(CLKernel, uint, KernelArgInfo, out byte[])
  nameWithType: CL.GetKernelArgInfo(CLKernel, uint, KernelArgInfo, out byte[])
  fullName: OpenTK.Compute.OpenCL.CL.GetKernelArgInfo(OpenTK.Compute.OpenCL.CLKernel, uint, OpenTK.Compute.OpenCL.KernelArgInfo, out byte[])
  type: Method
  source:
    id: GetKernelArgInfo
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 860
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.2.
  example: []
  syntax:
    content: public static CLResultCode GetKernelArgInfo(CLKernel kernel, uint argumentIndex, KernelArgInfo paramName, out byte[] paramValue)
    parameters:
    - id: kernel
      type: OpenTK.Compute.OpenCL.CLKernel
    - id: argumentIndex
      type: System.UInt32
    - id: paramName
      type: OpenTK.Compute.OpenCL.KernelArgInfo
    - id: paramValue
      type: System.Byte[]
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetKernelArgInfo(kernel As CLKernel, argumentIndex As UInteger, paramName As KernelArgInfo, paramValue As Byte()) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetKernelArgInfo*
  nameWithType.vb: CL.GetKernelArgInfo(CLKernel, UInteger, KernelArgInfo, Byte())
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetKernelArgInfo(OpenTK.Compute.OpenCL.CLKernel, UInteger, OpenTK.Compute.OpenCL.KernelArgInfo, Byte())
  name.vb: GetKernelArgInfo(CLKernel, UInteger, KernelArgInfo, Byte())
- uid: OpenTK.Compute.OpenCL.CL.GetKernelWorkGroupInfo(OpenTK.Compute.OpenCL.CLKernel,OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.KernelWorkGroupInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetKernelWorkGroupInfo(OpenTK.Compute.OpenCL.CLKernel,OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.KernelWorkGroupInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  id: GetKernelWorkGroupInfo(OpenTK.Compute.OpenCL.CLKernel,OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.KernelWorkGroupInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetKernelWorkGroupInfo(CLKernel, CLDevice, KernelWorkGroupInfo, nuint, byte[], out nuint)
  nameWithType: CL.GetKernelWorkGroupInfo(CLKernel, CLDevice, KernelWorkGroupInfo, nuint, byte[], out nuint)
  fullName: OpenTK.Compute.OpenCL.CL.GetKernelWorkGroupInfo(OpenTK.Compute.OpenCL.CLKernel, OpenTK.Compute.OpenCL.CLDevice, OpenTK.Compute.OpenCL.KernelWorkGroupInfo, nuint, byte[], out nuint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode GetKernelWorkGroupInfo(CLKernel kernel, CLDevice device, KernelWorkGroupInfo paramName, nuint paramValueSize, byte[] paramValue, out nuint paramSizeReturned)
    parameters:
    - id: kernel
      type: OpenTK.Compute.OpenCL.CLKernel
    - id: device
      type: OpenTK.Compute.OpenCL.CLDevice
    - id: paramName
      type: OpenTK.Compute.OpenCL.KernelWorkGroupInfo
    - id: paramValueSize
      type: System.UIntPtr
    - id: paramValue
      type: System.Byte[]
    - id: paramSizeReturned
      type: System.UIntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetKernelWorkGroupInfo(kernel As CLKernel, device As CLDevice, paramName As KernelWorkGroupInfo, paramValueSize As UIntPtr, paramValue As Byte(), paramSizeReturned As UIntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetKernelWorkGroupInfo*
  nameWithType.vb: CL.GetKernelWorkGroupInfo(CLKernel, CLDevice, KernelWorkGroupInfo, UIntPtr, Byte(), UIntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetKernelWorkGroupInfo(OpenTK.Compute.OpenCL.CLKernel, OpenTK.Compute.OpenCL.CLDevice, OpenTK.Compute.OpenCL.KernelWorkGroupInfo, System.UIntPtr, Byte(), System.UIntPtr)
  name.vb: GetKernelWorkGroupInfo(CLKernel, CLDevice, KernelWorkGroupInfo, UIntPtr, Byte(), UIntPtr)
- uid: OpenTK.Compute.OpenCL.CL.GetKernelWorkGroupInfo(OpenTK.Compute.OpenCL.CLKernel,OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.KernelWorkGroupInfo,System.Byte[]@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetKernelWorkGroupInfo(OpenTK.Compute.OpenCL.CLKernel,OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.KernelWorkGroupInfo,System.Byte[]@)
  id: GetKernelWorkGroupInfo(OpenTK.Compute.OpenCL.CLKernel,OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.KernelWorkGroupInfo,System.Byte[]@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetKernelWorkGroupInfo(CLKernel, CLDevice, KernelWorkGroupInfo, out byte[])
  nameWithType: CL.GetKernelWorkGroupInfo(CLKernel, CLDevice, KernelWorkGroupInfo, out byte[])
  fullName: OpenTK.Compute.OpenCL.CL.GetKernelWorkGroupInfo(OpenTK.Compute.OpenCL.CLKernel, OpenTK.Compute.OpenCL.CLDevice, OpenTK.Compute.OpenCL.KernelWorkGroupInfo, out byte[])
  type: Method
  source:
    id: GetKernelWorkGroupInfo
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 879
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static CLResultCode GetKernelWorkGroupInfo(CLKernel kernel, CLDevice device, KernelWorkGroupInfo paramName, out byte[] paramValue)
    parameters:
    - id: kernel
      type: OpenTK.Compute.OpenCL.CLKernel
    - id: device
      type: OpenTK.Compute.OpenCL.CLDevice
    - id: paramName
      type: OpenTK.Compute.OpenCL.KernelWorkGroupInfo
    - id: paramValue
      type: System.Byte[]
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetKernelWorkGroupInfo(kernel As CLKernel, device As CLDevice, paramName As KernelWorkGroupInfo, paramValue As Byte()) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetKernelWorkGroupInfo*
  nameWithType.vb: CL.GetKernelWorkGroupInfo(CLKernel, CLDevice, KernelWorkGroupInfo, Byte())
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetKernelWorkGroupInfo(OpenTK.Compute.OpenCL.CLKernel, OpenTK.Compute.OpenCL.CLDevice, OpenTK.Compute.OpenCL.KernelWorkGroupInfo, Byte())
  name.vb: GetKernelWorkGroupInfo(CLKernel, CLDevice, KernelWorkGroupInfo, Byte())
- uid: OpenTK.Compute.OpenCL.CL.GetKernelSubGroupInfo(OpenTK.Compute.OpenCL.CLKernel,OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.KernelSubGroupInfo,System.UIntPtr,System.IntPtr,System.UIntPtr,System.Byte[],System.UIntPtr@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetKernelSubGroupInfo(OpenTK.Compute.OpenCL.CLKernel,OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.KernelSubGroupInfo,System.UIntPtr,System.IntPtr,System.UIntPtr,System.Byte[],System.UIntPtr@)
  id: GetKernelSubGroupInfo(OpenTK.Compute.OpenCL.CLKernel,OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.KernelSubGroupInfo,System.UIntPtr,System.IntPtr,System.UIntPtr,System.Byte[],System.UIntPtr@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetKernelSubGroupInfo(CLKernel, CLDevice, KernelSubGroupInfo, nuint, nint, nuint, byte[], out nuint)
  nameWithType: CL.GetKernelSubGroupInfo(CLKernel, CLDevice, KernelSubGroupInfo, nuint, nint, nuint, byte[], out nuint)
  fullName: OpenTK.Compute.OpenCL.CL.GetKernelSubGroupInfo(OpenTK.Compute.OpenCL.CLKernel, OpenTK.Compute.OpenCL.CLDevice, OpenTK.Compute.OpenCL.KernelSubGroupInfo, nuint, nint, nuint, byte[], out nuint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 2.1.
  example: []
  syntax:
    content: public static extern CLResultCode GetKernelSubGroupInfo(CLKernel kernel, CLDevice device, KernelSubGroupInfo paramName, nuint inputValueSize, nint inputValue, nuint paramValueSize, byte[] paramValue, out nuint paramSizeReturned)
    parameters:
    - id: kernel
      type: OpenTK.Compute.OpenCL.CLKernel
    - id: device
      type: OpenTK.Compute.OpenCL.CLDevice
    - id: paramName
      type: OpenTK.Compute.OpenCL.KernelSubGroupInfo
    - id: inputValueSize
      type: System.UIntPtr
    - id: inputValue
      type: System.IntPtr
    - id: paramValueSize
      type: System.UIntPtr
    - id: paramValue
      type: System.Byte[]
    - id: paramSizeReturned
      type: System.UIntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetKernelSubGroupInfo(kernel As CLKernel, device As CLDevice, paramName As KernelSubGroupInfo, inputValueSize As UIntPtr, inputValue As IntPtr, paramValueSize As UIntPtr, paramValue As Byte(), paramSizeReturned As UIntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetKernelSubGroupInfo*
  nameWithType.vb: CL.GetKernelSubGroupInfo(CLKernel, CLDevice, KernelSubGroupInfo, UIntPtr, IntPtr, UIntPtr, Byte(), UIntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetKernelSubGroupInfo(OpenTK.Compute.OpenCL.CLKernel, OpenTK.Compute.OpenCL.CLDevice, OpenTK.Compute.OpenCL.KernelSubGroupInfo, System.UIntPtr, System.IntPtr, System.UIntPtr, Byte(), System.UIntPtr)
  name.vb: GetKernelSubGroupInfo(CLKernel, CLDevice, KernelSubGroupInfo, UIntPtr, IntPtr, UIntPtr, Byte(), UIntPtr)
- uid: OpenTK.Compute.OpenCL.CL.WaitForEvents(System.UInt32,OpenTK.Compute.OpenCL.CLEvent[])
  commentId: M:OpenTK.Compute.OpenCL.CL.WaitForEvents(System.UInt32,OpenTK.Compute.OpenCL.CLEvent[])
  id: WaitForEvents(System.UInt32,OpenTK.Compute.OpenCL.CLEvent[])
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: WaitForEvents(uint, CLEvent[])
  nameWithType: CL.WaitForEvents(uint, CLEvent[])
  fullName: OpenTK.Compute.OpenCL.CL.WaitForEvents(uint, OpenTK.Compute.OpenCL.CLEvent[])
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode WaitForEvents(uint numberOfEvents, CLEvent[] eventList)
    parameters:
    - id: numberOfEvents
      type: System.UInt32
    - id: eventList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function WaitForEvents(numberOfEvents As UInteger, eventList As CLEvent()) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.WaitForEvents*
  nameWithType.vb: CL.WaitForEvents(UInteger, CLEvent())
  fullName.vb: OpenTK.Compute.OpenCL.CL.WaitForEvents(UInteger, OpenTK.Compute.OpenCL.CLEvent())
  name.vb: WaitForEvents(UInteger, CLEvent())
- uid: OpenTK.Compute.OpenCL.CL.GetEventInfo(OpenTK.Compute.OpenCL.CLEvent,OpenTK.Compute.OpenCL.EventInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetEventInfo(OpenTK.Compute.OpenCL.CLEvent,OpenTK.Compute.OpenCL.EventInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  id: GetEventInfo(OpenTK.Compute.OpenCL.CLEvent,OpenTK.Compute.OpenCL.EventInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetEventInfo(CLEvent, EventInfo, nuint, byte[], out nuint)
  nameWithType: CL.GetEventInfo(CLEvent, EventInfo, nuint, byte[], out nuint)
  fullName: OpenTK.Compute.OpenCL.CL.GetEventInfo(OpenTK.Compute.OpenCL.CLEvent, OpenTK.Compute.OpenCL.EventInfo, nuint, byte[], out nuint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode GetEventInfo(CLEvent @event, EventInfo paramName, nuint paramValueSize, byte[] paramValue, out nuint paramSizeReturned)
    parameters:
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    - id: paramName
      type: OpenTK.Compute.OpenCL.EventInfo
    - id: paramValueSize
      type: System.UIntPtr
    - id: paramValue
      type: System.Byte[]
    - id: paramSizeReturned
      type: System.UIntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetEventInfo([event] As CLEvent, paramName As EventInfo, paramValueSize As UIntPtr, paramValue As Byte(), paramSizeReturned As UIntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetEventInfo*
  nameWithType.vb: CL.GetEventInfo(CLEvent, EventInfo, UIntPtr, Byte(), UIntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetEventInfo(OpenTK.Compute.OpenCL.CLEvent, OpenTK.Compute.OpenCL.EventInfo, System.UIntPtr, Byte(), System.UIntPtr)
  name.vb: GetEventInfo(CLEvent, EventInfo, UIntPtr, Byte(), UIntPtr)
- uid: OpenTK.Compute.OpenCL.CL.GetEventInfo(OpenTK.Compute.OpenCL.CLEvent,OpenTK.Compute.OpenCL.EventInfo,System.Byte[]@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetEventInfo(OpenTK.Compute.OpenCL.CLEvent,OpenTK.Compute.OpenCL.EventInfo,System.Byte[]@)
  id: GetEventInfo(OpenTK.Compute.OpenCL.CLEvent,OpenTK.Compute.OpenCL.EventInfo,System.Byte[]@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetEventInfo(CLEvent, EventInfo, out byte[])
  nameWithType: CL.GetEventInfo(CLEvent, EventInfo, out byte[])
  fullName: OpenTK.Compute.OpenCL.CL.GetEventInfo(OpenTK.Compute.OpenCL.CLEvent, OpenTK.Compute.OpenCL.EventInfo, out byte[])
  type: Method
  source:
    id: GetEventInfo
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 918
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static CLResultCode GetEventInfo(CLEvent @event, EventInfo paramName, out byte[] paramValue)
    parameters:
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    - id: paramName
      type: OpenTK.Compute.OpenCL.EventInfo
    - id: paramValue
      type: System.Byte[]
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetEventInfo([event] As CLEvent, paramName As EventInfo, paramValue As Byte()) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetEventInfo*
  nameWithType.vb: CL.GetEventInfo(CLEvent, EventInfo, Byte())
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetEventInfo(OpenTK.Compute.OpenCL.CLEvent, OpenTK.Compute.OpenCL.EventInfo, Byte())
  name.vb: GetEventInfo(CLEvent, EventInfo, Byte())
- uid: OpenTK.Compute.OpenCL.CL.CreateUserEvent(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.CLResultCode@)
  commentId: M:OpenTK.Compute.OpenCL.CL.CreateUserEvent(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.CLResultCode@)
  id: CreateUserEvent(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.CLResultCode@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: CreateUserEvent(CLContext, out CLResultCode)
  nameWithType: CL.CreateUserEvent(CLContext, out CLResultCode)
  fullName: OpenTK.Compute.OpenCL.CL.CreateUserEvent(OpenTK.Compute.OpenCL.CLContext, out OpenTK.Compute.OpenCL.CLResultCode)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.1.
  example: []
  syntax:
    content: public static extern CLEvent CreateUserEvent(CLContext context, out CLResultCode resultCode)
    parameters:
    - id: context
      type: OpenTK.Compute.OpenCL.CLContext
    - id: resultCode
      type: OpenTK.Compute.OpenCL.CLResultCode
    return:
      type: OpenTK.Compute.OpenCL.CLEvent
    content.vb: Public Shared Function CreateUserEvent(context As CLContext, resultCode As CLResultCode) As CLEvent
  overload: OpenTK.Compute.OpenCL.CL.CreateUserEvent*
  nameWithType.vb: CL.CreateUserEvent(CLContext, CLResultCode)
  fullName.vb: OpenTK.Compute.OpenCL.CL.CreateUserEvent(OpenTK.Compute.OpenCL.CLContext, OpenTK.Compute.OpenCL.CLResultCode)
  name.vb: CreateUserEvent(CLContext, CLResultCode)
- uid: OpenTK.Compute.OpenCL.CL.RetainEvent(OpenTK.Compute.OpenCL.CLEvent)
  commentId: M:OpenTK.Compute.OpenCL.CL.RetainEvent(OpenTK.Compute.OpenCL.CLEvent)
  id: RetainEvent(OpenTK.Compute.OpenCL.CLEvent)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: RetainEvent(CLEvent)
  nameWithType: CL.RetainEvent(CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.RetainEvent(OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode RetainEvent(CLEvent @event)
    parameters:
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function RetainEvent([event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.RetainEvent*
- uid: OpenTK.Compute.OpenCL.CL.ReleaseEvent(OpenTK.Compute.OpenCL.CLEvent)
  commentId: M:OpenTK.Compute.OpenCL.CL.ReleaseEvent(OpenTK.Compute.OpenCL.CLEvent)
  id: ReleaseEvent(OpenTK.Compute.OpenCL.CLEvent)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: ReleaseEvent(CLEvent)
  nameWithType: CL.ReleaseEvent(CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.ReleaseEvent(OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode ReleaseEvent(CLEvent @event)
    parameters:
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function ReleaseEvent([event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.ReleaseEvent*
- uid: OpenTK.Compute.OpenCL.CL.SetUserEventStatus(OpenTK.Compute.OpenCL.CLEvent,System.Int32)
  commentId: M:OpenTK.Compute.OpenCL.CL.SetUserEventStatus(OpenTK.Compute.OpenCL.CLEvent,System.Int32)
  id: SetUserEventStatus(OpenTK.Compute.OpenCL.CLEvent,System.Int32)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: SetUserEventStatus(CLEvent, int)
  nameWithType: CL.SetUserEventStatus(CLEvent, int)
  fullName: OpenTK.Compute.OpenCL.CL.SetUserEventStatus(OpenTK.Compute.OpenCL.CLEvent, int)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.1.
  example: []
  syntax:
    content: public static extern CLResultCode SetUserEventStatus(CLEvent @event, int executionStatus)
    parameters:
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    - id: executionStatus
      type: System.Int32
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function SetUserEventStatus([event] As CLEvent, executionStatus As Integer) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.SetUserEventStatus*
  nameWithType.vb: CL.SetUserEventStatus(CLEvent, Integer)
  fullName.vb: OpenTK.Compute.OpenCL.CL.SetUserEventStatus(OpenTK.Compute.OpenCL.CLEvent, Integer)
  name.vb: SetUserEventStatus(CLEvent, Integer)
- uid: OpenTK.Compute.OpenCL.CL.SetEventCallback(OpenTK.Compute.OpenCL.CLEvent,System.Int32,System.IntPtr,System.IntPtr)
  commentId: M:OpenTK.Compute.OpenCL.CL.SetEventCallback(OpenTK.Compute.OpenCL.CLEvent,System.Int32,System.IntPtr,System.IntPtr)
  id: SetEventCallback(OpenTK.Compute.OpenCL.CLEvent,System.Int32,System.IntPtr,System.IntPtr)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: SetEventCallback(CLEvent, int, nint, nint)
  nameWithType: CL.SetEventCallback(CLEvent, int, nint, nint)
  fullName: OpenTK.Compute.OpenCL.CL.SetEventCallback(OpenTK.Compute.OpenCL.CLEvent, int, nint, nint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.1.
  example: []
  syntax:
    content: public static extern CLResultCode SetEventCallback(CLEvent eventHandle, int commandExecCallbackType, nint notifyCallback, nint userData)
    parameters:
    - id: eventHandle
      type: OpenTK.Compute.OpenCL.CLEvent
    - id: commandExecCallbackType
      type: System.Int32
    - id: notifyCallback
      type: System.IntPtr
    - id: userData
      type: System.IntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function SetEventCallback(eventHandle As CLEvent, commandExecCallbackType As Integer, notifyCallback As IntPtr, userData As IntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.SetEventCallback*
  nameWithType.vb: CL.SetEventCallback(CLEvent, Integer, IntPtr, IntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.SetEventCallback(OpenTK.Compute.OpenCL.CLEvent, Integer, System.IntPtr, System.IntPtr)
  name.vb: SetEventCallback(CLEvent, Integer, IntPtr, IntPtr)
- uid: OpenTK.Compute.OpenCL.CL.SetEventCallback(OpenTK.Compute.OpenCL.CLEvent,System.Int32,OpenTK.Compute.OpenCL.CL.ClEventCallback)
  commentId: M:OpenTK.Compute.OpenCL.CL.SetEventCallback(OpenTK.Compute.OpenCL.CLEvent,System.Int32,OpenTK.Compute.OpenCL.CL.ClEventCallback)
  id: SetEventCallback(OpenTK.Compute.OpenCL.CLEvent,System.Int32,OpenTK.Compute.OpenCL.CL.ClEventCallback)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: SetEventCallback(CLEvent, int, ClEventCallback)
  nameWithType: CL.SetEventCallback(CLEvent, int, CL.ClEventCallback)
  fullName: OpenTK.Compute.OpenCL.CL.SetEventCallback(OpenTK.Compute.OpenCL.CLEvent, int, OpenTK.Compute.OpenCL.CL.ClEventCallback)
  type: Method
  source:
    id: SetEventCallback
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 959
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.1.
  example: []
  syntax:
    content: public static CLResultCode SetEventCallback(CLEvent eventHandle, int callbackType, CL.ClEventCallback notifyCallback)
    parameters:
    - id: eventHandle
      type: OpenTK.Compute.OpenCL.CLEvent
    - id: callbackType
      type: System.Int32
    - id: notifyCallback
      type: OpenTK.Compute.OpenCL.CL.ClEventCallback
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function SetEventCallback(eventHandle As CLEvent, callbackType As Integer, notifyCallback As CL.ClEventCallback) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.SetEventCallback*
  nameWithType.vb: CL.SetEventCallback(CLEvent, Integer, CL.ClEventCallback)
  fullName.vb: OpenTK.Compute.OpenCL.CL.SetEventCallback(OpenTK.Compute.OpenCL.CLEvent, Integer, OpenTK.Compute.OpenCL.CL.ClEventCallback)
  name.vb: SetEventCallback(CLEvent, Integer, ClEventCallback)
- uid: OpenTK.Compute.OpenCL.CL.GetEventProfilingInfo(OpenTK.Compute.OpenCL.CLEvent,OpenTK.Compute.OpenCL.ProfilingInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetEventProfilingInfo(OpenTK.Compute.OpenCL.CLEvent,OpenTK.Compute.OpenCL.ProfilingInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  id: GetEventProfilingInfo(OpenTK.Compute.OpenCL.CLEvent,OpenTK.Compute.OpenCL.ProfilingInfo,System.UIntPtr,System.Byte[],System.UIntPtr@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetEventProfilingInfo(CLEvent, ProfilingInfo, nuint, byte[], out nuint)
  nameWithType: CL.GetEventProfilingInfo(CLEvent, ProfilingInfo, nuint, byte[], out nuint)
  fullName: OpenTK.Compute.OpenCL.CL.GetEventProfilingInfo(OpenTK.Compute.OpenCL.CLEvent, OpenTK.Compute.OpenCL.ProfilingInfo, nuint, byte[], out nuint)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode GetEventProfilingInfo(CLEvent @event, ProfilingInfo paramName, nuint paramValueSize, byte[] paramValue, out nuint paramValueSizeReturned)
    parameters:
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    - id: paramName
      type: OpenTK.Compute.OpenCL.ProfilingInfo
    - id: paramValueSize
      type: System.UIntPtr
    - id: paramValue
      type: System.Byte[]
    - id: paramValueSizeReturned
      type: System.UIntPtr
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetEventProfilingInfo([event] As CLEvent, paramName As ProfilingInfo, paramValueSize As UIntPtr, paramValue As Byte(), paramValueSizeReturned As UIntPtr) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetEventProfilingInfo*
  nameWithType.vb: CL.GetEventProfilingInfo(CLEvent, ProfilingInfo, UIntPtr, Byte(), UIntPtr)
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetEventProfilingInfo(OpenTK.Compute.OpenCL.CLEvent, OpenTK.Compute.OpenCL.ProfilingInfo, System.UIntPtr, Byte(), System.UIntPtr)
  name.vb: GetEventProfilingInfo(CLEvent, ProfilingInfo, UIntPtr, Byte(), UIntPtr)
- uid: OpenTK.Compute.OpenCL.CL.GetEventProfilingInfo(OpenTK.Compute.OpenCL.CLEvent,OpenTK.Compute.OpenCL.ProfilingInfo,System.Byte[]@)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetEventProfilingInfo(OpenTK.Compute.OpenCL.CLEvent,OpenTK.Compute.OpenCL.ProfilingInfo,System.Byte[]@)
  id: GetEventProfilingInfo(OpenTK.Compute.OpenCL.CLEvent,OpenTK.Compute.OpenCL.ProfilingInfo,System.Byte[]@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetEventProfilingInfo(CLEvent, ProfilingInfo, out byte[])
  nameWithType: CL.GetEventProfilingInfo(CLEvent, ProfilingInfo, out byte[])
  fullName: OpenTK.Compute.OpenCL.CL.GetEventProfilingInfo(OpenTK.Compute.OpenCL.CLEvent, OpenTK.Compute.OpenCL.ProfilingInfo, out byte[])
  type: Method
  source:
    id: GetEventProfilingInfo
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 980
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static CLResultCode GetEventProfilingInfo(CLEvent @event, ProfilingInfo paramName, out byte[] paramValue)
    parameters:
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    - id: paramName
      type: OpenTK.Compute.OpenCL.ProfilingInfo
    - id: paramValue
      type: System.Byte[]
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function GetEventProfilingInfo([event] As CLEvent, paramName As ProfilingInfo, paramValue As Byte()) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetEventProfilingInfo*
  nameWithType.vb: CL.GetEventProfilingInfo(CLEvent, ProfilingInfo, Byte())
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetEventProfilingInfo(OpenTK.Compute.OpenCL.CLEvent, OpenTK.Compute.OpenCL.ProfilingInfo, Byte())
  name.vb: GetEventProfilingInfo(CLEvent, ProfilingInfo, Byte())
- uid: OpenTK.Compute.OpenCL.CL.Flush(OpenTK.Compute.OpenCL.CLCommandQueue)
  commentId: M:OpenTK.Compute.OpenCL.CL.Flush(OpenTK.Compute.OpenCL.CLCommandQueue)
  id: Flush(OpenTK.Compute.OpenCL.CLCommandQueue)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: Flush(CLCommandQueue)
  nameWithType: CL.Flush(CLCommandQueue)
  fullName: OpenTK.Compute.OpenCL.CL.Flush(OpenTK.Compute.OpenCL.CLCommandQueue)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode Flush(CLCommandQueue commandQueue)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function Flush(commandQueue As CLCommandQueue) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.Flush*
- uid: OpenTK.Compute.OpenCL.CL.Finish(OpenTK.Compute.OpenCL.CLCommandQueue)
  commentId: M:OpenTK.Compute.OpenCL.CL.Finish(OpenTK.Compute.OpenCL.CLCommandQueue)
  id: Finish(OpenTK.Compute.OpenCL.CLCommandQueue)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: Finish(CLCommandQueue)
  nameWithType: CL.Finish(CLCommandQueue)
  fullName: OpenTK.Compute.OpenCL.CL.Finish(OpenTK.Compute.OpenCL.CLCommandQueue)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode Finish(CLCommandQueue commandQueue)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function Finish(commandQueue As CLCommandQueue) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.Finish*
- uid: OpenTK.Compute.OpenCL.CL.EnqueueReadBuffer(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr,System.UIntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueReadBuffer(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr,System.UIntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueReadBuffer(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr,System.UIntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueReadBuffer(CLCommandQueue, CLBuffer, bool, nuint, nuint, nint, uint, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueReadBuffer(CLCommandQueue, CLBuffer, bool, nuint, nuint, nint, uint, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueReadBuffer(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, bool, nuint, nuint, nint, uint, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode EnqueueReadBuffer(CLCommandQueue commandQueue, CLBuffer buffer, bool blockingRead, nuint offset, nuint size, nint pointer, uint numberOfEventsInWaitList, CLEvent[] eventWaitList, out CLEvent @event)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: buffer
      type: OpenTK.Compute.OpenCL.CLBuffer
    - id: blockingRead
      type: System.Boolean
    - id: offset
      type: System.UIntPtr
    - id: size
      type: System.UIntPtr
    - id: pointer
      type: System.IntPtr
    - id: numberOfEventsInWaitList
      type: System.UInt32
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueReadBuffer(commandQueue As CLCommandQueue, buffer As CLBuffer, blockingRead As Boolean, offset As UIntPtr, size As UIntPtr, pointer As IntPtr, numberOfEventsInWaitList As UInteger, eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueReadBuffer*
  nameWithType.vb: CL.EnqueueReadBuffer(CLCommandQueue, CLBuffer, Boolean, UIntPtr, UIntPtr, IntPtr, UInteger, CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueReadBuffer(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, Boolean, System.UIntPtr, System.UIntPtr, System.IntPtr, UInteger, OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueReadBuffer(CLCommandQueue, CLBuffer, Boolean, UIntPtr, UIntPtr, IntPtr, UInteger, CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueReadBuffer``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr,``0[],OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueReadBuffer``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr,``0[],OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueReadBuffer``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr,``0[],OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueReadBuffer<T>(CLCommandQueue, CLBuffer, bool, nuint, T[], CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueReadBuffer<T>(CLCommandQueue, CLBuffer, bool, nuint, T[], CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueReadBuffer<T>(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, bool, nuint, T[], OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  source:
    id: EnqueueReadBuffer
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 1020
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: 'public static CLResultCode EnqueueReadBuffer<T>(CLCommandQueue commandQueue, CLBuffer buffer, bool blockingRead, nuint offset, T[] array, CLEvent[] eventWaitList, out CLEvent eventHandle) where T : unmanaged'
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: buffer
      type: OpenTK.Compute.OpenCL.CLBuffer
    - id: blockingRead
      type: System.Boolean
    - id: offset
      type: System.UIntPtr
    - id: array
      type: '{T}[]'
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: eventHandle
      type: OpenTK.Compute.OpenCL.CLEvent
    typeParameters:
    - id: T
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueReadBuffer(Of T As Structure)(commandQueue As CLCommandQueue, buffer As CLBuffer, blockingRead As Boolean, offset As UIntPtr, array As T(), eventWaitList As CLEvent(), eventHandle As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueReadBuffer*
  nameWithType.vb: CL.EnqueueReadBuffer(Of T)(CLCommandQueue, CLBuffer, Boolean, UIntPtr, T(), CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueReadBuffer(Of T)(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, Boolean, System.UIntPtr, T(), OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueReadBuffer(Of T)(CLCommandQueue, CLBuffer, Boolean, UIntPtr, T(), CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueReadBuffer``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr,System.Span{``0},OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueReadBuffer``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr,System.Span{``0},OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueReadBuffer``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr,System.Span{``0},OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueReadBuffer<T>(CLCommandQueue, CLBuffer, bool, nuint, Span<T>, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueReadBuffer<T>(CLCommandQueue, CLBuffer, bool, nuint, Span<T>, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueReadBuffer<T>(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, bool, nuint, System.Span<T>, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  source:
    id: EnqueueReadBuffer
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 1038
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: 'public static CLResultCode EnqueueReadBuffer<T>(CLCommandQueue commandQueue, CLBuffer buffer, bool blockingRead, nuint offset, Span<T> span, CLEvent[] eventWaitList, out CLEvent eventHandle) where T : unmanaged'
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: buffer
      type: OpenTK.Compute.OpenCL.CLBuffer
    - id: blockingRead
      type: System.Boolean
    - id: offset
      type: System.UIntPtr
    - id: span
      type: System.Span{{T}}
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: eventHandle
      type: OpenTK.Compute.OpenCL.CLEvent
    typeParameters:
    - id: T
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueReadBuffer(Of T As Structure)(commandQueue As CLCommandQueue, buffer As CLBuffer, blockingRead As Boolean, offset As UIntPtr, span As Span(Of T), eventWaitList As CLEvent(), eventHandle As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueReadBuffer*
  nameWithType.vb: CL.EnqueueReadBuffer(Of T)(CLCommandQueue, CLBuffer, Boolean, UIntPtr, Span(Of T), CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueReadBuffer(Of T)(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, Boolean, System.UIntPtr, System.Span(Of T), OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueReadBuffer(Of T)(CLCommandQueue, CLBuffer, Boolean, UIntPtr, Span(Of T), CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueReadBufferRect(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueReadBufferRect(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueReadBufferRect(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueReadBufferRect(CLCommandQueue, CLBuffer, bool, nuint[], nuint[], nuint[], nuint, nuint, nuint, nuint, nint, uint, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueReadBufferRect(CLCommandQueue, CLBuffer, bool, nuint[], nuint[], nuint[], nuint, nuint, nuint, nuint, nint, uint, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueReadBufferRect(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, bool, nuint[], nuint[], nuint[], nuint, nuint, nuint, nuint, nint, uint, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.1.
  example: []
  syntax:
    content: public static extern CLResultCode EnqueueReadBufferRect(CLCommandQueue commandQueue, CLBuffer buffer, bool blockingRead, nuint[] bufferOffset, nuint[] hostOffset, nuint[] region, nuint bufferRowPitch, nuint bufferSlicePitch, nuint hostRowPitch, nuint hostSlicePitch, nint pointer, uint numberOfEventsInWaitList, CLEvent[] eventWaitList, out CLEvent @event)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: buffer
      type: OpenTK.Compute.OpenCL.CLBuffer
    - id: blockingRead
      type: System.Boolean
    - id: bufferOffset
      type: System.UIntPtr[]
    - id: hostOffset
      type: System.UIntPtr[]
    - id: region
      type: System.UIntPtr[]
    - id: bufferRowPitch
      type: System.UIntPtr
    - id: bufferSlicePitch
      type: System.UIntPtr
    - id: hostRowPitch
      type: System.UIntPtr
    - id: hostSlicePitch
      type: System.UIntPtr
    - id: pointer
      type: System.IntPtr
    - id: numberOfEventsInWaitList
      type: System.UInt32
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueReadBufferRect(commandQueue As CLCommandQueue, buffer As CLBuffer, blockingRead As Boolean, bufferOffset As UIntPtr(), hostOffset As UIntPtr(), region As UIntPtr(), bufferRowPitch As UIntPtr, bufferSlicePitch As UIntPtr, hostRowPitch As UIntPtr, hostSlicePitch As UIntPtr, pointer As IntPtr, numberOfEventsInWaitList As UInteger, eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueReadBufferRect*
  nameWithType.vb: CL.EnqueueReadBufferRect(CLCommandQueue, CLBuffer, Boolean, UIntPtr(), UIntPtr(), UIntPtr(), UIntPtr, UIntPtr, UIntPtr, UIntPtr, IntPtr, UInteger, CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueReadBufferRect(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, Boolean, System.UIntPtr(), System.UIntPtr(), System.UIntPtr(), System.UIntPtr, System.UIntPtr, System.UIntPtr, System.UIntPtr, System.IntPtr, UInteger, OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueReadBufferRect(CLCommandQueue, CLBuffer, Boolean, UIntPtr(), UIntPtr(), UIntPtr(), UIntPtr, UIntPtr, UIntPtr, UIntPtr, IntPtr, UInteger, CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueReadBufferRect``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,``0[],OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueReadBufferRect``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,``0[],OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueReadBufferRect``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,``0[],OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueReadBufferRect<T>(CLCommandQueue, CLBuffer, bool, nuint[], nuint[], nuint[], nuint, nuint, nuint, nuint, T[], CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueReadBufferRect<T>(CLCommandQueue, CLBuffer, bool, nuint[], nuint[], nuint[], nuint, nuint, nuint, nuint, T[], CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueReadBufferRect<T>(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, bool, nuint[], nuint[], nuint[], nuint, nuint, nuint, nuint, T[], OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  source:
    id: EnqueueReadBufferRect
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 1065
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.1.
  example: []
  syntax:
    content: 'public static CLResultCode EnqueueReadBufferRect<T>(CLCommandQueue commandQueue, CLBuffer buffer, bool blockingRead, nuint[] bufferOffset, nuint[] hostOffset, nuint[] region, nuint bufferRowPitch, nuint bufferSlicePitch, nuint hostRowPitch, nuint hostSlicePitch, T[] array, CLEvent[] eventWaitList, out CLEvent @event) where T : unmanaged'
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: buffer
      type: OpenTK.Compute.OpenCL.CLBuffer
    - id: blockingRead
      type: System.Boolean
    - id: bufferOffset
      type: System.UIntPtr[]
    - id: hostOffset
      type: System.UIntPtr[]
    - id: region
      type: System.UIntPtr[]
    - id: bufferRowPitch
      type: System.UIntPtr
    - id: bufferSlicePitch
      type: System.UIntPtr
    - id: hostRowPitch
      type: System.UIntPtr
    - id: hostSlicePitch
      type: System.UIntPtr
    - id: array
      type: '{T}[]'
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    typeParameters:
    - id: T
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueReadBufferRect(Of T As Structure)(commandQueue As CLCommandQueue, buffer As CLBuffer, blockingRead As Boolean, bufferOffset As UIntPtr(), hostOffset As UIntPtr(), region As UIntPtr(), bufferRowPitch As UIntPtr, bufferSlicePitch As UIntPtr, hostRowPitch As UIntPtr, hostSlicePitch As UIntPtr, array As T(), eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueReadBufferRect*
  nameWithType.vb: CL.EnqueueReadBufferRect(Of T)(CLCommandQueue, CLBuffer, Boolean, UIntPtr(), UIntPtr(), UIntPtr(), UIntPtr, UIntPtr, UIntPtr, UIntPtr, T(), CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueReadBufferRect(Of T)(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, Boolean, System.UIntPtr(), System.UIntPtr(), System.UIntPtr(), System.UIntPtr, System.UIntPtr, System.UIntPtr, System.UIntPtr, T(), OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueReadBufferRect(Of T)(CLCommandQueue, CLBuffer, Boolean, UIntPtr(), UIntPtr(), UIntPtr(), UIntPtr, UIntPtr, UIntPtr, UIntPtr, T(), CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueReadBufferRect``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.Span{``0},OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueReadBufferRect``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.Span{``0},OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueReadBufferRect``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.Span{``0},OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueReadBufferRect<T>(CLCommandQueue, CLBuffer, bool, nuint[], nuint[], nuint[], nuint, nuint, nuint, nuint, Span<T>, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueReadBufferRect<T>(CLCommandQueue, CLBuffer, bool, nuint[], nuint[], nuint[], nuint, nuint, nuint, nuint, Span<T>, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueReadBufferRect<T>(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, bool, nuint[], nuint[], nuint[], nuint, nuint, nuint, nuint, System.Span<T>, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  source:
    id: EnqueueReadBufferRect
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 1084
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.1.
  example: []
  syntax:
    content: 'public static CLResultCode EnqueueReadBufferRect<T>(CLCommandQueue commandQueue, CLBuffer buffer, bool blockingRead, nuint[] bufferOffset, nuint[] hostOffset, nuint[] region, nuint bufferRowPitch, nuint bufferSlicePitch, nuint hostRowPitch, nuint hostSlicePitch, Span<T> span, CLEvent[] eventWaitList, out CLEvent @event) where T : unmanaged'
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: buffer
      type: OpenTK.Compute.OpenCL.CLBuffer
    - id: blockingRead
      type: System.Boolean
    - id: bufferOffset
      type: System.UIntPtr[]
    - id: hostOffset
      type: System.UIntPtr[]
    - id: region
      type: System.UIntPtr[]
    - id: bufferRowPitch
      type: System.UIntPtr
    - id: bufferSlicePitch
      type: System.UIntPtr
    - id: hostRowPitch
      type: System.UIntPtr
    - id: hostSlicePitch
      type: System.UIntPtr
    - id: span
      type: System.Span{{T}}
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    typeParameters:
    - id: T
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueReadBufferRect(Of T As Structure)(commandQueue As CLCommandQueue, buffer As CLBuffer, blockingRead As Boolean, bufferOffset As UIntPtr(), hostOffset As UIntPtr(), region As UIntPtr(), bufferRowPitch As UIntPtr, bufferSlicePitch As UIntPtr, hostRowPitch As UIntPtr, hostSlicePitch As UIntPtr, span As Span(Of T), eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueReadBufferRect*
  nameWithType.vb: CL.EnqueueReadBufferRect(Of T)(CLCommandQueue, CLBuffer, Boolean, UIntPtr(), UIntPtr(), UIntPtr(), UIntPtr, UIntPtr, UIntPtr, UIntPtr, Span(Of T), CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueReadBufferRect(Of T)(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, Boolean, System.UIntPtr(), System.UIntPtr(), System.UIntPtr(), System.UIntPtr, System.UIntPtr, System.UIntPtr, System.UIntPtr, System.Span(Of T), OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueReadBufferRect(Of T)(CLCommandQueue, CLBuffer, Boolean, UIntPtr(), UIntPtr(), UIntPtr(), UIntPtr, UIntPtr, UIntPtr, UIntPtr, Span(Of T), CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueWriteBuffer(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr,System.UIntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueWriteBuffer(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr,System.UIntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueWriteBuffer(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr,System.UIntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueWriteBuffer(CLCommandQueue, CLBuffer, bool, nuint, nuint, nint, uint, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueWriteBuffer(CLCommandQueue, CLBuffer, bool, nuint, nuint, nint, uint, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueWriteBuffer(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, bool, nuint, nuint, nint, uint, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode EnqueueWriteBuffer(CLCommandQueue commandQueue, CLBuffer buffer, bool blockingWrite, nuint offset, nuint size, nint pointer, uint numberOfEventsInWaitList, CLEvent[] eventWaitList, out CLEvent @event)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: buffer
      type: OpenTK.Compute.OpenCL.CLBuffer
    - id: blockingWrite
      type: System.Boolean
    - id: offset
      type: System.UIntPtr
    - id: size
      type: System.UIntPtr
    - id: pointer
      type: System.IntPtr
    - id: numberOfEventsInWaitList
      type: System.UInt32
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueWriteBuffer(commandQueue As CLCommandQueue, buffer As CLBuffer, blockingWrite As Boolean, offset As UIntPtr, size As UIntPtr, pointer As IntPtr, numberOfEventsInWaitList As UInteger, eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueWriteBuffer*
  nameWithType.vb: CL.EnqueueWriteBuffer(CLCommandQueue, CLBuffer, Boolean, UIntPtr, UIntPtr, IntPtr, UInteger, CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueWriteBuffer(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, Boolean, System.UIntPtr, System.UIntPtr, System.IntPtr, UInteger, OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueWriteBuffer(CLCommandQueue, CLBuffer, Boolean, UIntPtr, UIntPtr, IntPtr, UInteger, CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueWriteBuffer``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr,``0[],OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueWriteBuffer``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr,``0[],OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueWriteBuffer``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr,``0[],OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueWriteBuffer<T>(CLCommandQueue, CLBuffer, bool, nuint, T[], CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueWriteBuffer<T>(CLCommandQueue, CLBuffer, bool, nuint, T[], CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueWriteBuffer<T>(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, bool, nuint, T[], OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  source:
    id: EnqueueWriteBuffer
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 1113
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: 'public static CLResultCode EnqueueWriteBuffer<T>(CLCommandQueue commandQueue, CLBuffer buffer, bool blockingWrite, nuint offset, T[] array, CLEvent[] eventWaitList, out CLEvent @event) where T : unmanaged'
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: buffer
      type: OpenTK.Compute.OpenCL.CLBuffer
    - id: blockingWrite
      type: System.Boolean
    - id: offset
      type: System.UIntPtr
    - id: array
      type: '{T}[]'
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    typeParameters:
    - id: T
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueWriteBuffer(Of T As Structure)(commandQueue As CLCommandQueue, buffer As CLBuffer, blockingWrite As Boolean, offset As UIntPtr, array As T(), eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueWriteBuffer*
  nameWithType.vb: CL.EnqueueWriteBuffer(Of T)(CLCommandQueue, CLBuffer, Boolean, UIntPtr, T(), CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueWriteBuffer(Of T)(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, Boolean, System.UIntPtr, T(), OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueWriteBuffer(Of T)(CLCommandQueue, CLBuffer, Boolean, UIntPtr, T(), CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueWriteBuffer``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr,System.Span{``0},OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueWriteBuffer``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr,System.Span{``0},OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueWriteBuffer``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr,System.Span{``0},OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueWriteBuffer<T>(CLCommandQueue, CLBuffer, bool, nuint, Span<T>, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueWriteBuffer<T>(CLCommandQueue, CLBuffer, bool, nuint, Span<T>, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueWriteBuffer<T>(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, bool, nuint, System.Span<T>, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  source:
    id: EnqueueWriteBuffer
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 1131
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: 'public static CLResultCode EnqueueWriteBuffer<T>(CLCommandQueue commandQueue, CLBuffer buffer, bool blockingWrite, nuint offset, Span<T> span, CLEvent[] eventWaitList, out CLEvent @event) where T : unmanaged'
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: buffer
      type: OpenTK.Compute.OpenCL.CLBuffer
    - id: blockingWrite
      type: System.Boolean
    - id: offset
      type: System.UIntPtr
    - id: span
      type: System.Span{{T}}
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    typeParameters:
    - id: T
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueWriteBuffer(Of T As Structure)(commandQueue As CLCommandQueue, buffer As CLBuffer, blockingWrite As Boolean, offset As UIntPtr, span As Span(Of T), eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueWriteBuffer*
  nameWithType.vb: CL.EnqueueWriteBuffer(Of T)(CLCommandQueue, CLBuffer, Boolean, UIntPtr, Span(Of T), CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueWriteBuffer(Of T)(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, Boolean, System.UIntPtr, System.Span(Of T), OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueWriteBuffer(Of T)(CLCommandQueue, CLBuffer, Boolean, UIntPtr, Span(Of T), CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueWriteBufferRect(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueWriteBufferRect(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueWriteBufferRect(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueWriteBufferRect(CLCommandQueue, CLBuffer, bool, nuint[], nuint[], nuint[], nuint, nuint, nuint, nuint, nint, uint, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueWriteBufferRect(CLCommandQueue, CLBuffer, bool, nuint[], nuint[], nuint[], nuint, nuint, nuint, nuint, nint, uint, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueWriteBufferRect(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, bool, nuint[], nuint[], nuint[], nuint, nuint, nuint, nuint, nint, uint, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.1.
  example: []
  syntax:
    content: public static extern CLResultCode EnqueueWriteBufferRect(CLCommandQueue commandQueue, CLBuffer buffer, bool blockingWrite, nuint[] bufferOffset, nuint[] hostOffset, nuint[] region, nuint bufferRowPitch, nuint bufferSlicePitch, nuint hostRowPitch, nuint hostSlicePitch, nint pointer, uint numberOfEventsInWaitList, CLEvent[] eventWaitList, out CLEvent @event)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: buffer
      type: OpenTK.Compute.OpenCL.CLBuffer
    - id: blockingWrite
      type: System.Boolean
    - id: bufferOffset
      type: System.UIntPtr[]
    - id: hostOffset
      type: System.UIntPtr[]
    - id: region
      type: System.UIntPtr[]
    - id: bufferRowPitch
      type: System.UIntPtr
    - id: bufferSlicePitch
      type: System.UIntPtr
    - id: hostRowPitch
      type: System.UIntPtr
    - id: hostSlicePitch
      type: System.UIntPtr
    - id: pointer
      type: System.IntPtr
    - id: numberOfEventsInWaitList
      type: System.UInt32
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueWriteBufferRect(commandQueue As CLCommandQueue, buffer As CLBuffer, blockingWrite As Boolean, bufferOffset As UIntPtr(), hostOffset As UIntPtr(), region As UIntPtr(), bufferRowPitch As UIntPtr, bufferSlicePitch As UIntPtr, hostRowPitch As UIntPtr, hostSlicePitch As UIntPtr, pointer As IntPtr, numberOfEventsInWaitList As UInteger, eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueWriteBufferRect*
  nameWithType.vb: CL.EnqueueWriteBufferRect(CLCommandQueue, CLBuffer, Boolean, UIntPtr(), UIntPtr(), UIntPtr(), UIntPtr, UIntPtr, UIntPtr, UIntPtr, IntPtr, UInteger, CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueWriteBufferRect(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, Boolean, System.UIntPtr(), System.UIntPtr(), System.UIntPtr(), System.UIntPtr, System.UIntPtr, System.UIntPtr, System.UIntPtr, System.IntPtr, UInteger, OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueWriteBufferRect(CLCommandQueue, CLBuffer, Boolean, UIntPtr(), UIntPtr(), UIntPtr(), UIntPtr, UIntPtr, UIntPtr, UIntPtr, IntPtr, UInteger, CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueWriteBufferRect``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,``0[],OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueWriteBufferRect``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,``0[],OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueWriteBufferRect``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,``0[],OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueWriteBufferRect<T>(CLCommandQueue, CLBuffer, bool, nuint[], nuint[], nuint[], nuint, nuint, nuint, nuint, T[], CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueWriteBufferRect<T>(CLCommandQueue, CLBuffer, bool, nuint[], nuint[], nuint[], nuint, nuint, nuint, nuint, T[], CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueWriteBufferRect<T>(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, bool, nuint[], nuint[], nuint[], nuint, nuint, nuint, nuint, T[], OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  source:
    id: EnqueueWriteBufferRect
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 1159
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.1.
  example: []
  syntax:
    content: 'public static CLResultCode EnqueueWriteBufferRect<T>(CLCommandQueue commandQueue, CLBuffer buffer, bool blockingWrite, nuint[] bufferOffset, nuint[] hostOffset, nuint[] region, nuint bufferRowPitch, nuint bufferSlicePitch, nuint hostRowPitch, nuint hostSlicePitch, T[] array, CLEvent[] eventWaitList, out CLEvent @event) where T : unmanaged'
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: buffer
      type: OpenTK.Compute.OpenCL.CLBuffer
    - id: blockingWrite
      type: System.Boolean
    - id: bufferOffset
      type: System.UIntPtr[]
    - id: hostOffset
      type: System.UIntPtr[]
    - id: region
      type: System.UIntPtr[]
    - id: bufferRowPitch
      type: System.UIntPtr
    - id: bufferSlicePitch
      type: System.UIntPtr
    - id: hostRowPitch
      type: System.UIntPtr
    - id: hostSlicePitch
      type: System.UIntPtr
    - id: array
      type: '{T}[]'
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    typeParameters:
    - id: T
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueWriteBufferRect(Of T As Structure)(commandQueue As CLCommandQueue, buffer As CLBuffer, blockingWrite As Boolean, bufferOffset As UIntPtr(), hostOffset As UIntPtr(), region As UIntPtr(), bufferRowPitch As UIntPtr, bufferSlicePitch As UIntPtr, hostRowPitch As UIntPtr, hostSlicePitch As UIntPtr, array As T(), eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueWriteBufferRect*
  nameWithType.vb: CL.EnqueueWriteBufferRect(Of T)(CLCommandQueue, CLBuffer, Boolean, UIntPtr(), UIntPtr(), UIntPtr(), UIntPtr, UIntPtr, UIntPtr, UIntPtr, T(), CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueWriteBufferRect(Of T)(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, Boolean, System.UIntPtr(), System.UIntPtr(), System.UIntPtr(), System.UIntPtr, System.UIntPtr, System.UIntPtr, System.UIntPtr, T(), OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueWriteBufferRect(Of T)(CLCommandQueue, CLBuffer, Boolean, UIntPtr(), UIntPtr(), UIntPtr(), UIntPtr, UIntPtr, UIntPtr, UIntPtr, T(), CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueWriteBufferRect``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.Span{``0},OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueWriteBufferRect``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.Span{``0},OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueWriteBufferRect``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.Span{``0},OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueWriteBufferRect<T>(CLCommandQueue, CLBuffer, bool, nuint[], nuint[], nuint[], nuint, nuint, nuint, nuint, Span<T>, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueWriteBufferRect<T>(CLCommandQueue, CLBuffer, bool, nuint[], nuint[], nuint[], nuint, nuint, nuint, nuint, Span<T>, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueWriteBufferRect<T>(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, bool, nuint[], nuint[], nuint[], nuint, nuint, nuint, nuint, System.Span<T>, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  source:
    id: EnqueueWriteBufferRect
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 1178
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.1.
  example: []
  syntax:
    content: 'public static CLResultCode EnqueueWriteBufferRect<T>(CLCommandQueue commandQueue, CLBuffer buffer, bool blockingWrite, nuint[] bufferOffset, nuint[] hostOffset, nuint[] region, nuint bufferRowPitch, nuint bufferSlicePitch, nuint hostRowPitch, nuint hostSlicePitch, Span<T> span, CLEvent[] eventWaitList, out CLEvent @event) where T : unmanaged'
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: buffer
      type: OpenTK.Compute.OpenCL.CLBuffer
    - id: blockingWrite
      type: System.Boolean
    - id: bufferOffset
      type: System.UIntPtr[]
    - id: hostOffset
      type: System.UIntPtr[]
    - id: region
      type: System.UIntPtr[]
    - id: bufferRowPitch
      type: System.UIntPtr
    - id: bufferSlicePitch
      type: System.UIntPtr
    - id: hostRowPitch
      type: System.UIntPtr
    - id: hostSlicePitch
      type: System.UIntPtr
    - id: span
      type: System.Span{{T}}
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    typeParameters:
    - id: T
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueWriteBufferRect(Of T As Structure)(commandQueue As CLCommandQueue, buffer As CLBuffer, blockingWrite As Boolean, bufferOffset As UIntPtr(), hostOffset As UIntPtr(), region As UIntPtr(), bufferRowPitch As UIntPtr, bufferSlicePitch As UIntPtr, hostRowPitch As UIntPtr, hostSlicePitch As UIntPtr, span As Span(Of T), eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueWriteBufferRect*
  nameWithType.vb: CL.EnqueueWriteBufferRect(Of T)(CLCommandQueue, CLBuffer, Boolean, UIntPtr(), UIntPtr(), UIntPtr(), UIntPtr, UIntPtr, UIntPtr, UIntPtr, Span(Of T), CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueWriteBufferRect(Of T)(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, Boolean, System.UIntPtr(), System.UIntPtr(), System.UIntPtr(), System.UIntPtr, System.UIntPtr, System.UIntPtr, System.UIntPtr, System.Span(Of T), OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueWriteBufferRect(Of T)(CLCommandQueue, CLBuffer, Boolean, UIntPtr(), UIntPtr(), UIntPtr(), UIntPtr, UIntPtr, UIntPtr, UIntPtr, Span(Of T), CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueFillBuffer(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.IntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueFillBuffer(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.IntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueFillBuffer(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.IntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueFillBuffer(CLCommandQueue, CLBuffer, nint, nuint, nuint, nuint, uint, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueFillBuffer(CLCommandQueue, CLBuffer, nint, nuint, nuint, nuint, uint, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueFillBuffer(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, nint, nuint, nuint, nuint, uint, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.2.
  example: []
  syntax:
    content: public static extern CLResultCode EnqueueFillBuffer(CLCommandQueue commandQueue, CLBuffer buffer, nint pattern, nuint patternSize, nuint offset, nuint size, uint numberOfEventsInWaitList, CLEvent[] eventWaitList, out CLEvent @event)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: buffer
      type: OpenTK.Compute.OpenCL.CLBuffer
    - id: pattern
      type: System.IntPtr
    - id: patternSize
      type: System.UIntPtr
    - id: offset
      type: System.UIntPtr
    - id: size
      type: System.UIntPtr
    - id: numberOfEventsInWaitList
      type: System.UInt32
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueFillBuffer(commandQueue As CLCommandQueue, buffer As CLBuffer, pattern As IntPtr, patternSize As UIntPtr, offset As UIntPtr, size As UIntPtr, numberOfEventsInWaitList As UInteger, eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueFillBuffer*
  nameWithType.vb: CL.EnqueueFillBuffer(CLCommandQueue, CLBuffer, IntPtr, UIntPtr, UIntPtr, UIntPtr, UInteger, CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueFillBuffer(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, System.IntPtr, System.UIntPtr, System.UIntPtr, System.UIntPtr, UInteger, OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueFillBuffer(CLCommandQueue, CLBuffer, IntPtr, UIntPtr, UIntPtr, UIntPtr, UInteger, CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueFillBuffer``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,``0[],System.UIntPtr,System.UIntPtr,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueFillBuffer``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,``0[],System.UIntPtr,System.UIntPtr,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueFillBuffer``1(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,``0[],System.UIntPtr,System.UIntPtr,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueFillBuffer<T>(CLCommandQueue, CLBuffer, T[], nuint, nuint, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueFillBuffer<T>(CLCommandQueue, CLBuffer, T[], nuint, nuint, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueFillBuffer<T>(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, T[], nuint, nuint, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  source:
    id: EnqueueFillBuffer
    path: C:\Users\juliu\Documents\GitHub\opentk.net\website\opentk\src\OpenTK.Compute\OpenCL\CL.cs
    startLine: 1207
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.2.
  example: []
  syntax:
    content: 'public static CLResultCode EnqueueFillBuffer<T>(CLCommandQueue commandQueue, CLBuffer buffer, T[] pattern, nuint offset, nuint size, CLEvent[] eventWaitList, out CLEvent @event) where T : unmanaged'
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: buffer
      type: OpenTK.Compute.OpenCL.CLBuffer
    - id: pattern
      type: '{T}[]'
    - id: offset
      type: System.UIntPtr
    - id: size
      type: System.UIntPtr
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    typeParameters:
    - id: T
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueFillBuffer(Of T As Structure)(commandQueue As CLCommandQueue, buffer As CLBuffer, pattern As T(), offset As UIntPtr, size As UIntPtr, eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueFillBuffer*
  nameWithType.vb: CL.EnqueueFillBuffer(Of T)(CLCommandQueue, CLBuffer, T(), UIntPtr, UIntPtr, CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueFillBuffer(Of T)(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, T(), System.UIntPtr, System.UIntPtr, OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueFillBuffer(Of T)(CLCommandQueue, CLBuffer, T(), UIntPtr, UIntPtr, CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueCopyBuffer(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,OpenTK.Compute.OpenCL.CLBuffer,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueCopyBuffer(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,OpenTK.Compute.OpenCL.CLBuffer,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueCopyBuffer(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,OpenTK.Compute.OpenCL.CLBuffer,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueCopyBuffer(CLCommandQueue, CLBuffer, CLBuffer, nuint, nuint, nuint, uint, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueCopyBuffer(CLCommandQueue, CLBuffer, CLBuffer, nuint, nuint, nuint, uint, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueCopyBuffer(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, OpenTK.Compute.OpenCL.CLBuffer, nuint, nuint, nuint, uint, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode EnqueueCopyBuffer(CLCommandQueue commandQueue, CLBuffer srcBuffer, CLBuffer dstBuffer, nuint srcOffset, nuint dstOffset, nuint size, uint numberOfEventsInWaitList, CLEvent[] eventWaitList, out CLEvent @event)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: srcBuffer
      type: OpenTK.Compute.OpenCL.CLBuffer
    - id: dstBuffer
      type: OpenTK.Compute.OpenCL.CLBuffer
    - id: srcOffset
      type: System.UIntPtr
    - id: dstOffset
      type: System.UIntPtr
    - id: size
      type: System.UIntPtr
    - id: numberOfEventsInWaitList
      type: System.UInt32
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueCopyBuffer(commandQueue As CLCommandQueue, srcBuffer As CLBuffer, dstBuffer As CLBuffer, srcOffset As UIntPtr, dstOffset As UIntPtr, size As UIntPtr, numberOfEventsInWaitList As UInteger, eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueCopyBuffer*
  nameWithType.vb: CL.EnqueueCopyBuffer(CLCommandQueue, CLBuffer, CLBuffer, UIntPtr, UIntPtr, UIntPtr, UInteger, CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueCopyBuffer(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, OpenTK.Compute.OpenCL.CLBuffer, System.UIntPtr, System.UIntPtr, System.UIntPtr, UInteger, OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueCopyBuffer(CLCommandQueue, CLBuffer, CLBuffer, UIntPtr, UIntPtr, UIntPtr, UInteger, CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueCopyBufferRect(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,OpenTK.Compute.OpenCL.CLBuffer,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueCopyBufferRect(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,OpenTK.Compute.OpenCL.CLBuffer,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueCopyBufferRect(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,OpenTK.Compute.OpenCL.CLBuffer,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueCopyBufferRect(CLCommandQueue, CLBuffer, CLBuffer, nuint[], nuint[], nuint[], nuint, nuint, nuint, nuint, uint, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueCopyBufferRect(CLCommandQueue, CLBuffer, CLBuffer, nuint[], nuint[], nuint[], nuint, nuint, nuint, nuint, uint, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueCopyBufferRect(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, OpenTK.Compute.OpenCL.CLBuffer, nuint[], nuint[], nuint[], nuint, nuint, nuint, nuint, uint, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.1.
  example: []
  syntax:
    content: public static extern CLResultCode EnqueueCopyBufferRect(CLCommandQueue commandQueue, CLBuffer srcBuffer, CLBuffer dstBuffer, nuint[] srcOrigin, nuint[] dstOrigin, nuint[] region, nuint srcRowPitch, nuint srcSlicePitch, nuint dstRowPitch, nuint dstSlicePitch, uint numberOfEventsInWaitList, CLEvent[] eventWaitList, out CLEvent @event)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: srcBuffer
      type: OpenTK.Compute.OpenCL.CLBuffer
    - id: dstBuffer
      type: OpenTK.Compute.OpenCL.CLBuffer
    - id: srcOrigin
      type: System.UIntPtr[]
    - id: dstOrigin
      type: System.UIntPtr[]
    - id: region
      type: System.UIntPtr[]
    - id: srcRowPitch
      type: System.UIntPtr
    - id: srcSlicePitch
      type: System.UIntPtr
    - id: dstRowPitch
      type: System.UIntPtr
    - id: dstSlicePitch
      type: System.UIntPtr
    - id: numberOfEventsInWaitList
      type: System.UInt32
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueCopyBufferRect(commandQueue As CLCommandQueue, srcBuffer As CLBuffer, dstBuffer As CLBuffer, srcOrigin As UIntPtr(), dstOrigin As UIntPtr(), region As UIntPtr(), srcRowPitch As UIntPtr, srcSlicePitch As UIntPtr, dstRowPitch As UIntPtr, dstSlicePitch As UIntPtr, numberOfEventsInWaitList As UInteger, eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueCopyBufferRect*
  nameWithType.vb: CL.EnqueueCopyBufferRect(CLCommandQueue, CLBuffer, CLBuffer, UIntPtr(), UIntPtr(), UIntPtr(), UIntPtr, UIntPtr, UIntPtr, UIntPtr, UInteger, CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueCopyBufferRect(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, OpenTK.Compute.OpenCL.CLBuffer, System.UIntPtr(), System.UIntPtr(), System.UIntPtr(), System.UIntPtr, System.UIntPtr, System.UIntPtr, System.UIntPtr, UInteger, OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueCopyBufferRect(CLCommandQueue, CLBuffer, CLBuffer, UIntPtr(), UIntPtr(), UIntPtr(), UIntPtr, UIntPtr, UIntPtr, UIntPtr, UInteger, CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueReadImage(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLImage,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueReadImage(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLImage,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueReadImage(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLImage,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueReadImage(CLCommandQueue, CLImage, bool, nuint[], nuint[], nuint, nuint, nint, uint, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueReadImage(CLCommandQueue, CLImage, bool, nuint[], nuint[], nuint, nuint, nint, uint, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueReadImage(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLImage, bool, nuint[], nuint[], nuint, nuint, nint, uint, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode EnqueueReadImage(CLCommandQueue commandQueue, CLImage image, bool blockingRead, nuint[] origin, nuint[] region, nuint rowPitch, nuint slicePitch, nint pointer, uint numberOfEventsInWaitList, CLEvent[] eventWaitList, out CLEvent @event)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: image
      type: OpenTK.Compute.OpenCL.CLImage
    - id: blockingRead
      type: System.Boolean
    - id: origin
      type: System.UIntPtr[]
    - id: region
      type: System.UIntPtr[]
    - id: rowPitch
      type: System.UIntPtr
    - id: slicePitch
      type: System.UIntPtr
    - id: pointer
      type: System.IntPtr
    - id: numberOfEventsInWaitList
      type: System.UInt32
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueReadImage(commandQueue As CLCommandQueue, image As CLImage, blockingRead As Boolean, origin As UIntPtr(), region As UIntPtr(), rowPitch As UIntPtr, slicePitch As UIntPtr, pointer As IntPtr, numberOfEventsInWaitList As UInteger, eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueReadImage*
  nameWithType.vb: CL.EnqueueReadImage(CLCommandQueue, CLImage, Boolean, UIntPtr(), UIntPtr(), UIntPtr, UIntPtr, IntPtr, UInteger, CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueReadImage(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLImage, Boolean, System.UIntPtr(), System.UIntPtr(), System.UIntPtr, System.UIntPtr, System.IntPtr, UInteger, OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueReadImage(CLCommandQueue, CLImage, Boolean, UIntPtr(), UIntPtr(), UIntPtr, UIntPtr, IntPtr, UInteger, CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueWriteImage(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLImage,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueWriteImage(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLImage,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueWriteImage(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLImage,System.Boolean,System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueWriteImage(CLCommandQueue, CLImage, bool, nuint[], nuint[], nuint, nuint, nint, uint, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueWriteImage(CLCommandQueue, CLImage, bool, nuint[], nuint[], nuint, nuint, nint, uint, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueWriteImage(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLImage, bool, nuint[], nuint[], nuint, nuint, nint, uint, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode EnqueueWriteImage(CLCommandQueue commandQueue, CLImage image, bool blockingWrite, nuint[] origin, nuint[] region, nuint inputRowPitch, nuint inputSlicePitch, nint pointer, uint numberOfEventsInWaitList, CLEvent[] eventWaitList, out CLEvent @event)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: image
      type: OpenTK.Compute.OpenCL.CLImage
    - id: blockingWrite
      type: System.Boolean
    - id: origin
      type: System.UIntPtr[]
    - id: region
      type: System.UIntPtr[]
    - id: inputRowPitch
      type: System.UIntPtr
    - id: inputSlicePitch
      type: System.UIntPtr
    - id: pointer
      type: System.IntPtr
    - id: numberOfEventsInWaitList
      type: System.UInt32
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueWriteImage(commandQueue As CLCommandQueue, image As CLImage, blockingWrite As Boolean, origin As UIntPtr(), region As UIntPtr(), inputRowPitch As UIntPtr, inputSlicePitch As UIntPtr, pointer As IntPtr, numberOfEventsInWaitList As UInteger, eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueWriteImage*
  nameWithType.vb: CL.EnqueueWriteImage(CLCommandQueue, CLImage, Boolean, UIntPtr(), UIntPtr(), UIntPtr, UIntPtr, IntPtr, UInteger, CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueWriteImage(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLImage, Boolean, System.UIntPtr(), System.UIntPtr(), System.UIntPtr, System.UIntPtr, System.IntPtr, UInteger, OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueWriteImage(CLCommandQueue, CLImage, Boolean, UIntPtr(), UIntPtr(), UIntPtr, UIntPtr, IntPtr, UInteger, CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueFillImage(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLImage,System.IntPtr,System.UIntPtr[],System.UIntPtr[],System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueFillImage(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLImage,System.IntPtr,System.UIntPtr[],System.UIntPtr[],System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueFillImage(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLImage,System.IntPtr,System.UIntPtr[],System.UIntPtr[],System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueFillImage(CLCommandQueue, CLImage, nint, nuint[], nuint[], uint, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueFillImage(CLCommandQueue, CLImage, nint, nuint[], nuint[], uint, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueFillImage(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLImage, nint, nuint[], nuint[], uint, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.2.
  example: []
  syntax:
    content: public static extern CLResultCode EnqueueFillImage(CLCommandQueue commandQueue, CLImage image, nint fillColor, nuint[] origin, nuint[] region, uint numberOfEventsInWaitList, CLEvent[] eventWaitList, out CLEvent @event)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: image
      type: OpenTK.Compute.OpenCL.CLImage
    - id: fillColor
      type: System.IntPtr
    - id: origin
      type: System.UIntPtr[]
    - id: region
      type: System.UIntPtr[]
    - id: numberOfEventsInWaitList
      type: System.UInt32
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueFillImage(commandQueue As CLCommandQueue, image As CLImage, fillColor As IntPtr, origin As UIntPtr(), region As UIntPtr(), numberOfEventsInWaitList As UInteger, eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueFillImage*
  nameWithType.vb: CL.EnqueueFillImage(CLCommandQueue, CLImage, IntPtr, UIntPtr(), UIntPtr(), UInteger, CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueFillImage(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLImage, System.IntPtr, System.UIntPtr(), System.UIntPtr(), UInteger, OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueFillImage(CLCommandQueue, CLImage, IntPtr, UIntPtr(), UIntPtr(), UInteger, CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueCopyImage(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLImage,OpenTK.Compute.OpenCL.CLImage,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueCopyImage(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLImage,OpenTK.Compute.OpenCL.CLImage,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueCopyImage(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLImage,OpenTK.Compute.OpenCL.CLImage,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueCopyImage(CLCommandQueue, CLImage, CLImage, nuint[], nuint[], nuint[], uint, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueCopyImage(CLCommandQueue, CLImage, CLImage, nuint[], nuint[], nuint[], uint, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueCopyImage(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLImage, OpenTK.Compute.OpenCL.CLImage, nuint[], nuint[], nuint[], uint, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode EnqueueCopyImage(CLCommandQueue commandQueue, CLImage srcImage, CLImage dstImage, nuint[] srcOrigin, nuint[] dstOrigin, nuint[] region, uint numberOfEventsInWaitList, CLEvent[] eventWaitList, out CLEvent @event)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: srcImage
      type: OpenTK.Compute.OpenCL.CLImage
    - id: dstImage
      type: OpenTK.Compute.OpenCL.CLImage
    - id: srcOrigin
      type: System.UIntPtr[]
    - id: dstOrigin
      type: System.UIntPtr[]
    - id: region
      type: System.UIntPtr[]
    - id: numberOfEventsInWaitList
      type: System.UInt32
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueCopyImage(commandQueue As CLCommandQueue, srcImage As CLImage, dstImage As CLImage, srcOrigin As UIntPtr(), dstOrigin As UIntPtr(), region As UIntPtr(), numberOfEventsInWaitList As UInteger, eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueCopyImage*
  nameWithType.vb: CL.EnqueueCopyImage(CLCommandQueue, CLImage, CLImage, UIntPtr(), UIntPtr(), UIntPtr(), UInteger, CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueCopyImage(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLImage, OpenTK.Compute.OpenCL.CLImage, System.UIntPtr(), System.UIntPtr(), System.UIntPtr(), UInteger, OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueCopyImage(CLCommandQueue, CLImage, CLImage, UIntPtr(), UIntPtr(), UIntPtr(), UInteger, CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueCopyImageToBuffer(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLImage,OpenTK.Compute.OpenCL.CLBuffer,System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueCopyImageToBuffer(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLImage,OpenTK.Compute.OpenCL.CLBuffer,System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueCopyImageToBuffer(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLImage,OpenTK.Compute.OpenCL.CLBuffer,System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueCopyImageToBuffer(CLCommandQueue, CLImage, CLBuffer, nuint[], nuint[], nuint, uint, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueCopyImageToBuffer(CLCommandQueue, CLImage, CLBuffer, nuint[], nuint[], nuint, uint, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueCopyImageToBuffer(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLImage, OpenTK.Compute.OpenCL.CLBuffer, nuint[], nuint[], nuint, uint, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode EnqueueCopyImageToBuffer(CLCommandQueue commandQueue, CLImage srcImage, CLBuffer dstBuffer, nuint[] srcOrigin, nuint[] region, nuint dstOffset, uint numberOfEventsInWaitList, CLEvent[] eventWaitList, out CLEvent @event)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: srcImage
      type: OpenTK.Compute.OpenCL.CLImage
    - id: dstBuffer
      type: OpenTK.Compute.OpenCL.CLBuffer
    - id: srcOrigin
      type: System.UIntPtr[]
    - id: region
      type: System.UIntPtr[]
    - id: dstOffset
      type: System.UIntPtr
    - id: numberOfEventsInWaitList
      type: System.UInt32
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueCopyImageToBuffer(commandQueue As CLCommandQueue, srcImage As CLImage, dstBuffer As CLBuffer, srcOrigin As UIntPtr(), region As UIntPtr(), dstOffset As UIntPtr, numberOfEventsInWaitList As UInteger, eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueCopyImageToBuffer*
  nameWithType.vb: CL.EnqueueCopyImageToBuffer(CLCommandQueue, CLImage, CLBuffer, UIntPtr(), UIntPtr(), UIntPtr, UInteger, CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueCopyImageToBuffer(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLImage, OpenTK.Compute.OpenCL.CLBuffer, System.UIntPtr(), System.UIntPtr(), System.UIntPtr, UInteger, OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueCopyImageToBuffer(CLCommandQueue, CLImage, CLBuffer, UIntPtr(), UIntPtr(), UIntPtr, UInteger, CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueCopyBufferToImage(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,OpenTK.Compute.OpenCL.CLImage,System.UIntPtr,System.UIntPtr[],System.UIntPtr[],System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueCopyBufferToImage(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,OpenTK.Compute.OpenCL.CLImage,System.UIntPtr,System.UIntPtr[],System.UIntPtr[],System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueCopyBufferToImage(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,OpenTK.Compute.OpenCL.CLImage,System.UIntPtr,System.UIntPtr[],System.UIntPtr[],System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueCopyBufferToImage(CLCommandQueue, CLBuffer, CLImage, nuint, nuint[], nuint[], uint, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueCopyBufferToImage(CLCommandQueue, CLBuffer, CLImage, nuint, nuint[], nuint[], uint, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueCopyBufferToImage(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, OpenTK.Compute.OpenCL.CLImage, nuint, nuint[], nuint[], uint, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode EnqueueCopyBufferToImage(CLCommandQueue commandQueue, CLBuffer srcBuffer, CLImage dstImage, nuint srcOffset, nuint[] dstOrigin, nuint[] region, uint numberOfEventsInWaitList, CLEvent[] eventWaitList, out CLEvent @event)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: srcBuffer
      type: OpenTK.Compute.OpenCL.CLBuffer
    - id: dstImage
      type: OpenTK.Compute.OpenCL.CLImage
    - id: srcOffset
      type: System.UIntPtr
    - id: dstOrigin
      type: System.UIntPtr[]
    - id: region
      type: System.UIntPtr[]
    - id: numberOfEventsInWaitList
      type: System.UInt32
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueCopyBufferToImage(commandQueue As CLCommandQueue, srcBuffer As CLBuffer, dstImage As CLImage, srcOffset As UIntPtr, dstOrigin As UIntPtr(), region As UIntPtr(), numberOfEventsInWaitList As UInteger, eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueCopyBufferToImage*
  nameWithType.vb: CL.EnqueueCopyBufferToImage(CLCommandQueue, CLBuffer, CLImage, UIntPtr, UIntPtr(), UIntPtr(), UInteger, CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueCopyBufferToImage(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, OpenTK.Compute.OpenCL.CLImage, System.UIntPtr, System.UIntPtr(), System.UIntPtr(), UInteger, OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueCopyBufferToImage(CLCommandQueue, CLBuffer, CLImage, UIntPtr, UIntPtr(), UIntPtr(), UInteger, CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueMapBuffer(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,OpenTK.Compute.OpenCL.MapFlags,System.UIntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@,OpenTK.Compute.OpenCL.CLResultCode@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueMapBuffer(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,OpenTK.Compute.OpenCL.MapFlags,System.UIntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@,OpenTK.Compute.OpenCL.CLResultCode@)
  id: EnqueueMapBuffer(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.Boolean,OpenTK.Compute.OpenCL.MapFlags,System.UIntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@,OpenTK.Compute.OpenCL.CLResultCode@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueMapBuffer(CLCommandQueue, CLBuffer, bool, MapFlags, nuint, nuint, uint, CLEvent[], out CLEvent, out CLResultCode)
  nameWithType: CL.EnqueueMapBuffer(CLCommandQueue, CLBuffer, bool, MapFlags, nuint, nuint, uint, CLEvent[], out CLEvent, out CLResultCode)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueMapBuffer(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, bool, OpenTK.Compute.OpenCL.MapFlags, nuint, nuint, uint, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent, out OpenTK.Compute.OpenCL.CLResultCode)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern nint EnqueueMapBuffer(CLCommandQueue commandQueue, CLBuffer buffer, bool blockingMap, MapFlags flags, nuint offset, nuint size, uint numberOfEventsInWaitList, CLEvent[] eventWaitList, out CLEvent @event, out CLResultCode resultCode)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: buffer
      type: OpenTK.Compute.OpenCL.CLBuffer
    - id: blockingMap
      type: System.Boolean
    - id: flags
      type: OpenTK.Compute.OpenCL.MapFlags
    - id: offset
      type: System.UIntPtr
    - id: size
      type: System.UIntPtr
    - id: numberOfEventsInWaitList
      type: System.UInt32
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    - id: resultCode
      type: OpenTK.Compute.OpenCL.CLResultCode
    return:
      type: System.IntPtr
    content.vb: Public Shared Function EnqueueMapBuffer(commandQueue As CLCommandQueue, buffer As CLBuffer, blockingMap As Boolean, flags As MapFlags, offset As UIntPtr, size As UIntPtr, numberOfEventsInWaitList As UInteger, eventWaitList As CLEvent(), [event] As CLEvent, resultCode As CLResultCode) As IntPtr
  overload: OpenTK.Compute.OpenCL.CL.EnqueueMapBuffer*
  nameWithType.vb: CL.EnqueueMapBuffer(CLCommandQueue, CLBuffer, Boolean, MapFlags, UIntPtr, UIntPtr, UInteger, CLEvent(), CLEvent, CLResultCode)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueMapBuffer(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, Boolean, OpenTK.Compute.OpenCL.MapFlags, System.UIntPtr, System.UIntPtr, UInteger, OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent, OpenTK.Compute.OpenCL.CLResultCode)
  name.vb: EnqueueMapBuffer(CLCommandQueue, CLBuffer, Boolean, MapFlags, UIntPtr, UIntPtr, UInteger, CLEvent(), CLEvent, CLResultCode)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueMapImage(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLImage,System.Boolean,OpenTK.Compute.OpenCL.MapFlags,System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@,OpenTK.Compute.OpenCL.CLResultCode@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueMapImage(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLImage,System.Boolean,OpenTK.Compute.OpenCL.MapFlags,System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@,OpenTK.Compute.OpenCL.CLResultCode@)
  id: EnqueueMapImage(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLImage,System.Boolean,OpenTK.Compute.OpenCL.MapFlags,System.UIntPtr[],System.UIntPtr[],System.UIntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@,OpenTK.Compute.OpenCL.CLResultCode@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueMapImage(CLCommandQueue, CLImage, bool, MapFlags, nuint[], nuint[], nuint, nuint, uint, CLEvent[], out CLEvent, out CLResultCode)
  nameWithType: CL.EnqueueMapImage(CLCommandQueue, CLImage, bool, MapFlags, nuint[], nuint[], nuint, nuint, uint, CLEvent[], out CLEvent, out CLResultCode)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueMapImage(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLImage, bool, OpenTK.Compute.OpenCL.MapFlags, nuint[], nuint[], nuint, nuint, uint, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent, out OpenTK.Compute.OpenCL.CLResultCode)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern nint EnqueueMapImage(CLCommandQueue commandQueue, CLImage image, bool blockingMap, MapFlags flags, nuint[] origin, nuint[] region, nuint rowPitch, nuint slicePitch, uint numberOfEventsInWaitList, CLEvent[] eventWaitList, out CLEvent @event, out CLResultCode resultCode)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: image
      type: OpenTK.Compute.OpenCL.CLImage
    - id: blockingMap
      type: System.Boolean
    - id: flags
      type: OpenTK.Compute.OpenCL.MapFlags
    - id: origin
      type: System.UIntPtr[]
    - id: region
      type: System.UIntPtr[]
    - id: rowPitch
      type: System.UIntPtr
    - id: slicePitch
      type: System.UIntPtr
    - id: numberOfEventsInWaitList
      type: System.UInt32
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    - id: resultCode
      type: OpenTK.Compute.OpenCL.CLResultCode
    return:
      type: System.IntPtr
    content.vb: Public Shared Function EnqueueMapImage(commandQueue As CLCommandQueue, image As CLImage, blockingMap As Boolean, flags As MapFlags, origin As UIntPtr(), region As UIntPtr(), rowPitch As UIntPtr, slicePitch As UIntPtr, numberOfEventsInWaitList As UInteger, eventWaitList As CLEvent(), [event] As CLEvent, resultCode As CLResultCode) As IntPtr
  overload: OpenTK.Compute.OpenCL.CL.EnqueueMapImage*
  nameWithType.vb: CL.EnqueueMapImage(CLCommandQueue, CLImage, Boolean, MapFlags, UIntPtr(), UIntPtr(), UIntPtr, UIntPtr, UInteger, CLEvent(), CLEvent, CLResultCode)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueMapImage(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLImage, Boolean, OpenTK.Compute.OpenCL.MapFlags, System.UIntPtr(), System.UIntPtr(), System.UIntPtr, System.UIntPtr, UInteger, OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent, OpenTK.Compute.OpenCL.CLResultCode)
  name.vb: EnqueueMapImage(CLCommandQueue, CLImage, Boolean, MapFlags, UIntPtr(), UIntPtr(), UIntPtr, UIntPtr, UInteger, CLEvent(), CLEvent, CLResultCode)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueUnmapMemoryObject(OpenTK.Compute.OpenCL.CLCommandQueue,System.IntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueUnmapMemoryObject(OpenTK.Compute.OpenCL.CLCommandQueue,System.IntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueUnmapMemoryObject(OpenTK.Compute.OpenCL.CLCommandQueue,System.IntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueUnmapMemoryObject(CLCommandQueue, nint, nint, uint, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueUnmapMemoryObject(CLCommandQueue, nint, nint, uint, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueUnmapMemoryObject(OpenTK.Compute.OpenCL.CLCommandQueue, nint, nint, uint, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode EnqueueUnmapMemoryObject(CLCommandQueue commandQueue, nint memoryObject, nint mapperPtr, uint numberOfEventsInWaitList, CLEvent[] eventWaitList, out CLEvent @event)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: memoryObject
      type: System.IntPtr
    - id: mapperPtr
      type: System.IntPtr
    - id: numberOfEventsInWaitList
      type: System.UInt32
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueUnmapMemoryObject(commandQueue As CLCommandQueue, memoryObject As IntPtr, mapperPtr As IntPtr, numberOfEventsInWaitList As UInteger, eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueUnmapMemoryObject*
  nameWithType.vb: CL.EnqueueUnmapMemoryObject(CLCommandQueue, IntPtr, IntPtr, UInteger, CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueUnmapMemoryObject(OpenTK.Compute.OpenCL.CLCommandQueue, System.IntPtr, System.IntPtr, UInteger, OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueUnmapMemoryObject(CLCommandQueue, IntPtr, IntPtr, UInteger, CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueUnmapMemoryObject(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueUnmapMemoryObject(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueUnmapMemoryObject(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLBuffer,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueUnmapMemoryObject(CLCommandQueue, CLBuffer, nint, uint, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueUnmapMemoryObject(CLCommandQueue, CLBuffer, nint, uint, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueUnmapMemoryObject(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, nint, uint, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode EnqueueUnmapMemoryObject(CLCommandQueue commandQueue, CLBuffer memoryObject, nint mapperPtr, uint numberOfEventsInWaitList, CLEvent[] eventWaitList, out CLEvent @event)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: memoryObject
      type: OpenTK.Compute.OpenCL.CLBuffer
    - id: mapperPtr
      type: System.IntPtr
    - id: numberOfEventsInWaitList
      type: System.UInt32
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueUnmapMemoryObject(commandQueue As CLCommandQueue, memoryObject As CLBuffer, mapperPtr As IntPtr, numberOfEventsInWaitList As UInteger, eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueUnmapMemoryObject*
  nameWithType.vb: CL.EnqueueUnmapMemoryObject(CLCommandQueue, CLBuffer, IntPtr, UInteger, CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueUnmapMemoryObject(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLBuffer, System.IntPtr, UInteger, OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueUnmapMemoryObject(CLCommandQueue, CLBuffer, IntPtr, UInteger, CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueUnmapMemoryObject(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLImage,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueUnmapMemoryObject(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLImage,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueUnmapMemoryObject(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLImage,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueUnmapMemoryObject(CLCommandQueue, CLImage, nint, uint, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueUnmapMemoryObject(CLCommandQueue, CLImage, nint, uint, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueUnmapMemoryObject(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLImage, nint, uint, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode EnqueueUnmapMemoryObject(CLCommandQueue commandQueue, CLImage memoryObject, nint mapperPtr, uint numberOfEventsInWaitList, CLEvent[] eventWaitList, out CLEvent @event)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: memoryObject
      type: OpenTK.Compute.OpenCL.CLImage
    - id: mapperPtr
      type: System.IntPtr
    - id: numberOfEventsInWaitList
      type: System.UInt32
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueUnmapMemoryObject(commandQueue As CLCommandQueue, memoryObject As CLImage, mapperPtr As IntPtr, numberOfEventsInWaitList As UInteger, eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueUnmapMemoryObject*
  nameWithType.vb: CL.EnqueueUnmapMemoryObject(CLCommandQueue, CLImage, IntPtr, UInteger, CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueUnmapMemoryObject(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLImage, System.IntPtr, UInteger, OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueUnmapMemoryObject(CLCommandQueue, CLImage, IntPtr, UInteger, CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueMigrateMemoryObjects(OpenTK.Compute.OpenCL.CLCommandQueue,System.UInt32,System.IntPtr[],OpenTK.Compute.OpenCL.MemoryMigrationFlags,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueMigrateMemoryObjects(OpenTK.Compute.OpenCL.CLCommandQueue,System.UInt32,System.IntPtr[],OpenTK.Compute.OpenCL.MemoryMigrationFlags,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueMigrateMemoryObjects(OpenTK.Compute.OpenCL.CLCommandQueue,System.UInt32,System.IntPtr[],OpenTK.Compute.OpenCL.MemoryMigrationFlags,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueMigrateMemoryObjects(CLCommandQueue, uint, nint[], MemoryMigrationFlags, uint, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueMigrateMemoryObjects(CLCommandQueue, uint, nint[], MemoryMigrationFlags, uint, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueMigrateMemoryObjects(OpenTK.Compute.OpenCL.CLCommandQueue, uint, nint[], OpenTK.Compute.OpenCL.MemoryMigrationFlags, uint, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.2.
  example: []
  syntax:
    content: public static extern CLResultCode EnqueueMigrateMemoryObjects(CLCommandQueue commandQueue, uint numberOfMemoryObjects, nint[] memoryObjects, MemoryMigrationFlags flags, uint numberOfEventsInWaitList, CLEvent[] eventWaitList, out CLEvent @event)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: numberOfMemoryObjects
      type: System.UInt32
    - id: memoryObjects
      type: System.IntPtr[]
    - id: flags
      type: OpenTK.Compute.OpenCL.MemoryMigrationFlags
    - id: numberOfEventsInWaitList
      type: System.UInt32
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueMigrateMemoryObjects(commandQueue As CLCommandQueue, numberOfMemoryObjects As UInteger, memoryObjects As IntPtr(), flags As MemoryMigrationFlags, numberOfEventsInWaitList As UInteger, eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueMigrateMemoryObjects*
  nameWithType.vb: CL.EnqueueMigrateMemoryObjects(CLCommandQueue, UInteger, IntPtr(), MemoryMigrationFlags, UInteger, CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueMigrateMemoryObjects(OpenTK.Compute.OpenCL.CLCommandQueue, UInteger, System.IntPtr(), OpenTK.Compute.OpenCL.MemoryMigrationFlags, UInteger, OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueMigrateMemoryObjects(CLCommandQueue, UInteger, IntPtr(), MemoryMigrationFlags, UInteger, CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueNDRangeKernel(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLKernel,System.UInt32,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueNDRangeKernel(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLKernel,System.UInt32,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueNDRangeKernel(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLKernel,System.UInt32,System.UIntPtr[],System.UIntPtr[],System.UIntPtr[],System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueNDRangeKernel(CLCommandQueue, CLKernel, uint, nuint[], nuint[], nuint[], uint, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueNDRangeKernel(CLCommandQueue, CLKernel, uint, nuint[], nuint[], nuint[], uint, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueNDRangeKernel(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLKernel, uint, nuint[], nuint[], nuint[], uint, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode EnqueueNDRangeKernel(CLCommandQueue commandQueue, CLKernel kernel, uint workDimension, nuint[] globalWorkOffset, nuint[] globalWorkSize, nuint[] localWorkSize, uint numberOfEventsInWaitList, CLEvent[] eventWaitList, out CLEvent @event)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: kernel
      type: OpenTK.Compute.OpenCL.CLKernel
    - id: workDimension
      type: System.UInt32
    - id: globalWorkOffset
      type: System.UIntPtr[]
    - id: globalWorkSize
      type: System.UIntPtr[]
    - id: localWorkSize
      type: System.UIntPtr[]
    - id: numberOfEventsInWaitList
      type: System.UInt32
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueNDRangeKernel(commandQueue As CLCommandQueue, kernel As CLKernel, workDimension As UInteger, globalWorkOffset As UIntPtr(), globalWorkSize As UIntPtr(), localWorkSize As UIntPtr(), numberOfEventsInWaitList As UInteger, eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueNDRangeKernel*
  nameWithType.vb: CL.EnqueueNDRangeKernel(CLCommandQueue, CLKernel, UInteger, UIntPtr(), UIntPtr(), UIntPtr(), UInteger, CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueNDRangeKernel(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLKernel, UInteger, System.UIntPtr(), System.UIntPtr(), System.UIntPtr(), UInteger, OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueNDRangeKernel(CLCommandQueue, CLKernel, UInteger, UIntPtr(), UIntPtr(), UIntPtr(), UInteger, CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueNativeKernel(OpenTK.Compute.OpenCL.CLCommandQueue,System.IntPtr,System.IntPtr[],System.UIntPtr,System.UInt32,System.IntPtr[],System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueNativeKernel(OpenTK.Compute.OpenCL.CLCommandQueue,System.IntPtr,System.IntPtr[],System.UIntPtr,System.UInt32,System.IntPtr[],System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueNativeKernel(OpenTK.Compute.OpenCL.CLCommandQueue,System.IntPtr,System.IntPtr[],System.UIntPtr,System.UInt32,System.IntPtr[],System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueNativeKernel(CLCommandQueue, nint, nint[], nuint, uint, nint[], nint, uint, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueNativeKernel(CLCommandQueue, nint, nint[], nuint, uint, nint[], nint, uint, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueNativeKernel(OpenTK.Compute.OpenCL.CLCommandQueue, nint, nint[], nuint, uint, nint[], nint, uint, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: public static extern CLResultCode EnqueueNativeKernel(CLCommandQueue commandQueue, nint userFunction, nint[] arguments, nuint argumentSize, uint numberOfMemoryObjects, nint[] memoryObjects, nint argumentsMemoryLocation, uint numberOfEventsInWaitList, CLEvent[] eventWaitList, out CLEvent @event)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: userFunction
      type: System.IntPtr
    - id: arguments
      type: System.IntPtr[]
    - id: argumentSize
      type: System.UIntPtr
    - id: numberOfMemoryObjects
      type: System.UInt32
    - id: memoryObjects
      type: System.IntPtr[]
    - id: argumentsMemoryLocation
      type: System.IntPtr
    - id: numberOfEventsInWaitList
      type: System.UInt32
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueNativeKernel(commandQueue As CLCommandQueue, userFunction As IntPtr, arguments As IntPtr(), argumentSize As UIntPtr, numberOfMemoryObjects As UInteger, memoryObjects As IntPtr(), argumentsMemoryLocation As IntPtr, numberOfEventsInWaitList As UInteger, eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueNativeKernel*
  nameWithType.vb: CL.EnqueueNativeKernel(CLCommandQueue, IntPtr, IntPtr(), UIntPtr, UInteger, IntPtr(), IntPtr, UInteger, CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueNativeKernel(OpenTK.Compute.OpenCL.CLCommandQueue, System.IntPtr, System.IntPtr(), System.UIntPtr, UInteger, System.IntPtr(), System.IntPtr, UInteger, OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueNativeKernel(CLCommandQueue, IntPtr, IntPtr(), UIntPtr, UInteger, IntPtr(), IntPtr, UInteger, CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueMarkerWithWaitList(OpenTK.Compute.OpenCL.CLCommandQueue,System.UInt32,System.IntPtr[],System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueMarkerWithWaitList(OpenTK.Compute.OpenCL.CLCommandQueue,System.UInt32,System.IntPtr[],System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueMarkerWithWaitList(OpenTK.Compute.OpenCL.CLCommandQueue,System.UInt32,System.IntPtr[],System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueMarkerWithWaitList(CLCommandQueue, uint, nint[], nint, uint, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueMarkerWithWaitList(CLCommandQueue, uint, nint[], nint, uint, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueMarkerWithWaitList(OpenTK.Compute.OpenCL.CLCommandQueue, uint, nint[], nint, uint, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.2.
  example: []
  syntax:
    content: public static extern CLResultCode EnqueueMarkerWithWaitList(CLCommandQueue commandQueue, uint numberOfMemoryObjects, nint[] memoryObjects, nint argumentsMemoryLocation, uint numberOfEventsInWaitList, CLEvent[] eventWaitList, out CLEvent @event)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: numberOfMemoryObjects
      type: System.UInt32
    - id: memoryObjects
      type: System.IntPtr[]
    - id: argumentsMemoryLocation
      type: System.IntPtr
    - id: numberOfEventsInWaitList
      type: System.UInt32
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueMarkerWithWaitList(commandQueue As CLCommandQueue, numberOfMemoryObjects As UInteger, memoryObjects As IntPtr(), argumentsMemoryLocation As IntPtr, numberOfEventsInWaitList As UInteger, eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueMarkerWithWaitList*
  nameWithType.vb: CL.EnqueueMarkerWithWaitList(CLCommandQueue, UInteger, IntPtr(), IntPtr, UInteger, CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueMarkerWithWaitList(OpenTK.Compute.OpenCL.CLCommandQueue, UInteger, System.IntPtr(), System.IntPtr, UInteger, OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueMarkerWithWaitList(CLCommandQueue, UInteger, IntPtr(), IntPtr, UInteger, CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueBarrierWithWaitList(OpenTK.Compute.OpenCL.CLCommandQueue,System.UInt32,System.IntPtr[],System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueBarrierWithWaitList(OpenTK.Compute.OpenCL.CLCommandQueue,System.UInt32,System.IntPtr[],System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueBarrierWithWaitList(OpenTK.Compute.OpenCL.CLCommandQueue,System.UInt32,System.IntPtr[],System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueBarrierWithWaitList(CLCommandQueue, uint, nint[], nint, uint, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueBarrierWithWaitList(CLCommandQueue, uint, nint[], nint, uint, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueBarrierWithWaitList(OpenTK.Compute.OpenCL.CLCommandQueue, uint, nint[], nint, uint, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.2.
  example: []
  syntax:
    content: public static extern CLResultCode EnqueueBarrierWithWaitList(CLCommandQueue commandQueue, uint numberOfMemoryObjects, nint[] memoryObjects, nint argumentsMemoryLocation, uint numberOfEventsInWaitList, CLEvent[] eventWaitList, out CLEvent @event)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: numberOfMemoryObjects
      type: System.UInt32
    - id: memoryObjects
      type: System.IntPtr[]
    - id: argumentsMemoryLocation
      type: System.IntPtr
    - id: numberOfEventsInWaitList
      type: System.UInt32
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueBarrierWithWaitList(commandQueue As CLCommandQueue, numberOfMemoryObjects As UInteger, memoryObjects As IntPtr(), argumentsMemoryLocation As IntPtr, numberOfEventsInWaitList As UInteger, eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueBarrierWithWaitList*
  nameWithType.vb: CL.EnqueueBarrierWithWaitList(CLCommandQueue, UInteger, IntPtr(), IntPtr, UInteger, CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueBarrierWithWaitList(OpenTK.Compute.OpenCL.CLCommandQueue, UInteger, System.IntPtr(), System.IntPtr, UInteger, OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueBarrierWithWaitList(CLCommandQueue, UInteger, IntPtr(), IntPtr, UInteger, CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueSVMFree(OpenTK.Compute.OpenCL.CLCommandQueue,System.UInt32,System.IntPtr[],System.IntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueSVMFree(OpenTK.Compute.OpenCL.CLCommandQueue,System.UInt32,System.IntPtr[],System.IntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueSVMFree(OpenTK.Compute.OpenCL.CLCommandQueue,System.UInt32,System.IntPtr[],System.IntPtr,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueSVMFree(CLCommandQueue, uint, nint[], nint, nint, uint, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueSVMFree(CLCommandQueue, uint, nint[], nint, nint, uint, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueSVMFree(OpenTK.Compute.OpenCL.CLCommandQueue, uint, nint[], nint, nint, uint, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 2.0.
  example: []
  syntax:
    content: public static extern CLResultCode EnqueueSVMFree(CLCommandQueue commandQueue, uint numberOfSvmPointers, nint[] svmPointers, nint svmFreePointersCallback, nint userData, uint numberOfEventsInWaitList, CLEvent[] eventWaitList, out CLEvent @event)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: numberOfSvmPointers
      type: System.UInt32
    - id: svmPointers
      type: System.IntPtr[]
    - id: svmFreePointersCallback
      type: System.IntPtr
    - id: userData
      type: System.IntPtr
    - id: numberOfEventsInWaitList
      type: System.UInt32
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueSVMFree(commandQueue As CLCommandQueue, numberOfSvmPointers As UInteger, svmPointers As IntPtr(), svmFreePointersCallback As IntPtr, userData As IntPtr, numberOfEventsInWaitList As UInteger, eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueSVMFree*
  nameWithType.vb: CL.EnqueueSVMFree(CLCommandQueue, UInteger, IntPtr(), IntPtr, IntPtr, UInteger, CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueSVMFree(OpenTK.Compute.OpenCL.CLCommandQueue, UInteger, System.IntPtr(), System.IntPtr, System.IntPtr, UInteger, OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueSVMFree(CLCommandQueue, UInteger, IntPtr(), IntPtr, IntPtr, UInteger, CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueSvmMemoryCopy(OpenTK.Compute.OpenCL.CLCommandQueue,System.Boolean,System.IntPtr,System.IntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueSvmMemoryCopy(OpenTK.Compute.OpenCL.CLCommandQueue,System.Boolean,System.IntPtr,System.IntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueSvmMemoryCopy(OpenTK.Compute.OpenCL.CLCommandQueue,System.Boolean,System.IntPtr,System.IntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueSvmMemoryCopy(CLCommandQueue, bool, nint, nint, nuint, uint, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueSvmMemoryCopy(CLCommandQueue, bool, nint, nint, nuint, uint, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueSvmMemoryCopy(OpenTK.Compute.OpenCL.CLCommandQueue, bool, nint, nint, nuint, uint, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 2.0.
  example: []
  syntax:
    content: public static extern CLResultCode EnqueueSvmMemoryCopy(CLCommandQueue commandQueue, bool blockingCopy, nint dstPointer, nint srcPointer, nuint size, uint numberOfEventsInWaitList, CLEvent[] eventWaitList, out CLEvent @event)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: blockingCopy
      type: System.Boolean
    - id: dstPointer
      type: System.IntPtr
    - id: srcPointer
      type: System.IntPtr
    - id: size
      type: System.UIntPtr
    - id: numberOfEventsInWaitList
      type: System.UInt32
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueSvmMemoryCopy(commandQueue As CLCommandQueue, blockingCopy As Boolean, dstPointer As IntPtr, srcPointer As IntPtr, size As UIntPtr, numberOfEventsInWaitList As UInteger, eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueSvmMemoryCopy*
  nameWithType.vb: CL.EnqueueSvmMemoryCopy(CLCommandQueue, Boolean, IntPtr, IntPtr, UIntPtr, UInteger, CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueSvmMemoryCopy(OpenTK.Compute.OpenCL.CLCommandQueue, Boolean, System.IntPtr, System.IntPtr, System.UIntPtr, UInteger, OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueSvmMemoryCopy(CLCommandQueue, Boolean, IntPtr, IntPtr, UIntPtr, UInteger, CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueSvmMemoryFill(OpenTK.Compute.OpenCL.CLCommandQueue,System.IntPtr,System.IntPtr,System.UIntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueSvmMemoryFill(OpenTK.Compute.OpenCL.CLCommandQueue,System.IntPtr,System.IntPtr,System.UIntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueSvmMemoryFill(OpenTK.Compute.OpenCL.CLCommandQueue,System.IntPtr,System.IntPtr,System.UIntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueSvmMemoryFill(CLCommandQueue, nint, nint, nuint, nuint, uint, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueSvmMemoryFill(CLCommandQueue, nint, nint, nuint, nuint, uint, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueSvmMemoryFill(OpenTK.Compute.OpenCL.CLCommandQueue, nint, nint, nuint, nuint, uint, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 2.0.
  example: []
  syntax:
    content: public static extern CLResultCode EnqueueSvmMemoryFill(CLCommandQueue commandQueue, nint svmPointer, nint pattern, nuint patternSize, nuint size, uint numberOfEventsInWaitList, CLEvent[] eventWaitList, out CLEvent @event)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: svmPointer
      type: System.IntPtr
    - id: pattern
      type: System.IntPtr
    - id: patternSize
      type: System.UIntPtr
    - id: size
      type: System.UIntPtr
    - id: numberOfEventsInWaitList
      type: System.UInt32
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueSvmMemoryFill(commandQueue As CLCommandQueue, svmPointer As IntPtr, pattern As IntPtr, patternSize As UIntPtr, size As UIntPtr, numberOfEventsInWaitList As UInteger, eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueSvmMemoryFill*
  nameWithType.vb: CL.EnqueueSvmMemoryFill(CLCommandQueue, IntPtr, IntPtr, UIntPtr, UIntPtr, UInteger, CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueSvmMemoryFill(OpenTK.Compute.OpenCL.CLCommandQueue, System.IntPtr, System.IntPtr, System.UIntPtr, System.UIntPtr, UInteger, OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueSvmMemoryFill(CLCommandQueue, IntPtr, IntPtr, UIntPtr, UIntPtr, UInteger, CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueSvmMap(OpenTK.Compute.OpenCL.CLCommandQueue,System.Boolean,OpenTK.Compute.OpenCL.MapFlags,System.IntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueSvmMap(OpenTK.Compute.OpenCL.CLCommandQueue,System.Boolean,OpenTK.Compute.OpenCL.MapFlags,System.IntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueSvmMap(OpenTK.Compute.OpenCL.CLCommandQueue,System.Boolean,OpenTK.Compute.OpenCL.MapFlags,System.IntPtr,System.UIntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueSvmMap(CLCommandQueue, bool, MapFlags, nint, nuint, uint, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueSvmMap(CLCommandQueue, bool, MapFlags, nint, nuint, uint, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueSvmMap(OpenTK.Compute.OpenCL.CLCommandQueue, bool, OpenTK.Compute.OpenCL.MapFlags, nint, nuint, uint, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 2.0.
  example: []
  syntax:
    content: public static extern CLResultCode EnqueueSvmMap(CLCommandQueue commandQueue, bool blockingMap, MapFlags mapFlag, nint svmPointer, nuint size, uint numberOfEventsInWaitList, CLEvent[] eventWaitList, out CLEvent @event)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: blockingMap
      type: System.Boolean
    - id: mapFlag
      type: OpenTK.Compute.OpenCL.MapFlags
    - id: svmPointer
      type: System.IntPtr
    - id: size
      type: System.UIntPtr
    - id: numberOfEventsInWaitList
      type: System.UInt32
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueSvmMap(commandQueue As CLCommandQueue, blockingMap As Boolean, mapFlag As MapFlags, svmPointer As IntPtr, size As UIntPtr, numberOfEventsInWaitList As UInteger, eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueSvmMap*
  nameWithType.vb: CL.EnqueueSvmMap(CLCommandQueue, Boolean, MapFlags, IntPtr, UIntPtr, UInteger, CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueSvmMap(OpenTK.Compute.OpenCL.CLCommandQueue, Boolean, OpenTK.Compute.OpenCL.MapFlags, System.IntPtr, System.UIntPtr, UInteger, OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueSvmMap(CLCommandQueue, Boolean, MapFlags, IntPtr, UIntPtr, UInteger, CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueSVMUnmap(OpenTK.Compute.OpenCL.CLCommandQueue,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueSVMUnmap(OpenTK.Compute.OpenCL.CLCommandQueue,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueSVMUnmap(OpenTK.Compute.OpenCL.CLCommandQueue,System.IntPtr,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueSVMUnmap(CLCommandQueue, nint, uint, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueSVMUnmap(CLCommandQueue, nint, uint, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueSVMUnmap(OpenTK.Compute.OpenCL.CLCommandQueue, nint, uint, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 2.0.
  example: []
  syntax:
    content: public static extern CLResultCode EnqueueSVMUnmap(CLCommandQueue commandQueue, nint svmPointer, uint numberOfEventsInWaitList, CLEvent[] eventWaitList, out CLEvent @event)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: svmPointer
      type: System.IntPtr
    - id: numberOfEventsInWaitList
      type: System.UInt32
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueSVMUnmap(commandQueue As CLCommandQueue, svmPointer As IntPtr, numberOfEventsInWaitList As UInteger, eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueSVMUnmap*
  nameWithType.vb: CL.EnqueueSVMUnmap(CLCommandQueue, IntPtr, UInteger, CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueSVMUnmap(OpenTK.Compute.OpenCL.CLCommandQueue, System.IntPtr, UInteger, OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueSVMUnmap(CLCommandQueue, IntPtr, UInteger, CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueSvmMigrateMemory(OpenTK.Compute.OpenCL.CLCommandQueue,System.UInt32,System.IntPtr[],System.UIntPtr[],OpenTK.Compute.OpenCL.MemoryMigrationFlags,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueSvmMigrateMemory(OpenTK.Compute.OpenCL.CLCommandQueue,System.UInt32,System.IntPtr[],System.UIntPtr[],OpenTK.Compute.OpenCL.MemoryMigrationFlags,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueSvmMigrateMemory(OpenTK.Compute.OpenCL.CLCommandQueue,System.UInt32,System.IntPtr[],System.UIntPtr[],OpenTK.Compute.OpenCL.MemoryMigrationFlags,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueSvmMigrateMemory(CLCommandQueue, uint, nint[], nuint[], MemoryMigrationFlags, uint, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueSvmMigrateMemory(CLCommandQueue, uint, nint[], nuint[], MemoryMigrationFlags, uint, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueSvmMigrateMemory(OpenTK.Compute.OpenCL.CLCommandQueue, uint, nint[], nuint[], OpenTK.Compute.OpenCL.MemoryMigrationFlags, uint, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 2.1.
  example: []
  syntax:
    content: public static extern CLResultCode EnqueueSvmMigrateMemory(CLCommandQueue commandQueue, uint numberOfSvmPointers, nint[] svmPointers, nuint[] sizes, MemoryMigrationFlags memoryMigrationFlags, uint numberOfEventsInWaitList, CLEvent[] eventWaitList, out CLEvent @event)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: numberOfSvmPointers
      type: System.UInt32
    - id: svmPointers
      type: System.IntPtr[]
    - id: sizes
      type: System.UIntPtr[]
    - id: memoryMigrationFlags
      type: OpenTK.Compute.OpenCL.MemoryMigrationFlags
    - id: numberOfEventsInWaitList
      type: System.UInt32
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: Public Shared Function EnqueueSvmMigrateMemory(commandQueue As CLCommandQueue, numberOfSvmPointers As UInteger, svmPointers As IntPtr(), sizes As UIntPtr(), memoryMigrationFlags As MemoryMigrationFlags, numberOfEventsInWaitList As UInteger, eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueSvmMigrateMemory*
  nameWithType.vb: CL.EnqueueSvmMigrateMemory(CLCommandQueue, UInteger, IntPtr(), UIntPtr(), MemoryMigrationFlags, UInteger, CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueSvmMigrateMemory(OpenTK.Compute.OpenCL.CLCommandQueue, UInteger, System.IntPtr(), System.UIntPtr(), OpenTK.Compute.OpenCL.MemoryMigrationFlags, UInteger, OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueSvmMigrateMemory(CLCommandQueue, UInteger, IntPtr(), UIntPtr(), MemoryMigrationFlags, UInteger, CLEvent(), CLEvent)
- uid: OpenTK.Compute.OpenCL.CL.GetExtensionFunctionAddressForPlatform(OpenTK.Compute.OpenCL.CLPlatform,System.String)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetExtensionFunctionAddressForPlatform(OpenTK.Compute.OpenCL.CLPlatform,System.String)
  id: GetExtensionFunctionAddressForPlatform(OpenTK.Compute.OpenCL.CLPlatform,System.String)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetExtensionFunctionAddressForPlatform(CLPlatform, string)
  nameWithType: CL.GetExtensionFunctionAddressForPlatform(CLPlatform, string)
  fullName: OpenTK.Compute.OpenCL.CL.GetExtensionFunctionAddressForPlatform(OpenTK.Compute.OpenCL.CLPlatform, string)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.2.
  example: []
  syntax:
    content: public static extern nint GetExtensionFunctionAddressForPlatform(CLPlatform platform, string functionName)
    parameters:
    - id: platform
      type: OpenTK.Compute.OpenCL.CLPlatform
    - id: functionName
      type: System.String
    return:
      type: System.IntPtr
    content.vb: Public Shared Function GetExtensionFunctionAddressForPlatform(platform As CLPlatform, functionName As String) As IntPtr
  overload: OpenTK.Compute.OpenCL.CL.GetExtensionFunctionAddressForPlatform*
  nameWithType.vb: CL.GetExtensionFunctionAddressForPlatform(CLPlatform, String)
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetExtensionFunctionAddressForPlatform(OpenTK.Compute.OpenCL.CLPlatform, String)
  name.vb: GetExtensionFunctionAddressForPlatform(CLPlatform, String)
- uid: OpenTK.Compute.OpenCL.CL.CreateImage2D(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,OpenTK.Compute.OpenCL.ImageFormat@,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  commentId: M:OpenTK.Compute.OpenCL.CL.CreateImage2D(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,OpenTK.Compute.OpenCL.ImageFormat@,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  id: CreateImage2D(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,OpenTK.Compute.OpenCL.ImageFormat@,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: CreateImage2D(CLContext, MemoryFlags, ref ImageFormat, nuint, nuint, nuint, nint, out CLResultCode)
  nameWithType: CL.CreateImage2D(CLContext, MemoryFlags, ref ImageFormat, nuint, nuint, nuint, nint, out CLResultCode)
  fullName: OpenTK.Compute.OpenCL.CL.CreateImage2D(OpenTK.Compute.OpenCL.CLContext, OpenTK.Compute.OpenCL.MemoryFlags, ref OpenTK.Compute.OpenCL.ImageFormat, nuint, nuint, nuint, nint, out OpenTK.Compute.OpenCL.CLResultCode)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: >-
      [Obsolete("Deprecated method, use CreateImage instead")]

      public static extern CLImage CreateImage2D(CLContext context, MemoryFlags flags, ref ImageFormat imageFormat, nuint imageWidth, nuint imageHeight, nuint imageRowPitch, nint hostPointer, out CLResultCode resultCode)
    parameters:
    - id: context
      type: OpenTK.Compute.OpenCL.CLContext
    - id: flags
      type: OpenTK.Compute.OpenCL.MemoryFlags
    - id: imageFormat
      type: OpenTK.Compute.OpenCL.ImageFormat
    - id: imageWidth
      type: System.UIntPtr
    - id: imageHeight
      type: System.UIntPtr
    - id: imageRowPitch
      type: System.UIntPtr
    - id: hostPointer
      type: System.IntPtr
    - id: resultCode
      type: OpenTK.Compute.OpenCL.CLResultCode
    return:
      type: OpenTK.Compute.OpenCL.CLImage
    content.vb: >-
      <Obsolete("Deprecated method, use CreateImage instead")>

      Public Shared Function CreateImage2D(context As CLContext, flags As MemoryFlags, imageFormat As ImageFormat, imageWidth As UIntPtr, imageHeight As UIntPtr, imageRowPitch As UIntPtr, hostPointer As IntPtr, resultCode As CLResultCode) As CLImage
  overload: OpenTK.Compute.OpenCL.CL.CreateImage2D*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Deprecated method, use CreateImage instead
  nameWithType.vb: CL.CreateImage2D(CLContext, MemoryFlags, ImageFormat, UIntPtr, UIntPtr, UIntPtr, IntPtr, CLResultCode)
  fullName.vb: OpenTK.Compute.OpenCL.CL.CreateImage2D(OpenTK.Compute.OpenCL.CLContext, OpenTK.Compute.OpenCL.MemoryFlags, OpenTK.Compute.OpenCL.ImageFormat, System.UIntPtr, System.UIntPtr, System.UIntPtr, System.IntPtr, OpenTK.Compute.OpenCL.CLResultCode)
  name.vb: CreateImage2D(CLContext, MemoryFlags, ImageFormat, UIntPtr, UIntPtr, UIntPtr, IntPtr, CLResultCode)
- uid: OpenTK.Compute.OpenCL.CL.CreateImage3D(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,OpenTK.Compute.OpenCL.ImageFormat@,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  commentId: M:OpenTK.Compute.OpenCL.CL.CreateImage3D(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,OpenTK.Compute.OpenCL.ImageFormat@,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  id: CreateImage3D(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.MemoryFlags,OpenTK.Compute.OpenCL.ImageFormat@,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr,System.IntPtr,OpenTK.Compute.OpenCL.CLResultCode@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: CreateImage3D(CLContext, MemoryFlags, ref ImageFormat, nuint, nuint, nuint, nuint, nuint, nint, out CLResultCode)
  nameWithType: CL.CreateImage3D(CLContext, MemoryFlags, ref ImageFormat, nuint, nuint, nuint, nuint, nuint, nint, out CLResultCode)
  fullName: OpenTK.Compute.OpenCL.CL.CreateImage3D(OpenTK.Compute.OpenCL.CLContext, OpenTK.Compute.OpenCL.MemoryFlags, ref OpenTK.Compute.OpenCL.ImageFormat, nuint, nuint, nuint, nuint, nuint, nint, out OpenTK.Compute.OpenCL.CLResultCode)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: >-
      [Obsolete("Deprecated method, use CreateImage instead")]

      public static extern CLImage CreateImage3D(CLContext context, MemoryFlags flags, ref ImageFormat imageFormat, nuint imageWidth, nuint imageHeight, nuint imageDepth, nuint imageRowPitch, nuint imageSlicePitch, nint hostPointer, out CLResultCode resultCode)
    parameters:
    - id: context
      type: OpenTK.Compute.OpenCL.CLContext
    - id: flags
      type: OpenTK.Compute.OpenCL.MemoryFlags
    - id: imageFormat
      type: OpenTK.Compute.OpenCL.ImageFormat
    - id: imageWidth
      type: System.UIntPtr
    - id: imageHeight
      type: System.UIntPtr
    - id: imageDepth
      type: System.UIntPtr
    - id: imageRowPitch
      type: System.UIntPtr
    - id: imageSlicePitch
      type: System.UIntPtr
    - id: hostPointer
      type: System.IntPtr
    - id: resultCode
      type: OpenTK.Compute.OpenCL.CLResultCode
    return:
      type: OpenTK.Compute.OpenCL.CLImage
    content.vb: >-
      <Obsolete("Deprecated method, use CreateImage instead")>

      Public Shared Function CreateImage3D(context As CLContext, flags As MemoryFlags, imageFormat As ImageFormat, imageWidth As UIntPtr, imageHeight As UIntPtr, imageDepth As UIntPtr, imageRowPitch As UIntPtr, imageSlicePitch As UIntPtr, hostPointer As IntPtr, resultCode As CLResultCode) As CLImage
  overload: OpenTK.Compute.OpenCL.CL.CreateImage3D*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Deprecated method, use CreateImage instead
  nameWithType.vb: CL.CreateImage3D(CLContext, MemoryFlags, ImageFormat, UIntPtr, UIntPtr, UIntPtr, UIntPtr, UIntPtr, IntPtr, CLResultCode)
  fullName.vb: OpenTK.Compute.OpenCL.CL.CreateImage3D(OpenTK.Compute.OpenCL.CLContext, OpenTK.Compute.OpenCL.MemoryFlags, OpenTK.Compute.OpenCL.ImageFormat, System.UIntPtr, System.UIntPtr, System.UIntPtr, System.UIntPtr, System.UIntPtr, System.IntPtr, OpenTK.Compute.OpenCL.CLResultCode)
  name.vb: CreateImage3D(CLContext, MemoryFlags, ImageFormat, UIntPtr, UIntPtr, UIntPtr, UIntPtr, UIntPtr, IntPtr, CLResultCode)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueMarker(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLEvent)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueMarker(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLEvent)
  id: EnqueueMarker(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLEvent)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueMarker(CLCommandQueue, CLEvent)
  nameWithType: CL.EnqueueMarker(CLCommandQueue, CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueMarker(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: >-
      [Obsolete("Deprecated in OpenCL 1.1, use EnqueueMarkerWithWaitList.")]

      public static extern CLResultCode EnqueueMarker(CLCommandQueue commandQueue, CLEvent @event)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: >-
      <Obsolete("Deprecated in OpenCL 1.1, use EnqueueMarkerWithWaitList.")>

      Public Shared Function EnqueueMarker(commandQueue As CLCommandQueue, [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueMarker*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Deprecated in OpenCL 1.1, use EnqueueMarkerWithWaitList.
- uid: OpenTK.Compute.OpenCL.CL.EnqueueWaitForEvents(OpenTK.Compute.OpenCL.CLCommandQueue,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[])
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueWaitForEvents(OpenTK.Compute.OpenCL.CLCommandQueue,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[])
  id: EnqueueWaitForEvents(OpenTK.Compute.OpenCL.CLCommandQueue,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[])
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueWaitForEvents(CLCommandQueue, uint, CLEvent[])
  nameWithType: CL.EnqueueWaitForEvents(CLCommandQueue, uint, CLEvent[])
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueWaitForEvents(OpenTK.Compute.OpenCL.CLCommandQueue, uint, OpenTK.Compute.OpenCL.CLEvent[])
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: >-
      [Obsolete("Deprecated in OpenCL 1.1, use EnqueueMarkerWithWaitList.")]

      public static extern CLResultCode EnqueueWaitForEvents(CLCommandQueue commandQueue, uint numberOfEventsInWaitList, CLEvent[] eventList)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: numberOfEventsInWaitList
      type: System.UInt32
    - id: eventList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: >-
      <Obsolete("Deprecated in OpenCL 1.1, use EnqueueMarkerWithWaitList.")>

      Public Shared Function EnqueueWaitForEvents(commandQueue As CLCommandQueue, numberOfEventsInWaitList As UInteger, eventList As CLEvent()) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueWaitForEvents*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Deprecated in OpenCL 1.1, use EnqueueMarkerWithWaitList.
  nameWithType.vb: CL.EnqueueWaitForEvents(CLCommandQueue, UInteger, CLEvent())
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueWaitForEvents(OpenTK.Compute.OpenCL.CLCommandQueue, UInteger, OpenTK.Compute.OpenCL.CLEvent())
  name.vb: EnqueueWaitForEvents(CLCommandQueue, UInteger, CLEvent())
- uid: OpenTK.Compute.OpenCL.CL.EnqueueBarrier(OpenTK.Compute.OpenCL.CLCommandQueue)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueBarrier(OpenTK.Compute.OpenCL.CLCommandQueue)
  id: EnqueueBarrier(OpenTK.Compute.OpenCL.CLCommandQueue)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueBarrier(CLCommandQueue)
  nameWithType: CL.EnqueueBarrier(CLCommandQueue)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueBarrier(OpenTK.Compute.OpenCL.CLCommandQueue)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: >-
      [Obsolete("Deprecated in OpenCL 1.1, use EnqueueBarrierWithWaitList.")]

      public static extern CLResultCode EnqueueBarrier(CLCommandQueue commandQueue)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: >-
      <Obsolete("Deprecated in OpenCL 1.1, use EnqueueBarrierWithWaitList.")>

      Public Shared Function EnqueueBarrier(commandQueue As CLCommandQueue) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueBarrier*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Deprecated in OpenCL 1.1, use EnqueueBarrierWithWaitList.
- uid: OpenTK.Compute.OpenCL.CL.UnloadCompiler
  commentId: M:OpenTK.Compute.OpenCL.CL.UnloadCompiler
  id: UnloadCompiler
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: UnloadCompiler()
  nameWithType: CL.UnloadCompiler()
  fullName: OpenTK.Compute.OpenCL.CL.UnloadCompiler()
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: >-
      [Obsolete("Deprecated in OpenCL 1.1, use UnloadPlatformCompiler.")]

      public static extern CLResultCode UnloadCompiler()
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: >-
      <Obsolete("Deprecated in OpenCL 1.1, use UnloadPlatformCompiler.")>

      Public Shared Function UnloadCompiler() As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.UnloadCompiler*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Deprecated in OpenCL 1.1, use UnloadPlatformCompiler.
- uid: OpenTK.Compute.OpenCL.CL.GetExtensionFunctionAddress(System.String)
  commentId: M:OpenTK.Compute.OpenCL.CL.GetExtensionFunctionAddress(System.String)
  id: GetExtensionFunctionAddress(System.String)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: GetExtensionFunctionAddress(string)
  nameWithType: CL.GetExtensionFunctionAddress(string)
  fullName: OpenTK.Compute.OpenCL.CL.GetExtensionFunctionAddress(string)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: >-
      [Obsolete("Deprecated method")]

      public static extern CLResultCode GetExtensionFunctionAddress(string funcName)
    parameters:
    - id: funcName
      type: System.String
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: >-
      <Obsolete("Deprecated method")>

      Public Shared Function GetExtensionFunctionAddress(funcName As String) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.GetExtensionFunctionAddress*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Deprecated method
  nameWithType.vb: CL.GetExtensionFunctionAddress(String)
  fullName.vb: OpenTK.Compute.OpenCL.CL.GetExtensionFunctionAddress(String)
  name.vb: GetExtensionFunctionAddress(String)
- uid: OpenTK.Compute.OpenCL.CL.CreateCommandQueue(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.CommandQueueProperty,OpenTK.Compute.OpenCL.CLResultCode@)
  commentId: M:OpenTK.Compute.OpenCL.CL.CreateCommandQueue(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.CommandQueueProperty,OpenTK.Compute.OpenCL.CLResultCode@)
  id: CreateCommandQueue(OpenTK.Compute.OpenCL.CLContext,OpenTK.Compute.OpenCL.CLDevice,OpenTK.Compute.OpenCL.CommandQueueProperty,OpenTK.Compute.OpenCL.CLResultCode@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: CreateCommandQueue(CLContext, CLDevice, CommandQueueProperty, out CLResultCode)
  nameWithType: CL.CreateCommandQueue(CLContext, CLDevice, CommandQueueProperty, out CLResultCode)
  fullName: OpenTK.Compute.OpenCL.CL.CreateCommandQueue(OpenTK.Compute.OpenCL.CLContext, OpenTK.Compute.OpenCL.CLDevice, OpenTK.Compute.OpenCL.CommandQueueProperty, out OpenTK.Compute.OpenCL.CLResultCode)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: >-
      [Obsolete("Deprecated in OpenCL 1.2, use CreateCommandQueueWithProperties.")]

      public static extern CLCommandQueue CreateCommandQueue(CLContext context, CLDevice device, CommandQueueProperty properties, out CLResultCode resultCode)
    parameters:
    - id: context
      type: OpenTK.Compute.OpenCL.CLContext
    - id: device
      type: OpenTK.Compute.OpenCL.CLDevice
    - id: properties
      type: OpenTK.Compute.OpenCL.CommandQueueProperty
    - id: resultCode
      type: OpenTK.Compute.OpenCL.CLResultCode
    return:
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    content.vb: >-
      <Obsolete("Deprecated in OpenCL 1.2, use CreateCommandQueueWithProperties.")>

      Public Shared Function CreateCommandQueue(context As CLContext, device As CLDevice, properties As CommandQueueProperty, resultCode As CLResultCode) As CLCommandQueue
  overload: OpenTK.Compute.OpenCL.CL.CreateCommandQueue*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Deprecated in OpenCL 1.2, use CreateCommandQueueWithProperties.
  nameWithType.vb: CL.CreateCommandQueue(CLContext, CLDevice, CommandQueueProperty, CLResultCode)
  fullName.vb: OpenTK.Compute.OpenCL.CL.CreateCommandQueue(OpenTK.Compute.OpenCL.CLContext, OpenTK.Compute.OpenCL.CLDevice, OpenTK.Compute.OpenCL.CommandQueueProperty, OpenTK.Compute.OpenCL.CLResultCode)
  name.vb: CreateCommandQueue(CLContext, CLDevice, CommandQueueProperty, CLResultCode)
- uid: OpenTK.Compute.OpenCL.CL.CreateSampler(OpenTK.Compute.OpenCL.CLContext,System.UInt32,OpenTK.Compute.OpenCL.AddressingMode,OpenTK.Compute.OpenCL.FilterMode,OpenTK.Compute.OpenCL.CLResultCode@)
  commentId: M:OpenTK.Compute.OpenCL.CL.CreateSampler(OpenTK.Compute.OpenCL.CLContext,System.UInt32,OpenTK.Compute.OpenCL.AddressingMode,OpenTK.Compute.OpenCL.FilterMode,OpenTK.Compute.OpenCL.CLResultCode@)
  id: CreateSampler(OpenTK.Compute.OpenCL.CLContext,System.UInt32,OpenTK.Compute.OpenCL.AddressingMode,OpenTK.Compute.OpenCL.FilterMode,OpenTK.Compute.OpenCL.CLResultCode@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: CreateSampler(CLContext, uint, AddressingMode, FilterMode, out CLResultCode)
  nameWithType: CL.CreateSampler(CLContext, uint, AddressingMode, FilterMode, out CLResultCode)
  fullName: OpenTK.Compute.OpenCL.CL.CreateSampler(OpenTK.Compute.OpenCL.CLContext, uint, OpenTK.Compute.OpenCL.AddressingMode, OpenTK.Compute.OpenCL.FilterMode, out OpenTK.Compute.OpenCL.CLResultCode)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: >-
      [Obsolete("Deprecated in OpenCL 1.2")]

      public static extern CLSampler CreateSampler(CLContext context, uint normalizedCoordinates, AddressingMode addressingMode, FilterMode filterMode, out CLResultCode resultCode)
    parameters:
    - id: context
      type: OpenTK.Compute.OpenCL.CLContext
    - id: normalizedCoordinates
      type: System.UInt32
    - id: addressingMode
      type: OpenTK.Compute.OpenCL.AddressingMode
    - id: filterMode
      type: OpenTK.Compute.OpenCL.FilterMode
    - id: resultCode
      type: OpenTK.Compute.OpenCL.CLResultCode
    return:
      type: OpenTK.Compute.OpenCL.CLSampler
    content.vb: >-
      <Obsolete("Deprecated in OpenCL 1.2")>

      Public Shared Function CreateSampler(context As CLContext, normalizedCoordinates As UInteger, addressingMode As AddressingMode, filterMode As FilterMode, resultCode As CLResultCode) As CLSampler
  overload: OpenTK.Compute.OpenCL.CL.CreateSampler*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Deprecated in OpenCL 1.2
  nameWithType.vb: CL.CreateSampler(CLContext, UInteger, AddressingMode, FilterMode, CLResultCode)
  fullName.vb: OpenTK.Compute.OpenCL.CL.CreateSampler(OpenTK.Compute.OpenCL.CLContext, UInteger, OpenTK.Compute.OpenCL.AddressingMode, OpenTK.Compute.OpenCL.FilterMode, OpenTK.Compute.OpenCL.CLResultCode)
  name.vb: CreateSampler(CLContext, UInteger, AddressingMode, FilterMode, CLResultCode)
- uid: OpenTK.Compute.OpenCL.CL.EnqueueTask(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLKernel,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  commentId: M:OpenTK.Compute.OpenCL.CL.EnqueueTask(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLKernel,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  id: EnqueueTask(OpenTK.Compute.OpenCL.CLCommandQueue,OpenTK.Compute.OpenCL.CLKernel,System.UInt32,OpenTK.Compute.OpenCL.CLEvent[],OpenTK.Compute.OpenCL.CLEvent@)
  parent: OpenTK.Compute.OpenCL.CL
  langs:
  - csharp
  - vb
  name: EnqueueTask(CLCommandQueue, CLKernel, uint, CLEvent[], out CLEvent)
  nameWithType: CL.EnqueueTask(CLCommandQueue, CLKernel, uint, CLEvent[], out CLEvent)
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueTask(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLKernel, uint, OpenTK.Compute.OpenCL.CLEvent[], out OpenTK.Compute.OpenCL.CLEvent)
  type: Method
  assemblies:
  - OpenTK.Compute
  namespace: OpenTK.Compute.OpenCL
  summary: Introduced in OpenCL 1.0.
  example: []
  syntax:
    content: >-
      [Obsolete("Deprecated in OpenCL 1.2")]

      public static extern CLResultCode EnqueueTask(CLCommandQueue commandQueue, CLKernel kernel, uint numberOfEventsInWaitList, CLEvent[] eventWaitList, out CLEvent @event)
    parameters:
    - id: commandQueue
      type: OpenTK.Compute.OpenCL.CLCommandQueue
    - id: kernel
      type: OpenTK.Compute.OpenCL.CLKernel
    - id: numberOfEventsInWaitList
      type: System.UInt32
    - id: eventWaitList
      type: OpenTK.Compute.OpenCL.CLEvent[]
    - id: event
      type: OpenTK.Compute.OpenCL.CLEvent
    return:
      type: OpenTK.Compute.OpenCL.CLResultCode
    content.vb: >-
      <Obsolete("Deprecated in OpenCL 1.2")>

      Public Shared Function EnqueueTask(commandQueue As CLCommandQueue, kernel As CLKernel, numberOfEventsInWaitList As UInteger, eventWaitList As CLEvent(), [event] As CLEvent) As CLResultCode
  overload: OpenTK.Compute.OpenCL.CL.EnqueueTask*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Deprecated in OpenCL 1.2
  nameWithType.vb: CL.EnqueueTask(CLCommandQueue, CLKernel, UInteger, CLEvent(), CLEvent)
  fullName.vb: OpenTK.Compute.OpenCL.CL.EnqueueTask(OpenTK.Compute.OpenCL.CLCommandQueue, OpenTK.Compute.OpenCL.CLKernel, UInteger, OpenTK.Compute.OpenCL.CLEvent(), OpenTK.Compute.OpenCL.CLEvent)
  name.vb: EnqueueTask(CLCommandQueue, CLKernel, UInteger, CLEvent(), CLEvent)
references:
- uid: OpenTK.Compute.OpenCL
  commentId: N:OpenTK.Compute.OpenCL
  href: OpenTK.html
  name: OpenTK.Compute.OpenCL
  nameWithType: OpenTK.Compute.OpenCL
  fullName: OpenTK.Compute.OpenCL
  spec.csharp:
  - uid: OpenTK
    name: OpenTK
    href: OpenTK.html
  - name: .
  - uid: OpenTK.Compute
    name: Compute
    href: OpenTK.Compute.html
  - name: .
  - uid: OpenTK.Compute.OpenCL
    name: OpenCL
    href: OpenTK.Compute.OpenCL.html
  spec.vb:
  - uid: OpenTK
    name: OpenTK
    href: OpenTK.html
  - name: .
  - uid: OpenTK.Compute
    name: Compute
    href: OpenTK.Compute.html
  - name: .
  - uid: OpenTK.Compute.OpenCL
    name: OpenCL
    href: OpenTK.Compute.OpenCL.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: OpenTK.Compute.Native.CLBase
  commentId: T:OpenTK.Compute.Native.CLBase
  parent: OpenTK.Compute.Native
  href: OpenTK.Compute.Native.CLBase.html
  name: CLBase
  nameWithType: CLBase
  fullName: OpenTK.Compute.Native.CLBase
- uid: OpenTK.Compute.Native.CLBase.RegisterOpenCLResolver
  commentId: M:OpenTK.Compute.Native.CLBase.RegisterOpenCLResolver
  parent: OpenTK.Compute.Native.CLBase
  href: OpenTK.Compute.Native.CLBase.html#OpenTK_Compute_Native_CLBase_RegisterOpenCLResolver
  name: RegisterOpenCLResolver()
  nameWithType: CLBase.RegisterOpenCLResolver()
  fullName: OpenTK.Compute.Native.CLBase.RegisterOpenCLResolver()
  spec.csharp:
  - uid: OpenTK.Compute.Native.CLBase.RegisterOpenCLResolver
    name: RegisterOpenCLResolver
    href: OpenTK.Compute.Native.CLBase.html#OpenTK_Compute_Native_CLBase_RegisterOpenCLResolver
  - name: (
  - name: )
  spec.vb:
  - uid: OpenTK.Compute.Native.CLBase.RegisterOpenCLResolver
    name: RegisterOpenCLResolver
    href: OpenTK.Compute.Native.CLBase.html#OpenTK_Compute_Native_CLBase_RegisterOpenCLResolver
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: OpenTK.Compute.Native
  commentId: N:OpenTK.Compute.Native
  href: OpenTK.html
  name: OpenTK.Compute.Native
  nameWithType: OpenTK.Compute.Native
  fullName: OpenTK.Compute.Native
  spec.csharp:
  - uid: OpenTK
    name: OpenTK
    href: OpenTK.html
  - name: .
  - uid: OpenTK.Compute
    name: Compute
    href: OpenTK.Compute.html
  - name: .
  - uid: OpenTK.Compute.Native
    name: Native
    href: OpenTK.Compute.Native.html
  spec.vb:
  - uid: OpenTK
    name: OpenTK
    href: OpenTK.html
  - name: .
  - uid: OpenTK.Compute
    name: Compute
    href: OpenTK.Compute.html
  - name: .
  - uid: OpenTK.Compute.Native
    name: Native
    href: OpenTK.Compute.Native.html
- uid: OpenTK.Compute.OpenCL.CLPlatform
  commentId: T:OpenTK.Compute.OpenCL.CLPlatform
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.CLPlatform.html
  name: CLPlatform
  nameWithType: CLPlatform
  fullName: OpenTK.Compute.OpenCL.CLPlatform
- uid: OpenTK.Compute.OpenCL.CLResultCode.Success
  commentId: F:OpenTK.Compute.OpenCL.CLResultCode.Success
  href: OpenTK.Compute.OpenCL.CLResultCode.html#OpenTK_Compute_OpenCL_CLResultCode_Success
  name: Success
  nameWithType: CLResultCode.Success
  fullName: OpenTK.Compute.OpenCL.CLResultCode.Success
- uid: OpenTK.Compute.OpenCL.CL.GetPlatformIds*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.GetPlatformIds
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_GetPlatformIds_System_UInt32_OpenTK_Compute_OpenCL_CLPlatform___System_UInt32__
  name: GetPlatformIds
  nameWithType: CL.GetPlatformIds
  fullName: OpenTK.Compute.OpenCL.CL.GetPlatformIds
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint32
  name: uint
  nameWithType: uint
  fullName: uint
  nameWithType.vb: UInteger
  fullName.vb: UInteger
  name.vb: UInteger
- uid: OpenTK.Compute.OpenCL.CLPlatform[]
  isExternal: true
  href: OpenTK.Compute.OpenCL.CLPlatform.html
  name: CLPlatform[]
  nameWithType: CLPlatform[]
  fullName: OpenTK.Compute.OpenCL.CLPlatform[]
  nameWithType.vb: CLPlatform()
  fullName.vb: OpenTK.Compute.OpenCL.CLPlatform()
  name.vb: CLPlatform()
  spec.csharp:
  - uid: OpenTK.Compute.OpenCL.CLPlatform
    name: CLPlatform
    href: OpenTK.Compute.OpenCL.CLPlatform.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: OpenTK.Compute.OpenCL.CLPlatform
    name: CLPlatform
    href: OpenTK.Compute.OpenCL.CLPlatform.html
  - name: (
  - name: )
- uid: OpenTK.Compute.OpenCL.CLResultCode
  commentId: T:OpenTK.Compute.OpenCL.CLResultCode
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.CLResultCode.html
  name: CLResultCode
  nameWithType: CLResultCode
  fullName: OpenTK.Compute.OpenCL.CLResultCode
- uid: OpenTK.Compute.OpenCL.CL.GetPlatformInfo*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.GetPlatformInfo
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_GetPlatformInfo_OpenTK_Compute_OpenCL_CLPlatform_OpenTK_Compute_OpenCL_PlatformInfo_System_UIntPtr_System_Byte___System_UIntPtr__
  name: GetPlatformInfo
  nameWithType: CL.GetPlatformInfo
  fullName: OpenTK.Compute.OpenCL.CL.GetPlatformInfo
- uid: OpenTK.Compute.OpenCL.PlatformInfo
  commentId: T:OpenTK.Compute.OpenCL.PlatformInfo
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.PlatformInfo.html
  name: PlatformInfo
  nameWithType: PlatformInfo
  fullName: OpenTK.Compute.OpenCL.PlatformInfo
- uid: System.UIntPtr
  commentId: T:System.UIntPtr
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uintptr
  name: nuint
  nameWithType: nuint
  fullName: nuint
  nameWithType.vb: UIntPtr
  fullName.vb: System.UIntPtr
  name.vb: UIntPtr
- uid: System.Byte[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte[]
  nameWithType: byte[]
  fullName: byte[]
  nameWithType.vb: Byte()
  fullName.vb: Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
- uid: OpenTK.Compute.OpenCL.CL.GetDeviceIds*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.GetDeviceIds
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_GetDeviceIds_OpenTK_Compute_OpenCL_CLPlatform_OpenTK_Compute_OpenCL_DeviceType_System_UInt32_OpenTK_Compute_OpenCL_CLDevice___System_UInt32__
  name: GetDeviceIds
  nameWithType: CL.GetDeviceIds
  fullName: OpenTK.Compute.OpenCL.CL.GetDeviceIds
- uid: OpenTK.Compute.OpenCL.DeviceType
  commentId: T:OpenTK.Compute.OpenCL.DeviceType
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.DeviceType.html
  name: DeviceType
  nameWithType: DeviceType
  fullName: OpenTK.Compute.OpenCL.DeviceType
- uid: OpenTK.Compute.OpenCL.CLDevice[]
  isExternal: true
  href: OpenTK.Compute.OpenCL.CLDevice.html
  name: CLDevice[]
  nameWithType: CLDevice[]
  fullName: OpenTK.Compute.OpenCL.CLDevice[]
  nameWithType.vb: CLDevice()
  fullName.vb: OpenTK.Compute.OpenCL.CLDevice()
  name.vb: CLDevice()
  spec.csharp:
  - uid: OpenTK.Compute.OpenCL.CLDevice
    name: CLDevice
    href: OpenTK.Compute.OpenCL.CLDevice.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: OpenTK.Compute.OpenCL.CLDevice
    name: CLDevice
    href: OpenTK.Compute.OpenCL.CLDevice.html
  - name: (
  - name: )
- uid: OpenTK.Compute.OpenCL.CL.GetDeviceInfo*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.GetDeviceInfo
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_GetDeviceInfo_OpenTK_Compute_OpenCL_CLDevice_OpenTK_Compute_OpenCL_DeviceInfo_System_UIntPtr_System_Byte___System_UIntPtr__
  name: GetDeviceInfo
  nameWithType: CL.GetDeviceInfo
  fullName: OpenTK.Compute.OpenCL.CL.GetDeviceInfo
- uid: OpenTK.Compute.OpenCL.CLDevice
  commentId: T:OpenTK.Compute.OpenCL.CLDevice
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.CLDevice.html
  name: CLDevice
  nameWithType: CLDevice
  fullName: OpenTK.Compute.OpenCL.CLDevice
- uid: OpenTK.Compute.OpenCL.DeviceInfo
  commentId: T:OpenTK.Compute.OpenCL.DeviceInfo
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.DeviceInfo.html
  name: DeviceInfo
  nameWithType: DeviceInfo
  fullName: OpenTK.Compute.OpenCL.DeviceInfo
- uid: OpenTK.Compute.OpenCL.CL.CreateSubDevices*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.CreateSubDevices
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_CreateSubDevices_OpenTK_Compute_OpenCL_CLDevice_System_IntPtr___System_UInt32_OpenTK_Compute_OpenCL_CLDevice___System_UInt32__
  name: CreateSubDevices
  nameWithType: CL.CreateSubDevices
  fullName: OpenTK.Compute.OpenCL.CL.CreateSubDevices
- uid: System.IntPtr[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.intptr
  name: nint[]
  nameWithType: nint[]
  fullName: nint[]
  nameWithType.vb: IntPtr()
  fullName.vb: System.IntPtr()
  name.vb: IntPtr()
  spec.csharp:
  - uid: System.IntPtr
    name: nint
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.intptr
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.IntPtr
    name: IntPtr
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.intptr
  - name: (
  - name: )
- uid: OpenTK.Compute.OpenCL.CL.RetainDevice*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.RetainDevice
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_RetainDevice_OpenTK_Compute_OpenCL_CLDevice_
  name: RetainDevice
  nameWithType: CL.RetainDevice
  fullName: OpenTK.Compute.OpenCL.CL.RetainDevice
- uid: OpenTK.Compute.OpenCL.CL.ReleaseDevice*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.ReleaseDevice
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_ReleaseDevice_OpenTK_Compute_OpenCL_CLDevice_
  name: ReleaseDevice
  nameWithType: CL.ReleaseDevice
  fullName: OpenTK.Compute.OpenCL.CL.ReleaseDevice
- uid: OpenTK.Compute.OpenCL.CL.SetDefaultDeviceCommandQueue*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.SetDefaultDeviceCommandQueue
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_SetDefaultDeviceCommandQueue_OpenTK_Compute_OpenCL_CLContext_OpenTK_Compute_OpenCL_CLDevice_OpenTK_Compute_OpenCL_CLCommandQueue_
  name: SetDefaultDeviceCommandQueue
  nameWithType: CL.SetDefaultDeviceCommandQueue
  fullName: OpenTK.Compute.OpenCL.CL.SetDefaultDeviceCommandQueue
- uid: OpenTK.Compute.OpenCL.CLContext
  commentId: T:OpenTK.Compute.OpenCL.CLContext
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.CLContext.html
  name: CLContext
  nameWithType: CLContext
  fullName: OpenTK.Compute.OpenCL.CLContext
- uid: OpenTK.Compute.OpenCL.CLCommandQueue
  commentId: T:OpenTK.Compute.OpenCL.CLCommandQueue
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.CLCommandQueue.html
  name: CLCommandQueue
  nameWithType: CLCommandQueue
  fullName: OpenTK.Compute.OpenCL.CLCommandQueue
- uid: OpenTK.Compute.OpenCL.CL.GetDeviceAndHostTimer*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.GetDeviceAndHostTimer
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_GetDeviceAndHostTimer_OpenTK_Compute_OpenCL_CLDevice_System_IntPtr_System_IntPtr_
  name: GetDeviceAndHostTimer
  nameWithType: CL.GetDeviceAndHostTimer
  fullName: OpenTK.Compute.OpenCL.CL.GetDeviceAndHostTimer
- uid: System.IntPtr
  commentId: T:System.IntPtr
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.intptr
  name: nint
  nameWithType: nint
  fullName: nint
  nameWithType.vb: IntPtr
  fullName.vb: System.IntPtr
  name.vb: IntPtr
- uid: OpenTK.Compute.OpenCL.CL.GetHostTimer*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.GetHostTimer
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_GetHostTimer_OpenTK_Compute_OpenCL_CLDevice_System_IntPtr_
  name: GetHostTimer
  nameWithType: CL.GetHostTimer
  fullName: OpenTK.Compute.OpenCL.CL.GetHostTimer
- uid: OpenTK.Compute.OpenCL.CL.CreateContext*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.CreateContext
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_CreateContext_System_IntPtr_System_UInt32_OpenTK_Compute_OpenCL_CLDevice___System_IntPtr_System_IntPtr_OpenTK_Compute_OpenCL_CLResultCode__
  name: CreateContext
  nameWithType: CL.CreateContext
  fullName: OpenTK.Compute.OpenCL.CL.CreateContext
- uid: OpenTK.Compute.OpenCL.CL.CreateContextFromType*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.CreateContextFromType
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_CreateContextFromType_System_IntPtr_OpenTK_Compute_OpenCL_DeviceType_System_IntPtr_System_IntPtr_OpenTK_Compute_OpenCL_CLResultCode__
  name: CreateContextFromType
  nameWithType: CL.CreateContextFromType
  fullName: OpenTK.Compute.OpenCL.CL.CreateContextFromType
- uid: OpenTK.Compute.OpenCL.CL.RetainContext*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.RetainContext
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_RetainContext_OpenTK_Compute_OpenCL_CLContext_
  name: RetainContext
  nameWithType: CL.RetainContext
  fullName: OpenTK.Compute.OpenCL.CL.RetainContext
- uid: OpenTK.Compute.OpenCL.CL.ReleaseContext*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.ReleaseContext
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_ReleaseContext_OpenTK_Compute_OpenCL_CLContext_
  name: ReleaseContext
  nameWithType: CL.ReleaseContext
  fullName: OpenTK.Compute.OpenCL.CL.ReleaseContext
- uid: OpenTK.Compute.OpenCL.CL.GetContextInfo*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.GetContextInfo
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_GetContextInfo_OpenTK_Compute_OpenCL_CLContext_OpenTK_Compute_OpenCL_ContextInfo_System_UIntPtr_System_Byte___System_UIntPtr__
  name: GetContextInfo
  nameWithType: CL.GetContextInfo
  fullName: OpenTK.Compute.OpenCL.CL.GetContextInfo
- uid: OpenTK.Compute.OpenCL.ContextInfo
  commentId: T:OpenTK.Compute.OpenCL.ContextInfo
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.ContextInfo.html
  name: ContextInfo
  nameWithType: ContextInfo
  fullName: OpenTK.Compute.OpenCL.ContextInfo
- uid: OpenTK.Compute.OpenCL.CL.CreateCommandQueueWithProperties*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.CreateCommandQueueWithProperties
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_CreateCommandQueueWithProperties_OpenTK_Compute_OpenCL_CLContext_System_IntPtr_System_IntPtr_OpenTK_Compute_OpenCL_CLResultCode__
  name: CreateCommandQueueWithProperties
  nameWithType: CL.CreateCommandQueueWithProperties
  fullName: OpenTK.Compute.OpenCL.CL.CreateCommandQueueWithProperties
- uid: OpenTK.Compute.OpenCL.CL.RetainCommandQueue*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.RetainCommandQueue
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_RetainCommandQueue_OpenTK_Compute_OpenCL_CLCommandQueue_
  name: RetainCommandQueue
  nameWithType: CL.RetainCommandQueue
  fullName: OpenTK.Compute.OpenCL.CL.RetainCommandQueue
- uid: OpenTK.Compute.OpenCL.CL.ReleaseCommandQueue*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.ReleaseCommandQueue
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_ReleaseCommandQueue_OpenTK_Compute_OpenCL_CLCommandQueue_
  name: ReleaseCommandQueue
  nameWithType: CL.ReleaseCommandQueue
  fullName: OpenTK.Compute.OpenCL.CL.ReleaseCommandQueue
- uid: OpenTK.Compute.OpenCL.CL.GetCommandQueueInfo*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.GetCommandQueueInfo
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_GetCommandQueueInfo_OpenTK_Compute_OpenCL_CLCommandQueue_OpenTK_Compute_OpenCL_CommandQueueInfo_System_UIntPtr_System_Byte___System_UIntPtr__
  name: GetCommandQueueInfo
  nameWithType: CL.GetCommandQueueInfo
  fullName: OpenTK.Compute.OpenCL.CL.GetCommandQueueInfo
- uid: OpenTK.Compute.OpenCL.CommandQueueInfo
  commentId: T:OpenTK.Compute.OpenCL.CommandQueueInfo
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.CommandQueueInfo.html
  name: CommandQueueInfo
  nameWithType: CommandQueueInfo
  fullName: OpenTK.Compute.OpenCL.CommandQueueInfo
- uid: OpenTK.Compute.OpenCL.CL.CreateBuffer*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.CreateBuffer
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_CreateBuffer_OpenTK_Compute_OpenCL_CLContext_OpenTK_Compute_OpenCL_MemoryFlags_System_UIntPtr_System_IntPtr_OpenTK_Compute_OpenCL_CLResultCode__
  name: CreateBuffer
  nameWithType: CL.CreateBuffer
  fullName: OpenTK.Compute.OpenCL.CL.CreateBuffer
- uid: OpenTK.Compute.OpenCL.MemoryFlags
  commentId: T:OpenTK.Compute.OpenCL.MemoryFlags
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.MemoryFlags.html
  name: MemoryFlags
  nameWithType: MemoryFlags
  fullName: OpenTK.Compute.OpenCL.MemoryFlags
- uid: OpenTK.Compute.OpenCL.CLBuffer
  commentId: T:OpenTK.Compute.OpenCL.CLBuffer
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.CLBuffer.html
  name: CLBuffer
  nameWithType: CLBuffer
  fullName: OpenTK.Compute.OpenCL.CLBuffer
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: System.Span{{T}}
  commentId: T:System.Span{``0}
  parent: System
  definition: System.Span`1
  href: https://learn.microsoft.com/dotnet/api/system.span-1
  name: Span<T>
  nameWithType: Span<T>
  fullName: System.Span<T>
  nameWithType.vb: Span(Of T)
  fullName.vb: System.Span(Of T)
  name.vb: Span(Of T)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Span`1
  commentId: T:System.Span`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.span-1
  name: Span<T>
  nameWithType: Span<T>
  fullName: System.Span<T>
  nameWithType.vb: Span(Of T)
  fullName.vb: System.Span(Of T)
  name.vb: Span(Of T)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: OpenTK.Compute.OpenCL.CL.CreateSubBuffer*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.CreateSubBuffer
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_CreateSubBuffer_OpenTK_Compute_OpenCL_CLBuffer_OpenTK_Compute_OpenCL_MemoryFlags_OpenTK_Compute_OpenCL_BufferCreateType_System_IntPtr_OpenTK_Compute_OpenCL_CLResultCode__
  name: CreateSubBuffer
  nameWithType: CL.CreateSubBuffer
  fullName: OpenTK.Compute.OpenCL.CL.CreateSubBuffer
- uid: OpenTK.Compute.OpenCL.BufferCreateType
  commentId: T:OpenTK.Compute.OpenCL.BufferCreateType
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.BufferCreateType.html
  name: BufferCreateType
  nameWithType: BufferCreateType
  fullName: OpenTK.Compute.OpenCL.BufferCreateType
- uid: OpenTK.Compute.OpenCL.CL.CreateImage*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.CreateImage
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_CreateImage_OpenTK_Compute_OpenCL_CLContext_OpenTK_Compute_OpenCL_MemoryFlags_OpenTK_Compute_OpenCL_ImageFormat__OpenTK_Compute_OpenCL_ImageDescription__System_IntPtr_OpenTK_Compute_OpenCL_CLResultCode__
  name: CreateImage
  nameWithType: CL.CreateImage
  fullName: OpenTK.Compute.OpenCL.CL.CreateImage
- uid: OpenTK.Compute.OpenCL.ImageFormat
  commentId: T:OpenTK.Compute.OpenCL.ImageFormat
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.ImageFormat.html
  name: ImageFormat
  nameWithType: ImageFormat
  fullName: OpenTK.Compute.OpenCL.ImageFormat
- uid: OpenTK.Compute.OpenCL.ImageDescription
  commentId: T:OpenTK.Compute.OpenCL.ImageDescription
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.ImageDescription.html
  name: ImageDescription
  nameWithType: ImageDescription
  fullName: OpenTK.Compute.OpenCL.ImageDescription
- uid: OpenTK.Compute.OpenCL.CLImage
  commentId: T:OpenTK.Compute.OpenCL.CLImage
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.CLImage.html
  name: CLImage
  nameWithType: CLImage
  fullName: OpenTK.Compute.OpenCL.CLImage
- uid: OpenTK.Compute.OpenCL.CL.CreatePipe*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.CreatePipe
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_CreatePipe_OpenTK_Compute_OpenCL_CLContext_OpenTK_Compute_OpenCL_MemoryFlags_System_UInt32_System_UInt32_System_IntPtr___OpenTK_Compute_OpenCL_CLResultCode__
  name: CreatePipe
  nameWithType: CL.CreatePipe
  fullName: OpenTK.Compute.OpenCL.CL.CreatePipe
- uid: OpenTK.Compute.OpenCL.CLPipe
  commentId: T:OpenTK.Compute.OpenCL.CLPipe
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.CLPipe.html
  name: CLPipe
  nameWithType: CLPipe
  fullName: OpenTK.Compute.OpenCL.CLPipe
- uid: OpenTK.Compute.OpenCL.CL.RetainMemoryObject*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.RetainMemoryObject
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_RetainMemoryObject_System_IntPtr_
  name: RetainMemoryObject
  nameWithType: CL.RetainMemoryObject
  fullName: OpenTK.Compute.OpenCL.CL.RetainMemoryObject
- uid: OpenTK.Compute.OpenCL.CL.ReleaseMemoryObject*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.ReleaseMemoryObject
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_ReleaseMemoryObject_System_IntPtr_
  name: ReleaseMemoryObject
  nameWithType: CL.ReleaseMemoryObject
  fullName: OpenTK.Compute.OpenCL.CL.ReleaseMemoryObject
- uid: OpenTK.Compute.OpenCL.CL.GetSupportedImageFormats*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.GetSupportedImageFormats
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_GetSupportedImageFormats_OpenTK_Compute_OpenCL_CLContext_OpenTK_Compute_OpenCL_MemoryFlags_OpenTK_Compute_OpenCL_MemoryObjectType_System_UInt32_OpenTK_Compute_OpenCL_ImageFormat___System_UInt32__
  name: GetSupportedImageFormats
  nameWithType: CL.GetSupportedImageFormats
  fullName: OpenTK.Compute.OpenCL.CL.GetSupportedImageFormats
- uid: OpenTK.Compute.OpenCL.MemoryObjectType
  commentId: T:OpenTK.Compute.OpenCL.MemoryObjectType
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.MemoryObjectType.html
  name: MemoryObjectType
  nameWithType: MemoryObjectType
  fullName: OpenTK.Compute.OpenCL.MemoryObjectType
- uid: OpenTK.Compute.OpenCL.ImageFormat[]
  isExternal: true
  href: OpenTK.Compute.OpenCL.ImageFormat.html
  name: ImageFormat[]
  nameWithType: ImageFormat[]
  fullName: OpenTK.Compute.OpenCL.ImageFormat[]
  nameWithType.vb: ImageFormat()
  fullName.vb: OpenTK.Compute.OpenCL.ImageFormat()
  name.vb: ImageFormat()
  spec.csharp:
  - uid: OpenTK.Compute.OpenCL.ImageFormat
    name: ImageFormat
    href: OpenTK.Compute.OpenCL.ImageFormat.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: OpenTK.Compute.OpenCL.ImageFormat
    name: ImageFormat
    href: OpenTK.Compute.OpenCL.ImageFormat.html
  - name: (
  - name: )
- uid: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.GetMemObjectInfo
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_GetMemObjectInfo_System_IntPtr_OpenTK_Compute_OpenCL_MemoryObjectInfo_System_UIntPtr_System_Byte___System_UIntPtr__
  name: GetMemObjectInfo
  nameWithType: CL.GetMemObjectInfo
  fullName: OpenTK.Compute.OpenCL.CL.GetMemObjectInfo
- uid: OpenTK.Compute.OpenCL.MemoryObjectInfo
  commentId: T:OpenTK.Compute.OpenCL.MemoryObjectInfo
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.MemoryObjectInfo.html
  name: MemoryObjectInfo
  nameWithType: MemoryObjectInfo
  fullName: OpenTK.Compute.OpenCL.MemoryObjectInfo
- uid: OpenTK.Compute.OpenCL.CL.GetImageInfo*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.GetImageInfo
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_GetImageInfo_OpenTK_Compute_OpenCL_CLImage_OpenTK_Compute_OpenCL_ImageInfo_System_UIntPtr_System_Byte___System_UIntPtr__
  name: GetImageInfo
  nameWithType: CL.GetImageInfo
  fullName: OpenTK.Compute.OpenCL.CL.GetImageInfo
- uid: OpenTK.Compute.OpenCL.ImageInfo
  commentId: T:OpenTK.Compute.OpenCL.ImageInfo
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.ImageInfo.html
  name: ImageInfo
  nameWithType: ImageInfo
  fullName: OpenTK.Compute.OpenCL.ImageInfo
- uid: OpenTK.Compute.OpenCL.CL.GetPipeInfo*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.GetPipeInfo
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_GetPipeInfo_OpenTK_Compute_OpenCL_CLPipe_OpenTK_Compute_OpenCL_PipeInfo_System_UIntPtr_System_Byte___System_UIntPtr__
  name: GetPipeInfo
  nameWithType: CL.GetPipeInfo
  fullName: OpenTK.Compute.OpenCL.CL.GetPipeInfo
- uid: OpenTK.Compute.OpenCL.PipeInfo
  commentId: T:OpenTK.Compute.OpenCL.PipeInfo
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.PipeInfo.html
  name: PipeInfo
  nameWithType: PipeInfo
  fullName: OpenTK.Compute.OpenCL.PipeInfo
- uid: OpenTK.Compute.OpenCL.CL.SetMemoryObjectDestructorCallback*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.SetMemoryObjectDestructorCallback
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_SetMemoryObjectDestructorCallback_System_IntPtr_System_IntPtr_System_IntPtr_
  name: SetMemoryObjectDestructorCallback
  nameWithType: CL.SetMemoryObjectDestructorCallback
  fullName: OpenTK.Compute.OpenCL.CL.SetMemoryObjectDestructorCallback
- uid: OpenTK.Compute.OpenCL.CL.SVMAlloc*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.SVMAlloc
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_SVMAlloc_OpenTK_Compute_OpenCL_CLContext_OpenTK_Compute_OpenCL_SvmMemoryFlags_System_UIntPtr_System_UInt32_
  name: SVMAlloc
  nameWithType: CL.SVMAlloc
  fullName: OpenTK.Compute.OpenCL.CL.SVMAlloc
- uid: OpenTK.Compute.OpenCL.SvmMemoryFlags
  commentId: T:OpenTK.Compute.OpenCL.SvmMemoryFlags
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.SvmMemoryFlags.html
  name: SvmMemoryFlags
  nameWithType: SvmMemoryFlags
  fullName: OpenTK.Compute.OpenCL.SvmMemoryFlags
- uid: OpenTK.Compute.OpenCL.CL.SVMFree*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.SVMFree
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_SVMFree_OpenTK_Compute_OpenCL_CLContext_System_IntPtr_
  name: SVMFree
  nameWithType: CL.SVMFree
  fullName: OpenTK.Compute.OpenCL.CL.SVMFree
- uid: OpenTK.Compute.OpenCL.CL.CreateSamplerWithProperties*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.CreateSamplerWithProperties
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_CreateSamplerWithProperties_OpenTK_Compute_OpenCL_CLContext_System_IntPtr_OpenTK_Compute_OpenCL_CLResultCode__
  name: CreateSamplerWithProperties
  nameWithType: CL.CreateSamplerWithProperties
  fullName: OpenTK.Compute.OpenCL.CL.CreateSamplerWithProperties
- uid: OpenTK.Compute.OpenCL.CLSampler
  commentId: T:OpenTK.Compute.OpenCL.CLSampler
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.CLSampler.html
  name: CLSampler
  nameWithType: CLSampler
  fullName: OpenTK.Compute.OpenCL.CLSampler
- uid: OpenTK.Compute.OpenCL.CL.RetainSampler*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.RetainSampler
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_RetainSampler_OpenTK_Compute_OpenCL_CLSampler_
  name: RetainSampler
  nameWithType: CL.RetainSampler
  fullName: OpenTK.Compute.OpenCL.CL.RetainSampler
- uid: OpenTK.Compute.OpenCL.CL.ReleaseSampler*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.ReleaseSampler
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_ReleaseSampler_OpenTK_Compute_OpenCL_CLSampler_
  name: ReleaseSampler
  nameWithType: CL.ReleaseSampler
  fullName: OpenTK.Compute.OpenCL.CL.ReleaseSampler
- uid: OpenTK.Compute.OpenCL.CL.GetSamplerInfo*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.GetSamplerInfo
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_GetSamplerInfo_OpenTK_Compute_OpenCL_CLSampler_OpenTK_Compute_OpenCL_SamplerInfo_System_UIntPtr_System_Byte___System_UIntPtr__
  name: GetSamplerInfo
  nameWithType: CL.GetSamplerInfo
  fullName: OpenTK.Compute.OpenCL.CL.GetSamplerInfo
- uid: OpenTK.Compute.OpenCL.SamplerInfo
  commentId: T:OpenTK.Compute.OpenCL.SamplerInfo
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.SamplerInfo.html
  name: SamplerInfo
  nameWithType: SamplerInfo
  fullName: OpenTK.Compute.OpenCL.SamplerInfo
- uid: OpenTK.Compute.OpenCL.CL.CreateProgramWithSource*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.CreateProgramWithSource
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_CreateProgramWithSource_OpenTK_Compute_OpenCL_CLContext_System_UInt32_System_IntPtr___System_UInt32___OpenTK_Compute_OpenCL_CLResultCode__
  name: CreateProgramWithSource
  nameWithType: CL.CreateProgramWithSource
  fullName: OpenTK.Compute.OpenCL.CL.CreateProgramWithSource
- uid: System.UInt32[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint32
  name: uint[]
  nameWithType: uint[]
  fullName: uint[]
  nameWithType.vb: UInteger()
  fullName.vb: UInteger()
  name.vb: UInteger()
  spec.csharp:
  - uid: System.UInt32
    name: uint
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.UInt32
    name: UInteger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: (
  - name: )
- uid: OpenTK.Compute.OpenCL.CLProgram
  commentId: T:OpenTK.Compute.OpenCL.CLProgram
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.CLProgram.html
  name: CLProgram
  nameWithType: CLProgram
  fullName: OpenTK.Compute.OpenCL.CLProgram
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: OpenTK.Compute.OpenCL.CL.CreateProgramWithBinary*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.CreateProgramWithBinary
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_CreateProgramWithBinary_OpenTK_Compute_OpenCL_CLContext_System_UInt32_System_IntPtr___System_UIntPtr___System_IntPtr___OpenTK_Compute_OpenCL_CLResultCode____OpenTK_Compute_OpenCL_CLResultCode__
  name: CreateProgramWithBinary
  nameWithType: CL.CreateProgramWithBinary
  fullName: OpenTK.Compute.OpenCL.CL.CreateProgramWithBinary
- uid: System.UIntPtr[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uintptr
  name: nuint[]
  nameWithType: nuint[]
  fullName: nuint[]
  nameWithType.vb: UIntPtr()
  fullName.vb: System.UIntPtr()
  name.vb: UIntPtr()
  spec.csharp:
  - uid: System.UIntPtr
    name: nuint
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uintptr
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.UIntPtr
    name: UIntPtr
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uintptr
  - name: (
  - name: )
- uid: OpenTK.Compute.OpenCL.CLResultCode[]
  isExternal: true
  href: OpenTK.Compute.OpenCL.CLResultCode.html
  name: CLResultCode[]
  nameWithType: CLResultCode[]
  fullName: OpenTK.Compute.OpenCL.CLResultCode[]
  nameWithType.vb: CLResultCode()
  fullName.vb: OpenTK.Compute.OpenCL.CLResultCode()
  name.vb: CLResultCode()
  spec.csharp:
  - uid: OpenTK.Compute.OpenCL.CLResultCode
    name: CLResultCode
    href: OpenTK.Compute.OpenCL.CLResultCode.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: OpenTK.Compute.OpenCL.CLResultCode
    name: CLResultCode
    href: OpenTK.Compute.OpenCL.CLResultCode.html
  - name: (
  - name: )
- uid: OpenTK.Compute.OpenCL.CL.CreateProgramWithBuiltInKernels*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.CreateProgramWithBuiltInKernels
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_CreateProgramWithBuiltInKernels_OpenTK_Compute_OpenCL_CLContext_System_UInt32_System_IntPtr___System_String_OpenTK_Compute_OpenCL_CLResultCode__
  name: CreateProgramWithBuiltInKernels
  nameWithType: CL.CreateProgramWithBuiltInKernels
  fullName: OpenTK.Compute.OpenCL.CL.CreateProgramWithBuiltInKernels
- uid: OpenTK.Compute.OpenCL.CL.CreateProgramWithIL*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.CreateProgramWithIL
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_CreateProgramWithIL_OpenTK_Compute_OpenCL_CLContext_System_IntPtr_System_UIntPtr_OpenTK_Compute_OpenCL_CLResultCode__
  name: CreateProgramWithIL
  nameWithType: CL.CreateProgramWithIL
  fullName: OpenTK.Compute.OpenCL.CL.CreateProgramWithIL
- uid: OpenTK.Compute.OpenCL.CL.RetainProgram*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.RetainProgram
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_RetainProgram_OpenTK_Compute_OpenCL_CLProgram_
  name: RetainProgram
  nameWithType: CL.RetainProgram
  fullName: OpenTK.Compute.OpenCL.CL.RetainProgram
- uid: OpenTK.Compute.OpenCL.CL.ReleaseProgram*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.ReleaseProgram
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_ReleaseProgram_OpenTK_Compute_OpenCL_CLProgram_
  name: ReleaseProgram
  nameWithType: CL.ReleaseProgram
  fullName: OpenTK.Compute.OpenCL.CL.ReleaseProgram
- uid: OpenTK.Compute.OpenCL.CL.BuildProgram*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.BuildProgram
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_BuildProgram_OpenTK_Compute_OpenCL_CLProgram_System_UInt32_OpenTK_Compute_OpenCL_CLDevice___System_String_System_IntPtr_System_IntPtr_
  name: BuildProgram
  nameWithType: CL.BuildProgram
  fullName: OpenTK.Compute.OpenCL.CL.BuildProgram
- uid: OpenTK.Compute.OpenCL.CL.ClEventCallback
  commentId: T:OpenTK.Compute.OpenCL.CL.ClEventCallback
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.CL.html
  name: CL.ClEventCallback
  nameWithType: CL.ClEventCallback
  fullName: OpenTK.Compute.OpenCL.CL.ClEventCallback
  spec.csharp:
  - uid: OpenTK.Compute.OpenCL.CL
    name: CL
    href: OpenTK.Compute.OpenCL.CL.html
  - name: .
  - uid: OpenTK.Compute.OpenCL.CL.ClEventCallback
    name: ClEventCallback
    href: OpenTK.Compute.OpenCL.CL.ClEventCallback.html
  spec.vb:
  - uid: OpenTK.Compute.OpenCL.CL
    name: CL
    href: OpenTK.Compute.OpenCL.CL.html
  - name: .
  - uid: OpenTK.Compute.OpenCL.CL.ClEventCallback
    name: ClEventCallback
    href: OpenTK.Compute.OpenCL.CL.ClEventCallback.html
- uid: OpenTK.Compute.OpenCL.CL.CompileProgram*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.CompileProgram
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_CompileProgram_OpenTK_Compute_OpenCL_CLProgram_System_UInt32_OpenTK_Compute_OpenCL_CLDevice___System_String_System_UInt32_System_IntPtr___System_IntPtr__System_IntPtr_System_IntPtr_
  name: CompileProgram
  nameWithType: CL.CompileProgram
  fullName: OpenTK.Compute.OpenCL.CL.CompileProgram
- uid: OpenTK.Compute.OpenCL.CL.LinkProgram*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.LinkProgram
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_LinkProgram_OpenTK_Compute_OpenCL_CLContext_System_UInt32_OpenTK_Compute_OpenCL_CLDevice___System_String_System_UInt32_OpenTK_Compute_OpenCL_CLProgram___System_IntPtr_System_IntPtr_OpenTK_Compute_OpenCL_CLResultCode__
  name: LinkProgram
  nameWithType: CL.LinkProgram
  fullName: OpenTK.Compute.OpenCL.CL.LinkProgram
- uid: OpenTK.Compute.OpenCL.CLProgram[]
  isExternal: true
  href: OpenTK.Compute.OpenCL.CLProgram.html
  name: CLProgram[]
  nameWithType: CLProgram[]
  fullName: OpenTK.Compute.OpenCL.CLProgram[]
  nameWithType.vb: CLProgram()
  fullName.vb: OpenTK.Compute.OpenCL.CLProgram()
  name.vb: CLProgram()
  spec.csharp:
  - uid: OpenTK.Compute.OpenCL.CLProgram
    name: CLProgram
    href: OpenTK.Compute.OpenCL.CLProgram.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: OpenTK.Compute.OpenCL.CLProgram
    name: CLProgram
    href: OpenTK.Compute.OpenCL.CLProgram.html
  - name: (
  - name: )
- uid: OpenTK.Compute.OpenCL.CL.SetProgramReleaseCallback*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.SetProgramReleaseCallback
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_SetProgramReleaseCallback_OpenTK_Compute_OpenCL_CLProgram_System_IntPtr_System_IntPtr_
  name: SetProgramReleaseCallback
  nameWithType: CL.SetProgramReleaseCallback
  fullName: OpenTK.Compute.OpenCL.CL.SetProgramReleaseCallback
- uid: OpenTK.Compute.OpenCL.CL.SetProgramSpecializationConstant*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.SetProgramSpecializationConstant
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_SetProgramSpecializationConstant_OpenTK_Compute_OpenCL_CLProgram_System_UInt32_System_UIntPtr_System_IntPtr_
  name: SetProgramSpecializationConstant
  nameWithType: CL.SetProgramSpecializationConstant
  fullName: OpenTK.Compute.OpenCL.CL.SetProgramSpecializationConstant
- uid: OpenTK.Compute.OpenCL.CL.UnloadPlatformCompiler*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.UnloadPlatformCompiler
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_UnloadPlatformCompiler_OpenTK_Compute_OpenCL_CLPlatform_
  name: UnloadPlatformCompiler
  nameWithType: CL.UnloadPlatformCompiler
  fullName: OpenTK.Compute.OpenCL.CL.UnloadPlatformCompiler
- uid: OpenTK.Compute.OpenCL.CL.GetProgramInfo*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.GetProgramInfo
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_GetProgramInfo_OpenTK_Compute_OpenCL_CLProgram_OpenTK_Compute_OpenCL_ProgramInfo_System_UIntPtr_System_Byte___System_UIntPtr__
  name: GetProgramInfo
  nameWithType: CL.GetProgramInfo
  fullName: OpenTK.Compute.OpenCL.CL.GetProgramInfo
- uid: OpenTK.Compute.OpenCL.ProgramInfo
  commentId: T:OpenTK.Compute.OpenCL.ProgramInfo
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.ProgramInfo.html
  name: ProgramInfo
  nameWithType: ProgramInfo
  fullName: OpenTK.Compute.OpenCL.ProgramInfo
- uid: OpenTK.Compute.OpenCL.CL.GetProgramBuildInfo*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.GetProgramBuildInfo
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_GetProgramBuildInfo_OpenTK_Compute_OpenCL_CLProgram_OpenTK_Compute_OpenCL_CLDevice_OpenTK_Compute_OpenCL_ProgramBuildInfo_System_UIntPtr_System_Byte___System_UIntPtr__
  name: GetProgramBuildInfo
  nameWithType: CL.GetProgramBuildInfo
  fullName: OpenTK.Compute.OpenCL.CL.GetProgramBuildInfo
- uid: OpenTK.Compute.OpenCL.ProgramBuildInfo
  commentId: T:OpenTK.Compute.OpenCL.ProgramBuildInfo
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.ProgramBuildInfo.html
  name: ProgramBuildInfo
  nameWithType: ProgramBuildInfo
  fullName: OpenTK.Compute.OpenCL.ProgramBuildInfo
- uid: OpenTK.Compute.OpenCL.CL.CreateKernel*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.CreateKernel
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_CreateKernel_OpenTK_Compute_OpenCL_CLProgram_System_String_OpenTK_Compute_OpenCL_CLResultCode__
  name: CreateKernel
  nameWithType: CL.CreateKernel
  fullName: OpenTK.Compute.OpenCL.CL.CreateKernel
- uid: OpenTK.Compute.OpenCL.CLKernel
  commentId: T:OpenTK.Compute.OpenCL.CLKernel
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.CLKernel.html
  name: CLKernel
  nameWithType: CLKernel
  fullName: OpenTK.Compute.OpenCL.CLKernel
- uid: OpenTK.Compute.OpenCL.CL.CreateKernelsInProgram*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.CreateKernelsInProgram
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_CreateKernelsInProgram_OpenTK_Compute_OpenCL_CLProgram_System_UInt32_OpenTK_Compute_OpenCL_CLKernel___System_UInt32__
  name: CreateKernelsInProgram
  nameWithType: CL.CreateKernelsInProgram
  fullName: OpenTK.Compute.OpenCL.CL.CreateKernelsInProgram
- uid: OpenTK.Compute.OpenCL.CLKernel[]
  isExternal: true
  href: OpenTK.Compute.OpenCL.CLKernel.html
  name: CLKernel[]
  nameWithType: CLKernel[]
  fullName: OpenTK.Compute.OpenCL.CLKernel[]
  nameWithType.vb: CLKernel()
  fullName.vb: OpenTK.Compute.OpenCL.CLKernel()
  name.vb: CLKernel()
  spec.csharp:
  - uid: OpenTK.Compute.OpenCL.CLKernel
    name: CLKernel
    href: OpenTK.Compute.OpenCL.CLKernel.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: OpenTK.Compute.OpenCL.CLKernel
    name: CLKernel
    href: OpenTK.Compute.OpenCL.CLKernel.html
  - name: (
  - name: )
- uid: OpenTK.Compute.OpenCL.CL.CloneKernel*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.CloneKernel
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_CloneKernel_OpenTK_Compute_OpenCL_CLKernel_OpenTK_Compute_OpenCL_CLResultCode__
  name: CloneKernel
  nameWithType: CL.CloneKernel
  fullName: OpenTK.Compute.OpenCL.CL.CloneKernel
- uid: OpenTK.Compute.OpenCL.CL.RetainKernel*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.RetainKernel
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_RetainKernel_OpenTK_Compute_OpenCL_CLKernel_
  name: RetainKernel
  nameWithType: CL.RetainKernel
  fullName: OpenTK.Compute.OpenCL.CL.RetainKernel
- uid: OpenTK.Compute.OpenCL.CL.ReleaseKernel*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.ReleaseKernel
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_ReleaseKernel_OpenTK_Compute_OpenCL_CLKernel_
  name: ReleaseKernel
  nameWithType: CL.ReleaseKernel
  fullName: OpenTK.Compute.OpenCL.CL.ReleaseKernel
- uid: OpenTK.Compute.OpenCL.CL.SetKernelArg*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.SetKernelArg
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_SetKernelArg_OpenTK_Compute_OpenCL_CLKernel_System_UInt32_System_UIntPtr_System_IntPtr_
  name: SetKernelArg
  nameWithType: CL.SetKernelArg
  fullName: OpenTK.Compute.OpenCL.CL.SetKernelArg
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: OpenTK.Compute.OpenCL.CL.SetKernelArgSVMPointer*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.SetKernelArgSVMPointer
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_SetKernelArgSVMPointer_OpenTK_Compute_OpenCL_CLKernel_System_UInt32_System_IntPtr_
  name: SetKernelArgSVMPointer
  nameWithType: CL.SetKernelArgSVMPointer
  fullName: OpenTK.Compute.OpenCL.CL.SetKernelArgSVMPointer
- uid: OpenTK.Compute.OpenCL.CL.SetKernelExecInfo*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.SetKernelExecInfo
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_SetKernelExecInfo_OpenTK_Compute_OpenCL_CLKernel_OpenTK_Compute_OpenCL_KernelExecInfo_System_UIntPtr_System_IntPtr_
  name: SetKernelExecInfo
  nameWithType: CL.SetKernelExecInfo
  fullName: OpenTK.Compute.OpenCL.CL.SetKernelExecInfo
- uid: OpenTK.Compute.OpenCL.KernelExecInfo
  commentId: T:OpenTK.Compute.OpenCL.KernelExecInfo
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.KernelExecInfo.html
  name: KernelExecInfo
  nameWithType: KernelExecInfo
  fullName: OpenTK.Compute.OpenCL.KernelExecInfo
- uid: OpenTK.Compute.OpenCL.CL.GetKernelInfo*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.GetKernelInfo
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_GetKernelInfo_OpenTK_Compute_OpenCL_CLKernel_OpenTK_Compute_OpenCL_KernelInfo_System_UIntPtr_System_Byte___System_UIntPtr__
  name: GetKernelInfo
  nameWithType: CL.GetKernelInfo
  fullName: OpenTK.Compute.OpenCL.CL.GetKernelInfo
- uid: OpenTK.Compute.OpenCL.KernelInfo
  commentId: T:OpenTK.Compute.OpenCL.KernelInfo
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.KernelInfo.html
  name: KernelInfo
  nameWithType: KernelInfo
  fullName: OpenTK.Compute.OpenCL.KernelInfo
- uid: OpenTK.Compute.OpenCL.CL.GetKernelArgInfo*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.GetKernelArgInfo
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_GetKernelArgInfo_OpenTK_Compute_OpenCL_CLKernel_System_UInt32_OpenTK_Compute_OpenCL_KernelArgInfo_System_UIntPtr_System_Byte___System_UIntPtr__
  name: GetKernelArgInfo
  nameWithType: CL.GetKernelArgInfo
  fullName: OpenTK.Compute.OpenCL.CL.GetKernelArgInfo
- uid: OpenTK.Compute.OpenCL.KernelArgInfo
  commentId: T:OpenTK.Compute.OpenCL.KernelArgInfo
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.KernelArgInfo.html
  name: KernelArgInfo
  nameWithType: KernelArgInfo
  fullName: OpenTK.Compute.OpenCL.KernelArgInfo
- uid: OpenTK.Compute.OpenCL.CL.GetKernelWorkGroupInfo*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.GetKernelWorkGroupInfo
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_GetKernelWorkGroupInfo_OpenTK_Compute_OpenCL_CLKernel_OpenTK_Compute_OpenCL_CLDevice_OpenTK_Compute_OpenCL_KernelWorkGroupInfo_System_UIntPtr_System_Byte___System_UIntPtr__
  name: GetKernelWorkGroupInfo
  nameWithType: CL.GetKernelWorkGroupInfo
  fullName: OpenTK.Compute.OpenCL.CL.GetKernelWorkGroupInfo
- uid: OpenTK.Compute.OpenCL.KernelWorkGroupInfo
  commentId: T:OpenTK.Compute.OpenCL.KernelWorkGroupInfo
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.KernelWorkGroupInfo.html
  name: KernelWorkGroupInfo
  nameWithType: KernelWorkGroupInfo
  fullName: OpenTK.Compute.OpenCL.KernelWorkGroupInfo
- uid: OpenTK.Compute.OpenCL.CL.GetKernelSubGroupInfo*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.GetKernelSubGroupInfo
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_GetKernelSubGroupInfo_OpenTK_Compute_OpenCL_CLKernel_OpenTK_Compute_OpenCL_CLDevice_OpenTK_Compute_OpenCL_KernelSubGroupInfo_System_UIntPtr_System_IntPtr_System_UIntPtr_System_Byte___System_UIntPtr__
  name: GetKernelSubGroupInfo
  nameWithType: CL.GetKernelSubGroupInfo
  fullName: OpenTK.Compute.OpenCL.CL.GetKernelSubGroupInfo
- uid: OpenTK.Compute.OpenCL.KernelSubGroupInfo
  commentId: T:OpenTK.Compute.OpenCL.KernelSubGroupInfo
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.KernelSubGroupInfo.html
  name: KernelSubGroupInfo
  nameWithType: KernelSubGroupInfo
  fullName: OpenTK.Compute.OpenCL.KernelSubGroupInfo
- uid: OpenTK.Compute.OpenCL.CL.WaitForEvents*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.WaitForEvents
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_WaitForEvents_System_UInt32_OpenTK_Compute_OpenCL_CLEvent___
  name: WaitForEvents
  nameWithType: CL.WaitForEvents
  fullName: OpenTK.Compute.OpenCL.CL.WaitForEvents
- uid: OpenTK.Compute.OpenCL.CLEvent[]
  isExternal: true
  href: OpenTK.Compute.OpenCL.CLEvent.html
  name: CLEvent[]
  nameWithType: CLEvent[]
  fullName: OpenTK.Compute.OpenCL.CLEvent[]
  nameWithType.vb: CLEvent()
  fullName.vb: OpenTK.Compute.OpenCL.CLEvent()
  name.vb: CLEvent()
  spec.csharp:
  - uid: OpenTK.Compute.OpenCL.CLEvent
    name: CLEvent
    href: OpenTK.Compute.OpenCL.CLEvent.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: OpenTK.Compute.OpenCL.CLEvent
    name: CLEvent
    href: OpenTK.Compute.OpenCL.CLEvent.html
  - name: (
  - name: )
- uid: OpenTK.Compute.OpenCL.CL.GetEventInfo*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.GetEventInfo
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_GetEventInfo_OpenTK_Compute_OpenCL_CLEvent_OpenTK_Compute_OpenCL_EventInfo_System_UIntPtr_System_Byte___System_UIntPtr__
  name: GetEventInfo
  nameWithType: CL.GetEventInfo
  fullName: OpenTK.Compute.OpenCL.CL.GetEventInfo
- uid: OpenTK.Compute.OpenCL.CLEvent
  commentId: T:OpenTK.Compute.OpenCL.CLEvent
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.CLEvent.html
  name: CLEvent
  nameWithType: CLEvent
  fullName: OpenTK.Compute.OpenCL.CLEvent
- uid: OpenTK.Compute.OpenCL.EventInfo
  commentId: T:OpenTK.Compute.OpenCL.EventInfo
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.EventInfo.html
  name: EventInfo
  nameWithType: EventInfo
  fullName: OpenTK.Compute.OpenCL.EventInfo
- uid: OpenTK.Compute.OpenCL.CL.CreateUserEvent*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.CreateUserEvent
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_CreateUserEvent_OpenTK_Compute_OpenCL_CLContext_OpenTK_Compute_OpenCL_CLResultCode__
  name: CreateUserEvent
  nameWithType: CL.CreateUserEvent
  fullName: OpenTK.Compute.OpenCL.CL.CreateUserEvent
- uid: OpenTK.Compute.OpenCL.CL.RetainEvent*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.RetainEvent
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_RetainEvent_OpenTK_Compute_OpenCL_CLEvent_
  name: RetainEvent
  nameWithType: CL.RetainEvent
  fullName: OpenTK.Compute.OpenCL.CL.RetainEvent
- uid: OpenTK.Compute.OpenCL.CL.ReleaseEvent*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.ReleaseEvent
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_ReleaseEvent_OpenTK_Compute_OpenCL_CLEvent_
  name: ReleaseEvent
  nameWithType: CL.ReleaseEvent
  fullName: OpenTK.Compute.OpenCL.CL.ReleaseEvent
- uid: OpenTK.Compute.OpenCL.CL.SetUserEventStatus*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.SetUserEventStatus
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_SetUserEventStatus_OpenTK_Compute_OpenCL_CLEvent_System_Int32_
  name: SetUserEventStatus
  nameWithType: CL.SetUserEventStatus
  fullName: OpenTK.Compute.OpenCL.CL.SetUserEventStatus
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: OpenTK.Compute.OpenCL.CL.SetEventCallback*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.SetEventCallback
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_SetEventCallback_OpenTK_Compute_OpenCL_CLEvent_System_Int32_System_IntPtr_System_IntPtr_
  name: SetEventCallback
  nameWithType: CL.SetEventCallback
  fullName: OpenTK.Compute.OpenCL.CL.SetEventCallback
- uid: OpenTK.Compute.OpenCL.CL.GetEventProfilingInfo*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.GetEventProfilingInfo
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_GetEventProfilingInfo_OpenTK_Compute_OpenCL_CLEvent_OpenTK_Compute_OpenCL_ProfilingInfo_System_UIntPtr_System_Byte___System_UIntPtr__
  name: GetEventProfilingInfo
  nameWithType: CL.GetEventProfilingInfo
  fullName: OpenTK.Compute.OpenCL.CL.GetEventProfilingInfo
- uid: OpenTK.Compute.OpenCL.ProfilingInfo
  commentId: T:OpenTK.Compute.OpenCL.ProfilingInfo
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.ProfilingInfo.html
  name: ProfilingInfo
  nameWithType: ProfilingInfo
  fullName: OpenTK.Compute.OpenCL.ProfilingInfo
- uid: OpenTK.Compute.OpenCL.CL.Flush*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.Flush
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_Flush_OpenTK_Compute_OpenCL_CLCommandQueue_
  name: Flush
  nameWithType: CL.Flush
  fullName: OpenTK.Compute.OpenCL.CL.Flush
- uid: OpenTK.Compute.OpenCL.CL.Finish*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.Finish
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_Finish_OpenTK_Compute_OpenCL_CLCommandQueue_
  name: Finish
  nameWithType: CL.Finish
  fullName: OpenTK.Compute.OpenCL.CL.Finish
- uid: OpenTK.Compute.OpenCL.CL.EnqueueReadBuffer*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.EnqueueReadBuffer
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_EnqueueReadBuffer_OpenTK_Compute_OpenCL_CLCommandQueue_OpenTK_Compute_OpenCL_CLBuffer_System_Boolean_System_UIntPtr_System_UIntPtr_System_IntPtr_System_UInt32_OpenTK_Compute_OpenCL_CLEvent___OpenTK_Compute_OpenCL_CLEvent__
  name: EnqueueReadBuffer
  nameWithType: CL.EnqueueReadBuffer
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueReadBuffer
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: OpenTK.Compute.OpenCL.CL.EnqueueReadBufferRect*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.EnqueueReadBufferRect
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_EnqueueReadBufferRect_OpenTK_Compute_OpenCL_CLCommandQueue_OpenTK_Compute_OpenCL_CLBuffer_System_Boolean_System_UIntPtr___System_UIntPtr___System_UIntPtr___System_UIntPtr_System_UIntPtr_System_UIntPtr_System_UIntPtr_System_IntPtr_System_UInt32_OpenTK_Compute_OpenCL_CLEvent___OpenTK_Compute_OpenCL_CLEvent__
  name: EnqueueReadBufferRect
  nameWithType: CL.EnqueueReadBufferRect
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueReadBufferRect
- uid: OpenTK.Compute.OpenCL.CL.EnqueueWriteBuffer*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.EnqueueWriteBuffer
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_EnqueueWriteBuffer_OpenTK_Compute_OpenCL_CLCommandQueue_OpenTK_Compute_OpenCL_CLBuffer_System_Boolean_System_UIntPtr_System_UIntPtr_System_IntPtr_System_UInt32_OpenTK_Compute_OpenCL_CLEvent___OpenTK_Compute_OpenCL_CLEvent__
  name: EnqueueWriteBuffer
  nameWithType: CL.EnqueueWriteBuffer
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueWriteBuffer
- uid: OpenTK.Compute.OpenCL.CL.EnqueueWriteBufferRect*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.EnqueueWriteBufferRect
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_EnqueueWriteBufferRect_OpenTK_Compute_OpenCL_CLCommandQueue_OpenTK_Compute_OpenCL_CLBuffer_System_Boolean_System_UIntPtr___System_UIntPtr___System_UIntPtr___System_UIntPtr_System_UIntPtr_System_UIntPtr_System_UIntPtr_System_IntPtr_System_UInt32_OpenTK_Compute_OpenCL_CLEvent___OpenTK_Compute_OpenCL_CLEvent__
  name: EnqueueWriteBufferRect
  nameWithType: CL.EnqueueWriteBufferRect
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueWriteBufferRect
- uid: OpenTK.Compute.OpenCL.CL.EnqueueFillBuffer*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.EnqueueFillBuffer
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_EnqueueFillBuffer_OpenTK_Compute_OpenCL_CLCommandQueue_OpenTK_Compute_OpenCL_CLBuffer_System_IntPtr_System_UIntPtr_System_UIntPtr_System_UIntPtr_System_UInt32_OpenTK_Compute_OpenCL_CLEvent___OpenTK_Compute_OpenCL_CLEvent__
  name: EnqueueFillBuffer
  nameWithType: CL.EnqueueFillBuffer
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueFillBuffer
- uid: OpenTK.Compute.OpenCL.CL.EnqueueCopyBuffer*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.EnqueueCopyBuffer
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_EnqueueCopyBuffer_OpenTK_Compute_OpenCL_CLCommandQueue_OpenTK_Compute_OpenCL_CLBuffer_OpenTK_Compute_OpenCL_CLBuffer_System_UIntPtr_System_UIntPtr_System_UIntPtr_System_UInt32_OpenTK_Compute_OpenCL_CLEvent___OpenTK_Compute_OpenCL_CLEvent__
  name: EnqueueCopyBuffer
  nameWithType: CL.EnqueueCopyBuffer
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueCopyBuffer
- uid: OpenTK.Compute.OpenCL.CL.EnqueueCopyBufferRect*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.EnqueueCopyBufferRect
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_EnqueueCopyBufferRect_OpenTK_Compute_OpenCL_CLCommandQueue_OpenTK_Compute_OpenCL_CLBuffer_OpenTK_Compute_OpenCL_CLBuffer_System_UIntPtr___System_UIntPtr___System_UIntPtr___System_UIntPtr_System_UIntPtr_System_UIntPtr_System_UIntPtr_System_UInt32_OpenTK_Compute_OpenCL_CLEvent___OpenTK_Compute_OpenCL_CLEvent__
  name: EnqueueCopyBufferRect
  nameWithType: CL.EnqueueCopyBufferRect
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueCopyBufferRect
- uid: OpenTK.Compute.OpenCL.CL.EnqueueReadImage*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.EnqueueReadImage
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_EnqueueReadImage_OpenTK_Compute_OpenCL_CLCommandQueue_OpenTK_Compute_OpenCL_CLImage_System_Boolean_System_UIntPtr___System_UIntPtr___System_UIntPtr_System_UIntPtr_System_IntPtr_System_UInt32_OpenTK_Compute_OpenCL_CLEvent___OpenTK_Compute_OpenCL_CLEvent__
  name: EnqueueReadImage
  nameWithType: CL.EnqueueReadImage
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueReadImage
- uid: OpenTK.Compute.OpenCL.CL.EnqueueWriteImage*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.EnqueueWriteImage
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_EnqueueWriteImage_OpenTK_Compute_OpenCL_CLCommandQueue_OpenTK_Compute_OpenCL_CLImage_System_Boolean_System_UIntPtr___System_UIntPtr___System_UIntPtr_System_UIntPtr_System_IntPtr_System_UInt32_OpenTK_Compute_OpenCL_CLEvent___OpenTK_Compute_OpenCL_CLEvent__
  name: EnqueueWriteImage
  nameWithType: CL.EnqueueWriteImage
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueWriteImage
- uid: OpenTK.Compute.OpenCL.CL.EnqueueFillImage*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.EnqueueFillImage
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_EnqueueFillImage_OpenTK_Compute_OpenCL_CLCommandQueue_OpenTK_Compute_OpenCL_CLImage_System_IntPtr_System_UIntPtr___System_UIntPtr___System_UInt32_OpenTK_Compute_OpenCL_CLEvent___OpenTK_Compute_OpenCL_CLEvent__
  name: EnqueueFillImage
  nameWithType: CL.EnqueueFillImage
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueFillImage
- uid: OpenTK.Compute.OpenCL.CL.EnqueueCopyImage*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.EnqueueCopyImage
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_EnqueueCopyImage_OpenTK_Compute_OpenCL_CLCommandQueue_OpenTK_Compute_OpenCL_CLImage_OpenTK_Compute_OpenCL_CLImage_System_UIntPtr___System_UIntPtr___System_UIntPtr___System_UInt32_OpenTK_Compute_OpenCL_CLEvent___OpenTK_Compute_OpenCL_CLEvent__
  name: EnqueueCopyImage
  nameWithType: CL.EnqueueCopyImage
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueCopyImage
- uid: OpenTK.Compute.OpenCL.CL.EnqueueCopyImageToBuffer*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.EnqueueCopyImageToBuffer
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_EnqueueCopyImageToBuffer_OpenTK_Compute_OpenCL_CLCommandQueue_OpenTK_Compute_OpenCL_CLImage_OpenTK_Compute_OpenCL_CLBuffer_System_UIntPtr___System_UIntPtr___System_UIntPtr_System_UInt32_OpenTK_Compute_OpenCL_CLEvent___OpenTK_Compute_OpenCL_CLEvent__
  name: EnqueueCopyImageToBuffer
  nameWithType: CL.EnqueueCopyImageToBuffer
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueCopyImageToBuffer
- uid: OpenTK.Compute.OpenCL.CL.EnqueueCopyBufferToImage*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.EnqueueCopyBufferToImage
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_EnqueueCopyBufferToImage_OpenTK_Compute_OpenCL_CLCommandQueue_OpenTK_Compute_OpenCL_CLBuffer_OpenTK_Compute_OpenCL_CLImage_System_UIntPtr_System_UIntPtr___System_UIntPtr___System_UInt32_OpenTK_Compute_OpenCL_CLEvent___OpenTK_Compute_OpenCL_CLEvent__
  name: EnqueueCopyBufferToImage
  nameWithType: CL.EnqueueCopyBufferToImage
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueCopyBufferToImage
- uid: OpenTK.Compute.OpenCL.CL.EnqueueMapBuffer*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.EnqueueMapBuffer
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_EnqueueMapBuffer_OpenTK_Compute_OpenCL_CLCommandQueue_OpenTK_Compute_OpenCL_CLBuffer_System_Boolean_OpenTK_Compute_OpenCL_MapFlags_System_UIntPtr_System_UIntPtr_System_UInt32_OpenTK_Compute_OpenCL_CLEvent___OpenTK_Compute_OpenCL_CLEvent__OpenTK_Compute_OpenCL_CLResultCode__
  name: EnqueueMapBuffer
  nameWithType: CL.EnqueueMapBuffer
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueMapBuffer
- uid: OpenTK.Compute.OpenCL.MapFlags
  commentId: T:OpenTK.Compute.OpenCL.MapFlags
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.MapFlags.html
  name: MapFlags
  nameWithType: MapFlags
  fullName: OpenTK.Compute.OpenCL.MapFlags
- uid: OpenTK.Compute.OpenCL.CL.EnqueueMapImage*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.EnqueueMapImage
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_EnqueueMapImage_OpenTK_Compute_OpenCL_CLCommandQueue_OpenTK_Compute_OpenCL_CLImage_System_Boolean_OpenTK_Compute_OpenCL_MapFlags_System_UIntPtr___System_UIntPtr___System_UIntPtr_System_UIntPtr_System_UInt32_OpenTK_Compute_OpenCL_CLEvent___OpenTK_Compute_OpenCL_CLEvent__OpenTK_Compute_OpenCL_CLResultCode__
  name: EnqueueMapImage
  nameWithType: CL.EnqueueMapImage
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueMapImage
- uid: OpenTK.Compute.OpenCL.CL.EnqueueUnmapMemoryObject*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.EnqueueUnmapMemoryObject
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_EnqueueUnmapMemoryObject_OpenTK_Compute_OpenCL_CLCommandQueue_System_IntPtr_System_IntPtr_System_UInt32_OpenTK_Compute_OpenCL_CLEvent___OpenTK_Compute_OpenCL_CLEvent__
  name: EnqueueUnmapMemoryObject
  nameWithType: CL.EnqueueUnmapMemoryObject
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueUnmapMemoryObject
- uid: OpenTK.Compute.OpenCL.CL.EnqueueMigrateMemoryObjects*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.EnqueueMigrateMemoryObjects
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_EnqueueMigrateMemoryObjects_OpenTK_Compute_OpenCL_CLCommandQueue_System_UInt32_System_IntPtr___OpenTK_Compute_OpenCL_MemoryMigrationFlags_System_UInt32_OpenTK_Compute_OpenCL_CLEvent___OpenTK_Compute_OpenCL_CLEvent__
  name: EnqueueMigrateMemoryObjects
  nameWithType: CL.EnqueueMigrateMemoryObjects
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueMigrateMemoryObjects
- uid: OpenTK.Compute.OpenCL.MemoryMigrationFlags
  commentId: T:OpenTK.Compute.OpenCL.MemoryMigrationFlags
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.MemoryMigrationFlags.html
  name: MemoryMigrationFlags
  nameWithType: MemoryMigrationFlags
  fullName: OpenTK.Compute.OpenCL.MemoryMigrationFlags
- uid: OpenTK.Compute.OpenCL.CL.EnqueueNDRangeKernel*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.EnqueueNDRangeKernel
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_EnqueueNDRangeKernel_OpenTK_Compute_OpenCL_CLCommandQueue_OpenTK_Compute_OpenCL_CLKernel_System_UInt32_System_UIntPtr___System_UIntPtr___System_UIntPtr___System_UInt32_OpenTK_Compute_OpenCL_CLEvent___OpenTK_Compute_OpenCL_CLEvent__
  name: EnqueueNDRangeKernel
  nameWithType: CL.EnqueueNDRangeKernel
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueNDRangeKernel
- uid: OpenTK.Compute.OpenCL.CL.EnqueueNativeKernel*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.EnqueueNativeKernel
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_EnqueueNativeKernel_OpenTK_Compute_OpenCL_CLCommandQueue_System_IntPtr_System_IntPtr___System_UIntPtr_System_UInt32_System_IntPtr___System_IntPtr_System_UInt32_OpenTK_Compute_OpenCL_CLEvent___OpenTK_Compute_OpenCL_CLEvent__
  name: EnqueueNativeKernel
  nameWithType: CL.EnqueueNativeKernel
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueNativeKernel
- uid: OpenTK.Compute.OpenCL.CL.EnqueueMarkerWithWaitList*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.EnqueueMarkerWithWaitList
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_EnqueueMarkerWithWaitList_OpenTK_Compute_OpenCL_CLCommandQueue_System_UInt32_System_IntPtr___System_IntPtr_System_UInt32_OpenTK_Compute_OpenCL_CLEvent___OpenTK_Compute_OpenCL_CLEvent__
  name: EnqueueMarkerWithWaitList
  nameWithType: CL.EnqueueMarkerWithWaitList
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueMarkerWithWaitList
- uid: OpenTK.Compute.OpenCL.CL.EnqueueBarrierWithWaitList*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.EnqueueBarrierWithWaitList
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_EnqueueBarrierWithWaitList_OpenTK_Compute_OpenCL_CLCommandQueue_System_UInt32_System_IntPtr___System_IntPtr_System_UInt32_OpenTK_Compute_OpenCL_CLEvent___OpenTK_Compute_OpenCL_CLEvent__
  name: EnqueueBarrierWithWaitList
  nameWithType: CL.EnqueueBarrierWithWaitList
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueBarrierWithWaitList
- uid: OpenTK.Compute.OpenCL.CL.EnqueueSVMFree*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.EnqueueSVMFree
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_EnqueueSVMFree_OpenTK_Compute_OpenCL_CLCommandQueue_System_UInt32_System_IntPtr___System_IntPtr_System_IntPtr_System_UInt32_OpenTK_Compute_OpenCL_CLEvent___OpenTK_Compute_OpenCL_CLEvent__
  name: EnqueueSVMFree
  nameWithType: CL.EnqueueSVMFree
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueSVMFree
- uid: OpenTK.Compute.OpenCL.CL.EnqueueSvmMemoryCopy*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.EnqueueSvmMemoryCopy
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_EnqueueSvmMemoryCopy_OpenTK_Compute_OpenCL_CLCommandQueue_System_Boolean_System_IntPtr_System_IntPtr_System_UIntPtr_System_UInt32_OpenTK_Compute_OpenCL_CLEvent___OpenTK_Compute_OpenCL_CLEvent__
  name: EnqueueSvmMemoryCopy
  nameWithType: CL.EnqueueSvmMemoryCopy
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueSvmMemoryCopy
- uid: OpenTK.Compute.OpenCL.CL.EnqueueSvmMemoryFill*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.EnqueueSvmMemoryFill
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_EnqueueSvmMemoryFill_OpenTK_Compute_OpenCL_CLCommandQueue_System_IntPtr_System_IntPtr_System_UIntPtr_System_UIntPtr_System_UInt32_OpenTK_Compute_OpenCL_CLEvent___OpenTK_Compute_OpenCL_CLEvent__
  name: EnqueueSvmMemoryFill
  nameWithType: CL.EnqueueSvmMemoryFill
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueSvmMemoryFill
- uid: OpenTK.Compute.OpenCL.CL.EnqueueSvmMap*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.EnqueueSvmMap
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_EnqueueSvmMap_OpenTK_Compute_OpenCL_CLCommandQueue_System_Boolean_OpenTK_Compute_OpenCL_MapFlags_System_IntPtr_System_UIntPtr_System_UInt32_OpenTK_Compute_OpenCL_CLEvent___OpenTK_Compute_OpenCL_CLEvent__
  name: EnqueueSvmMap
  nameWithType: CL.EnqueueSvmMap
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueSvmMap
- uid: OpenTK.Compute.OpenCL.CL.EnqueueSVMUnmap*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.EnqueueSVMUnmap
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_EnqueueSVMUnmap_OpenTK_Compute_OpenCL_CLCommandQueue_System_IntPtr_System_UInt32_OpenTK_Compute_OpenCL_CLEvent___OpenTK_Compute_OpenCL_CLEvent__
  name: EnqueueSVMUnmap
  nameWithType: CL.EnqueueSVMUnmap
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueSVMUnmap
- uid: OpenTK.Compute.OpenCL.CL.EnqueueSvmMigrateMemory*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.EnqueueSvmMigrateMemory
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_EnqueueSvmMigrateMemory_OpenTK_Compute_OpenCL_CLCommandQueue_System_UInt32_System_IntPtr___System_UIntPtr___OpenTK_Compute_OpenCL_MemoryMigrationFlags_System_UInt32_OpenTK_Compute_OpenCL_CLEvent___OpenTK_Compute_OpenCL_CLEvent__
  name: EnqueueSvmMigrateMemory
  nameWithType: CL.EnqueueSvmMigrateMemory
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueSvmMigrateMemory
- uid: OpenTK.Compute.OpenCL.CL.GetExtensionFunctionAddressForPlatform*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.GetExtensionFunctionAddressForPlatform
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_GetExtensionFunctionAddressForPlatform_OpenTK_Compute_OpenCL_CLPlatform_System_String_
  name: GetExtensionFunctionAddressForPlatform
  nameWithType: CL.GetExtensionFunctionAddressForPlatform
  fullName: OpenTK.Compute.OpenCL.CL.GetExtensionFunctionAddressForPlatform
- uid: OpenTK.Compute.OpenCL.CL.CreateImage2D*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.CreateImage2D
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_CreateImage2D_OpenTK_Compute_OpenCL_CLContext_OpenTK_Compute_OpenCL_MemoryFlags_OpenTK_Compute_OpenCL_ImageFormat__System_UIntPtr_System_UIntPtr_System_UIntPtr_System_IntPtr_OpenTK_Compute_OpenCL_CLResultCode__
  name: CreateImage2D
  nameWithType: CL.CreateImage2D
  fullName: OpenTK.Compute.OpenCL.CL.CreateImage2D
- uid: OpenTK.Compute.OpenCL.CL.CreateImage3D*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.CreateImage3D
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_CreateImage3D_OpenTK_Compute_OpenCL_CLContext_OpenTK_Compute_OpenCL_MemoryFlags_OpenTK_Compute_OpenCL_ImageFormat__System_UIntPtr_System_UIntPtr_System_UIntPtr_System_UIntPtr_System_UIntPtr_System_IntPtr_OpenTK_Compute_OpenCL_CLResultCode__
  name: CreateImage3D
  nameWithType: CL.CreateImage3D
  fullName: OpenTK.Compute.OpenCL.CL.CreateImage3D
- uid: OpenTK.Compute.OpenCL.CL.EnqueueMarker*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.EnqueueMarker
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_EnqueueMarker_OpenTK_Compute_OpenCL_CLCommandQueue_OpenTK_Compute_OpenCL_CLEvent_
  name: EnqueueMarker
  nameWithType: CL.EnqueueMarker
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueMarker
- uid: OpenTK.Compute.OpenCL.CL.EnqueueWaitForEvents*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.EnqueueWaitForEvents
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_EnqueueWaitForEvents_OpenTK_Compute_OpenCL_CLCommandQueue_System_UInt32_OpenTK_Compute_OpenCL_CLEvent___
  name: EnqueueWaitForEvents
  nameWithType: CL.EnqueueWaitForEvents
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueWaitForEvents
- uid: OpenTK.Compute.OpenCL.CL.EnqueueBarrier*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.EnqueueBarrier
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_EnqueueBarrier_OpenTK_Compute_OpenCL_CLCommandQueue_
  name: EnqueueBarrier
  nameWithType: CL.EnqueueBarrier
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueBarrier
- uid: OpenTK.Compute.OpenCL.CL.UnloadCompiler*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.UnloadCompiler
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_UnloadCompiler
  name: UnloadCompiler
  nameWithType: CL.UnloadCompiler
  fullName: OpenTK.Compute.OpenCL.CL.UnloadCompiler
- uid: OpenTK.Compute.OpenCL.CL.GetExtensionFunctionAddress*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.GetExtensionFunctionAddress
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_GetExtensionFunctionAddress_System_String_
  name: GetExtensionFunctionAddress
  nameWithType: CL.GetExtensionFunctionAddress
  fullName: OpenTK.Compute.OpenCL.CL.GetExtensionFunctionAddress
- uid: OpenTK.Compute.OpenCL.CL.CreateCommandQueue*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.CreateCommandQueue
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_CreateCommandQueue_OpenTK_Compute_OpenCL_CLContext_OpenTK_Compute_OpenCL_CLDevice_OpenTK_Compute_OpenCL_CommandQueueProperty_OpenTK_Compute_OpenCL_CLResultCode__
  name: CreateCommandQueue
  nameWithType: CL.CreateCommandQueue
  fullName: OpenTK.Compute.OpenCL.CL.CreateCommandQueue
- uid: OpenTK.Compute.OpenCL.CommandQueueProperty
  commentId: T:OpenTK.Compute.OpenCL.CommandQueueProperty
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.CommandQueueProperty.html
  name: CommandQueueProperty
  nameWithType: CommandQueueProperty
  fullName: OpenTK.Compute.OpenCL.CommandQueueProperty
- uid: OpenTK.Compute.OpenCL.CL.CreateSampler*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.CreateSampler
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_CreateSampler_OpenTK_Compute_OpenCL_CLContext_System_UInt32_OpenTK_Compute_OpenCL_AddressingMode_OpenTK_Compute_OpenCL_FilterMode_OpenTK_Compute_OpenCL_CLResultCode__
  name: CreateSampler
  nameWithType: CL.CreateSampler
  fullName: OpenTK.Compute.OpenCL.CL.CreateSampler
- uid: OpenTK.Compute.OpenCL.AddressingMode
  commentId: T:OpenTK.Compute.OpenCL.AddressingMode
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.AddressingMode.html
  name: AddressingMode
  nameWithType: AddressingMode
  fullName: OpenTK.Compute.OpenCL.AddressingMode
- uid: OpenTK.Compute.OpenCL.FilterMode
  commentId: T:OpenTK.Compute.OpenCL.FilterMode
  parent: OpenTK.Compute.OpenCL
  href: OpenTK.Compute.OpenCL.FilterMode.html
  name: FilterMode
  nameWithType: FilterMode
  fullName: OpenTK.Compute.OpenCL.FilterMode
- uid: OpenTK.Compute.OpenCL.CL.EnqueueTask*
  commentId: Overload:OpenTK.Compute.OpenCL.CL.EnqueueTask
  isExternal: true
  href: OpenTK.Compute.OpenCL.CL.html#OpenTK_Compute_OpenCL_CL_EnqueueTask_OpenTK_Compute_OpenCL_CLCommandQueue_OpenTK_Compute_OpenCL_CLKernel_System_UInt32_OpenTK_Compute_OpenCL_CLEvent___OpenTK_Compute_OpenCL_CLEvent__
  name: EnqueueTask
  nameWithType: CL.EnqueueTask
  fullName: OpenTK.Compute.OpenCL.CL.EnqueueTask
